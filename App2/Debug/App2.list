
App2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  080101c4  080101c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08012b5c  08012b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b88  08012b88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08012b88  08012b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b90  08012b90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b90  08012b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b94  08012b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08012b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08012ba4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08012ba4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e08d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e53  00000000  00000000  0002e0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00030b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021caf  00000000  00000000  000316a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb4  00000000  00000000  00053357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7ff  00000000  00000000  0006220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003264  00000000  00000000  00131a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101c4 <__do_global_dtors_aux>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4c05      	ldr	r4, [pc, #20]	; (80101dc <__do_global_dtors_aux+0x18>)
 80101c8:	7823      	ldrb	r3, [r4, #0]
 80101ca:	b933      	cbnz	r3, 80101da <__do_global_dtors_aux+0x16>
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x1c>)
 80101ce:	b113      	cbz	r3, 80101d6 <__do_global_dtors_aux+0x12>
 80101d0:	4804      	ldr	r0, [pc, #16]	; (80101e4 <__do_global_dtors_aux+0x20>)
 80101d2:	f3af 8000 	nop.w
 80101d6:	2301      	movs	r3, #1
 80101d8:	7023      	strb	r3, [r4, #0]
 80101da:	bd10      	pop	{r4, pc}
 80101dc:	2000000c 	.word	0x2000000c
 80101e0:	00000000 	.word	0x00000000
 80101e4:	08012b44 	.word	0x08012b44

080101e8 <frame_dummy>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <frame_dummy+0x10>)
 80101ec:	b11b      	cbz	r3, 80101f6 <frame_dummy+0xe>
 80101ee:	4903      	ldr	r1, [pc, #12]	; (80101fc <frame_dummy+0x14>)
 80101f0:	4803      	ldr	r0, [pc, #12]	; (8010200 <frame_dummy+0x18>)
 80101f2:	f3af 8000 	nop.w
 80101f6:	bd08      	pop	{r3, pc}
 80101f8:	00000000 	.word	0x00000000
 80101fc:	20000010 	.word	0x20000010
 8010200:	08012b44 	.word	0x08012b44

08010204 <strlen>:
 8010204:	4603      	mov	r3, r0
 8010206:	f813 2b01 	ldrb.w	r2, [r3], #1
 801020a:	2a00      	cmp	r2, #0
 801020c:	d1fb      	bne.n	8010206 <strlen+0x2>
 801020e:	1a18      	subs	r0, r3, r0
 8010210:	3801      	subs	r0, #1
 8010212:	4770      	bx	lr

08010214 <__aeabi_uldivmod>:
 8010214:	b953      	cbnz	r3, 801022c <__aeabi_uldivmod+0x18>
 8010216:	b94a      	cbnz	r2, 801022c <__aeabi_uldivmod+0x18>
 8010218:	2900      	cmp	r1, #0
 801021a:	bf08      	it	eq
 801021c:	2800      	cmpeq	r0, #0
 801021e:	bf1c      	itt	ne
 8010220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8010224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010228:	f000 b974 	b.w	8010514 <__aeabi_idiv0>
 801022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010234:	f000 f806 	bl	8010244 <__udivmoddi4>
 8010238:	f8dd e004 	ldr.w	lr, [sp, #4]
 801023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010240:	b004      	add	sp, #16
 8010242:	4770      	bx	lr

08010244 <__udivmoddi4>:
 8010244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010248:	9d08      	ldr	r5, [sp, #32]
 801024a:	4604      	mov	r4, r0
 801024c:	468e      	mov	lr, r1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d14d      	bne.n	80102ee <__udivmoddi4+0xaa>
 8010252:	428a      	cmp	r2, r1
 8010254:	4694      	mov	ip, r2
 8010256:	d969      	bls.n	801032c <__udivmoddi4+0xe8>
 8010258:	fab2 f282 	clz	r2, r2
 801025c:	b152      	cbz	r2, 8010274 <__udivmoddi4+0x30>
 801025e:	fa01 f302 	lsl.w	r3, r1, r2
 8010262:	f1c2 0120 	rsb	r1, r2, #32
 8010266:	fa20 f101 	lsr.w	r1, r0, r1
 801026a:	fa0c fc02 	lsl.w	ip, ip, r2
 801026e:	ea41 0e03 	orr.w	lr, r1, r3
 8010272:	4094      	lsls	r4, r2
 8010274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010278:	0c21      	lsrs	r1, r4, #16
 801027a:	fbbe f6f8 	udiv	r6, lr, r8
 801027e:	fa1f f78c 	uxth.w	r7, ip
 8010282:	fb08 e316 	mls	r3, r8, r6, lr
 8010286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801028a:	fb06 f107 	mul.w	r1, r6, r7
 801028e:	4299      	cmp	r1, r3
 8010290:	d90a      	bls.n	80102a8 <__udivmoddi4+0x64>
 8010292:	eb1c 0303 	adds.w	r3, ip, r3
 8010296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 801029a:	f080 811f 	bcs.w	80104dc <__udivmoddi4+0x298>
 801029e:	4299      	cmp	r1, r3
 80102a0:	f240 811c 	bls.w	80104dc <__udivmoddi4+0x298>
 80102a4:	3e02      	subs	r6, #2
 80102a6:	4463      	add	r3, ip
 80102a8:	1a5b      	subs	r3, r3, r1
 80102aa:	b2a4      	uxth	r4, r4
 80102ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80102b0:	fb08 3310 	mls	r3, r8, r0, r3
 80102b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80102b8:	fb00 f707 	mul.w	r7, r0, r7
 80102bc:	42a7      	cmp	r7, r4
 80102be:	d90a      	bls.n	80102d6 <__udivmoddi4+0x92>
 80102c0:	eb1c 0404 	adds.w	r4, ip, r4
 80102c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80102c8:	f080 810a 	bcs.w	80104e0 <__udivmoddi4+0x29c>
 80102cc:	42a7      	cmp	r7, r4
 80102ce:	f240 8107 	bls.w	80104e0 <__udivmoddi4+0x29c>
 80102d2:	4464      	add	r4, ip
 80102d4:	3802      	subs	r0, #2
 80102d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80102da:	1be4      	subs	r4, r4, r7
 80102dc:	2600      	movs	r6, #0
 80102de:	b11d      	cbz	r5, 80102e8 <__udivmoddi4+0xa4>
 80102e0:	40d4      	lsrs	r4, r2
 80102e2:	2300      	movs	r3, #0
 80102e4:	e9c5 4300 	strd	r4, r3, [r5]
 80102e8:	4631      	mov	r1, r6
 80102ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ee:	428b      	cmp	r3, r1
 80102f0:	d909      	bls.n	8010306 <__udivmoddi4+0xc2>
 80102f2:	2d00      	cmp	r5, #0
 80102f4:	f000 80ef 	beq.w	80104d6 <__udivmoddi4+0x292>
 80102f8:	2600      	movs	r6, #0
 80102fa:	e9c5 0100 	strd	r0, r1, [r5]
 80102fe:	4630      	mov	r0, r6
 8010300:	4631      	mov	r1, r6
 8010302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010306:	fab3 f683 	clz	r6, r3
 801030a:	2e00      	cmp	r6, #0
 801030c:	d14a      	bne.n	80103a4 <__udivmoddi4+0x160>
 801030e:	428b      	cmp	r3, r1
 8010310:	d302      	bcc.n	8010318 <__udivmoddi4+0xd4>
 8010312:	4282      	cmp	r2, r0
 8010314:	f200 80f9 	bhi.w	801050a <__udivmoddi4+0x2c6>
 8010318:	1a84      	subs	r4, r0, r2
 801031a:	eb61 0303 	sbc.w	r3, r1, r3
 801031e:	2001      	movs	r0, #1
 8010320:	469e      	mov	lr, r3
 8010322:	2d00      	cmp	r5, #0
 8010324:	d0e0      	beq.n	80102e8 <__udivmoddi4+0xa4>
 8010326:	e9c5 4e00 	strd	r4, lr, [r5]
 801032a:	e7dd      	b.n	80102e8 <__udivmoddi4+0xa4>
 801032c:	b902      	cbnz	r2, 8010330 <__udivmoddi4+0xec>
 801032e:	deff      	udf	#255	; 0xff
 8010330:	fab2 f282 	clz	r2, r2
 8010334:	2a00      	cmp	r2, #0
 8010336:	f040 8092 	bne.w	801045e <__udivmoddi4+0x21a>
 801033a:	eba1 010c 	sub.w	r1, r1, ip
 801033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010342:	fa1f fe8c 	uxth.w	lr, ip
 8010346:	2601      	movs	r6, #1
 8010348:	0c20      	lsrs	r0, r4, #16
 801034a:	fbb1 f3f7 	udiv	r3, r1, r7
 801034e:	fb07 1113 	mls	r1, r7, r3, r1
 8010352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010356:	fb0e f003 	mul.w	r0, lr, r3
 801035a:	4288      	cmp	r0, r1
 801035c:	d908      	bls.n	8010370 <__udivmoddi4+0x12c>
 801035e:	eb1c 0101 	adds.w	r1, ip, r1
 8010362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8010366:	d202      	bcs.n	801036e <__udivmoddi4+0x12a>
 8010368:	4288      	cmp	r0, r1
 801036a:	f200 80cb 	bhi.w	8010504 <__udivmoddi4+0x2c0>
 801036e:	4643      	mov	r3, r8
 8010370:	1a09      	subs	r1, r1, r0
 8010372:	b2a4      	uxth	r4, r4
 8010374:	fbb1 f0f7 	udiv	r0, r1, r7
 8010378:	fb07 1110 	mls	r1, r7, r0, r1
 801037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8010380:	fb0e fe00 	mul.w	lr, lr, r0
 8010384:	45a6      	cmp	lr, r4
 8010386:	d908      	bls.n	801039a <__udivmoddi4+0x156>
 8010388:	eb1c 0404 	adds.w	r4, ip, r4
 801038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8010390:	d202      	bcs.n	8010398 <__udivmoddi4+0x154>
 8010392:	45a6      	cmp	lr, r4
 8010394:	f200 80bb 	bhi.w	801050e <__udivmoddi4+0x2ca>
 8010398:	4608      	mov	r0, r1
 801039a:	eba4 040e 	sub.w	r4, r4, lr
 801039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80103a2:	e79c      	b.n	80102de <__udivmoddi4+0x9a>
 80103a4:	f1c6 0720 	rsb	r7, r6, #32
 80103a8:	40b3      	lsls	r3, r6
 80103aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80103ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80103b2:	fa20 f407 	lsr.w	r4, r0, r7
 80103b6:	fa01 f306 	lsl.w	r3, r1, r6
 80103ba:	431c      	orrs	r4, r3
 80103bc:	40f9      	lsrs	r1, r7
 80103be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80103c2:	fa00 f306 	lsl.w	r3, r0, r6
 80103c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80103ca:	0c20      	lsrs	r0, r4, #16
 80103cc:	fa1f fe8c 	uxth.w	lr, ip
 80103d0:	fb09 1118 	mls	r1, r9, r8, r1
 80103d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80103d8:	fb08 f00e 	mul.w	r0, r8, lr
 80103dc:	4288      	cmp	r0, r1
 80103de:	fa02 f206 	lsl.w	r2, r2, r6
 80103e2:	d90b      	bls.n	80103fc <__udivmoddi4+0x1b8>
 80103e4:	eb1c 0101 	adds.w	r1, ip, r1
 80103e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80103ec:	f080 8088 	bcs.w	8010500 <__udivmoddi4+0x2bc>
 80103f0:	4288      	cmp	r0, r1
 80103f2:	f240 8085 	bls.w	8010500 <__udivmoddi4+0x2bc>
 80103f6:	f1a8 0802 	sub.w	r8, r8, #2
 80103fa:	4461      	add	r1, ip
 80103fc:	1a09      	subs	r1, r1, r0
 80103fe:	b2a4      	uxth	r4, r4
 8010400:	fbb1 f0f9 	udiv	r0, r1, r9
 8010404:	fb09 1110 	mls	r1, r9, r0, r1
 8010408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 801040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8010410:	458e      	cmp	lr, r1
 8010412:	d908      	bls.n	8010426 <__udivmoddi4+0x1e2>
 8010414:	eb1c 0101 	adds.w	r1, ip, r1
 8010418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 801041c:	d26c      	bcs.n	80104f8 <__udivmoddi4+0x2b4>
 801041e:	458e      	cmp	lr, r1
 8010420:	d96a      	bls.n	80104f8 <__udivmoddi4+0x2b4>
 8010422:	3802      	subs	r0, #2
 8010424:	4461      	add	r1, ip
 8010426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801042a:	fba0 9402 	umull	r9, r4, r0, r2
 801042e:	eba1 010e 	sub.w	r1, r1, lr
 8010432:	42a1      	cmp	r1, r4
 8010434:	46c8      	mov	r8, r9
 8010436:	46a6      	mov	lr, r4
 8010438:	d356      	bcc.n	80104e8 <__udivmoddi4+0x2a4>
 801043a:	d053      	beq.n	80104e4 <__udivmoddi4+0x2a0>
 801043c:	b15d      	cbz	r5, 8010456 <__udivmoddi4+0x212>
 801043e:	ebb3 0208 	subs.w	r2, r3, r8
 8010442:	eb61 010e 	sbc.w	r1, r1, lr
 8010446:	fa01 f707 	lsl.w	r7, r1, r7
 801044a:	fa22 f306 	lsr.w	r3, r2, r6
 801044e:	40f1      	lsrs	r1, r6
 8010450:	431f      	orrs	r7, r3
 8010452:	e9c5 7100 	strd	r7, r1, [r5]
 8010456:	2600      	movs	r6, #0
 8010458:	4631      	mov	r1, r6
 801045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801045e:	f1c2 0320 	rsb	r3, r2, #32
 8010462:	40d8      	lsrs	r0, r3
 8010464:	fa0c fc02 	lsl.w	ip, ip, r2
 8010468:	fa21 f303 	lsr.w	r3, r1, r3
 801046c:	4091      	lsls	r1, r2
 801046e:	4301      	orrs	r1, r0
 8010470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010474:	fa1f fe8c 	uxth.w	lr, ip
 8010478:	fbb3 f0f7 	udiv	r0, r3, r7
 801047c:	fb07 3610 	mls	r6, r7, r0, r3
 8010480:	0c0b      	lsrs	r3, r1, #16
 8010482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8010486:	fb00 f60e 	mul.w	r6, r0, lr
 801048a:	429e      	cmp	r6, r3
 801048c:	fa04 f402 	lsl.w	r4, r4, r2
 8010490:	d908      	bls.n	80104a4 <__udivmoddi4+0x260>
 8010492:	eb1c 0303 	adds.w	r3, ip, r3
 8010496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801049a:	d22f      	bcs.n	80104fc <__udivmoddi4+0x2b8>
 801049c:	429e      	cmp	r6, r3
 801049e:	d92d      	bls.n	80104fc <__udivmoddi4+0x2b8>
 80104a0:	3802      	subs	r0, #2
 80104a2:	4463      	add	r3, ip
 80104a4:	1b9b      	subs	r3, r3, r6
 80104a6:	b289      	uxth	r1, r1
 80104a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80104ac:	fb07 3316 	mls	r3, r7, r6, r3
 80104b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80104b4:	fb06 f30e 	mul.w	r3, r6, lr
 80104b8:	428b      	cmp	r3, r1
 80104ba:	d908      	bls.n	80104ce <__udivmoddi4+0x28a>
 80104bc:	eb1c 0101 	adds.w	r1, ip, r1
 80104c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80104c4:	d216      	bcs.n	80104f4 <__udivmoddi4+0x2b0>
 80104c6:	428b      	cmp	r3, r1
 80104c8:	d914      	bls.n	80104f4 <__udivmoddi4+0x2b0>
 80104ca:	3e02      	subs	r6, #2
 80104cc:	4461      	add	r1, ip
 80104ce:	1ac9      	subs	r1, r1, r3
 80104d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80104d4:	e738      	b.n	8010348 <__udivmoddi4+0x104>
 80104d6:	462e      	mov	r6, r5
 80104d8:	4628      	mov	r0, r5
 80104da:	e705      	b.n	80102e8 <__udivmoddi4+0xa4>
 80104dc:	4606      	mov	r6, r0
 80104de:	e6e3      	b.n	80102a8 <__udivmoddi4+0x64>
 80104e0:	4618      	mov	r0, r3
 80104e2:	e6f8      	b.n	80102d6 <__udivmoddi4+0x92>
 80104e4:	454b      	cmp	r3, r9
 80104e6:	d2a9      	bcs.n	801043c <__udivmoddi4+0x1f8>
 80104e8:	ebb9 0802 	subs.w	r8, r9, r2
 80104ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80104f0:	3801      	subs	r0, #1
 80104f2:	e7a3      	b.n	801043c <__udivmoddi4+0x1f8>
 80104f4:	4646      	mov	r6, r8
 80104f6:	e7ea      	b.n	80104ce <__udivmoddi4+0x28a>
 80104f8:	4620      	mov	r0, r4
 80104fa:	e794      	b.n	8010426 <__udivmoddi4+0x1e2>
 80104fc:	4640      	mov	r0, r8
 80104fe:	e7d1      	b.n	80104a4 <__udivmoddi4+0x260>
 8010500:	46d0      	mov	r8, sl
 8010502:	e77b      	b.n	80103fc <__udivmoddi4+0x1b8>
 8010504:	3b02      	subs	r3, #2
 8010506:	4461      	add	r1, ip
 8010508:	e732      	b.n	8010370 <__udivmoddi4+0x12c>
 801050a:	4630      	mov	r0, r6
 801050c:	e709      	b.n	8010322 <__udivmoddi4+0xde>
 801050e:	4464      	add	r4, ip
 8010510:	3802      	subs	r0, #2
 8010512:	e742      	b.n	801039a <__udivmoddi4+0x156>

08010514 <__aeabi_idiv0>:
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop

08010518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801051e:	f107 0314 	add.w	r3, r7, #20
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	605a      	str	r2, [r3, #4]
 8010528:	609a      	str	r2, [r3, #8]
 801052a:	60da      	str	r2, [r3, #12]
 801052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	613b      	str	r3, [r7, #16]
 8010532:	4b2d      	ldr	r3, [pc, #180]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010536:	4a2c      	ldr	r2, [pc, #176]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010538:	f043 0304 	orr.w	r3, r3, #4
 801053c:	6313      	str	r3, [r2, #48]	; 0x30
 801053e:	4b2a      	ldr	r3, [pc, #168]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010542:	f003 0304 	and.w	r3, r3, #4
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
 801054e:	4b26      	ldr	r3, [pc, #152]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010552:	4a25      	ldr	r2, [pc, #148]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010558:	6313      	str	r3, [r2, #48]	; 0x30
 801055a:	4b23      	ldr	r3, [pc, #140]	; (80105e8 <MX_GPIO_Init+0xd0>)
 801055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010562:	60fb      	str	r3, [r7, #12]
 8010564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010566:	2300      	movs	r3, #0
 8010568:	60bb      	str	r3, [r7, #8]
 801056a:	4b1f      	ldr	r3, [pc, #124]	; (80105e8 <MX_GPIO_Init+0xd0>)
 801056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801056e:	4a1e      	ldr	r2, [pc, #120]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010570:	f043 0301 	orr.w	r3, r3, #1
 8010574:	6313      	str	r3, [r2, #48]	; 0x30
 8010576:	4b1c      	ldr	r3, [pc, #112]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	60bb      	str	r3, [r7, #8]
 8010580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010582:	2300      	movs	r3, #0
 8010584:	607b      	str	r3, [r7, #4]
 8010586:	4b18      	ldr	r3, [pc, #96]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058a:	4a17      	ldr	r2, [pc, #92]	; (80105e8 <MX_GPIO_Init+0xd0>)
 801058c:	f043 0302 	orr.w	r3, r3, #2
 8010590:	6313      	str	r3, [r2, #48]	; 0x30
 8010592:	4b15      	ldr	r3, [pc, #84]	; (80105e8 <MX_GPIO_Init+0xd0>)
 8010594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010596:	f003 0302 	and.w	r3, r3, #2
 801059a:	607b      	str	r3, [r7, #4]
 801059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 801059e:	2200      	movs	r2, #0
 80105a0:	2120      	movs	r1, #32
 80105a2:	4812      	ldr	r0, [pc, #72]	; (80105ec <MX_GPIO_Init+0xd4>)
 80105a4:	f000 fda4 	bl	80110f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80105a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80105ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80105ae:	2300      	movs	r3, #0
 80105b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80105b6:	f107 0314 	add.w	r3, r7, #20
 80105ba:	4619      	mov	r1, r3
 80105bc:	480c      	ldr	r0, [pc, #48]	; (80105f0 <MX_GPIO_Init+0xd8>)
 80105be:	f000 fbeb 	bl	8010d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80105c2:	2320      	movs	r3, #32
 80105c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80105c6:	2301      	movs	r3, #1
 80105c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105ca:	2300      	movs	r3, #0
 80105cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80105ce:	2300      	movs	r3, #0
 80105d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80105d2:	f107 0314 	add.w	r3, r7, #20
 80105d6:	4619      	mov	r1, r3
 80105d8:	4804      	ldr	r0, [pc, #16]	; (80105ec <MX_GPIO_Init+0xd4>)
 80105da:	f000 fbdd 	bl	8010d98 <HAL_GPIO_Init>

}
 80105de:	bf00      	nop
 80105e0:	3728      	adds	r7, #40	; 0x28
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	40023800 	.word	0x40023800
 80105ec:	40020000 	.word	0x40020000
 80105f0:	40020800 	.word	0x40020800

080105f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80105f8:	f000 fa26 	bl	8010a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80105fc:	f000 f824 	bl	8010648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010600:	f7ff ff8a 	bl	8010518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8010604:	f000 f984 	bl	8010910 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8010608:	f000 f924 	bl	8010854 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 801060c:	480b      	ldr	r0, [pc, #44]	; (801063c <main+0x48>)
 801060e:	f001 fbdb 	bl	8011dc8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8010612:	2120      	movs	r1, #32
 8010614:	480a      	ldr	r0, [pc, #40]	; (8010640 <main+0x4c>)
 8010616:	f000 fd84 	bl	8011122 <HAL_GPIO_TogglePin>
	  if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 801061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801061e:	4809      	ldr	r0, [pc, #36]	; (8010644 <main+0x50>)
 8010620:	f000 fd4e 	bl	80110c0 <HAL_GPIO_ReadPin>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d003      	beq.n	8010632 <main+0x3e>
		  HAL_Delay(100);
 801062a:	2064      	movs	r0, #100	; 0x64
 801062c:	f000 fa7e 	bl	8010b2c <HAL_Delay>
 8010630:	e7ef      	b.n	8010612 <main+0x1e>
	  }else{
		  HAL_Delay(300);
 8010632:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010636:	f000 fa79 	bl	8010b2c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801063a:	e7ea      	b.n	8010612 <main+0x1e>
 801063c:	20000028 	.word	0x20000028
 8010640:	40020000 	.word	0x40020000
 8010644:	40020800 	.word	0x40020800

08010648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b094      	sub	sp, #80	; 0x50
 801064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801064e:	f107 031c 	add.w	r3, r7, #28
 8010652:	2234      	movs	r2, #52	; 0x34
 8010654:	2100      	movs	r1, #0
 8010656:	4618      	mov	r0, r3
 8010658:	f002 fa6c 	bl	8012b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801065c:	f107 0308 	add.w	r3, r7, #8
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]
 8010664:	605a      	str	r2, [r3, #4]
 8010666:	609a      	str	r2, [r3, #8]
 8010668:	60da      	str	r2, [r3, #12]
 801066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801066c:	2300      	movs	r3, #0
 801066e:	607b      	str	r3, [r7, #4]
 8010670:	4b2a      	ldr	r3, [pc, #168]	; (801071c <SystemClock_Config+0xd4>)
 8010672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010674:	4a29      	ldr	r2, [pc, #164]	; (801071c <SystemClock_Config+0xd4>)
 8010676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801067a:	6413      	str	r3, [r2, #64]	; 0x40
 801067c:	4b27      	ldr	r3, [pc, #156]	; (801071c <SystemClock_Config+0xd4>)
 801067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010684:	607b      	str	r3, [r7, #4]
 8010686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8010688:	2300      	movs	r3, #0
 801068a:	603b      	str	r3, [r7, #0]
 801068c:	4b24      	ldr	r3, [pc, #144]	; (8010720 <SystemClock_Config+0xd8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8010694:	4a22      	ldr	r2, [pc, #136]	; (8010720 <SystemClock_Config+0xd8>)
 8010696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801069a:	6013      	str	r3, [r2, #0]
 801069c:	4b20      	ldr	r3, [pc, #128]	; (8010720 <SystemClock_Config+0xd8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80106a4:	603b      	str	r3, [r7, #0]
 80106a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80106a8:	2302      	movs	r3, #2
 80106aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80106ac:	2301      	movs	r3, #1
 80106ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80106b0:	2310      	movs	r3, #16
 80106b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80106b4:	2302      	movs	r3, #2
 80106b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80106b8:	2300      	movs	r3, #0
 80106ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80106bc:	2310      	movs	r3, #16
 80106be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80106c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80106c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80106c6:	2304      	movs	r3, #4
 80106c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80106ca:	2302      	movs	r3, #2
 80106cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80106ce:	2302      	movs	r3, #2
 80106d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80106d2:	f107 031c 	add.w	r3, r7, #28
 80106d6:	4618      	mov	r0, r3
 80106d8:	f001 f888 	bl	80117ec <HAL_RCC_OscConfig>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80106e2:	f000 f83f 	bl	8010764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80106e6:	230f      	movs	r3, #15
 80106e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80106ea:	2302      	movs	r3, #2
 80106ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80106ee:	2300      	movs	r3, #0
 80106f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80106f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80106f8:	2300      	movs	r3, #0
 80106fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80106fc:	f107 0308 	add.w	r3, r7, #8
 8010700:	2102      	movs	r1, #2
 8010702:	4618      	mov	r0, r3
 8010704:	f000 fd28 	bl	8011158 <HAL_RCC_ClockConfig>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d001      	beq.n	8010712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 801070e:	f000 f829 	bl	8010764 <Error_Handler>
  }
}
 8010712:	bf00      	nop
 8010714:	3750      	adds	r7, #80	; 0x50
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	40023800 	.word	0x40023800
 8010720:	40007000 	.word	0x40007000

08010724 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a09      	ldr	r2, [pc, #36]	; (8010758 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d10c      	bne.n	8010750 <HAL_TIM_PeriodElapsedCallback+0x2c>
		char* msg = "Hello from App 2\n";
 8010736:	4b09      	ldr	r3, [pc, #36]	; (801075c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8010738:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), -1);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7ff fd62 	bl	8010204 <strlen>
 8010740:	4603      	mov	r3, r0
 8010742:	b29a      	uxth	r2, r3
 8010744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010748:	68f9      	ldr	r1, [r7, #12]
 801074a:	4805      	ldr	r0, [pc, #20]	; (8010760 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 801074c:	f001 fe59 	bl	8012402 <HAL_UART_Transmit>
	}
}
 8010750:	bf00      	nop
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	40001000 	.word	0x40001000
 801075c:	08012b5c 	.word	0x08012b5c
 8010760:	20000070 	.word	0x20000070

08010764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010764:	b480      	push	{r7}
 8010766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010768:	b672      	cpsid	i
}
 801076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801076c:	e7fe      	b.n	801076c <Error_Handler+0x8>
	...

08010770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010776:	2300      	movs	r3, #0
 8010778:	607b      	str	r3, [r7, #4]
 801077a:	4b10      	ldr	r3, [pc, #64]	; (80107bc <HAL_MspInit+0x4c>)
 801077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801077e:	4a0f      	ldr	r2, [pc, #60]	; (80107bc <HAL_MspInit+0x4c>)
 8010780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010784:	6453      	str	r3, [r2, #68]	; 0x44
 8010786:	4b0d      	ldr	r3, [pc, #52]	; (80107bc <HAL_MspInit+0x4c>)
 8010788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010792:	2300      	movs	r3, #0
 8010794:	603b      	str	r3, [r7, #0]
 8010796:	4b09      	ldr	r3, [pc, #36]	; (80107bc <HAL_MspInit+0x4c>)
 8010798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801079a:	4a08      	ldr	r2, [pc, #32]	; (80107bc <HAL_MspInit+0x4c>)
 801079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107a0:	6413      	str	r3, [r2, #64]	; 0x40
 80107a2:	4b06      	ldr	r3, [pc, #24]	; (80107bc <HAL_MspInit+0x4c>)
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107aa:	603b      	str	r3, [r7, #0]
 80107ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80107ae:	2007      	movs	r0, #7
 80107b0:	f000 fab0 	bl	8010d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	40023800 	.word	0x40023800

080107c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80107c0:	b480      	push	{r7}
 80107c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80107c4:	e7fe      	b.n	80107c4 <NMI_Handler+0x4>

080107c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80107c6:	b480      	push	{r7}
 80107c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80107ca:	e7fe      	b.n	80107ca <HardFault_Handler+0x4>

080107cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80107cc:	b480      	push	{r7}
 80107ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80107d0:	e7fe      	b.n	80107d0 <MemManage_Handler+0x4>

080107d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80107d2:	b480      	push	{r7}
 80107d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80107d6:	e7fe      	b.n	80107d6 <BusFault_Handler+0x4>

080107d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80107d8:	b480      	push	{r7}
 80107da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80107dc:	e7fe      	b.n	80107dc <UsageFault_Handler+0x4>

080107de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80107de:	b480      	push	{r7}
 80107e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80107e2:	bf00      	nop
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80107f0:	bf00      	nop
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80107fa:	b480      	push	{r7}
 80107fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80107fe:	bf00      	nop
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr

08010808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801080c:	f000 f96e 	bl	8010aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010810:	bf00      	nop
 8010812:	bd80      	pop	{r7, pc}

08010814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010818:	4802      	ldr	r0, [pc, #8]	; (8010824 <TIM6_DAC_IRQHandler+0x10>)
 801081a:	f001 fb45 	bl	8011ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801081e:	bf00      	nop
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	20000028 	.word	0x20000028

08010828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010828:	b480      	push	{r7}
 801082a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801082c:	4b07      	ldr	r3, [pc, #28]	; (801084c <SystemInit+0x24>)
 801082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010832:	4a06      	ldr	r2, [pc, #24]	; (801084c <SystemInit+0x24>)
 8010834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 801083c:	4b03      	ldr	r3, [pc, #12]	; (801084c <SystemInit+0x24>)
 801083e:	4a04      	ldr	r2, [pc, #16]	; (8010850 <SystemInit+0x28>)
 8010840:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010842:	bf00      	nop
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	e000ed00 	.word	0xe000ed00
 8010850:	08010000 	.word	0x08010000

08010854 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801085a:	463b      	mov	r3, r7
 801085c:	2200      	movs	r2, #0
 801085e:	601a      	str	r2, [r3, #0]
 8010860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8010862:	4b15      	ldr	r3, [pc, #84]	; (80108b8 <MX_TIM6_Init+0x64>)
 8010864:	4a15      	ldr	r2, [pc, #84]	; (80108bc <MX_TIM6_Init+0x68>)
 8010866:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8010868:	4b13      	ldr	r3, [pc, #76]	; (80108b8 <MX_TIM6_Init+0x64>)
 801086a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 801086e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010870:	4b11      	ldr	r3, [pc, #68]	; (80108b8 <MX_TIM6_Init+0x64>)
 8010872:	2200      	movs	r2, #0
 8010874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8010876:	4b10      	ldr	r3, [pc, #64]	; (80108b8 <MX_TIM6_Init+0x64>)
 8010878:	f242 720f 	movw	r2, #9999	; 0x270f
 801087c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801087e:	4b0e      	ldr	r3, [pc, #56]	; (80108b8 <MX_TIM6_Init+0x64>)
 8010880:	2200      	movs	r2, #0
 8010882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8010884:	480c      	ldr	r0, [pc, #48]	; (80108b8 <MX_TIM6_Init+0x64>)
 8010886:	f001 fa4f 	bl	8011d28 <HAL_TIM_Base_Init>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8010890:	f7ff ff68 	bl	8010764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010894:	2300      	movs	r3, #0
 8010896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010898:	2300      	movs	r3, #0
 801089a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801089c:	463b      	mov	r3, r7
 801089e:	4619      	mov	r1, r3
 80108a0:	4805      	ldr	r0, [pc, #20]	; (80108b8 <MX_TIM6_Init+0x64>)
 80108a2:	f001 fcd1 	bl	8012248 <HAL_TIMEx_MasterConfigSynchronization>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80108ac:	f7ff ff5a 	bl	8010764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80108b0:	bf00      	nop
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20000028 	.word	0x20000028
 80108bc:	40001000 	.word	0x40001000

080108c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a0e      	ldr	r2, [pc, #56]	; (8010908 <HAL_TIM_Base_MspInit+0x48>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d115      	bne.n	80108fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80108d2:	2300      	movs	r3, #0
 80108d4:	60fb      	str	r3, [r7, #12]
 80108d6:	4b0d      	ldr	r3, [pc, #52]	; (801090c <HAL_TIM_Base_MspInit+0x4c>)
 80108d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108da:	4a0c      	ldr	r2, [pc, #48]	; (801090c <HAL_TIM_Base_MspInit+0x4c>)
 80108dc:	f043 0310 	orr.w	r3, r3, #16
 80108e0:	6413      	str	r3, [r2, #64]	; 0x40
 80108e2:	4b0a      	ldr	r3, [pc, #40]	; (801090c <HAL_TIM_Base_MspInit+0x4c>)
 80108e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e6:	f003 0310 	and.w	r3, r3, #16
 80108ea:	60fb      	str	r3, [r7, #12]
 80108ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80108ee:	2200      	movs	r2, #0
 80108f0:	2100      	movs	r1, #0
 80108f2:	2036      	movs	r0, #54	; 0x36
 80108f4:	f000 fa19 	bl	8010d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80108f8:	2036      	movs	r0, #54	; 0x36
 80108fa:	f000 fa32 	bl	8010d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80108fe:	bf00      	nop
 8010900:	3710      	adds	r7, #16
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	40001000 	.word	0x40001000
 801090c:	40023800 	.word	0x40023800

08010910 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010914:	4b11      	ldr	r3, [pc, #68]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010916:	4a12      	ldr	r2, [pc, #72]	; (8010960 <MX_USART2_UART_Init+0x50>)
 8010918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <MX_USART2_UART_Init+0x4c>)
 801091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010922:	4b0e      	ldr	r3, [pc, #56]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010924:	2200      	movs	r2, #0
 8010926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010928:	4b0c      	ldr	r3, [pc, #48]	; (801095c <MX_USART2_UART_Init+0x4c>)
 801092a:	2200      	movs	r2, #0
 801092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801092e:	4b0b      	ldr	r3, [pc, #44]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010930:	2200      	movs	r2, #0
 8010932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010934:	4b09      	ldr	r3, [pc, #36]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010936:	220c      	movs	r2, #12
 8010938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801093a:	4b08      	ldr	r3, [pc, #32]	; (801095c <MX_USART2_UART_Init+0x4c>)
 801093c:	2200      	movs	r2, #0
 801093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010940:	4b06      	ldr	r3, [pc, #24]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010942:	2200      	movs	r2, #0
 8010944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010946:	4805      	ldr	r0, [pc, #20]	; (801095c <MX_USART2_UART_Init+0x4c>)
 8010948:	f001 fd0e 	bl	8012368 <HAL_UART_Init>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010952:	f7ff ff07 	bl	8010764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8010956:	bf00      	nop
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20000070 	.word	0x20000070
 8010960:	40004400 	.word	0x40004400

08010964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b08a      	sub	sp, #40	; 0x28
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801096c:	f107 0314 	add.w	r3, r7, #20
 8010970:	2200      	movs	r2, #0
 8010972:	601a      	str	r2, [r3, #0]
 8010974:	605a      	str	r2, [r3, #4]
 8010976:	609a      	str	r2, [r3, #8]
 8010978:	60da      	str	r2, [r3, #12]
 801097a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a19      	ldr	r2, [pc, #100]	; (80109e8 <HAL_UART_MspInit+0x84>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d12b      	bne.n	80109de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010986:	2300      	movs	r3, #0
 8010988:	613b      	str	r3, [r7, #16]
 801098a:	4b18      	ldr	r3, [pc, #96]	; (80109ec <HAL_UART_MspInit+0x88>)
 801098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098e:	4a17      	ldr	r2, [pc, #92]	; (80109ec <HAL_UART_MspInit+0x88>)
 8010990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010994:	6413      	str	r3, [r2, #64]	; 0x40
 8010996:	4b15      	ldr	r3, [pc, #84]	; (80109ec <HAL_UART_MspInit+0x88>)
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801099e:	613b      	str	r3, [r7, #16]
 80109a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109a2:	2300      	movs	r3, #0
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	4b11      	ldr	r3, [pc, #68]	; (80109ec <HAL_UART_MspInit+0x88>)
 80109a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109aa:	4a10      	ldr	r2, [pc, #64]	; (80109ec <HAL_UART_MspInit+0x88>)
 80109ac:	f043 0301 	orr.w	r3, r3, #1
 80109b0:	6313      	str	r3, [r2, #48]	; 0x30
 80109b2:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <HAL_UART_MspInit+0x88>)
 80109b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109b6:	f003 0301 	and.w	r3, r3, #1
 80109ba:	60fb      	str	r3, [r7, #12]
 80109bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80109be:	230c      	movs	r3, #12
 80109c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109c2:	2302      	movs	r3, #2
 80109c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109c6:	2300      	movs	r3, #0
 80109c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109ca:	2303      	movs	r3, #3
 80109cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80109ce:	2307      	movs	r3, #7
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109d2:	f107 0314 	add.w	r3, r7, #20
 80109d6:	4619      	mov	r1, r3
 80109d8:	4805      	ldr	r0, [pc, #20]	; (80109f0 <HAL_UART_MspInit+0x8c>)
 80109da:	f000 f9dd 	bl	8010d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80109de:	bf00      	nop
 80109e0:	3728      	adds	r7, #40	; 0x28
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	40004400 	.word	0x40004400
 80109ec:	40023800 	.word	0x40023800
 80109f0:	40020000 	.word	0x40020000

080109f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80109f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80109f8:	480d      	ldr	r0, [pc, #52]	; (8010a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80109fa:	490e      	ldr	r1, [pc, #56]	; (8010a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80109fc:	4a0e      	ldr	r2, [pc, #56]	; (8010a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80109fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010a00:	e002      	b.n	8010a08 <LoopCopyDataInit>

08010a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010a06:	3304      	adds	r3, #4

08010a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010a0c:	d3f9      	bcc.n	8010a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010a0e:	4a0b      	ldr	r2, [pc, #44]	; (8010a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010a10:	4c0b      	ldr	r4, [pc, #44]	; (8010a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010a14:	e001      	b.n	8010a1a <LoopFillZerobss>

08010a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010a18:	3204      	adds	r2, #4

08010a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010a1c:	d3fb      	bcc.n	8010a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010a1e:	f7ff ff03 	bl	8010828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010a22:	f002 f863 	bl	8012aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a26:	f7ff fde5 	bl	80105f4 <main>
  bx  lr    
 8010a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010a34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8010a38:	08012b98 	.word	0x08012b98
  ldr r2, =_sbss
 8010a3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010a40:	200000b8 	.word	0x200000b8

08010a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a44:	e7fe      	b.n	8010a44 <ADC_IRQHandler>
	...

08010a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010a4c:	4b0e      	ldr	r3, [pc, #56]	; (8010a88 <HAL_Init+0x40>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a0d      	ldr	r2, [pc, #52]	; (8010a88 <HAL_Init+0x40>)
 8010a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010a58:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <HAL_Init+0x40>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a0a      	ldr	r2, [pc, #40]	; (8010a88 <HAL_Init+0x40>)
 8010a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010a64:	4b08      	ldr	r3, [pc, #32]	; (8010a88 <HAL_Init+0x40>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a07      	ldr	r2, [pc, #28]	; (8010a88 <HAL_Init+0x40>)
 8010a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010a70:	2003      	movs	r0, #3
 8010a72:	f000 f94f 	bl	8010d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010a76:	2000      	movs	r0, #0
 8010a78:	f000 f808 	bl	8010a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010a7c:	f7ff fe78 	bl	8010770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	40023c00 	.word	0x40023c00

08010a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010a94:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <HAL_InitTick+0x54>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	4b12      	ldr	r3, [pc, #72]	; (8010ae4 <HAL_InitTick+0x58>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 f967 	bl	8010d7e <HAL_SYSTICK_Config>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e00e      	b.n	8010ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2b0f      	cmp	r3, #15
 8010abe:	d80a      	bhi.n	8010ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	6879      	ldr	r1, [r7, #4]
 8010ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ac8:	f000 f92f 	bl	8010d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010acc:	4a06      	ldr	r2, [pc, #24]	; (8010ae8 <HAL_InitTick+0x5c>)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e000      	b.n	8010ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	20000000 	.word	0x20000000
 8010ae4:	20000008 	.word	0x20000008
 8010ae8:	20000004 	.word	0x20000004

08010aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010aec:	b480      	push	{r7}
 8010aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010af0:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <HAL_IncTick+0x20>)
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	461a      	mov	r2, r3
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <HAL_IncTick+0x24>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4413      	add	r3, r2
 8010afc:	4a04      	ldr	r2, [pc, #16]	; (8010b10 <HAL_IncTick+0x24>)
 8010afe:	6013      	str	r3, [r2, #0]
}
 8010b00:	bf00      	nop
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	20000008 	.word	0x20000008
 8010b10:	200000b4 	.word	0x200000b4

08010b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010b14:	b480      	push	{r7}
 8010b16:	af00      	add	r7, sp, #0
  return uwTick;
 8010b18:	4b03      	ldr	r3, [pc, #12]	; (8010b28 <HAL_GetTick+0x14>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	200000b4 	.word	0x200000b4

08010b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010b34:	f7ff ffee 	bl	8010b14 <HAL_GetTick>
 8010b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b44:	d005      	beq.n	8010b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010b46:	4b0a      	ldr	r3, [pc, #40]	; (8010b70 <HAL_Delay+0x44>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	4413      	add	r3, r2
 8010b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010b52:	bf00      	nop
 8010b54:	f7ff ffde 	bl	8010b14 <HAL_GetTick>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	68fa      	ldr	r2, [r7, #12]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d8f7      	bhi.n	8010b54 <HAL_Delay+0x28>
  {
  }
}
 8010b64:	bf00      	nop
 8010b66:	bf00      	nop
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	20000008 	.word	0x20000008

08010b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f003 0307 	and.w	r3, r3, #7
 8010b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b84:	4b0c      	ldr	r3, [pc, #48]	; (8010bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b8a:	68ba      	ldr	r2, [r7, #8]
 8010b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b90:	4013      	ands	r3, r2
 8010b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010ba6:	4a04      	ldr	r2, [pc, #16]	; (8010bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	60d3      	str	r3, [r2, #12]
}
 8010bac:	bf00      	nop
 8010bae:	3714      	adds	r7, #20
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr
 8010bb8:	e000ed00 	.word	0xe000ed00

08010bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010bc0:	4b04      	ldr	r3, [pc, #16]	; (8010bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	0a1b      	lsrs	r3, r3, #8
 8010bc6:	f003 0307 	and.w	r3, r3, #7
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	e000ed00 	.word	0xe000ed00

08010bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	db0b      	blt.n	8010c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010bea:	79fb      	ldrb	r3, [r7, #7]
 8010bec:	f003 021f 	and.w	r2, r3, #31
 8010bf0:	4907      	ldr	r1, [pc, #28]	; (8010c10 <__NVIC_EnableIRQ+0x38>)
 8010bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bf6:	095b      	lsrs	r3, r3, #5
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8010bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop
 8010c10:	e000e100 	.word	0xe000e100

08010c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	db0a      	blt.n	8010c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	490c      	ldr	r1, [pc, #48]	; (8010c60 <__NVIC_SetPriority+0x4c>)
 8010c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c32:	0112      	lsls	r2, r2, #4
 8010c34:	b2d2      	uxtb	r2, r2
 8010c36:	440b      	add	r3, r1
 8010c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010c3c:	e00a      	b.n	8010c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	4908      	ldr	r1, [pc, #32]	; (8010c64 <__NVIC_SetPriority+0x50>)
 8010c44:	79fb      	ldrb	r3, [r7, #7]
 8010c46:	f003 030f 	and.w	r3, r3, #15
 8010c4a:	3b04      	subs	r3, #4
 8010c4c:	0112      	lsls	r2, r2, #4
 8010c4e:	b2d2      	uxtb	r2, r2
 8010c50:	440b      	add	r3, r1
 8010c52:	761a      	strb	r2, [r3, #24]
}
 8010c54:	bf00      	nop
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr
 8010c60:	e000e100 	.word	0xe000e100
 8010c64:	e000ed00 	.word	0xe000ed00

08010c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b089      	sub	sp, #36	; 0x24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f003 0307 	and.w	r3, r3, #7
 8010c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	f1c3 0307 	rsb	r3, r3, #7
 8010c82:	2b04      	cmp	r3, #4
 8010c84:	bf28      	it	cs
 8010c86:	2304      	movcs	r3, #4
 8010c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	2b06      	cmp	r3, #6
 8010c90:	d902      	bls.n	8010c98 <NVIC_EncodePriority+0x30>
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	3b03      	subs	r3, #3
 8010c96:	e000      	b.n	8010c9a <NVIC_EncodePriority+0x32>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca6:	43da      	mvns	r2, r3
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	401a      	ands	r2, r3
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010cba:	43d9      	mvns	r1, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010cc0:	4313      	orrs	r3, r2
         );
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3724      	adds	r7, #36	; 0x24
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
	...

08010cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010ce0:	d301      	bcc.n	8010ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e00f      	b.n	8010d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010ce6:	4a0a      	ldr	r2, [pc, #40]	; (8010d10 <SysTick_Config+0x40>)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	3b01      	subs	r3, #1
 8010cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010cee:	210f      	movs	r1, #15
 8010cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cf4:	f7ff ff8e 	bl	8010c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010cf8:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <SysTick_Config+0x40>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010cfe:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <SysTick_Config+0x40>)
 8010d00:	2207      	movs	r2, #7
 8010d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010d04:	2300      	movs	r3, #0
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	e000e010 	.word	0xe000e010

08010d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff ff29 	bl	8010b74 <__NVIC_SetPriorityGrouping>
}
 8010d22:	bf00      	nop
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b086      	sub	sp, #24
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	4603      	mov	r3, r0
 8010d32:	60b9      	str	r1, [r7, #8]
 8010d34:	607a      	str	r2, [r7, #4]
 8010d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010d3c:	f7ff ff3e 	bl	8010bbc <__NVIC_GetPriorityGrouping>
 8010d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	68b9      	ldr	r1, [r7, #8]
 8010d46:	6978      	ldr	r0, [r7, #20]
 8010d48:	f7ff ff8e 	bl	8010c68 <NVIC_EncodePriority>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d52:	4611      	mov	r1, r2
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff ff5d 	bl	8010c14 <__NVIC_SetPriority>
}
 8010d5a:	bf00      	nop
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	4603      	mov	r3, r0
 8010d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff ff31 	bl	8010bd8 <__NVIC_EnableIRQ>
}
 8010d76:	bf00      	nop
 8010d78:	3708      	adds	r7, #8
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}

08010d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b082      	sub	sp, #8
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff ffa2 	bl	8010cd0 <SysTick_Config>
 8010d8c:	4603      	mov	r3, r0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
	...

08010d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b089      	sub	sp, #36	; 0x24
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010da2:	2300      	movs	r3, #0
 8010da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010da6:	2300      	movs	r3, #0
 8010da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010daa:	2300      	movs	r3, #0
 8010dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010dae:	2300      	movs	r3, #0
 8010db0:	61fb      	str	r3, [r7, #28]
 8010db2:	e165      	b.n	8011080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010db4:	2201      	movs	r2, #1
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	4013      	ands	r3, r2
 8010dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010dc8:	693a      	ldr	r2, [r7, #16]
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	f040 8154 	bne.w	801107a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	f003 0303 	and.w	r3, r3, #3
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d005      	beq.n	8010dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	d130      	bne.n	8010e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	005b      	lsls	r3, r3, #1
 8010df4:	2203      	movs	r2, #3
 8010df6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dfa:	43db      	mvns	r3, r3
 8010dfc:	69ba      	ldr	r2, [r7, #24]
 8010dfe:	4013      	ands	r3, r2
 8010e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	68da      	ldr	r2, [r3, #12]
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e0e:	69ba      	ldr	r2, [r7, #24]
 8010e10:	4313      	orrs	r3, r2
 8010e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	69ba      	ldr	r2, [r7, #24]
 8010e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010e20:	2201      	movs	r2, #1
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	fa02 f303 	lsl.w	r3, r2, r3
 8010e28:	43db      	mvns	r3, r3
 8010e2a:	69ba      	ldr	r2, [r7, #24]
 8010e2c:	4013      	ands	r3, r2
 8010e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	091b      	lsrs	r3, r3, #4
 8010e36:	f003 0201 	and.w	r2, r3, #1
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e40:	69ba      	ldr	r2, [r7, #24]
 8010e42:	4313      	orrs	r3, r2
 8010e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	69ba      	ldr	r2, [r7, #24]
 8010e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	f003 0303 	and.w	r3, r3, #3
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d017      	beq.n	8010e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	2203      	movs	r2, #3
 8010e64:	fa02 f303 	lsl.w	r3, r2, r3
 8010e68:	43db      	mvns	r3, r3
 8010e6a:	69ba      	ldr	r2, [r7, #24]
 8010e6c:	4013      	ands	r3, r2
 8010e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	689a      	ldr	r2, [r3, #8]
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	fa02 f303 	lsl.w	r3, r2, r3
 8010e7c:	69ba      	ldr	r2, [r7, #24]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	69ba      	ldr	r2, [r7, #24]
 8010e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	f003 0303 	and.w	r3, r3, #3
 8010e90:	2b02      	cmp	r3, #2
 8010e92:	d123      	bne.n	8010edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	08da      	lsrs	r2, r3, #3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3208      	adds	r2, #8
 8010e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	f003 0307 	and.w	r3, r3, #7
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	220f      	movs	r2, #15
 8010eac:	fa02 f303 	lsl.w	r3, r2, r3
 8010eb0:	43db      	mvns	r3, r3
 8010eb2:	69ba      	ldr	r2, [r7, #24]
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	691a      	ldr	r2, [r3, #16]
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	08da      	lsrs	r2, r3, #3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	3208      	adds	r2, #8
 8010ed6:	69b9      	ldr	r1, [r7, #24]
 8010ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	005b      	lsls	r3, r3, #1
 8010ee6:	2203      	movs	r2, #3
 8010ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8010eec:	43db      	mvns	r3, r3
 8010eee:	69ba      	ldr	r2, [r7, #24]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	f003 0203 	and.w	r2, r3, #3
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	fa02 f303 	lsl.w	r3, r2, r3
 8010f04:	69ba      	ldr	r2, [r7, #24]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 80ae 	beq.w	801107a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f1e:	2300      	movs	r3, #0
 8010f20:	60fb      	str	r3, [r7, #12]
 8010f22:	4b5d      	ldr	r3, [pc, #372]	; (8011098 <HAL_GPIO_Init+0x300>)
 8010f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f26:	4a5c      	ldr	r2, [pc, #368]	; (8011098 <HAL_GPIO_Init+0x300>)
 8010f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8010f2e:	4b5a      	ldr	r3, [pc, #360]	; (8011098 <HAL_GPIO_Init+0x300>)
 8010f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f36:	60fb      	str	r3, [r7, #12]
 8010f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010f3a:	4a58      	ldr	r2, [pc, #352]	; (801109c <HAL_GPIO_Init+0x304>)
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	089b      	lsrs	r3, r3, #2
 8010f40:	3302      	adds	r3, #2
 8010f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	f003 0303 	and.w	r3, r3, #3
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	220f      	movs	r2, #15
 8010f52:	fa02 f303 	lsl.w	r3, r2, r3
 8010f56:	43db      	mvns	r3, r3
 8010f58:	69ba      	ldr	r2, [r7, #24]
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a4f      	ldr	r2, [pc, #316]	; (80110a0 <HAL_GPIO_Init+0x308>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d025      	beq.n	8010fb2 <HAL_GPIO_Init+0x21a>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4a4e      	ldr	r2, [pc, #312]	; (80110a4 <HAL_GPIO_Init+0x30c>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d01f      	beq.n	8010fae <HAL_GPIO_Init+0x216>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a4d      	ldr	r2, [pc, #308]	; (80110a8 <HAL_GPIO_Init+0x310>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d019      	beq.n	8010faa <HAL_GPIO_Init+0x212>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4a4c      	ldr	r2, [pc, #304]	; (80110ac <HAL_GPIO_Init+0x314>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d013      	beq.n	8010fa6 <HAL_GPIO_Init+0x20e>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4a4b      	ldr	r2, [pc, #300]	; (80110b0 <HAL_GPIO_Init+0x318>)
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d00d      	beq.n	8010fa2 <HAL_GPIO_Init+0x20a>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4a4a      	ldr	r2, [pc, #296]	; (80110b4 <HAL_GPIO_Init+0x31c>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d007      	beq.n	8010f9e <HAL_GPIO_Init+0x206>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	4a49      	ldr	r2, [pc, #292]	; (80110b8 <HAL_GPIO_Init+0x320>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d101      	bne.n	8010f9a <HAL_GPIO_Init+0x202>
 8010f96:	2306      	movs	r3, #6
 8010f98:	e00c      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010f9a:	2307      	movs	r3, #7
 8010f9c:	e00a      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010f9e:	2305      	movs	r3, #5
 8010fa0:	e008      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010fa2:	2304      	movs	r3, #4
 8010fa4:	e006      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	e004      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010faa:	2302      	movs	r3, #2
 8010fac:	e002      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e000      	b.n	8010fb4 <HAL_GPIO_Init+0x21c>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	69fa      	ldr	r2, [r7, #28]
 8010fb6:	f002 0203 	and.w	r2, r2, #3
 8010fba:	0092      	lsls	r2, r2, #2
 8010fbc:	4093      	lsls	r3, r2
 8010fbe:	69ba      	ldr	r2, [r7, #24]
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010fc4:	4935      	ldr	r1, [pc, #212]	; (801109c <HAL_GPIO_Init+0x304>)
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	089b      	lsrs	r3, r3, #2
 8010fca:	3302      	adds	r3, #2
 8010fcc:	69ba      	ldr	r2, [r7, #24]
 8010fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010fd2:	4b3a      	ldr	r3, [pc, #232]	; (80110bc <HAL_GPIO_Init+0x324>)
 8010fd4:	689b      	ldr	r3, [r3, #8]
 8010fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	43db      	mvns	r3, r3
 8010fdc:	69ba      	ldr	r2, [r7, #24]
 8010fde:	4013      	ands	r3, r2
 8010fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d003      	beq.n	8010ff6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8010fee:	69ba      	ldr	r2, [r7, #24]
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010ff6:	4a31      	ldr	r2, [pc, #196]	; (80110bc <HAL_GPIO_Init+0x324>)
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010ffc:	4b2f      	ldr	r3, [pc, #188]	; (80110bc <HAL_GPIO_Init+0x324>)
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	43db      	mvns	r3, r3
 8011006:	69ba      	ldr	r2, [r7, #24]
 8011008:	4013      	ands	r3, r2
 801100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011014:	2b00      	cmp	r3, #0
 8011016:	d003      	beq.n	8011020 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8011018:	69ba      	ldr	r2, [r7, #24]
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	4313      	orrs	r3, r2
 801101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011020:	4a26      	ldr	r2, [pc, #152]	; (80110bc <HAL_GPIO_Init+0x324>)
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8011026:	4b25      	ldr	r3, [pc, #148]	; (80110bc <HAL_GPIO_Init+0x324>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	43db      	mvns	r3, r3
 8011030:	69ba      	ldr	r2, [r7, #24]
 8011032:	4013      	ands	r3, r2
 8011034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801103e:	2b00      	cmp	r3, #0
 8011040:	d003      	beq.n	801104a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8011042:	69ba      	ldr	r2, [r7, #24]
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	4313      	orrs	r3, r2
 8011048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801104a:	4a1c      	ldr	r2, [pc, #112]	; (80110bc <HAL_GPIO_Init+0x324>)
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011050:	4b1a      	ldr	r3, [pc, #104]	; (80110bc <HAL_GPIO_Init+0x324>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	43db      	mvns	r3, r3
 801105a:	69ba      	ldr	r2, [r7, #24]
 801105c:	4013      	ands	r3, r2
 801105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	4313      	orrs	r3, r2
 8011072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011074:	4a11      	ldr	r2, [pc, #68]	; (80110bc <HAL_GPIO_Init+0x324>)
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	3301      	adds	r3, #1
 801107e:	61fb      	str	r3, [r7, #28]
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	2b0f      	cmp	r3, #15
 8011084:	f67f ae96 	bls.w	8010db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011088:	bf00      	nop
 801108a:	bf00      	nop
 801108c:	3724      	adds	r7, #36	; 0x24
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	40023800 	.word	0x40023800
 801109c:	40013800 	.word	0x40013800
 80110a0:	40020000 	.word	0x40020000
 80110a4:	40020400 	.word	0x40020400
 80110a8:	40020800 	.word	0x40020800
 80110ac:	40020c00 	.word	0x40020c00
 80110b0:	40021000 	.word	0x40021000
 80110b4:	40021400 	.word	0x40021400
 80110b8:	40021800 	.word	0x40021800
 80110bc:	40013c00 	.word	0x40013c00

080110c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	691a      	ldr	r2, [r3, #16]
 80110d0:	887b      	ldrh	r3, [r7, #2]
 80110d2:	4013      	ands	r3, r2
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80110d8:	2301      	movs	r3, #1
 80110da:	73fb      	strb	r3, [r7, #15]
 80110dc:	e001      	b.n	80110e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80110e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	460b      	mov	r3, r1
 80110fa:	807b      	strh	r3, [r7, #2]
 80110fc:	4613      	mov	r3, r2
 80110fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011100:	787b      	ldrb	r3, [r7, #1]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d003      	beq.n	801110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011106:	887a      	ldrh	r2, [r7, #2]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801110c:	e003      	b.n	8011116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801110e:	887b      	ldrh	r3, [r7, #2]
 8011110:	041a      	lsls	r2, r3, #16
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	619a      	str	r2, [r3, #24]
}
 8011116:	bf00      	nop
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011122:	b480      	push	{r7}
 8011124:	b085      	sub	sp, #20
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011134:	887a      	ldrh	r2, [r7, #2]
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	4013      	ands	r3, r2
 801113a:	041a      	lsls	r2, r3, #16
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	43d9      	mvns	r1, r3
 8011140:	887b      	ldrh	r3, [r7, #2]
 8011142:	400b      	ands	r3, r1
 8011144:	431a      	orrs	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	619a      	str	r2, [r3, #24]
}
 801114a:	bf00      	nop
 801114c:	3714      	adds	r7, #20
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr
	...

08011158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011168:	2301      	movs	r3, #1
 801116a:	e0cc      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801116c:	4b68      	ldr	r3, [pc, #416]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f003 030f 	and.w	r3, r3, #15
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	429a      	cmp	r2, r3
 8011178:	d90c      	bls.n	8011194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801117a:	4b65      	ldr	r3, [pc, #404]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011182:	4b63      	ldr	r3, [pc, #396]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f003 030f 	and.w	r3, r3, #15
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	429a      	cmp	r2, r3
 801118e:	d001      	beq.n	8011194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011190:	2301      	movs	r3, #1
 8011192:	e0b8      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f003 0302 	and.w	r3, r3, #2
 801119c:	2b00      	cmp	r3, #0
 801119e:	d020      	beq.n	80111e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f003 0304 	and.w	r3, r3, #4
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d005      	beq.n	80111b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80111ac:	4b59      	ldr	r3, [pc, #356]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	4a58      	ldr	r2, [pc, #352]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80111b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f003 0308 	and.w	r3, r3, #8
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d005      	beq.n	80111d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80111c4:	4b53      	ldr	r3, [pc, #332]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	4a52      	ldr	r2, [pc, #328]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80111ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80111d0:	4b50      	ldr	r3, [pc, #320]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	494d      	ldr	r1, [pc, #308]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111de:	4313      	orrs	r3, r2
 80111e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d044      	beq.n	8011278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d107      	bne.n	8011206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111f6:	4b47      	ldr	r3, [pc, #284]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d119      	bne.n	8011236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e07f      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	2b02      	cmp	r3, #2
 801120c:	d003      	beq.n	8011216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011212:	2b03      	cmp	r3, #3
 8011214:	d107      	bne.n	8011226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011216:	4b3f      	ldr	r3, [pc, #252]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801121e:	2b00      	cmp	r3, #0
 8011220:	d109      	bne.n	8011236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011222:	2301      	movs	r3, #1
 8011224:	e06f      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011226:	4b3b      	ldr	r3, [pc, #236]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	2b00      	cmp	r3, #0
 8011230:	d101      	bne.n	8011236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011232:	2301      	movs	r3, #1
 8011234:	e067      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011236:	4b37      	ldr	r3, [pc, #220]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	f023 0203 	bic.w	r2, r3, #3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	4934      	ldr	r1, [pc, #208]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 8011244:	4313      	orrs	r3, r2
 8011246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011248:	f7ff fc64 	bl	8010b14 <HAL_GetTick>
 801124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801124e:	e00a      	b.n	8011266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011250:	f7ff fc60 	bl	8010b14 <HAL_GetTick>
 8011254:	4602      	mov	r2, r0
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	f241 3288 	movw	r2, #5000	; 0x1388
 801125e:	4293      	cmp	r3, r2
 8011260:	d901      	bls.n	8011266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011262:	2303      	movs	r3, #3
 8011264:	e04f      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011266:	4b2b      	ldr	r3, [pc, #172]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	f003 020c 	and.w	r2, r3, #12
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	429a      	cmp	r2, r3
 8011276:	d1eb      	bne.n	8011250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011278:	4b25      	ldr	r3, [pc, #148]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f003 030f 	and.w	r3, r3, #15
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	429a      	cmp	r2, r3
 8011284:	d20c      	bcs.n	80112a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011286:	4b22      	ldr	r3, [pc, #136]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	b2d2      	uxtb	r2, r2
 801128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801128e:	4b20      	ldr	r3, [pc, #128]	; (8011310 <HAL_RCC_ClockConfig+0x1b8>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f003 030f 	and.w	r3, r3, #15
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d001      	beq.n	80112a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801129c:	2301      	movs	r3, #1
 801129e:	e032      	b.n	8011306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f003 0304 	and.w	r3, r3, #4
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d008      	beq.n	80112be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80112ac:	4b19      	ldr	r3, [pc, #100]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	4916      	ldr	r1, [pc, #88]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80112ba:	4313      	orrs	r3, r2
 80112bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f003 0308 	and.w	r3, r3, #8
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d009      	beq.n	80112de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80112ca:	4b12      	ldr	r3, [pc, #72]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	490e      	ldr	r1, [pc, #56]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80112da:	4313      	orrs	r3, r2
 80112dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80112de:	f000 f855 	bl	801138c <HAL_RCC_GetSysClockFreq>
 80112e2:	4602      	mov	r2, r0
 80112e4:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <HAL_RCC_ClockConfig+0x1bc>)
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	091b      	lsrs	r3, r3, #4
 80112ea:	f003 030f 	and.w	r3, r3, #15
 80112ee:	490a      	ldr	r1, [pc, #40]	; (8011318 <HAL_RCC_ClockConfig+0x1c0>)
 80112f0:	5ccb      	ldrb	r3, [r1, r3]
 80112f2:	fa22 f303 	lsr.w	r3, r2, r3
 80112f6:	4a09      	ldr	r2, [pc, #36]	; (801131c <HAL_RCC_ClockConfig+0x1c4>)
 80112f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80112fa:	4b09      	ldr	r3, [pc, #36]	; (8011320 <HAL_RCC_ClockConfig+0x1c8>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff fbc4 	bl	8010a8c <HAL_InitTick>

  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	40023c00 	.word	0x40023c00
 8011314:	40023800 	.word	0x40023800
 8011318:	08012b70 	.word	0x08012b70
 801131c:	20000000 	.word	0x20000000
 8011320:	20000004 	.word	0x20000004

08011324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011324:	b480      	push	{r7}
 8011326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011328:	4b03      	ldr	r3, [pc, #12]	; (8011338 <HAL_RCC_GetHCLKFreq+0x14>)
 801132a:	681b      	ldr	r3, [r3, #0]
}
 801132c:	4618      	mov	r0, r3
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	20000000 	.word	0x20000000

0801133c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011340:	f7ff fff0 	bl	8011324 <HAL_RCC_GetHCLKFreq>
 8011344:	4602      	mov	r2, r0
 8011346:	4b05      	ldr	r3, [pc, #20]	; (801135c <HAL_RCC_GetPCLK1Freq+0x20>)
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	0a9b      	lsrs	r3, r3, #10
 801134c:	f003 0307 	and.w	r3, r3, #7
 8011350:	4903      	ldr	r1, [pc, #12]	; (8011360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011352:	5ccb      	ldrb	r3, [r1, r3]
 8011354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011358:	4618      	mov	r0, r3
 801135a:	bd80      	pop	{r7, pc}
 801135c:	40023800 	.word	0x40023800
 8011360:	08012b80 	.word	0x08012b80

08011364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011368:	f7ff ffdc 	bl	8011324 <HAL_RCC_GetHCLKFreq>
 801136c:	4602      	mov	r2, r0
 801136e:	4b05      	ldr	r3, [pc, #20]	; (8011384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	0b5b      	lsrs	r3, r3, #13
 8011374:	f003 0307 	and.w	r3, r3, #7
 8011378:	4903      	ldr	r1, [pc, #12]	; (8011388 <HAL_RCC_GetPCLK2Freq+0x24>)
 801137a:	5ccb      	ldrb	r3, [r1, r3]
 801137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011380:	4618      	mov	r0, r3
 8011382:	bd80      	pop	{r7, pc}
 8011384:	40023800 	.word	0x40023800
 8011388:	08012b80 	.word	0x08012b80

0801138c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801138c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011390:	b0ae      	sub	sp, #184	; 0xb8
 8011392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8011394:	2300      	movs	r3, #0
 8011396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 801139a:	2300      	movs	r3, #0
 801139c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80113a0:	2300      	movs	r3, #0
 80113a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80113a6:	2300      	movs	r3, #0
 80113a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80113ac:	2300      	movs	r3, #0
 80113ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80113b2:	4bcb      	ldr	r3, [pc, #812]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	f003 030c 	and.w	r3, r3, #12
 80113ba:	2b0c      	cmp	r3, #12
 80113bc:	f200 8206 	bhi.w	80117cc <HAL_RCC_GetSysClockFreq+0x440>
 80113c0:	a201      	add	r2, pc, #4	; (adr r2, 80113c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80113c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c6:	bf00      	nop
 80113c8:	080113fd 	.word	0x080113fd
 80113cc:	080117cd 	.word	0x080117cd
 80113d0:	080117cd 	.word	0x080117cd
 80113d4:	080117cd 	.word	0x080117cd
 80113d8:	08011405 	.word	0x08011405
 80113dc:	080117cd 	.word	0x080117cd
 80113e0:	080117cd 	.word	0x080117cd
 80113e4:	080117cd 	.word	0x080117cd
 80113e8:	0801140d 	.word	0x0801140d
 80113ec:	080117cd 	.word	0x080117cd
 80113f0:	080117cd 	.word	0x080117cd
 80113f4:	080117cd 	.word	0x080117cd
 80113f8:	080115fd 	.word	0x080115fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80113fc:	4bb9      	ldr	r3, [pc, #740]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80113fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8011402:	e1e7      	b.n	80117d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011404:	4bb8      	ldr	r3, [pc, #736]	; (80116e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8011406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 801140a:	e1e3      	b.n	80117d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801140c:	4bb4      	ldr	r3, [pc, #720]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011418:	4bb1      	ldr	r3, [pc, #708]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011420:	2b00      	cmp	r3, #0
 8011422:	d071      	beq.n	8011508 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011424:	4bae      	ldr	r3, [pc, #696]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	099b      	lsrs	r3, r3, #6
 801142a:	2200      	movs	r2, #0
 801142c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011430:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8011434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801143c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011440:	2300      	movs	r3, #0
 8011442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801144a:	4622      	mov	r2, r4
 801144c:	462b      	mov	r3, r5
 801144e:	f04f 0000 	mov.w	r0, #0
 8011452:	f04f 0100 	mov.w	r1, #0
 8011456:	0159      	lsls	r1, r3, #5
 8011458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801145c:	0150      	lsls	r0, r2, #5
 801145e:	4602      	mov	r2, r0
 8011460:	460b      	mov	r3, r1
 8011462:	4621      	mov	r1, r4
 8011464:	1a51      	subs	r1, r2, r1
 8011466:	6439      	str	r1, [r7, #64]	; 0x40
 8011468:	4629      	mov	r1, r5
 801146a:	eb63 0301 	sbc.w	r3, r3, r1
 801146e:	647b      	str	r3, [r7, #68]	; 0x44
 8011470:	f04f 0200 	mov.w	r2, #0
 8011474:	f04f 0300 	mov.w	r3, #0
 8011478:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 801147c:	4649      	mov	r1, r9
 801147e:	018b      	lsls	r3, r1, #6
 8011480:	4641      	mov	r1, r8
 8011482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011486:	4641      	mov	r1, r8
 8011488:	018a      	lsls	r2, r1, #6
 801148a:	4641      	mov	r1, r8
 801148c:	1a51      	subs	r1, r2, r1
 801148e:	63b9      	str	r1, [r7, #56]	; 0x38
 8011490:	4649      	mov	r1, r9
 8011492:	eb63 0301 	sbc.w	r3, r3, r1
 8011496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011498:	f04f 0200 	mov.w	r2, #0
 801149c:	f04f 0300 	mov.w	r3, #0
 80114a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80114a4:	4649      	mov	r1, r9
 80114a6:	00cb      	lsls	r3, r1, #3
 80114a8:	4641      	mov	r1, r8
 80114aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80114ae:	4641      	mov	r1, r8
 80114b0:	00ca      	lsls	r2, r1, #3
 80114b2:	4610      	mov	r0, r2
 80114b4:	4619      	mov	r1, r3
 80114b6:	4603      	mov	r3, r0
 80114b8:	4622      	mov	r2, r4
 80114ba:	189b      	adds	r3, r3, r2
 80114bc:	633b      	str	r3, [r7, #48]	; 0x30
 80114be:	462b      	mov	r3, r5
 80114c0:	460a      	mov	r2, r1
 80114c2:	eb42 0303 	adc.w	r3, r2, r3
 80114c6:	637b      	str	r3, [r7, #52]	; 0x34
 80114c8:	f04f 0200 	mov.w	r2, #0
 80114cc:	f04f 0300 	mov.w	r3, #0
 80114d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80114d4:	4629      	mov	r1, r5
 80114d6:	024b      	lsls	r3, r1, #9
 80114d8:	4621      	mov	r1, r4
 80114da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80114de:	4621      	mov	r1, r4
 80114e0:	024a      	lsls	r2, r1, #9
 80114e2:	4610      	mov	r0, r2
 80114e4:	4619      	mov	r1, r3
 80114e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80114ea:	2200      	movs	r2, #0
 80114ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80114f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80114f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80114f8:	f7fe fe8c 	bl	8010214 <__aeabi_uldivmod>
 80114fc:	4602      	mov	r2, r0
 80114fe:	460b      	mov	r3, r1
 8011500:	4613      	mov	r3, r2
 8011502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011506:	e067      	b.n	80115d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011508:	4b75      	ldr	r3, [pc, #468]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	099b      	lsrs	r3, r3, #6
 801150e:	2200      	movs	r2, #0
 8011510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011514:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8011518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801151c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011520:	67bb      	str	r3, [r7, #120]	; 0x78
 8011522:	2300      	movs	r3, #0
 8011524:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801152a:	4622      	mov	r2, r4
 801152c:	462b      	mov	r3, r5
 801152e:	f04f 0000 	mov.w	r0, #0
 8011532:	f04f 0100 	mov.w	r1, #0
 8011536:	0159      	lsls	r1, r3, #5
 8011538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801153c:	0150      	lsls	r0, r2, #5
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4621      	mov	r1, r4
 8011544:	1a51      	subs	r1, r2, r1
 8011546:	62b9      	str	r1, [r7, #40]	; 0x28
 8011548:	4629      	mov	r1, r5
 801154a:	eb63 0301 	sbc.w	r3, r3, r1
 801154e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011550:	f04f 0200 	mov.w	r2, #0
 8011554:	f04f 0300 	mov.w	r3, #0
 8011558:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 801155c:	4649      	mov	r1, r9
 801155e:	018b      	lsls	r3, r1, #6
 8011560:	4641      	mov	r1, r8
 8011562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011566:	4641      	mov	r1, r8
 8011568:	018a      	lsls	r2, r1, #6
 801156a:	4641      	mov	r1, r8
 801156c:	ebb2 0a01 	subs.w	sl, r2, r1
 8011570:	4649      	mov	r1, r9
 8011572:	eb63 0b01 	sbc.w	fp, r3, r1
 8011576:	f04f 0200 	mov.w	r2, #0
 801157a:	f04f 0300 	mov.w	r3, #0
 801157e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801158a:	4692      	mov	sl, r2
 801158c:	469b      	mov	fp, r3
 801158e:	4623      	mov	r3, r4
 8011590:	eb1a 0303 	adds.w	r3, sl, r3
 8011594:	623b      	str	r3, [r7, #32]
 8011596:	462b      	mov	r3, r5
 8011598:	eb4b 0303 	adc.w	r3, fp, r3
 801159c:	627b      	str	r3, [r7, #36]	; 0x24
 801159e:	f04f 0200 	mov.w	r2, #0
 80115a2:	f04f 0300 	mov.w	r3, #0
 80115a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80115aa:	4629      	mov	r1, r5
 80115ac:	028b      	lsls	r3, r1, #10
 80115ae:	4621      	mov	r1, r4
 80115b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80115b4:	4621      	mov	r1, r4
 80115b6:	028a      	lsls	r2, r1, #10
 80115b8:	4610      	mov	r0, r2
 80115ba:	4619      	mov	r1, r3
 80115bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80115c0:	2200      	movs	r2, #0
 80115c2:	673b      	str	r3, [r7, #112]	; 0x70
 80115c4:	677a      	str	r2, [r7, #116]	; 0x74
 80115c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80115ca:	f7fe fe23 	bl	8010214 <__aeabi_uldivmod>
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	4613      	mov	r3, r2
 80115d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80115d8:	4b41      	ldr	r3, [pc, #260]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	0c1b      	lsrs	r3, r3, #16
 80115de:	f003 0303 	and.w	r3, r3, #3
 80115e2:	3301      	adds	r3, #1
 80115e4:	005b      	lsls	r3, r3, #1
 80115e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80115ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80115ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80115f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80115fa:	e0eb      	b.n	80117d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80115fc:	4b38      	ldr	r3, [pc, #224]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011608:	4b35      	ldr	r3, [pc, #212]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011610:	2b00      	cmp	r3, #0
 8011612:	d06b      	beq.n	80116ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011614:	4b32      	ldr	r3, [pc, #200]	; (80116e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	099b      	lsrs	r3, r3, #6
 801161a:	2200      	movs	r2, #0
 801161c:	66bb      	str	r3, [r7, #104]	; 0x68
 801161e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011626:	663b      	str	r3, [r7, #96]	; 0x60
 8011628:	2300      	movs	r3, #0
 801162a:	667b      	str	r3, [r7, #100]	; 0x64
 801162c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011630:	4622      	mov	r2, r4
 8011632:	462b      	mov	r3, r5
 8011634:	f04f 0000 	mov.w	r0, #0
 8011638:	f04f 0100 	mov.w	r1, #0
 801163c:	0159      	lsls	r1, r3, #5
 801163e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011642:	0150      	lsls	r0, r2, #5
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	4621      	mov	r1, r4
 801164a:	1a51      	subs	r1, r2, r1
 801164c:	61b9      	str	r1, [r7, #24]
 801164e:	4629      	mov	r1, r5
 8011650:	eb63 0301 	sbc.w	r3, r3, r1
 8011654:	61fb      	str	r3, [r7, #28]
 8011656:	f04f 0200 	mov.w	r2, #0
 801165a:	f04f 0300 	mov.w	r3, #0
 801165e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8011662:	4659      	mov	r1, fp
 8011664:	018b      	lsls	r3, r1, #6
 8011666:	4651      	mov	r1, sl
 8011668:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801166c:	4651      	mov	r1, sl
 801166e:	018a      	lsls	r2, r1, #6
 8011670:	4651      	mov	r1, sl
 8011672:	ebb2 0801 	subs.w	r8, r2, r1
 8011676:	4659      	mov	r1, fp
 8011678:	eb63 0901 	sbc.w	r9, r3, r1
 801167c:	f04f 0200 	mov.w	r2, #0
 8011680:	f04f 0300 	mov.w	r3, #0
 8011684:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011688:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801168c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011690:	4690      	mov	r8, r2
 8011692:	4699      	mov	r9, r3
 8011694:	4623      	mov	r3, r4
 8011696:	eb18 0303 	adds.w	r3, r8, r3
 801169a:	613b      	str	r3, [r7, #16]
 801169c:	462b      	mov	r3, r5
 801169e:	eb49 0303 	adc.w	r3, r9, r3
 80116a2:	617b      	str	r3, [r7, #20]
 80116a4:	f04f 0200 	mov.w	r2, #0
 80116a8:	f04f 0300 	mov.w	r3, #0
 80116ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80116b0:	4629      	mov	r1, r5
 80116b2:	024b      	lsls	r3, r1, #9
 80116b4:	4621      	mov	r1, r4
 80116b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80116ba:	4621      	mov	r1, r4
 80116bc:	024a      	lsls	r2, r1, #9
 80116be:	4610      	mov	r0, r2
 80116c0:	4619      	mov	r1, r3
 80116c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80116c6:	2200      	movs	r2, #0
 80116c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80116ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80116cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80116d0:	f7fe fda0 	bl	8010214 <__aeabi_uldivmod>
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4613      	mov	r3, r2
 80116da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116de:	e065      	b.n	80117ac <HAL_RCC_GetSysClockFreq+0x420>
 80116e0:	40023800 	.word	0x40023800
 80116e4:	00f42400 	.word	0x00f42400
 80116e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80116ec:	4b3d      	ldr	r3, [pc, #244]	; (80117e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	099b      	lsrs	r3, r3, #6
 80116f2:	2200      	movs	r2, #0
 80116f4:	4618      	mov	r0, r3
 80116f6:	4611      	mov	r1, r2
 80116f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80116fc:	653b      	str	r3, [r7, #80]	; 0x50
 80116fe:	2300      	movs	r3, #0
 8011700:	657b      	str	r3, [r7, #84]	; 0x54
 8011702:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8011706:	4642      	mov	r2, r8
 8011708:	464b      	mov	r3, r9
 801170a:	f04f 0000 	mov.w	r0, #0
 801170e:	f04f 0100 	mov.w	r1, #0
 8011712:	0159      	lsls	r1, r3, #5
 8011714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011718:	0150      	lsls	r0, r2, #5
 801171a:	4602      	mov	r2, r0
 801171c:	460b      	mov	r3, r1
 801171e:	4641      	mov	r1, r8
 8011720:	1a51      	subs	r1, r2, r1
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	4649      	mov	r1, r9
 8011726:	eb63 0301 	sbc.w	r3, r3, r1
 801172a:	60fb      	str	r3, [r7, #12]
 801172c:	f04f 0200 	mov.w	r2, #0
 8011730:	f04f 0300 	mov.w	r3, #0
 8011734:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011738:	4659      	mov	r1, fp
 801173a:	018b      	lsls	r3, r1, #6
 801173c:	4651      	mov	r1, sl
 801173e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011742:	4651      	mov	r1, sl
 8011744:	018a      	lsls	r2, r1, #6
 8011746:	4651      	mov	r1, sl
 8011748:	1a54      	subs	r4, r2, r1
 801174a:	4659      	mov	r1, fp
 801174c:	eb63 0501 	sbc.w	r5, r3, r1
 8011750:	f04f 0200 	mov.w	r2, #0
 8011754:	f04f 0300 	mov.w	r3, #0
 8011758:	00eb      	lsls	r3, r5, #3
 801175a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801175e:	00e2      	lsls	r2, r4, #3
 8011760:	4614      	mov	r4, r2
 8011762:	461d      	mov	r5, r3
 8011764:	4643      	mov	r3, r8
 8011766:	18e3      	adds	r3, r4, r3
 8011768:	603b      	str	r3, [r7, #0]
 801176a:	464b      	mov	r3, r9
 801176c:	eb45 0303 	adc.w	r3, r5, r3
 8011770:	607b      	str	r3, [r7, #4]
 8011772:	f04f 0200 	mov.w	r2, #0
 8011776:	f04f 0300 	mov.w	r3, #0
 801177a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801177e:	4629      	mov	r1, r5
 8011780:	028b      	lsls	r3, r1, #10
 8011782:	4621      	mov	r1, r4
 8011784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011788:	4621      	mov	r1, r4
 801178a:	028a      	lsls	r2, r1, #10
 801178c:	4610      	mov	r0, r2
 801178e:	4619      	mov	r1, r3
 8011790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011794:	2200      	movs	r2, #0
 8011796:	64bb      	str	r3, [r7, #72]	; 0x48
 8011798:	64fa      	str	r2, [r7, #76]	; 0x4c
 801179a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801179e:	f7fe fd39 	bl	8010214 <__aeabi_uldivmod>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4613      	mov	r3, r2
 80117a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80117ac:	4b0d      	ldr	r3, [pc, #52]	; (80117e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	0f1b      	lsrs	r3, r3, #28
 80117b2:	f003 0307 	and.w	r3, r3, #7
 80117b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80117ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80117be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80117c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80117c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80117ca:	e003      	b.n	80117d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80117cc:	4b06      	ldr	r3, [pc, #24]	; (80117e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80117ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80117d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80117d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80117d8:	4618      	mov	r0, r3
 80117da:	37b8      	adds	r7, #184	; 0xb8
 80117dc:	46bd      	mov	sp, r7
 80117de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117e2:	bf00      	nop
 80117e4:	40023800 	.word	0x40023800
 80117e8:	00f42400 	.word	0x00f42400

080117ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b086      	sub	sp, #24
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d101      	bne.n	80117fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80117fa:	2301      	movs	r3, #1
 80117fc:	e28d      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	f000 8083 	beq.w	8011912 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801180c:	4b94      	ldr	r3, [pc, #592]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	f003 030c 	and.w	r3, r3, #12
 8011814:	2b04      	cmp	r3, #4
 8011816:	d019      	beq.n	801184c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8011818:	4b91      	ldr	r3, [pc, #580]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8011820:	2b08      	cmp	r3, #8
 8011822:	d106      	bne.n	8011832 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8011824:	4b8e      	ldr	r3, [pc, #568]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801182c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011830:	d00c      	beq.n	801184c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011832:	4b8b      	ldr	r3, [pc, #556]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801183a:	2b0c      	cmp	r3, #12
 801183c:	d112      	bne.n	8011864 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801183e:	4b88      	ldr	r3, [pc, #544]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801184a:	d10b      	bne.n	8011864 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801184c:	4b84      	ldr	r3, [pc, #528]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011854:	2b00      	cmp	r3, #0
 8011856:	d05b      	beq.n	8011910 <HAL_RCC_OscConfig+0x124>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d157      	bne.n	8011910 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	e25a      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801186c:	d106      	bne.n	801187c <HAL_RCC_OscConfig+0x90>
 801186e:	4b7c      	ldr	r3, [pc, #496]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4a7b      	ldr	r2, [pc, #492]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011878:	6013      	str	r3, [r2, #0]
 801187a:	e01d      	b.n	80118b8 <HAL_RCC_OscConfig+0xcc>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011884:	d10c      	bne.n	80118a0 <HAL_RCC_OscConfig+0xb4>
 8011886:	4b76      	ldr	r3, [pc, #472]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4a75      	ldr	r2, [pc, #468]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011890:	6013      	str	r3, [r2, #0]
 8011892:	4b73      	ldr	r3, [pc, #460]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a72      	ldr	r2, [pc, #456]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801189c:	6013      	str	r3, [r2, #0]
 801189e:	e00b      	b.n	80118b8 <HAL_RCC_OscConfig+0xcc>
 80118a0:	4b6f      	ldr	r3, [pc, #444]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a6e      	ldr	r2, [pc, #440]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80118a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118aa:	6013      	str	r3, [r2, #0]
 80118ac:	4b6c      	ldr	r3, [pc, #432]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4a6b      	ldr	r2, [pc, #428]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80118b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80118b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d013      	beq.n	80118e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118c0:	f7ff f928 	bl	8010b14 <HAL_GetTick>
 80118c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80118c6:	e008      	b.n	80118da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80118c8:	f7ff f924 	bl	8010b14 <HAL_GetTick>
 80118cc:	4602      	mov	r2, r0
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b64      	cmp	r3, #100	; 0x64
 80118d4:	d901      	bls.n	80118da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80118d6:	2303      	movs	r3, #3
 80118d8:	e21f      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80118da:	4b61      	ldr	r3, [pc, #388]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d0f0      	beq.n	80118c8 <HAL_RCC_OscConfig+0xdc>
 80118e6:	e014      	b.n	8011912 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118e8:	f7ff f914 	bl	8010b14 <HAL_GetTick>
 80118ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80118ee:	e008      	b.n	8011902 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80118f0:	f7ff f910 	bl	8010b14 <HAL_GetTick>
 80118f4:	4602      	mov	r2, r0
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	2b64      	cmp	r3, #100	; 0x64
 80118fc:	d901      	bls.n	8011902 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80118fe:	2303      	movs	r3, #3
 8011900:	e20b      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011902:	4b57      	ldr	r3, [pc, #348]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1f0      	bne.n	80118f0 <HAL_RCC_OscConfig+0x104>
 801190e:	e000      	b.n	8011912 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f003 0302 	and.w	r3, r3, #2
 801191a:	2b00      	cmp	r3, #0
 801191c:	d06f      	beq.n	80119fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801191e:	4b50      	ldr	r3, [pc, #320]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	f003 030c 	and.w	r3, r3, #12
 8011926:	2b00      	cmp	r3, #0
 8011928:	d017      	beq.n	801195a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801192a:	4b4d      	ldr	r3, [pc, #308]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8011932:	2b08      	cmp	r3, #8
 8011934:	d105      	bne.n	8011942 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8011936:	4b4a      	ldr	r3, [pc, #296]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00b      	beq.n	801195a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011942:	4b47      	ldr	r3, [pc, #284]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011944:	689b      	ldr	r3, [r3, #8]
 8011946:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801194a:	2b0c      	cmp	r3, #12
 801194c:	d11c      	bne.n	8011988 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801194e:	4b44      	ldr	r3, [pc, #272]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011956:	2b00      	cmp	r3, #0
 8011958:	d116      	bne.n	8011988 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801195a:	4b41      	ldr	r3, [pc, #260]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f003 0302 	and.w	r3, r3, #2
 8011962:	2b00      	cmp	r3, #0
 8011964:	d005      	beq.n	8011972 <HAL_RCC_OscConfig+0x186>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	2b01      	cmp	r3, #1
 801196c:	d001      	beq.n	8011972 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801196e:	2301      	movs	r3, #1
 8011970:	e1d3      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011972:	4b3b      	ldr	r3, [pc, #236]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	691b      	ldr	r3, [r3, #16]
 801197e:	00db      	lsls	r3, r3, #3
 8011980:	4937      	ldr	r1, [pc, #220]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011982:	4313      	orrs	r3, r2
 8011984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011986:	e03a      	b.n	80119fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d020      	beq.n	80119d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011990:	4b34      	ldr	r3, [pc, #208]	; (8011a64 <HAL_RCC_OscConfig+0x278>)
 8011992:	2201      	movs	r2, #1
 8011994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011996:	f7ff f8bd 	bl	8010b14 <HAL_GetTick>
 801199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801199c:	e008      	b.n	80119b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801199e:	f7ff f8b9 	bl	8010b14 <HAL_GetTick>
 80119a2:	4602      	mov	r2, r0
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d901      	bls.n	80119b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80119ac:	2303      	movs	r3, #3
 80119ae:	e1b4      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80119b0:	4b2b      	ldr	r3, [pc, #172]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f003 0302 	and.w	r3, r3, #2
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d0f0      	beq.n	801199e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119bc:	4b28      	ldr	r3, [pc, #160]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	00db      	lsls	r3, r3, #3
 80119ca:	4925      	ldr	r1, [pc, #148]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80119cc:	4313      	orrs	r3, r2
 80119ce:	600b      	str	r3, [r1, #0]
 80119d0:	e015      	b.n	80119fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80119d2:	4b24      	ldr	r3, [pc, #144]	; (8011a64 <HAL_RCC_OscConfig+0x278>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119d8:	f7ff f89c 	bl	8010b14 <HAL_GetTick>
 80119dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80119de:	e008      	b.n	80119f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80119e0:	f7ff f898 	bl	8010b14 <HAL_GetTick>
 80119e4:	4602      	mov	r2, r0
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d901      	bls.n	80119f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80119ee:	2303      	movs	r3, #3
 80119f0:	e193      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80119f2:	4b1b      	ldr	r3, [pc, #108]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f003 0302 	and.w	r3, r3, #2
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1f0      	bne.n	80119e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f003 0308 	and.w	r3, r3, #8
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d036      	beq.n	8011a78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	695b      	ldr	r3, [r3, #20]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d016      	beq.n	8011a40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011a12:	4b15      	ldr	r3, [pc, #84]	; (8011a68 <HAL_RCC_OscConfig+0x27c>)
 8011a14:	2201      	movs	r2, #1
 8011a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a18:	f7ff f87c 	bl	8010b14 <HAL_GetTick>
 8011a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011a1e:	e008      	b.n	8011a32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a20:	f7ff f878 	bl	8010b14 <HAL_GetTick>
 8011a24:	4602      	mov	r2, r0
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	1ad3      	subs	r3, r2, r3
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d901      	bls.n	8011a32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8011a2e:	2303      	movs	r3, #3
 8011a30:	e173      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011a32:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <HAL_RCC_OscConfig+0x274>)
 8011a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a36:	f003 0302 	and.w	r3, r3, #2
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d0f0      	beq.n	8011a20 <HAL_RCC_OscConfig+0x234>
 8011a3e:	e01b      	b.n	8011a78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011a40:	4b09      	ldr	r3, [pc, #36]	; (8011a68 <HAL_RCC_OscConfig+0x27c>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a46:	f7ff f865 	bl	8010b14 <HAL_GetTick>
 8011a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011a4c:	e00e      	b.n	8011a6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a4e:	f7ff f861 	bl	8010b14 <HAL_GetTick>
 8011a52:	4602      	mov	r2, r0
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	1ad3      	subs	r3, r2, r3
 8011a58:	2b02      	cmp	r3, #2
 8011a5a:	d907      	bls.n	8011a6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8011a5c:	2303      	movs	r3, #3
 8011a5e:	e15c      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
 8011a60:	40023800 	.word	0x40023800
 8011a64:	42470000 	.word	0x42470000
 8011a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011a6c:	4b8a      	ldr	r3, [pc, #552]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a70:	f003 0302 	and.w	r3, r3, #2
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1ea      	bne.n	8011a4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f003 0304 	and.w	r3, r3, #4
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 8097 	beq.w	8011bb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a86:	2300      	movs	r3, #0
 8011a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011a8a:	4b83      	ldr	r3, [pc, #524]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d10f      	bne.n	8011ab6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a96:	2300      	movs	r3, #0
 8011a98:	60bb      	str	r3, [r7, #8]
 8011a9a:	4b7f      	ldr	r3, [pc, #508]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a9e:	4a7e      	ldr	r2, [pc, #504]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8011aa6:	4b7c      	ldr	r3, [pc, #496]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011aae:	60bb      	str	r3, [r7, #8]
 8011ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ab6:	4b79      	ldr	r3, [pc, #484]	; (8011c9c <HAL_RCC_OscConfig+0x4b0>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d118      	bne.n	8011af4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ac2:	4b76      	ldr	r3, [pc, #472]	; (8011c9c <HAL_RCC_OscConfig+0x4b0>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4a75      	ldr	r2, [pc, #468]	; (8011c9c <HAL_RCC_OscConfig+0x4b0>)
 8011ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011ace:	f7ff f821 	bl	8010b14 <HAL_GetTick>
 8011ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ad4:	e008      	b.n	8011ae8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011ad6:	f7ff f81d 	bl	8010b14 <HAL_GetTick>
 8011ada:	4602      	mov	r2, r0
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d901      	bls.n	8011ae8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	e118      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ae8:	4b6c      	ldr	r3, [pc, #432]	; (8011c9c <HAL_RCC_OscConfig+0x4b0>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d0f0      	beq.n	8011ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d106      	bne.n	8011b0a <HAL_RCC_OscConfig+0x31e>
 8011afc:	4b66      	ldr	r3, [pc, #408]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b00:	4a65      	ldr	r2, [pc, #404]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b02:	f043 0301 	orr.w	r3, r3, #1
 8011b06:	6713      	str	r3, [r2, #112]	; 0x70
 8011b08:	e01c      	b.n	8011b44 <HAL_RCC_OscConfig+0x358>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	2b05      	cmp	r3, #5
 8011b10:	d10c      	bne.n	8011b2c <HAL_RCC_OscConfig+0x340>
 8011b12:	4b61      	ldr	r3, [pc, #388]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b16:	4a60      	ldr	r2, [pc, #384]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b18:	f043 0304 	orr.w	r3, r3, #4
 8011b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b1e:	4b5e      	ldr	r3, [pc, #376]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b22:	4a5d      	ldr	r2, [pc, #372]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b24:	f043 0301 	orr.w	r3, r3, #1
 8011b28:	6713      	str	r3, [r2, #112]	; 0x70
 8011b2a:	e00b      	b.n	8011b44 <HAL_RCC_OscConfig+0x358>
 8011b2c:	4b5a      	ldr	r3, [pc, #360]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b30:	4a59      	ldr	r2, [pc, #356]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b32:	f023 0301 	bic.w	r3, r3, #1
 8011b36:	6713      	str	r3, [r2, #112]	; 0x70
 8011b38:	4b57      	ldr	r3, [pc, #348]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b3c:	4a56      	ldr	r2, [pc, #344]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b3e:	f023 0304 	bic.w	r3, r3, #4
 8011b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d015      	beq.n	8011b78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b4c:	f7fe ffe2 	bl	8010b14 <HAL_GetTick>
 8011b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011b52:	e00a      	b.n	8011b6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b54:	f7fe ffde 	bl	8010b14 <HAL_GetTick>
 8011b58:	4602      	mov	r2, r0
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b62:	4293      	cmp	r3, r2
 8011b64:	d901      	bls.n	8011b6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8011b66:	2303      	movs	r3, #3
 8011b68:	e0d7      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011b6a:	4b4b      	ldr	r3, [pc, #300]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b6e:	f003 0302 	and.w	r3, r3, #2
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d0ee      	beq.n	8011b54 <HAL_RCC_OscConfig+0x368>
 8011b76:	e014      	b.n	8011ba2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b78:	f7fe ffcc 	bl	8010b14 <HAL_GetTick>
 8011b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b7e:	e00a      	b.n	8011b96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b80:	f7fe ffc8 	bl	8010b14 <HAL_GetTick>
 8011b84:	4602      	mov	r2, r0
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d901      	bls.n	8011b96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8011b92:	2303      	movs	r3, #3
 8011b94:	e0c1      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b96:	4b40      	ldr	r3, [pc, #256]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b9a:	f003 0302 	and.w	r3, r3, #2
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d1ee      	bne.n	8011b80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011ba2:	7dfb      	ldrb	r3, [r7, #23]
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d105      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ba8:	4b3b      	ldr	r3, [pc, #236]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bac:	4a3a      	ldr	r2, [pc, #232]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f000 80ad 	beq.w	8011d18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011bbe:	4b36      	ldr	r3, [pc, #216]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011bc0:	689b      	ldr	r3, [r3, #8]
 8011bc2:	f003 030c 	and.w	r3, r3, #12
 8011bc6:	2b08      	cmp	r3, #8
 8011bc8:	d060      	beq.n	8011c8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d145      	bne.n	8011c5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011bd2:	4b33      	ldr	r3, [pc, #204]	; (8011ca0 <HAL_RCC_OscConfig+0x4b4>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bd8:	f7fe ff9c 	bl	8010b14 <HAL_GetTick>
 8011bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011bde:	e008      	b.n	8011bf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011be0:	f7fe ff98 	bl	8010b14 <HAL_GetTick>
 8011be4:	4602      	mov	r2, r0
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	1ad3      	subs	r3, r2, r3
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d901      	bls.n	8011bf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8011bee:	2303      	movs	r3, #3
 8011bf0:	e093      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011bf2:	4b29      	ldr	r3, [pc, #164]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1f0      	bne.n	8011be0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	69da      	ldr	r2, [r3, #28]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	431a      	orrs	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c0c:	019b      	lsls	r3, r3, #6
 8011c0e:	431a      	orrs	r2, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c14:	085b      	lsrs	r3, r3, #1
 8011c16:	3b01      	subs	r3, #1
 8011c18:	041b      	lsls	r3, r3, #16
 8011c1a:	431a      	orrs	r2, r3
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c20:	061b      	lsls	r3, r3, #24
 8011c22:	431a      	orrs	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c28:	071b      	lsls	r3, r3, #28
 8011c2a:	491b      	ldr	r1, [pc, #108]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011c2c:	4313      	orrs	r3, r2
 8011c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011c30:	4b1b      	ldr	r3, [pc, #108]	; (8011ca0 <HAL_RCC_OscConfig+0x4b4>)
 8011c32:	2201      	movs	r2, #1
 8011c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c36:	f7fe ff6d 	bl	8010b14 <HAL_GetTick>
 8011c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c3c:	e008      	b.n	8011c50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c3e:	f7fe ff69 	bl	8010b14 <HAL_GetTick>
 8011c42:	4602      	mov	r2, r0
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	2b02      	cmp	r3, #2
 8011c4a:	d901      	bls.n	8011c50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	e064      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c50:	4b11      	ldr	r3, [pc, #68]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d0f0      	beq.n	8011c3e <HAL_RCC_OscConfig+0x452>
 8011c5c:	e05c      	b.n	8011d18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011c5e:	4b10      	ldr	r3, [pc, #64]	; (8011ca0 <HAL_RCC_OscConfig+0x4b4>)
 8011c60:	2200      	movs	r2, #0
 8011c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c64:	f7fe ff56 	bl	8010b14 <HAL_GetTick>
 8011c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011c6a:	e008      	b.n	8011c7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c6c:	f7fe ff52 	bl	8010b14 <HAL_GetTick>
 8011c70:	4602      	mov	r2, r0
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d901      	bls.n	8011c7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	e04d      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011c7e:	4b06      	ldr	r3, [pc, #24]	; (8011c98 <HAL_RCC_OscConfig+0x4ac>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1f0      	bne.n	8011c6c <HAL_RCC_OscConfig+0x480>
 8011c8a:	e045      	b.n	8011d18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	699b      	ldr	r3, [r3, #24]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d107      	bne.n	8011ca4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8011c94:	2301      	movs	r3, #1
 8011c96:	e040      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
 8011c98:	40023800 	.word	0x40023800
 8011c9c:	40007000 	.word	0x40007000
 8011ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011ca4:	4b1f      	ldr	r3, [pc, #124]	; (8011d24 <HAL_RCC_OscConfig+0x538>)
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	699b      	ldr	r3, [r3, #24]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d030      	beq.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d129      	bne.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d122      	bne.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011cd4:	4013      	ands	r3, r2
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d119      	bne.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cea:	085b      	lsrs	r3, r3, #1
 8011cec:	3b01      	subs	r3, #1
 8011cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d10f      	bne.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d107      	bne.n	8011d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d001      	beq.n	8011d18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8011d14:	2301      	movs	r3, #1
 8011d16:	e000      	b.n	8011d1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8011d18:	2300      	movs	r3, #0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3718      	adds	r7, #24
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	40023800 	.word	0x40023800

08011d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d101      	bne.n	8011d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011d36:	2301      	movs	r3, #1
 8011d38:	e041      	b.n	8011dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d106      	bne.n	8011d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7fe fdb6 	bl	80108c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2202      	movs	r2, #2
 8011d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	3304      	adds	r3, #4
 8011d64:	4619      	mov	r1, r3
 8011d66:	4610      	mov	r0, r2
 8011d68:	f000 f9ce 	bl	8012108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2201      	movs	r2, #1
 8011d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2201      	movs	r2, #1
 8011d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2201      	movs	r2, #1
 8011db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2201      	movs	r2, #1
 8011db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d001      	beq.n	8011de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e04e      	b.n	8011e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2202      	movs	r2, #2
 8011de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68da      	ldr	r2, [r3, #12]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f042 0201 	orr.w	r2, r2, #1
 8011df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a23      	ldr	r2, [pc, #140]	; (8011e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d022      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e0a:	d01d      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a1f      	ldr	r2, [pc, #124]	; (8011e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d018      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a1e      	ldr	r2, [pc, #120]	; (8011e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d013      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a1c      	ldr	r2, [pc, #112]	; (8011e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d00e      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4a1b      	ldr	r2, [pc, #108]	; (8011e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d009      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4a19      	ldr	r2, [pc, #100]	; (8011ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d004      	beq.n	8011e48 <HAL_TIM_Base_Start_IT+0x80>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4a18      	ldr	r2, [pc, #96]	; (8011ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d111      	bne.n	8011e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	f003 0307 	and.w	r3, r3, #7
 8011e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b06      	cmp	r3, #6
 8011e58:	d010      	beq.n	8011e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f042 0201 	orr.w	r2, r2, #1
 8011e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e6a:	e007      	b.n	8011e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f042 0201 	orr.w	r2, r2, #1
 8011e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3714      	adds	r7, #20
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	40010000 	.word	0x40010000
 8011e90:	40000400 	.word	0x40000400
 8011e94:	40000800 	.word	0x40000800
 8011e98:	40000c00 	.word	0x40000c00
 8011e9c:	40010400 	.word	0x40010400
 8011ea0:	40014000 	.word	0x40014000
 8011ea4:	40001800 	.word	0x40001800

08011ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	691b      	ldr	r3, [r3, #16]
 8011eb6:	f003 0302 	and.w	r3, r3, #2
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d122      	bne.n	8011f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	f003 0302 	and.w	r3, r3, #2
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	d11b      	bne.n	8011f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f06f 0202 	mvn.w	r2, #2
 8011ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	699b      	ldr	r3, [r3, #24]
 8011ee2:	f003 0303 	and.w	r3, r3, #3
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d003      	beq.n	8011ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 f8ee 	bl	80120cc <HAL_TIM_IC_CaptureCallback>
 8011ef0:	e005      	b.n	8011efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f000 f8e0 	bl	80120b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f000 f8f1 	bl	80120e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	691b      	ldr	r3, [r3, #16]
 8011f0a:	f003 0304 	and.w	r3, r3, #4
 8011f0e:	2b04      	cmp	r3, #4
 8011f10:	d122      	bne.n	8011f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	f003 0304 	and.w	r3, r3, #4
 8011f1c:	2b04      	cmp	r3, #4
 8011f1e:	d11b      	bne.n	8011f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f06f 0204 	mvn.w	r2, #4
 8011f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2202      	movs	r2, #2
 8011f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	699b      	ldr	r3, [r3, #24]
 8011f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d003      	beq.n	8011f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f8c4 	bl	80120cc <HAL_TIM_IC_CaptureCallback>
 8011f44:	e005      	b.n	8011f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 f8b6 	bl	80120b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 f8c7 	bl	80120e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	f003 0308 	and.w	r3, r3, #8
 8011f62:	2b08      	cmp	r3, #8
 8011f64:	d122      	bne.n	8011fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	f003 0308 	and.w	r3, r3, #8
 8011f70:	2b08      	cmp	r3, #8
 8011f72:	d11b      	bne.n	8011fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f06f 0208 	mvn.w	r2, #8
 8011f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2204      	movs	r2, #4
 8011f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	69db      	ldr	r3, [r3, #28]
 8011f8a:	f003 0303 	and.w	r3, r3, #3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d003      	beq.n	8011f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f89a 	bl	80120cc <HAL_TIM_IC_CaptureCallback>
 8011f98:	e005      	b.n	8011fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 f88c 	bl	80120b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f000 f89d 	bl	80120e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	691b      	ldr	r3, [r3, #16]
 8011fb2:	f003 0310 	and.w	r3, r3, #16
 8011fb6:	2b10      	cmp	r3, #16
 8011fb8:	d122      	bne.n	8012000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	f003 0310 	and.w	r3, r3, #16
 8011fc4:	2b10      	cmp	r3, #16
 8011fc6:	d11b      	bne.n	8012000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	f06f 0210 	mvn.w	r2, #16
 8011fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2208      	movs	r2, #8
 8011fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	69db      	ldr	r3, [r3, #28]
 8011fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d003      	beq.n	8011fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 f870 	bl	80120cc <HAL_TIM_IC_CaptureCallback>
 8011fec:	e005      	b.n	8011ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 f862 	bl	80120b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f000 f873 	bl	80120e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	691b      	ldr	r3, [r3, #16]
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b01      	cmp	r3, #1
 801200c:	d10e      	bne.n	801202c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	f003 0301 	and.w	r3, r3, #1
 8012018:	2b01      	cmp	r3, #1
 801201a:	d107      	bne.n	801202c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f06f 0201 	mvn.w	r2, #1
 8012024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7fe fb7c 	bl	8010724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	691b      	ldr	r3, [r3, #16]
 8012032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012036:	2b80      	cmp	r3, #128	; 0x80
 8012038:	d10e      	bne.n	8012058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012044:	2b80      	cmp	r3, #128	; 0x80
 8012046:	d107      	bne.n	8012058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f000 f97e 	bl	8012354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012062:	2b40      	cmp	r3, #64	; 0x40
 8012064:	d10e      	bne.n	8012084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012070:	2b40      	cmp	r3, #64	; 0x40
 8012072:	d107      	bne.n	8012084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 f838 	bl	80120f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	f003 0320 	and.w	r3, r3, #32
 801208e:	2b20      	cmp	r3, #32
 8012090:	d10e      	bne.n	80120b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	f003 0320 	and.w	r3, r3, #32
 801209c:	2b20      	cmp	r3, #32
 801209e:	d107      	bne.n	80120b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f06f 0220 	mvn.w	r2, #32
 80120a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 f948 	bl	8012340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80120b0:	bf00      	nop
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012108:	b480      	push	{r7}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	4a40      	ldr	r2, [pc, #256]	; (801221c <TIM_Base_SetConfig+0x114>)
 801211c:	4293      	cmp	r3, r2
 801211e:	d013      	beq.n	8012148 <TIM_Base_SetConfig+0x40>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012126:	d00f      	beq.n	8012148 <TIM_Base_SetConfig+0x40>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	4a3d      	ldr	r2, [pc, #244]	; (8012220 <TIM_Base_SetConfig+0x118>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d00b      	beq.n	8012148 <TIM_Base_SetConfig+0x40>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	4a3c      	ldr	r2, [pc, #240]	; (8012224 <TIM_Base_SetConfig+0x11c>)
 8012134:	4293      	cmp	r3, r2
 8012136:	d007      	beq.n	8012148 <TIM_Base_SetConfig+0x40>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4a3b      	ldr	r2, [pc, #236]	; (8012228 <TIM_Base_SetConfig+0x120>)
 801213c:	4293      	cmp	r3, r2
 801213e:	d003      	beq.n	8012148 <TIM_Base_SetConfig+0x40>
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	4a3a      	ldr	r2, [pc, #232]	; (801222c <TIM_Base_SetConfig+0x124>)
 8012144:	4293      	cmp	r3, r2
 8012146:	d108      	bne.n	801215a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801214e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	4313      	orrs	r3, r2
 8012158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	4a2f      	ldr	r2, [pc, #188]	; (801221c <TIM_Base_SetConfig+0x114>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d02b      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012168:	d027      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	4a2c      	ldr	r2, [pc, #176]	; (8012220 <TIM_Base_SetConfig+0x118>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d023      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	4a2b      	ldr	r2, [pc, #172]	; (8012224 <TIM_Base_SetConfig+0x11c>)
 8012176:	4293      	cmp	r3, r2
 8012178:	d01f      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4a2a      	ldr	r2, [pc, #168]	; (8012228 <TIM_Base_SetConfig+0x120>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d01b      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	4a29      	ldr	r2, [pc, #164]	; (801222c <TIM_Base_SetConfig+0x124>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d017      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4a28      	ldr	r2, [pc, #160]	; (8012230 <TIM_Base_SetConfig+0x128>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d013      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4a27      	ldr	r2, [pc, #156]	; (8012234 <TIM_Base_SetConfig+0x12c>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d00f      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4a26      	ldr	r2, [pc, #152]	; (8012238 <TIM_Base_SetConfig+0x130>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d00b      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	4a25      	ldr	r2, [pc, #148]	; (801223c <TIM_Base_SetConfig+0x134>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d007      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4a24      	ldr	r2, [pc, #144]	; (8012240 <TIM_Base_SetConfig+0x138>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d003      	beq.n	80121ba <TIM_Base_SetConfig+0xb2>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4a23      	ldr	r2, [pc, #140]	; (8012244 <TIM_Base_SetConfig+0x13c>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d108      	bne.n	80121cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	4313      	orrs	r3, r2
 80121ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	695b      	ldr	r3, [r3, #20]
 80121d6:	4313      	orrs	r3, r2
 80121d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	68fa      	ldr	r2, [r7, #12]
 80121de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	689a      	ldr	r2, [r3, #8]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	4a0a      	ldr	r2, [pc, #40]	; (801221c <TIM_Base_SetConfig+0x114>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d003      	beq.n	8012200 <TIM_Base_SetConfig+0xf8>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	4a0c      	ldr	r2, [pc, #48]	; (801222c <TIM_Base_SetConfig+0x124>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d103      	bne.n	8012208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	691a      	ldr	r2, [r3, #16]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2201      	movs	r2, #1
 801220c:	615a      	str	r2, [r3, #20]
}
 801220e:	bf00      	nop
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	40010000 	.word	0x40010000
 8012220:	40000400 	.word	0x40000400
 8012224:	40000800 	.word	0x40000800
 8012228:	40000c00 	.word	0x40000c00
 801222c:	40010400 	.word	0x40010400
 8012230:	40014000 	.word	0x40014000
 8012234:	40014400 	.word	0x40014400
 8012238:	40014800 	.word	0x40014800
 801223c:	40001800 	.word	0x40001800
 8012240:	40001c00 	.word	0x40001c00
 8012244:	40002000 	.word	0x40002000

08012248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012248:	b480      	push	{r7}
 801224a:	b085      	sub	sp, #20
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012258:	2b01      	cmp	r3, #1
 801225a:	d101      	bne.n	8012260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801225c:	2302      	movs	r3, #2
 801225e:	e05a      	b.n	8012316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2201      	movs	r2, #1
 8012264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2202      	movs	r2, #2
 801226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	689b      	ldr	r3, [r3, #8]
 801227e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	4313      	orrs	r3, r2
 8012290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4a21      	ldr	r2, [pc, #132]	; (8012324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d022      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122ac:	d01d      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4a1d      	ldr	r2, [pc, #116]	; (8012328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d018      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4a1b      	ldr	r2, [pc, #108]	; (801232c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d013      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4a1a      	ldr	r2, [pc, #104]	; (8012330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d00e      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a18      	ldr	r2, [pc, #96]	; (8012334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d009      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a17      	ldr	r2, [pc, #92]	; (8012338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d004      	beq.n	80122ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4a15      	ldr	r2, [pc, #84]	; (801233c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d10c      	bne.n	8012304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	4313      	orrs	r3, r2
 80122fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	68ba      	ldr	r2, [r7, #8]
 8012302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2201      	movs	r2, #1
 8012308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3714      	adds	r7, #20
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr
 8012322:	bf00      	nop
 8012324:	40010000 	.word	0x40010000
 8012328:	40000400 	.word	0x40000400
 801232c:	40000800 	.word	0x40000800
 8012330:	40000c00 	.word	0x40000c00
 8012334:	40010400 	.word	0x40010400
 8012338:	40014000 	.word	0x40014000
 801233c:	40001800 	.word	0x40001800

08012340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012348:	bf00      	nop
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012376:	2301      	movs	r3, #1
 8012378:	e03f      	b.n	80123fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012380:	b2db      	uxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	d106      	bne.n	8012394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2200      	movs	r2, #0
 801238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7fe fae8 	bl	8010964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2224      	movs	r2, #36	; 0x24
 8012398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	68da      	ldr	r2, [r3, #12]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80123aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f000 f929 	bl	8012604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	691a      	ldr	r2, [r3, #16]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80123c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	695a      	ldr	r2, [r3, #20]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80123d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	68da      	ldr	r2, [r3, #12]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80123e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2220      	movs	r2, #32
 80123ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2220      	movs	r2, #32
 80123f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b08a      	sub	sp, #40	; 0x28
 8012406:	af02      	add	r7, sp, #8
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	603b      	str	r3, [r7, #0]
 801240e:	4613      	mov	r3, r2
 8012410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012412:	2300      	movs	r3, #0
 8012414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b20      	cmp	r3, #32
 8012420:	d17c      	bne.n	801251c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d002      	beq.n	801242e <HAL_UART_Transmit+0x2c>
 8012428:	88fb      	ldrh	r3, [r7, #6]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	e075      	b.n	801251e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012438:	2b01      	cmp	r3, #1
 801243a:	d101      	bne.n	8012440 <HAL_UART_Transmit+0x3e>
 801243c:	2302      	movs	r3, #2
 801243e:	e06e      	b.n	801251e <HAL_UART_Transmit+0x11c>
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2201      	movs	r2, #1
 8012444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2200      	movs	r2, #0
 801244c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2221      	movs	r2, #33	; 0x21
 8012452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012456:	f7fe fb5d 	bl	8010b14 <HAL_GetTick>
 801245a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	88fa      	ldrh	r2, [r7, #6]
 8012460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	88fa      	ldrh	r2, [r7, #6]
 8012466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	689b      	ldr	r3, [r3, #8]
 801246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012470:	d108      	bne.n	8012484 <HAL_UART_Transmit+0x82>
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	691b      	ldr	r3, [r3, #16]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d104      	bne.n	8012484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801247a:	2300      	movs	r3, #0
 801247c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	61bb      	str	r3, [r7, #24]
 8012482:	e003      	b.n	801248c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8012494:	e02a      	b.n	80124ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	2200      	movs	r2, #0
 801249e:	2180      	movs	r1, #128	; 0x80
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f000 f840 	bl	8012526 <UART_WaitOnFlagUntilTimeout>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80124ac:	2303      	movs	r3, #3
 80124ae:	e036      	b.n	801251e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d10b      	bne.n	80124ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80124c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	3302      	adds	r3, #2
 80124ca:	61bb      	str	r3, [r7, #24]
 80124cc:	e007      	b.n	80124de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	781a      	ldrb	r2, [r3, #0]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	3301      	adds	r3, #1
 80124dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	3b01      	subs	r3, #1
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1cf      	bne.n	8012496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2200      	movs	r2, #0
 80124fe:	2140      	movs	r1, #64	; 0x40
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f000 f810 	bl	8012526 <UART_WaitOnFlagUntilTimeout>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d001      	beq.n	8012510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801250c:	2303      	movs	r3, #3
 801250e:	e006      	b.n	801251e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2220      	movs	r2, #32
 8012514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	e000      	b.n	801251e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801251c:	2302      	movs	r3, #2
  }
}
 801251e:	4618      	mov	r0, r3
 8012520:	3720      	adds	r7, #32
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012526:	b580      	push	{r7, lr}
 8012528:	b090      	sub	sp, #64	; 0x40
 801252a:	af00      	add	r7, sp, #0
 801252c:	60f8      	str	r0, [r7, #12]
 801252e:	60b9      	str	r1, [r7, #8]
 8012530:	603b      	str	r3, [r7, #0]
 8012532:	4613      	mov	r3, r2
 8012534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012536:	e050      	b.n	80125da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801253a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801253e:	d04c      	beq.n	80125da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012542:	2b00      	cmp	r3, #0
 8012544:	d007      	beq.n	8012556 <UART_WaitOnFlagUntilTimeout+0x30>
 8012546:	f7fe fae5 	bl	8010b14 <HAL_GetTick>
 801254a:	4602      	mov	r2, r0
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012552:	429a      	cmp	r2, r3
 8012554:	d241      	bcs.n	80125da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	330c      	adds	r3, #12
 801255c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012560:	e853 3f00 	ldrex	r3, [r3]
 8012564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801256c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	330c      	adds	r3, #12
 8012574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012576:	637a      	str	r2, [r7, #52]	; 0x34
 8012578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801257a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801257c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801257e:	e841 2300 	strex	r3, r2, [r1]
 8012582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1e5      	bne.n	8012556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	3314      	adds	r3, #20
 8012590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	e853 3f00 	ldrex	r3, [r3]
 8012598:	613b      	str	r3, [r7, #16]
   return(result);
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	f023 0301 	bic.w	r3, r3, #1
 80125a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	3314      	adds	r3, #20
 80125a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125aa:	623a      	str	r2, [r7, #32]
 80125ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ae:	69f9      	ldr	r1, [r7, #28]
 80125b0:	6a3a      	ldr	r2, [r7, #32]
 80125b2:	e841 2300 	strex	r3, r2, [r1]
 80125b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1e5      	bne.n	801258a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2220      	movs	r2, #32
 80125c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2220      	movs	r2, #32
 80125ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2200      	movs	r2, #0
 80125d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80125d6:	2303      	movs	r3, #3
 80125d8:	e00f      	b.n	80125fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	4013      	ands	r3, r2
 80125e4:	68ba      	ldr	r2, [r7, #8]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	bf0c      	ite	eq
 80125ea:	2301      	moveq	r3, #1
 80125ec:	2300      	movne	r3, #0
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	461a      	mov	r2, r3
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d09f      	beq.n	8012538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3740      	adds	r7, #64	; 0x40
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
	...

08012604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012608:	b0c0      	sub	sp, #256	; 0x100
 801260a:	af00      	add	r7, sp, #0
 801260c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012620:	68d9      	ldr	r1, [r3, #12]
 8012622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	ea40 0301 	orr.w	r3, r0, r1
 801262c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012632:	689a      	ldr	r2, [r3, #8]
 8012634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012638:	691b      	ldr	r3, [r3, #16]
 801263a:	431a      	orrs	r2, r3
 801263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012640:	695b      	ldr	r3, [r3, #20]
 8012642:	431a      	orrs	r2, r3
 8012644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012648:	69db      	ldr	r3, [r3, #28]
 801264a:	4313      	orrs	r3, r2
 801264c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801265c:	f021 010c 	bic.w	r1, r1, #12
 8012660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801266a:	430b      	orrs	r3, r1
 801266c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	695b      	ldr	r3, [r3, #20]
 8012676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801267e:	6999      	ldr	r1, [r3, #24]
 8012680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	ea40 0301 	orr.w	r3, r0, r1
 801268a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	4b8f      	ldr	r3, [pc, #572]	; (80128d0 <UART_SetConfig+0x2cc>)
 8012694:	429a      	cmp	r2, r3
 8012696:	d005      	beq.n	80126a4 <UART_SetConfig+0xa0>
 8012698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	4b8d      	ldr	r3, [pc, #564]	; (80128d4 <UART_SetConfig+0x2d0>)
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d104      	bne.n	80126ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80126a4:	f7fe fe5e 	bl	8011364 <HAL_RCC_GetPCLK2Freq>
 80126a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80126ac:	e003      	b.n	80126b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80126ae:	f7fe fe45 	bl	801133c <HAL_RCC_GetPCLK1Freq>
 80126b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80126ba:	69db      	ldr	r3, [r3, #28]
 80126bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126c0:	f040 810c 	bne.w	80128dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80126c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80126c8:	2200      	movs	r2, #0
 80126ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80126ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80126d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80126d6:	4622      	mov	r2, r4
 80126d8:	462b      	mov	r3, r5
 80126da:	1891      	adds	r1, r2, r2
 80126dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80126de:	415b      	adcs	r3, r3
 80126e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80126e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80126e6:	4621      	mov	r1, r4
 80126e8:	eb12 0801 	adds.w	r8, r2, r1
 80126ec:	4629      	mov	r1, r5
 80126ee:	eb43 0901 	adc.w	r9, r3, r1
 80126f2:	f04f 0200 	mov.w	r2, #0
 80126f6:	f04f 0300 	mov.w	r3, #0
 80126fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80126fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012706:	4690      	mov	r8, r2
 8012708:	4699      	mov	r9, r3
 801270a:	4623      	mov	r3, r4
 801270c:	eb18 0303 	adds.w	r3, r8, r3
 8012710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012714:	462b      	mov	r3, r5
 8012716:	eb49 0303 	adc.w	r3, r9, r3
 801271a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	2200      	movs	r2, #0
 8012726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801272a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801272e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012732:	460b      	mov	r3, r1
 8012734:	18db      	adds	r3, r3, r3
 8012736:	653b      	str	r3, [r7, #80]	; 0x50
 8012738:	4613      	mov	r3, r2
 801273a:	eb42 0303 	adc.w	r3, r2, r3
 801273e:	657b      	str	r3, [r7, #84]	; 0x54
 8012740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012748:	f7fd fd64 	bl	8010214 <__aeabi_uldivmod>
 801274c:	4602      	mov	r2, r0
 801274e:	460b      	mov	r3, r1
 8012750:	4b61      	ldr	r3, [pc, #388]	; (80128d8 <UART_SetConfig+0x2d4>)
 8012752:	fba3 2302 	umull	r2, r3, r3, r2
 8012756:	095b      	lsrs	r3, r3, #5
 8012758:	011c      	lsls	r4, r3, #4
 801275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801275e:	2200      	movs	r2, #0
 8012760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801276c:	4642      	mov	r2, r8
 801276e:	464b      	mov	r3, r9
 8012770:	1891      	adds	r1, r2, r2
 8012772:	64b9      	str	r1, [r7, #72]	; 0x48
 8012774:	415b      	adcs	r3, r3
 8012776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801277c:	4641      	mov	r1, r8
 801277e:	eb12 0a01 	adds.w	sl, r2, r1
 8012782:	4649      	mov	r1, r9
 8012784:	eb43 0b01 	adc.w	fp, r3, r1
 8012788:	f04f 0200 	mov.w	r2, #0
 801278c:	f04f 0300 	mov.w	r3, #0
 8012790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801279c:	4692      	mov	sl, r2
 801279e:	469b      	mov	fp, r3
 80127a0:	4643      	mov	r3, r8
 80127a2:	eb1a 0303 	adds.w	r3, sl, r3
 80127a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80127aa:	464b      	mov	r3, r9
 80127ac:	eb4b 0303 	adc.w	r3, fp, r3
 80127b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80127b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80127c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80127c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80127c8:	460b      	mov	r3, r1
 80127ca:	18db      	adds	r3, r3, r3
 80127cc:	643b      	str	r3, [r7, #64]	; 0x40
 80127ce:	4613      	mov	r3, r2
 80127d0:	eb42 0303 	adc.w	r3, r2, r3
 80127d4:	647b      	str	r3, [r7, #68]	; 0x44
 80127d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80127da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80127de:	f7fd fd19 	bl	8010214 <__aeabi_uldivmod>
 80127e2:	4602      	mov	r2, r0
 80127e4:	460b      	mov	r3, r1
 80127e6:	4611      	mov	r1, r2
 80127e8:	4b3b      	ldr	r3, [pc, #236]	; (80128d8 <UART_SetConfig+0x2d4>)
 80127ea:	fba3 2301 	umull	r2, r3, r3, r1
 80127ee:	095b      	lsrs	r3, r3, #5
 80127f0:	2264      	movs	r2, #100	; 0x64
 80127f2:	fb02 f303 	mul.w	r3, r2, r3
 80127f6:	1acb      	subs	r3, r1, r3
 80127f8:	00db      	lsls	r3, r3, #3
 80127fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80127fe:	4b36      	ldr	r3, [pc, #216]	; (80128d8 <UART_SetConfig+0x2d4>)
 8012800:	fba3 2302 	umull	r2, r3, r3, r2
 8012804:	095b      	lsrs	r3, r3, #5
 8012806:	005b      	lsls	r3, r3, #1
 8012808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801280c:	441c      	add	r4, r3
 801280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012812:	2200      	movs	r2, #0
 8012814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801281c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012820:	4642      	mov	r2, r8
 8012822:	464b      	mov	r3, r9
 8012824:	1891      	adds	r1, r2, r2
 8012826:	63b9      	str	r1, [r7, #56]	; 0x38
 8012828:	415b      	adcs	r3, r3
 801282a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801282c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012830:	4641      	mov	r1, r8
 8012832:	1851      	adds	r1, r2, r1
 8012834:	6339      	str	r1, [r7, #48]	; 0x30
 8012836:	4649      	mov	r1, r9
 8012838:	414b      	adcs	r3, r1
 801283a:	637b      	str	r3, [r7, #52]	; 0x34
 801283c:	f04f 0200 	mov.w	r2, #0
 8012840:	f04f 0300 	mov.w	r3, #0
 8012844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012848:	4659      	mov	r1, fp
 801284a:	00cb      	lsls	r3, r1, #3
 801284c:	4651      	mov	r1, sl
 801284e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012852:	4651      	mov	r1, sl
 8012854:	00ca      	lsls	r2, r1, #3
 8012856:	4610      	mov	r0, r2
 8012858:	4619      	mov	r1, r3
 801285a:	4603      	mov	r3, r0
 801285c:	4642      	mov	r2, r8
 801285e:	189b      	adds	r3, r3, r2
 8012860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012864:	464b      	mov	r3, r9
 8012866:	460a      	mov	r2, r1
 8012868:	eb42 0303 	adc.w	r3, r2, r3
 801286c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801287c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8012880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012884:	460b      	mov	r3, r1
 8012886:	18db      	adds	r3, r3, r3
 8012888:	62bb      	str	r3, [r7, #40]	; 0x28
 801288a:	4613      	mov	r3, r2
 801288c:	eb42 0303 	adc.w	r3, r2, r3
 8012890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801289a:	f7fd fcbb 	bl	8010214 <__aeabi_uldivmod>
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <UART_SetConfig+0x2d4>)
 80128a4:	fba3 1302 	umull	r1, r3, r3, r2
 80128a8:	095b      	lsrs	r3, r3, #5
 80128aa:	2164      	movs	r1, #100	; 0x64
 80128ac:	fb01 f303 	mul.w	r3, r1, r3
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	3332      	adds	r3, #50	; 0x32
 80128b6:	4a08      	ldr	r2, [pc, #32]	; (80128d8 <UART_SetConfig+0x2d4>)
 80128b8:	fba2 2303 	umull	r2, r3, r2, r3
 80128bc:	095b      	lsrs	r3, r3, #5
 80128be:	f003 0207 	and.w	r2, r3, #7
 80128c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4422      	add	r2, r4
 80128ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80128cc:	e105      	b.n	8012ada <UART_SetConfig+0x4d6>
 80128ce:	bf00      	nop
 80128d0:	40011000 	.word	0x40011000
 80128d4:	40011400 	.word	0x40011400
 80128d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80128dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80128e0:	2200      	movs	r2, #0
 80128e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80128e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80128ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80128ee:	4642      	mov	r2, r8
 80128f0:	464b      	mov	r3, r9
 80128f2:	1891      	adds	r1, r2, r2
 80128f4:	6239      	str	r1, [r7, #32]
 80128f6:	415b      	adcs	r3, r3
 80128f8:	627b      	str	r3, [r7, #36]	; 0x24
 80128fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80128fe:	4641      	mov	r1, r8
 8012900:	1854      	adds	r4, r2, r1
 8012902:	4649      	mov	r1, r9
 8012904:	eb43 0501 	adc.w	r5, r3, r1
 8012908:	f04f 0200 	mov.w	r2, #0
 801290c:	f04f 0300 	mov.w	r3, #0
 8012910:	00eb      	lsls	r3, r5, #3
 8012912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012916:	00e2      	lsls	r2, r4, #3
 8012918:	4614      	mov	r4, r2
 801291a:	461d      	mov	r5, r3
 801291c:	4643      	mov	r3, r8
 801291e:	18e3      	adds	r3, r4, r3
 8012920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012924:	464b      	mov	r3, r9
 8012926:	eb45 0303 	adc.w	r3, r5, r3
 801292a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801293a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801293e:	f04f 0200 	mov.w	r2, #0
 8012942:	f04f 0300 	mov.w	r3, #0
 8012946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801294a:	4629      	mov	r1, r5
 801294c:	008b      	lsls	r3, r1, #2
 801294e:	4621      	mov	r1, r4
 8012950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012954:	4621      	mov	r1, r4
 8012956:	008a      	lsls	r2, r1, #2
 8012958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801295c:	f7fd fc5a 	bl	8010214 <__aeabi_uldivmod>
 8012960:	4602      	mov	r2, r0
 8012962:	460b      	mov	r3, r1
 8012964:	4b60      	ldr	r3, [pc, #384]	; (8012ae8 <UART_SetConfig+0x4e4>)
 8012966:	fba3 2302 	umull	r2, r3, r3, r2
 801296a:	095b      	lsrs	r3, r3, #5
 801296c:	011c      	lsls	r4, r3, #4
 801296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012972:	2200      	movs	r2, #0
 8012974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801297c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8012980:	4642      	mov	r2, r8
 8012982:	464b      	mov	r3, r9
 8012984:	1891      	adds	r1, r2, r2
 8012986:	61b9      	str	r1, [r7, #24]
 8012988:	415b      	adcs	r3, r3
 801298a:	61fb      	str	r3, [r7, #28]
 801298c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012990:	4641      	mov	r1, r8
 8012992:	1851      	adds	r1, r2, r1
 8012994:	6139      	str	r1, [r7, #16]
 8012996:	4649      	mov	r1, r9
 8012998:	414b      	adcs	r3, r1
 801299a:	617b      	str	r3, [r7, #20]
 801299c:	f04f 0200 	mov.w	r2, #0
 80129a0:	f04f 0300 	mov.w	r3, #0
 80129a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80129a8:	4659      	mov	r1, fp
 80129aa:	00cb      	lsls	r3, r1, #3
 80129ac:	4651      	mov	r1, sl
 80129ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80129b2:	4651      	mov	r1, sl
 80129b4:	00ca      	lsls	r2, r1, #3
 80129b6:	4610      	mov	r0, r2
 80129b8:	4619      	mov	r1, r3
 80129ba:	4603      	mov	r3, r0
 80129bc:	4642      	mov	r2, r8
 80129be:	189b      	adds	r3, r3, r2
 80129c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80129c4:	464b      	mov	r3, r9
 80129c6:	460a      	mov	r2, r1
 80129c8:	eb42 0303 	adc.w	r3, r2, r3
 80129cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80129d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80129da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80129dc:	f04f 0200 	mov.w	r2, #0
 80129e0:	f04f 0300 	mov.w	r3, #0
 80129e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80129e8:	4649      	mov	r1, r9
 80129ea:	008b      	lsls	r3, r1, #2
 80129ec:	4641      	mov	r1, r8
 80129ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80129f2:	4641      	mov	r1, r8
 80129f4:	008a      	lsls	r2, r1, #2
 80129f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80129fa:	f7fd fc0b 	bl	8010214 <__aeabi_uldivmod>
 80129fe:	4602      	mov	r2, r0
 8012a00:	460b      	mov	r3, r1
 8012a02:	4b39      	ldr	r3, [pc, #228]	; (8012ae8 <UART_SetConfig+0x4e4>)
 8012a04:	fba3 1302 	umull	r1, r3, r3, r2
 8012a08:	095b      	lsrs	r3, r3, #5
 8012a0a:	2164      	movs	r1, #100	; 0x64
 8012a0c:	fb01 f303 	mul.w	r3, r1, r3
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	011b      	lsls	r3, r3, #4
 8012a14:	3332      	adds	r3, #50	; 0x32
 8012a16:	4a34      	ldr	r2, [pc, #208]	; (8012ae8 <UART_SetConfig+0x4e4>)
 8012a18:	fba2 2303 	umull	r2, r3, r2, r3
 8012a1c:	095b      	lsrs	r3, r3, #5
 8012a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a22:	441c      	add	r4, r3
 8012a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012a28:	2200      	movs	r2, #0
 8012a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8012a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8012a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012a32:	4642      	mov	r2, r8
 8012a34:	464b      	mov	r3, r9
 8012a36:	1891      	adds	r1, r2, r2
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	415b      	adcs	r3, r3
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012a42:	4641      	mov	r1, r8
 8012a44:	1851      	adds	r1, r2, r1
 8012a46:	6039      	str	r1, [r7, #0]
 8012a48:	4649      	mov	r1, r9
 8012a4a:	414b      	adcs	r3, r1
 8012a4c:	607b      	str	r3, [r7, #4]
 8012a4e:	f04f 0200 	mov.w	r2, #0
 8012a52:	f04f 0300 	mov.w	r3, #0
 8012a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012a5a:	4659      	mov	r1, fp
 8012a5c:	00cb      	lsls	r3, r1, #3
 8012a5e:	4651      	mov	r1, sl
 8012a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012a64:	4651      	mov	r1, sl
 8012a66:	00ca      	lsls	r2, r1, #3
 8012a68:	4610      	mov	r0, r2
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	4642      	mov	r2, r8
 8012a70:	189b      	adds	r3, r3, r2
 8012a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8012a74:	464b      	mov	r3, r9
 8012a76:	460a      	mov	r2, r1
 8012a78:	eb42 0303 	adc.w	r3, r2, r3
 8012a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	663b      	str	r3, [r7, #96]	; 0x60
 8012a88:	667a      	str	r2, [r7, #100]	; 0x64
 8012a8a:	f04f 0200 	mov.w	r2, #0
 8012a8e:	f04f 0300 	mov.w	r3, #0
 8012a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8012a96:	4649      	mov	r1, r9
 8012a98:	008b      	lsls	r3, r1, #2
 8012a9a:	4641      	mov	r1, r8
 8012a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012aa0:	4641      	mov	r1, r8
 8012aa2:	008a      	lsls	r2, r1, #2
 8012aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012aa8:	f7fd fbb4 	bl	8010214 <__aeabi_uldivmod>
 8012aac:	4602      	mov	r2, r0
 8012aae:	460b      	mov	r3, r1
 8012ab0:	4b0d      	ldr	r3, [pc, #52]	; (8012ae8 <UART_SetConfig+0x4e4>)
 8012ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8012ab6:	095b      	lsrs	r3, r3, #5
 8012ab8:	2164      	movs	r1, #100	; 0x64
 8012aba:	fb01 f303 	mul.w	r3, r1, r3
 8012abe:	1ad3      	subs	r3, r2, r3
 8012ac0:	011b      	lsls	r3, r3, #4
 8012ac2:	3332      	adds	r3, #50	; 0x32
 8012ac4:	4a08      	ldr	r2, [pc, #32]	; (8012ae8 <UART_SetConfig+0x4e4>)
 8012ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8012aca:	095b      	lsrs	r3, r3, #5
 8012acc:	f003 020f 	and.w	r2, r3, #15
 8012ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4422      	add	r2, r4
 8012ad8:	609a      	str	r2, [r3, #8]
}
 8012ada:	bf00      	nop
 8012adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012ae6:	bf00      	nop
 8012ae8:	51eb851f 	.word	0x51eb851f

08012aec <__libc_init_array>:
 8012aec:	b570      	push	{r4, r5, r6, lr}
 8012aee:	4d0d      	ldr	r5, [pc, #52]	; (8012b24 <__libc_init_array+0x38>)
 8012af0:	4c0d      	ldr	r4, [pc, #52]	; (8012b28 <__libc_init_array+0x3c>)
 8012af2:	1b64      	subs	r4, r4, r5
 8012af4:	10a4      	asrs	r4, r4, #2
 8012af6:	2600      	movs	r6, #0
 8012af8:	42a6      	cmp	r6, r4
 8012afa:	d109      	bne.n	8012b10 <__libc_init_array+0x24>
 8012afc:	4d0b      	ldr	r5, [pc, #44]	; (8012b2c <__libc_init_array+0x40>)
 8012afe:	4c0c      	ldr	r4, [pc, #48]	; (8012b30 <__libc_init_array+0x44>)
 8012b00:	f000 f820 	bl	8012b44 <_init>
 8012b04:	1b64      	subs	r4, r4, r5
 8012b06:	10a4      	asrs	r4, r4, #2
 8012b08:	2600      	movs	r6, #0
 8012b0a:	42a6      	cmp	r6, r4
 8012b0c:	d105      	bne.n	8012b1a <__libc_init_array+0x2e>
 8012b0e:	bd70      	pop	{r4, r5, r6, pc}
 8012b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b14:	4798      	blx	r3
 8012b16:	3601      	adds	r6, #1
 8012b18:	e7ee      	b.n	8012af8 <__libc_init_array+0xc>
 8012b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b1e:	4798      	blx	r3
 8012b20:	3601      	adds	r6, #1
 8012b22:	e7f2      	b.n	8012b0a <__libc_init_array+0x1e>
 8012b24:	08012b90 	.word	0x08012b90
 8012b28:	08012b90 	.word	0x08012b90
 8012b2c:	08012b90 	.word	0x08012b90
 8012b30:	08012b94 	.word	0x08012b94

08012b34 <memset>:
 8012b34:	4402      	add	r2, r0
 8012b36:	4603      	mov	r3, r0
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d100      	bne.n	8012b3e <memset+0xa>
 8012b3c:	4770      	bx	lr
 8012b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8012b42:	e7f9      	b.n	8012b38 <memset+0x4>

08012b44 <_init>:
 8012b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b46:	bf00      	nop
 8012b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b4a:	bc08      	pop	{r3}
 8012b4c:	469e      	mov	lr, r3
 8012b4e:	4770      	bx	lr

08012b50 <_fini>:
 8012b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b52:	bf00      	nop
 8012b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b56:	bc08      	pop	{r3}
 8012b58:	469e      	mov	lr, r3
 8012b5a:	4770      	bx	lr
