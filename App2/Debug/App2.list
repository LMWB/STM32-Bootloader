
App2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  0800a800  0800a800  0000a800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  0800a9c4  0800a9c4  0000a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800d35c  0800d35c  0000d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d388  0800d388  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d388  0800d388  0000d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d390  0800d390  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d390  0800d390  0000d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d394  0800d394  0000d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800d398  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800d3a4  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800d3a4  000100b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e08d  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e53  00000000  00000000  0001e0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0001ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00020b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021caf  00000000  00000000  000216a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb4  00000000  00000000  00043357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7ff  00000000  00000000  0005220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003264  00000000  00000000  00121a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a9c4 <__do_global_dtors_aux>:
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	4c05      	ldr	r4, [pc, #20]	; (800a9dc <__do_global_dtors_aux+0x18>)
 800a9c8:	7823      	ldrb	r3, [r4, #0]
 800a9ca:	b933      	cbnz	r3, 800a9da <__do_global_dtors_aux+0x16>
 800a9cc:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <__do_global_dtors_aux+0x1c>)
 800a9ce:	b113      	cbz	r3, 800a9d6 <__do_global_dtors_aux+0x12>
 800a9d0:	4804      	ldr	r0, [pc, #16]	; (800a9e4 <__do_global_dtors_aux+0x20>)
 800a9d2:	f3af 8000 	nop.w
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	7023      	strb	r3, [r4, #0]
 800a9da:	bd10      	pop	{r4, pc}
 800a9dc:	2000000c 	.word	0x2000000c
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	0800d344 	.word	0x0800d344

0800a9e8 <frame_dummy>:
 800a9e8:	b508      	push	{r3, lr}
 800a9ea:	4b03      	ldr	r3, [pc, #12]	; (800a9f8 <frame_dummy+0x10>)
 800a9ec:	b11b      	cbz	r3, 800a9f6 <frame_dummy+0xe>
 800a9ee:	4903      	ldr	r1, [pc, #12]	; (800a9fc <frame_dummy+0x14>)
 800a9f0:	4803      	ldr	r0, [pc, #12]	; (800aa00 <frame_dummy+0x18>)
 800a9f2:	f3af 8000 	nop.w
 800a9f6:	bd08      	pop	{r3, pc}
 800a9f8:	00000000 	.word	0x00000000
 800a9fc:	20000010 	.word	0x20000010
 800aa00:	0800d344 	.word	0x0800d344

0800aa04 <strlen>:
 800aa04:	4603      	mov	r3, r0
 800aa06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	d1fb      	bne.n	800aa06 <strlen+0x2>
 800aa0e:	1a18      	subs	r0, r3, r0
 800aa10:	3801      	subs	r0, #1
 800aa12:	4770      	bx	lr

0800aa14 <__aeabi_uldivmod>:
 800aa14:	b953      	cbnz	r3, 800aa2c <__aeabi_uldivmod+0x18>
 800aa16:	b94a      	cbnz	r2, 800aa2c <__aeabi_uldivmod+0x18>
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	bf08      	it	eq
 800aa1c:	2800      	cmpeq	r0, #0
 800aa1e:	bf1c      	itt	ne
 800aa20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800aa24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800aa28:	f000 b974 	b.w	800ad14 <__aeabi_idiv0>
 800aa2c:	f1ad 0c08 	sub.w	ip, sp, #8
 800aa30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800aa34:	f000 f806 	bl	800aa44 <__udivmoddi4>
 800aa38:	f8dd e004 	ldr.w	lr, [sp, #4]
 800aa3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa40:	b004      	add	sp, #16
 800aa42:	4770      	bx	lr

0800aa44 <__udivmoddi4>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	9d08      	ldr	r5, [sp, #32]
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	468e      	mov	lr, r1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d14d      	bne.n	800aaee <__udivmoddi4+0xaa>
 800aa52:	428a      	cmp	r2, r1
 800aa54:	4694      	mov	ip, r2
 800aa56:	d969      	bls.n	800ab2c <__udivmoddi4+0xe8>
 800aa58:	fab2 f282 	clz	r2, r2
 800aa5c:	b152      	cbz	r2, 800aa74 <__udivmoddi4+0x30>
 800aa5e:	fa01 f302 	lsl.w	r3, r1, r2
 800aa62:	f1c2 0120 	rsb	r1, r2, #32
 800aa66:	fa20 f101 	lsr.w	r1, r0, r1
 800aa6a:	fa0c fc02 	lsl.w	ip, ip, r2
 800aa6e:	ea41 0e03 	orr.w	lr, r1, r3
 800aa72:	4094      	lsls	r4, r2
 800aa74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800aa78:	0c21      	lsrs	r1, r4, #16
 800aa7a:	fbbe f6f8 	udiv	r6, lr, r8
 800aa7e:	fa1f f78c 	uxth.w	r7, ip
 800aa82:	fb08 e316 	mls	r3, r8, r6, lr
 800aa86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aa8a:	fb06 f107 	mul.w	r1, r6, r7
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	d90a      	bls.n	800aaa8 <__udivmoddi4+0x64>
 800aa92:	eb1c 0303 	adds.w	r3, ip, r3
 800aa96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800aa9a:	f080 811f 	bcs.w	800acdc <__udivmoddi4+0x298>
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	f240 811c 	bls.w	800acdc <__udivmoddi4+0x298>
 800aaa4:	3e02      	subs	r6, #2
 800aaa6:	4463      	add	r3, ip
 800aaa8:	1a5b      	subs	r3, r3, r1
 800aaaa:	b2a4      	uxth	r4, r4
 800aaac:	fbb3 f0f8 	udiv	r0, r3, r8
 800aab0:	fb08 3310 	mls	r3, r8, r0, r3
 800aab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800aab8:	fb00 f707 	mul.w	r7, r0, r7
 800aabc:	42a7      	cmp	r7, r4
 800aabe:	d90a      	bls.n	800aad6 <__udivmoddi4+0x92>
 800aac0:	eb1c 0404 	adds.w	r4, ip, r4
 800aac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aac8:	f080 810a 	bcs.w	800ace0 <__udivmoddi4+0x29c>
 800aacc:	42a7      	cmp	r7, r4
 800aace:	f240 8107 	bls.w	800ace0 <__udivmoddi4+0x29c>
 800aad2:	4464      	add	r4, ip
 800aad4:	3802      	subs	r0, #2
 800aad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800aada:	1be4      	subs	r4, r4, r7
 800aadc:	2600      	movs	r6, #0
 800aade:	b11d      	cbz	r5, 800aae8 <__udivmoddi4+0xa4>
 800aae0:	40d4      	lsrs	r4, r2
 800aae2:	2300      	movs	r3, #0
 800aae4:	e9c5 4300 	strd	r4, r3, [r5]
 800aae8:	4631      	mov	r1, r6
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	428b      	cmp	r3, r1
 800aaf0:	d909      	bls.n	800ab06 <__udivmoddi4+0xc2>
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	f000 80ef 	beq.w	800acd6 <__udivmoddi4+0x292>
 800aaf8:	2600      	movs	r6, #0
 800aafa:	e9c5 0100 	strd	r0, r1, [r5]
 800aafe:	4630      	mov	r0, r6
 800ab00:	4631      	mov	r1, r6
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	fab3 f683 	clz	r6, r3
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	d14a      	bne.n	800aba4 <__udivmoddi4+0x160>
 800ab0e:	428b      	cmp	r3, r1
 800ab10:	d302      	bcc.n	800ab18 <__udivmoddi4+0xd4>
 800ab12:	4282      	cmp	r2, r0
 800ab14:	f200 80f9 	bhi.w	800ad0a <__udivmoddi4+0x2c6>
 800ab18:	1a84      	subs	r4, r0, r2
 800ab1a:	eb61 0303 	sbc.w	r3, r1, r3
 800ab1e:	2001      	movs	r0, #1
 800ab20:	469e      	mov	lr, r3
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	d0e0      	beq.n	800aae8 <__udivmoddi4+0xa4>
 800ab26:	e9c5 4e00 	strd	r4, lr, [r5]
 800ab2a:	e7dd      	b.n	800aae8 <__udivmoddi4+0xa4>
 800ab2c:	b902      	cbnz	r2, 800ab30 <__udivmoddi4+0xec>
 800ab2e:	deff      	udf	#255	; 0xff
 800ab30:	fab2 f282 	clz	r2, r2
 800ab34:	2a00      	cmp	r2, #0
 800ab36:	f040 8092 	bne.w	800ac5e <__udivmoddi4+0x21a>
 800ab3a:	eba1 010c 	sub.w	r1, r1, ip
 800ab3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800ab42:	fa1f fe8c 	uxth.w	lr, ip
 800ab46:	2601      	movs	r6, #1
 800ab48:	0c20      	lsrs	r0, r4, #16
 800ab4a:	fbb1 f3f7 	udiv	r3, r1, r7
 800ab4e:	fb07 1113 	mls	r1, r7, r3, r1
 800ab52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800ab56:	fb0e f003 	mul.w	r0, lr, r3
 800ab5a:	4288      	cmp	r0, r1
 800ab5c:	d908      	bls.n	800ab70 <__udivmoddi4+0x12c>
 800ab5e:	eb1c 0101 	adds.w	r1, ip, r1
 800ab62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800ab66:	d202      	bcs.n	800ab6e <__udivmoddi4+0x12a>
 800ab68:	4288      	cmp	r0, r1
 800ab6a:	f200 80cb 	bhi.w	800ad04 <__udivmoddi4+0x2c0>
 800ab6e:	4643      	mov	r3, r8
 800ab70:	1a09      	subs	r1, r1, r0
 800ab72:	b2a4      	uxth	r4, r4
 800ab74:	fbb1 f0f7 	udiv	r0, r1, r7
 800ab78:	fb07 1110 	mls	r1, r7, r0, r1
 800ab7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800ab80:	fb0e fe00 	mul.w	lr, lr, r0
 800ab84:	45a6      	cmp	lr, r4
 800ab86:	d908      	bls.n	800ab9a <__udivmoddi4+0x156>
 800ab88:	eb1c 0404 	adds.w	r4, ip, r4
 800ab8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800ab90:	d202      	bcs.n	800ab98 <__udivmoddi4+0x154>
 800ab92:	45a6      	cmp	lr, r4
 800ab94:	f200 80bb 	bhi.w	800ad0e <__udivmoddi4+0x2ca>
 800ab98:	4608      	mov	r0, r1
 800ab9a:	eba4 040e 	sub.w	r4, r4, lr
 800ab9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800aba2:	e79c      	b.n	800aade <__udivmoddi4+0x9a>
 800aba4:	f1c6 0720 	rsb	r7, r6, #32
 800aba8:	40b3      	lsls	r3, r6
 800abaa:	fa22 fc07 	lsr.w	ip, r2, r7
 800abae:	ea4c 0c03 	orr.w	ip, ip, r3
 800abb2:	fa20 f407 	lsr.w	r4, r0, r7
 800abb6:	fa01 f306 	lsl.w	r3, r1, r6
 800abba:	431c      	orrs	r4, r3
 800abbc:	40f9      	lsrs	r1, r7
 800abbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800abc2:	fa00 f306 	lsl.w	r3, r0, r6
 800abc6:	fbb1 f8f9 	udiv	r8, r1, r9
 800abca:	0c20      	lsrs	r0, r4, #16
 800abcc:	fa1f fe8c 	uxth.w	lr, ip
 800abd0:	fb09 1118 	mls	r1, r9, r8, r1
 800abd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800abd8:	fb08 f00e 	mul.w	r0, r8, lr
 800abdc:	4288      	cmp	r0, r1
 800abde:	fa02 f206 	lsl.w	r2, r2, r6
 800abe2:	d90b      	bls.n	800abfc <__udivmoddi4+0x1b8>
 800abe4:	eb1c 0101 	adds.w	r1, ip, r1
 800abe8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800abec:	f080 8088 	bcs.w	800ad00 <__udivmoddi4+0x2bc>
 800abf0:	4288      	cmp	r0, r1
 800abf2:	f240 8085 	bls.w	800ad00 <__udivmoddi4+0x2bc>
 800abf6:	f1a8 0802 	sub.w	r8, r8, #2
 800abfa:	4461      	add	r1, ip
 800abfc:	1a09      	subs	r1, r1, r0
 800abfe:	b2a4      	uxth	r4, r4
 800ac00:	fbb1 f0f9 	udiv	r0, r1, r9
 800ac04:	fb09 1110 	mls	r1, r9, r0, r1
 800ac08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800ac0c:	fb00 fe0e 	mul.w	lr, r0, lr
 800ac10:	458e      	cmp	lr, r1
 800ac12:	d908      	bls.n	800ac26 <__udivmoddi4+0x1e2>
 800ac14:	eb1c 0101 	adds.w	r1, ip, r1
 800ac18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800ac1c:	d26c      	bcs.n	800acf8 <__udivmoddi4+0x2b4>
 800ac1e:	458e      	cmp	lr, r1
 800ac20:	d96a      	bls.n	800acf8 <__udivmoddi4+0x2b4>
 800ac22:	3802      	subs	r0, #2
 800ac24:	4461      	add	r1, ip
 800ac26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800ac2a:	fba0 9402 	umull	r9, r4, r0, r2
 800ac2e:	eba1 010e 	sub.w	r1, r1, lr
 800ac32:	42a1      	cmp	r1, r4
 800ac34:	46c8      	mov	r8, r9
 800ac36:	46a6      	mov	lr, r4
 800ac38:	d356      	bcc.n	800ace8 <__udivmoddi4+0x2a4>
 800ac3a:	d053      	beq.n	800ace4 <__udivmoddi4+0x2a0>
 800ac3c:	b15d      	cbz	r5, 800ac56 <__udivmoddi4+0x212>
 800ac3e:	ebb3 0208 	subs.w	r2, r3, r8
 800ac42:	eb61 010e 	sbc.w	r1, r1, lr
 800ac46:	fa01 f707 	lsl.w	r7, r1, r7
 800ac4a:	fa22 f306 	lsr.w	r3, r2, r6
 800ac4e:	40f1      	lsrs	r1, r6
 800ac50:	431f      	orrs	r7, r3
 800ac52:	e9c5 7100 	strd	r7, r1, [r5]
 800ac56:	2600      	movs	r6, #0
 800ac58:	4631      	mov	r1, r6
 800ac5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5e:	f1c2 0320 	rsb	r3, r2, #32
 800ac62:	40d8      	lsrs	r0, r3
 800ac64:	fa0c fc02 	lsl.w	ip, ip, r2
 800ac68:	fa21 f303 	lsr.w	r3, r1, r3
 800ac6c:	4091      	lsls	r1, r2
 800ac6e:	4301      	orrs	r1, r0
 800ac70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800ac74:	fa1f fe8c 	uxth.w	lr, ip
 800ac78:	fbb3 f0f7 	udiv	r0, r3, r7
 800ac7c:	fb07 3610 	mls	r6, r7, r0, r3
 800ac80:	0c0b      	lsrs	r3, r1, #16
 800ac82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ac86:	fb00 f60e 	mul.w	r6, r0, lr
 800ac8a:	429e      	cmp	r6, r3
 800ac8c:	fa04 f402 	lsl.w	r4, r4, r2
 800ac90:	d908      	bls.n	800aca4 <__udivmoddi4+0x260>
 800ac92:	eb1c 0303 	adds.w	r3, ip, r3
 800ac96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800ac9a:	d22f      	bcs.n	800acfc <__udivmoddi4+0x2b8>
 800ac9c:	429e      	cmp	r6, r3
 800ac9e:	d92d      	bls.n	800acfc <__udivmoddi4+0x2b8>
 800aca0:	3802      	subs	r0, #2
 800aca2:	4463      	add	r3, ip
 800aca4:	1b9b      	subs	r3, r3, r6
 800aca6:	b289      	uxth	r1, r1
 800aca8:	fbb3 f6f7 	udiv	r6, r3, r7
 800acac:	fb07 3316 	mls	r3, r7, r6, r3
 800acb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800acb4:	fb06 f30e 	mul.w	r3, r6, lr
 800acb8:	428b      	cmp	r3, r1
 800acba:	d908      	bls.n	800acce <__udivmoddi4+0x28a>
 800acbc:	eb1c 0101 	adds.w	r1, ip, r1
 800acc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800acc4:	d216      	bcs.n	800acf4 <__udivmoddi4+0x2b0>
 800acc6:	428b      	cmp	r3, r1
 800acc8:	d914      	bls.n	800acf4 <__udivmoddi4+0x2b0>
 800acca:	3e02      	subs	r6, #2
 800accc:	4461      	add	r1, ip
 800acce:	1ac9      	subs	r1, r1, r3
 800acd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800acd4:	e738      	b.n	800ab48 <__udivmoddi4+0x104>
 800acd6:	462e      	mov	r6, r5
 800acd8:	4628      	mov	r0, r5
 800acda:	e705      	b.n	800aae8 <__udivmoddi4+0xa4>
 800acdc:	4606      	mov	r6, r0
 800acde:	e6e3      	b.n	800aaa8 <__udivmoddi4+0x64>
 800ace0:	4618      	mov	r0, r3
 800ace2:	e6f8      	b.n	800aad6 <__udivmoddi4+0x92>
 800ace4:	454b      	cmp	r3, r9
 800ace6:	d2a9      	bcs.n	800ac3c <__udivmoddi4+0x1f8>
 800ace8:	ebb9 0802 	subs.w	r8, r9, r2
 800acec:	eb64 0e0c 	sbc.w	lr, r4, ip
 800acf0:	3801      	subs	r0, #1
 800acf2:	e7a3      	b.n	800ac3c <__udivmoddi4+0x1f8>
 800acf4:	4646      	mov	r6, r8
 800acf6:	e7ea      	b.n	800acce <__udivmoddi4+0x28a>
 800acf8:	4620      	mov	r0, r4
 800acfa:	e794      	b.n	800ac26 <__udivmoddi4+0x1e2>
 800acfc:	4640      	mov	r0, r8
 800acfe:	e7d1      	b.n	800aca4 <__udivmoddi4+0x260>
 800ad00:	46d0      	mov	r8, sl
 800ad02:	e77b      	b.n	800abfc <__udivmoddi4+0x1b8>
 800ad04:	3b02      	subs	r3, #2
 800ad06:	4461      	add	r1, ip
 800ad08:	e732      	b.n	800ab70 <__udivmoddi4+0x12c>
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	e709      	b.n	800ab22 <__udivmoddi4+0xde>
 800ad0e:	4464      	add	r4, ip
 800ad10:	3802      	subs	r0, #2
 800ad12:	e742      	b.n	800ab9a <__udivmoddi4+0x156>

0800ad14 <__aeabi_idiv0>:
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop

0800ad18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	; 0x28
 800ad1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	605a      	str	r2, [r3, #4]
 800ad28:	609a      	str	r2, [r3, #8]
 800ad2a:	60da      	str	r2, [r3, #12]
 800ad2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]
 800ad32:	4b2d      	ldr	r3, [pc, #180]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	4a2c      	ldr	r2, [pc, #176]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad38:	f043 0304 	orr.w	r3, r3, #4
 800ad3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad3e:	4b2a      	ldr	r3, [pc, #168]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	4b26      	ldr	r3, [pc, #152]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	4a25      	ldr	r2, [pc, #148]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad58:	6313      	str	r3, [r2, #48]	; 0x30
 800ad5a:	4b23      	ldr	r3, [pc, #140]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	60bb      	str	r3, [r7, #8]
 800ad6a:	4b1f      	ldr	r3, [pc, #124]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad70:	f043 0301 	orr.w	r3, r3, #1
 800ad74:	6313      	str	r3, [r2, #48]	; 0x30
 800ad76:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	60bb      	str	r3, [r7, #8]
 800ad80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad82:	2300      	movs	r3, #0
 800ad84:	607b      	str	r3, [r7, #4]
 800ad86:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad8c:	f043 0302 	orr.w	r3, r3, #2
 800ad90:	6313      	str	r3, [r2, #48]	; 0x30
 800ad92:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <MX_GPIO_Init+0xd0>)
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	607b      	str	r3, [r7, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2120      	movs	r1, #32
 800ada2:	4812      	ldr	r0, [pc, #72]	; (800adec <MX_GPIO_Init+0xd4>)
 800ada4:	f000 fda4 	bl	800b8f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800ada8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adae:	2300      	movs	r3, #0
 800adb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	4619      	mov	r1, r3
 800adbc:	480c      	ldr	r0, [pc, #48]	; (800adf0 <MX_GPIO_Init+0xd8>)
 800adbe:	f000 fbeb 	bl	800b598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800adc2:	2320      	movs	r3, #32
 800adc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adc6:	2301      	movs	r3, #1
 800adc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adce:	2300      	movs	r3, #0
 800add0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800add2:	f107 0314 	add.w	r3, r7, #20
 800add6:	4619      	mov	r1, r3
 800add8:	4804      	ldr	r0, [pc, #16]	; (800adec <MX_GPIO_Init+0xd4>)
 800adda:	f000 fbdd 	bl	800b598 <HAL_GPIO_Init>

}
 800adde:	bf00      	nop
 800ade0:	3728      	adds	r7, #40	; 0x28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	40023800 	.word	0x40023800
 800adec:	40020000 	.word	0x40020000
 800adf0:	40020800 	.word	0x40020800

0800adf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800adf8:	f000 fa26 	bl	800b248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800adfc:	f000 f824 	bl	800ae48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ae00:	f7ff ff8a 	bl	800ad18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800ae04:	f000 f984 	bl	800b110 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800ae08:	f000 f924 	bl	800b054 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 800ae0c:	480b      	ldr	r0, [pc, #44]	; (800ae3c <main+0x48>)
 800ae0e:	f001 fbdb 	bl	800c5c8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800ae12:	2120      	movs	r1, #32
 800ae14:	480a      	ldr	r0, [pc, #40]	; (800ae40 <main+0x4c>)
 800ae16:	f000 fd84 	bl	800b922 <HAL_GPIO_TogglePin>
	  if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 800ae1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ae1e:	4809      	ldr	r0, [pc, #36]	; (800ae44 <main+0x50>)
 800ae20:	f000 fd4e 	bl	800b8c0 <HAL_GPIO_ReadPin>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <main+0x3e>
		  HAL_Delay(100);
 800ae2a:	2064      	movs	r0, #100	; 0x64
 800ae2c:	f000 fa7e 	bl	800b32c <HAL_Delay>
 800ae30:	e7ef      	b.n	800ae12 <main+0x1e>
	  }else{
		  HAL_Delay(300);
 800ae32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ae36:	f000 fa79 	bl	800b32c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800ae3a:	e7ea      	b.n	800ae12 <main+0x1e>
 800ae3c:	20000028 	.word	0x20000028
 800ae40:	40020000 	.word	0x40020000
 800ae44:	40020800 	.word	0x40020800

0800ae48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b094      	sub	sp, #80	; 0x50
 800ae4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae4e:	f107 031c 	add.w	r3, r7, #28
 800ae52:	2234      	movs	r2, #52	; 0x34
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f002 fa6c 	bl	800d334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae5c:	f107 0308 	add.w	r3, r7, #8
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	605a      	str	r2, [r3, #4]
 800ae66:	609a      	str	r2, [r3, #8]
 800ae68:	60da      	str	r2, [r3, #12]
 800ae6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	4b2a      	ldr	r3, [pc, #168]	; (800af1c <SystemClock_Config+0xd4>)
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	4a29      	ldr	r2, [pc, #164]	; (800af1c <SystemClock_Config+0xd4>)
 800ae76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae7a:	6413      	str	r3, [r2, #64]	; 0x40
 800ae7c:	4b27      	ldr	r3, [pc, #156]	; (800af1c <SystemClock_Config+0xd4>)
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ae88:	2300      	movs	r3, #0
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	4b24      	ldr	r3, [pc, #144]	; (800af20 <SystemClock_Config+0xd8>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ae94:	4a22      	ldr	r2, [pc, #136]	; (800af20 <SystemClock_Config+0xd8>)
 800ae96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	4b20      	ldr	r3, [pc, #128]	; (800af20 <SystemClock_Config+0xd8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aea4:	603b      	str	r3, [r7, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800aea8:	2302      	movs	r3, #2
 800aeaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800aeac:	2301      	movs	r3, #1
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aeb0:	2310      	movs	r3, #16
 800aeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800aebc:	2310      	movs	r3, #16
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800aec0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800aec4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800aec6:	2304      	movs	r3, #4
 800aec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800aeca:	2302      	movs	r3, #2
 800aecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800aece:	2302      	movs	r3, #2
 800aed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aed2:	f107 031c 	add.w	r3, r7, #28
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 f888 	bl	800bfec <HAL_RCC_OscConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800aee2:	f000 f83f 	bl	800af64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aee6:	230f      	movs	r3, #15
 800aee8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aeea:	2302      	movs	r3, #2
 800aeec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aeee:	2300      	movs	r3, #0
 800aef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800aef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800aef8:	2300      	movs	r3, #0
 800aefa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	2102      	movs	r1, #2
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fd28 	bl	800b958 <HAL_RCC_ClockConfig>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800af0e:	f000 f829 	bl	800af64 <Error_Handler>
  }
}
 800af12:	bf00      	nop
 800af14:	3750      	adds	r7, #80	; 0x50
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	40023800 	.word	0x40023800
 800af20:	40007000 	.word	0x40007000

0800af24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a09      	ldr	r2, [pc, #36]	; (800af58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d10c      	bne.n	800af50 <HAL_TIM_PeriodElapsedCallback+0x2c>
		char* msg = "Hello from App 2\n";
 800af36:	4b09      	ldr	r3, [pc, #36]	; (800af5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800af38:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), -1);
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f7ff fd62 	bl	800aa04 <strlen>
 800af40:	4603      	mov	r3, r0
 800af42:	b29a      	uxth	r2, r3
 800af44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af48:	68f9      	ldr	r1, [r7, #12]
 800af4a:	4805      	ldr	r0, [pc, #20]	; (800af60 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800af4c:	f001 fe59 	bl	800cc02 <HAL_UART_Transmit>
	}
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	40001000 	.word	0x40001000
 800af5c:	0800d35c 	.word	0x0800d35c
 800af60:	20000070 	.word	0x20000070

0800af64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800af68:	b672      	cpsid	i
}
 800af6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800af6c:	e7fe      	b.n	800af6c <Error_Handler+0x8>
	...

0800af70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af76:	2300      	movs	r3, #0
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	4b10      	ldr	r3, [pc, #64]	; (800afbc <HAL_MspInit+0x4c>)
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	4a0f      	ldr	r2, [pc, #60]	; (800afbc <HAL_MspInit+0x4c>)
 800af80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af84:	6453      	str	r3, [r2, #68]	; 0x44
 800af86:	4b0d      	ldr	r3, [pc, #52]	; (800afbc <HAL_MspInit+0x4c>)
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af8e:	607b      	str	r3, [r7, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800af92:	2300      	movs	r3, #0
 800af94:	603b      	str	r3, [r7, #0]
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <HAL_MspInit+0x4c>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	4a08      	ldr	r2, [pc, #32]	; (800afbc <HAL_MspInit+0x4c>)
 800af9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afa0:	6413      	str	r3, [r2, #64]	; 0x40
 800afa2:	4b06      	ldr	r3, [pc, #24]	; (800afbc <HAL_MspInit+0x4c>)
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800afae:	2007      	movs	r0, #7
 800afb0:	f000 fab0 	bl	800b514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	40023800 	.word	0x40023800

0800afc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800afc4:	e7fe      	b.n	800afc4 <NMI_Handler+0x4>

0800afc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800afc6:	b480      	push	{r7}
 800afc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800afca:	e7fe      	b.n	800afca <HardFault_Handler+0x4>

0800afcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afd0:	e7fe      	b.n	800afd0 <MemManage_Handler+0x4>

0800afd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afd2:	b480      	push	{r7}
 800afd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afd6:	e7fe      	b.n	800afd6 <BusFault_Handler+0x4>

0800afd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afdc:	e7fe      	b.n	800afdc <UsageFault_Handler+0x4>

0800afde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800afde:	b480      	push	{r7}
 800afe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800afe2:	bf00      	nop
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800affa:	b480      	push	{r7}
 800affc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800affe:	bf00      	nop
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b00c:	f000 f96e 	bl	800b2ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b010:	bf00      	nop
 800b012:	bd80      	pop	{r7, pc}

0800b014 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b018:	4802      	ldr	r0, [pc, #8]	; (800b024 <TIM6_DAC_IRQHandler+0x10>)
 800b01a:	f001 fb45 	bl	800c6a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b01e:	bf00      	nop
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20000028 	.word	0x20000028

0800b028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <SystemInit+0x24>)
 800b02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b032:	4a06      	ldr	r2, [pc, #24]	; (800b04c <SystemInit+0x24>)
 800b034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800b03c:	4b03      	ldr	r3, [pc, #12]	; (800b04c <SystemInit+0x24>)
 800b03e:	4a04      	ldr	r2, [pc, #16]	; (800b050 <SystemInit+0x28>)
 800b040:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b042:	bf00      	nop
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	e000ed00 	.word	0xe000ed00
 800b050:	0800a800 	.word	0x0800a800

0800b054 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b05a:	463b      	mov	r3, r7
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b062:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b064:	4a15      	ldr	r2, [pc, #84]	; (800b0bc <MX_TIM6_Init+0x68>)
 800b066:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b06a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800b06e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b072:	2200      	movs	r2, #0
 800b074:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800b076:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b078:	f242 720f 	movw	r2, #9999	; 0x270f
 800b07c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b07e:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b080:	2200      	movs	r2, #0
 800b082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b084:	480c      	ldr	r0, [pc, #48]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b086:	f001 fa4f 	bl	800c528 <HAL_TIM_Base_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800b090:	f7ff ff68 	bl	800af64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b094:	2300      	movs	r3, #0
 800b096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b098:	2300      	movs	r3, #0
 800b09a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b09c:	463b      	mov	r3, r7
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4805      	ldr	r0, [pc, #20]	; (800b0b8 <MX_TIM6_Init+0x64>)
 800b0a2:	f001 fcd1 	bl	800ca48 <HAL_TIMEx_MasterConfigSynchronization>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800b0ac:	f7ff ff5a 	bl	800af64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	20000028 	.word	0x20000028
 800b0bc:	40001000 	.word	0x40001000

0800b0c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a0e      	ldr	r2, [pc, #56]	; (800b108 <HAL_TIM_Base_MspInit+0x48>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d115      	bne.n	800b0fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <HAL_TIM_Base_MspInit+0x4c>)
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	4a0c      	ldr	r2, [pc, #48]	; (800b10c <HAL_TIM_Base_MspInit+0x4c>)
 800b0dc:	f043 0310 	orr.w	r3, r3, #16
 800b0e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b0e2:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <HAL_TIM_Base_MspInit+0x4c>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2036      	movs	r0, #54	; 0x36
 800b0f4:	f000 fa19 	bl	800b52a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b0f8:	2036      	movs	r0, #54	; 0x36
 800b0fa:	f000 fa32 	bl	800b562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b0fe:	bf00      	nop
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	40001000 	.word	0x40001000
 800b10c:	40023800 	.word	0x40023800

0800b110 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b114:	4b11      	ldr	r3, [pc, #68]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b116:	4a12      	ldr	r2, [pc, #72]	; (800b160 <MX_USART2_UART_Init+0x50>)
 800b118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b11a:	4b10      	ldr	r3, [pc, #64]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b11c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b122:	4b0e      	ldr	r3, [pc, #56]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b124:	2200      	movs	r2, #0
 800b126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b128:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b130:	2200      	movs	r2, #0
 800b132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b134:	4b09      	ldr	r3, [pc, #36]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b136:	220c      	movs	r2, #12
 800b138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b13a:	4b08      	ldr	r3, [pc, #32]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b140:	4b06      	ldr	r3, [pc, #24]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b142:	2200      	movs	r2, #0
 800b144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b146:	4805      	ldr	r0, [pc, #20]	; (800b15c <MX_USART2_UART_Init+0x4c>)
 800b148:	f001 fd0e 	bl	800cb68 <HAL_UART_Init>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b152:	f7ff ff07 	bl	800af64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b156:	bf00      	nop
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20000070 	.word	0x20000070
 800b160:	40004400 	.word	0x40004400

0800b164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08a      	sub	sp, #40	; 0x28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b16c:	f107 0314 	add.w	r3, r7, #20
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	605a      	str	r2, [r3, #4]
 800b176:	609a      	str	r2, [r3, #8]
 800b178:	60da      	str	r2, [r3, #12]
 800b17a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <HAL_UART_MspInit+0x84>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d12b      	bne.n	800b1de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b194:	6413      	str	r3, [r2, #64]	; 0x40
 800b196:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1aa:	4a10      	ldr	r2, [pc, #64]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b1ac:	f043 0301 	orr.w	r3, r3, #1
 800b1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b1b2:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <HAL_UART_MspInit+0x88>)
 800b1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b1be:	230c      	movs	r3, #12
 800b1c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b1ce:	2307      	movs	r3, #7
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <HAL_UART_MspInit+0x8c>)
 800b1da:	f000 f9dd 	bl	800b598 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b1de:	bf00      	nop
 800b1e0:	3728      	adds	r7, #40	; 0x28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	40004400 	.word	0x40004400
 800b1ec:	40023800 	.word	0x40023800
 800b1f0:	40020000 	.word	0x40020000

0800b1f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b1f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b22c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b1f8:	480d      	ldr	r0, [pc, #52]	; (800b230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b1fa:	490e      	ldr	r1, [pc, #56]	; (800b234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b1fc:	4a0e      	ldr	r2, [pc, #56]	; (800b238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b1fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b200:	e002      	b.n	800b208 <LoopCopyDataInit>

0800b202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b206:	3304      	adds	r3, #4

0800b208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b20a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b20c:	d3f9      	bcc.n	800b202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b20e:	4a0b      	ldr	r2, [pc, #44]	; (800b23c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b210:	4c0b      	ldr	r4, [pc, #44]	; (800b240 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b212:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b214:	e001      	b.n	800b21a <LoopFillZerobss>

0800b216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b218:	3204      	adds	r2, #4

0800b21a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b21a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b21c:	d3fb      	bcc.n	800b216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b21e:	f7ff ff03 	bl	800b028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b222:	f002 f863 	bl	800d2ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b226:	f7ff fde5 	bl	800adf4 <main>
  bx  lr    
 800b22a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b22c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b234:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800b238:	0800d398 	.word	0x0800d398
  ldr r2, =_sbss
 800b23c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800b240:	200000b8 	.word	0x200000b8

0800b244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b244:	e7fe      	b.n	800b244 <ADC_IRQHandler>
	...

0800b248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b24c:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <HAL_Init+0x40>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a0d      	ldr	r2, [pc, #52]	; (800b288 <HAL_Init+0x40>)
 800b252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b258:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <HAL_Init+0x40>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a0a      	ldr	r2, [pc, #40]	; (800b288 <HAL_Init+0x40>)
 800b25e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b264:	4b08      	ldr	r3, [pc, #32]	; (800b288 <HAL_Init+0x40>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a07      	ldr	r2, [pc, #28]	; (800b288 <HAL_Init+0x40>)
 800b26a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b26e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b270:	2003      	movs	r0, #3
 800b272:	f000 f94f 	bl	800b514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b276:	2000      	movs	r0, #0
 800b278:	f000 f808 	bl	800b28c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b27c:	f7ff fe78 	bl	800af70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	40023c00 	.word	0x40023c00

0800b28c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b294:	4b12      	ldr	r3, [pc, #72]	; (800b2e0 <HAL_InitTick+0x54>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <HAL_InitTick+0x58>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b2a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 f967 	bl	800b57e <HAL_SYSTICK_Config>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e00e      	b.n	800b2d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b0f      	cmp	r3, #15
 800b2be:	d80a      	bhi.n	800b2d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	6879      	ldr	r1, [r7, #4]
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c8:	f000 f92f 	bl	800b52a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b2cc:	4a06      	ldr	r2, [pc, #24]	; (800b2e8 <HAL_InitTick+0x5c>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e000      	b.n	800b2d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20000000 	.word	0x20000000
 800b2e4:	20000008 	.word	0x20000008
 800b2e8:	20000004 	.word	0x20000004

0800b2ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b2f0:	4b06      	ldr	r3, [pc, #24]	; (800b30c <HAL_IncTick+0x20>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4b06      	ldr	r3, [pc, #24]	; (800b310 <HAL_IncTick+0x24>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	4a04      	ldr	r2, [pc, #16]	; (800b310 <HAL_IncTick+0x24>)
 800b2fe:	6013      	str	r3, [r2, #0]
}
 800b300:	bf00      	nop
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000008 	.word	0x20000008
 800b310:	200000b4 	.word	0x200000b4

0800b314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0
  return uwTick;
 800b318:	4b03      	ldr	r3, [pc, #12]	; (800b328 <HAL_GetTick+0x14>)
 800b31a:	681b      	ldr	r3, [r3, #0]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	200000b4 	.word	0x200000b4

0800b32c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b334:	f7ff ffee 	bl	800b314 <HAL_GetTick>
 800b338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b344:	d005      	beq.n	800b352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b346:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <HAL_Delay+0x44>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b352:	bf00      	nop
 800b354:	f7ff ffde 	bl	800b314 <HAL_GetTick>
 800b358:	4602      	mov	r2, r0
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	429a      	cmp	r2, r3
 800b362:	d8f7      	bhi.n	800b354 <HAL_Delay+0x28>
  {
  }
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20000008 	.word	0x20000008

0800b374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <__NVIC_SetPriorityGrouping+0x44>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b390:	4013      	ands	r3, r2
 800b392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b39c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b3a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b3a6:	4a04      	ldr	r2, [pc, #16]	; (800b3b8 <__NVIC_SetPriorityGrouping+0x44>)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	60d3      	str	r3, [r2, #12]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	e000ed00 	.word	0xe000ed00

0800b3bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <__NVIC_GetPriorityGrouping+0x18>)
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	0a1b      	lsrs	r3, r3, #8
 800b3c6:	f003 0307 	and.w	r3, r3, #7
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	e000ed00 	.word	0xe000ed00

0800b3d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	db0b      	blt.n	800b402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	f003 021f 	and.w	r2, r3, #31
 800b3f0:	4907      	ldr	r1, [pc, #28]	; (800b410 <__NVIC_EnableIRQ+0x38>)
 800b3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	fa00 f202 	lsl.w	r2, r0, r2
 800b3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	e000e100 	.word	0xe000e100

0800b414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b424:	2b00      	cmp	r3, #0
 800b426:	db0a      	blt.n	800b43e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	490c      	ldr	r1, [pc, #48]	; (800b460 <__NVIC_SetPriority+0x4c>)
 800b42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b432:	0112      	lsls	r2, r2, #4
 800b434:	b2d2      	uxtb	r2, r2
 800b436:	440b      	add	r3, r1
 800b438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b43c:	e00a      	b.n	800b454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	4908      	ldr	r1, [pc, #32]	; (800b464 <__NVIC_SetPriority+0x50>)
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	3b04      	subs	r3, #4
 800b44c:	0112      	lsls	r2, r2, #4
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	440b      	add	r3, r1
 800b452:	761a      	strb	r2, [r3, #24]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	e000e100 	.word	0xe000e100
 800b464:	e000ed00 	.word	0xe000ed00

0800b468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b468:	b480      	push	{r7}
 800b46a:	b089      	sub	sp, #36	; 0x24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f003 0307 	and.w	r3, r3, #7
 800b47a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f1c3 0307 	rsb	r3, r3, #7
 800b482:	2b04      	cmp	r3, #4
 800b484:	bf28      	it	cs
 800b486:	2304      	movcs	r3, #4
 800b488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	3304      	adds	r3, #4
 800b48e:	2b06      	cmp	r3, #6
 800b490:	d902      	bls.n	800b498 <NVIC_EncodePriority+0x30>
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	3b03      	subs	r3, #3
 800b496:	e000      	b.n	800b49a <NVIC_EncodePriority+0x32>
 800b498:	2300      	movs	r3, #0
 800b49a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a6:	43da      	mvns	r2, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	401a      	ands	r2, r3
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b4b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ba:	43d9      	mvns	r1, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4c0:	4313      	orrs	r3, r2
         );
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3724      	adds	r7, #36	; 0x24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
	...

0800b4d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4e0:	d301      	bcc.n	800b4e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e00f      	b.n	800b506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b4e6:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <SysTick_Config+0x40>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b4ee:	210f      	movs	r1, #15
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f4:	f7ff ff8e 	bl	800b414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <SysTick_Config+0x40>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b4fe:	4b04      	ldr	r3, [pc, #16]	; (800b510 <SysTick_Config+0x40>)
 800b500:	2207      	movs	r2, #7
 800b502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	e000e010 	.word	0xe000e010

0800b514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ff29 	bl	800b374 <__NVIC_SetPriorityGrouping>
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b086      	sub	sp, #24
 800b52e:	af00      	add	r7, sp, #0
 800b530:	4603      	mov	r3, r0
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
 800b536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b53c:	f7ff ff3e 	bl	800b3bc <__NVIC_GetPriorityGrouping>
 800b540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	6978      	ldr	r0, [r7, #20]
 800b548:	f7ff ff8e 	bl	800b468 <NVIC_EncodePriority>
 800b54c:	4602      	mov	r2, r0
 800b54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff ff5d 	bl	800b414 <__NVIC_SetPriority>
}
 800b55a:	bf00      	nop
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	4603      	mov	r3, r0
 800b56a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b56c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b570:	4618      	mov	r0, r3
 800b572:	f7ff ff31 	bl	800b3d8 <__NVIC_EnableIRQ>
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff ffa2 	bl	800b4d0 <SysTick_Config>
 800b58c:	4603      	mov	r3, r0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b598:	b480      	push	{r7}
 800b59a:	b089      	sub	sp, #36	; 0x24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61fb      	str	r3, [r7, #28]
 800b5b2:	e165      	b.n	800b880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	f040 8154 	bne.w	800b87a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d005      	beq.n	800b5ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d130      	bne.n	800b64c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fa:	43db      	mvns	r3, r3
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	4013      	ands	r3, r2
 800b600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	fa02 f303 	lsl.w	r3, r2, r3
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	4313      	orrs	r3, r2
 800b612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	69ba      	ldr	r2, [r7, #24]
 800b618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b620:	2201      	movs	r2, #1
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	fa02 f303 	lsl.w	r3, r2, r3
 800b628:	43db      	mvns	r3, r3
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	4013      	ands	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	091b      	lsrs	r3, r3, #4
 800b636:	f003 0201 	and.w	r2, r3, #1
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	4313      	orrs	r3, r2
 800b644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f003 0303 	and.w	r3, r3, #3
 800b654:	2b03      	cmp	r3, #3
 800b656:	d017      	beq.n	800b688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	005b      	lsls	r3, r3, #1
 800b662:	2203      	movs	r2, #3
 800b664:	fa02 f303 	lsl.w	r3, r2, r3
 800b668:	43db      	mvns	r3, r3
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	4013      	ands	r3, r2
 800b66e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	fa02 f303 	lsl.w	r3, r2, r3
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	4313      	orrs	r3, r2
 800b680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	2b02      	cmp	r3, #2
 800b692:	d123      	bne.n	800b6dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	08da      	lsrs	r2, r3, #3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3208      	adds	r2, #8
 800b69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	f003 0307 	and.w	r3, r3, #7
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	220f      	movs	r2, #15
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	691a      	ldr	r2, [r3, #16]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	08da      	lsrs	r2, r3, #3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3208      	adds	r2, #8
 800b6d6:	69b9      	ldr	r1, [r7, #24]
 800b6d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	2203      	movs	r2, #3
 800b6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f003 0203 	and.w	r2, r3, #3
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	fa02 f303 	lsl.w	r3, r2, r3
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	4313      	orrs	r3, r2
 800b708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 80ae 	beq.w	800b87a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b71e:	2300      	movs	r3, #0
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	4b5d      	ldr	r3, [pc, #372]	; (800b898 <HAL_GPIO_Init+0x300>)
 800b724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b726:	4a5c      	ldr	r2, [pc, #368]	; (800b898 <HAL_GPIO_Init+0x300>)
 800b728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b72c:	6453      	str	r3, [r2, #68]	; 0x44
 800b72e:	4b5a      	ldr	r3, [pc, #360]	; (800b898 <HAL_GPIO_Init+0x300>)
 800b730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b73a:	4a58      	ldr	r2, [pc, #352]	; (800b89c <HAL_GPIO_Init+0x304>)
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	089b      	lsrs	r3, r3, #2
 800b740:	3302      	adds	r3, #2
 800b742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	f003 0303 	and.w	r3, r3, #3
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	220f      	movs	r2, #15
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	43db      	mvns	r3, r3
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	4013      	ands	r3, r2
 800b75c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a4f      	ldr	r2, [pc, #316]	; (800b8a0 <HAL_GPIO_Init+0x308>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d025      	beq.n	800b7b2 <HAL_GPIO_Init+0x21a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a4e      	ldr	r2, [pc, #312]	; (800b8a4 <HAL_GPIO_Init+0x30c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d01f      	beq.n	800b7ae <HAL_GPIO_Init+0x216>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a4d      	ldr	r2, [pc, #308]	; (800b8a8 <HAL_GPIO_Init+0x310>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d019      	beq.n	800b7aa <HAL_GPIO_Init+0x212>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a4c      	ldr	r2, [pc, #304]	; (800b8ac <HAL_GPIO_Init+0x314>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d013      	beq.n	800b7a6 <HAL_GPIO_Init+0x20e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a4b      	ldr	r2, [pc, #300]	; (800b8b0 <HAL_GPIO_Init+0x318>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d00d      	beq.n	800b7a2 <HAL_GPIO_Init+0x20a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a4a      	ldr	r2, [pc, #296]	; (800b8b4 <HAL_GPIO_Init+0x31c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d007      	beq.n	800b79e <HAL_GPIO_Init+0x206>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a49      	ldr	r2, [pc, #292]	; (800b8b8 <HAL_GPIO_Init+0x320>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d101      	bne.n	800b79a <HAL_GPIO_Init+0x202>
 800b796:	2306      	movs	r3, #6
 800b798:	e00c      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b79a:	2307      	movs	r3, #7
 800b79c:	e00a      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b79e:	2305      	movs	r3, #5
 800b7a0:	e008      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	e006      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e004      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	e002      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <HAL_GPIO_Init+0x21c>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	69fa      	ldr	r2, [r7, #28]
 800b7b6:	f002 0203 	and.w	r2, r2, #3
 800b7ba:	0092      	lsls	r2, r2, #2
 800b7bc:	4093      	lsls	r3, r2
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7c4:	4935      	ldr	r1, [pc, #212]	; (800b89c <HAL_GPIO_Init+0x304>)
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	089b      	lsrs	r3, r3, #2
 800b7ca:	3302      	adds	r3, #2
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b7d2:	4b3a      	ldr	r3, [pc, #232]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	43db      	mvns	r3, r3
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d003      	beq.n	800b7f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b7ee:	69ba      	ldr	r2, [r7, #24]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b7f6:	4a31      	ldr	r2, [pc, #196]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b7fc:	4b2f      	ldr	r3, [pc, #188]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	43db      	mvns	r3, r3
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	4013      	ands	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b820:	4a26      	ldr	r2, [pc, #152]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b826:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	43db      	mvns	r3, r3
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	4013      	ands	r3, r2
 800b834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	4313      	orrs	r3, r2
 800b848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b84a:	4a1c      	ldr	r2, [pc, #112]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b850:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	43db      	mvns	r3, r3
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	4013      	ands	r3, r2
 800b85e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b86c:	69ba      	ldr	r2, [r7, #24]
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	4313      	orrs	r3, r2
 800b872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b874:	4a11      	ldr	r2, [pc, #68]	; (800b8bc <HAL_GPIO_Init+0x324>)
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	3301      	adds	r3, #1
 800b87e:	61fb      	str	r3, [r7, #28]
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2b0f      	cmp	r3, #15
 800b884:	f67f ae96 	bls.w	800b5b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	3724      	adds	r7, #36	; 0x24
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	40023800 	.word	0x40023800
 800b89c:	40013800 	.word	0x40013800
 800b8a0:	40020000 	.word	0x40020000
 800b8a4:	40020400 	.word	0x40020400
 800b8a8:	40020800 	.word	0x40020800
 800b8ac:	40020c00 	.word	0x40020c00
 800b8b0:	40021000 	.word	0x40021000
 800b8b4:	40021400 	.word	0x40021400
 800b8b8:	40021800 	.word	0x40021800
 800b8bc:	40013c00 	.word	0x40013c00

0800b8c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691a      	ldr	r2, [r3, #16]
 800b8d0:	887b      	ldrh	r3, [r7, #2]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
 800b8dc:	e001      	b.n	800b8e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	807b      	strh	r3, [r7, #2]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b900:	787b      	ldrb	r3, [r7, #1]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b906:	887a      	ldrh	r2, [r7, #2]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b90c:	e003      	b.n	800b916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b90e:	887b      	ldrh	r3, [r7, #2]
 800b910:	041a      	lsls	r2, r3, #16
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	619a      	str	r2, [r3, #24]
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b934:	887a      	ldrh	r2, [r7, #2]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4013      	ands	r3, r2
 800b93a:	041a      	lsls	r2, r3, #16
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	43d9      	mvns	r1, r3
 800b940:	887b      	ldrh	r3, [r7, #2]
 800b942:	400b      	ands	r3, r1
 800b944:	431a      	orrs	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	619a      	str	r2, [r3, #24]
}
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e0cc      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b96c:	4b68      	ldr	r3, [pc, #416]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 030f 	and.w	r3, r3, #15
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d90c      	bls.n	800b994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b97a:	4b65      	ldr	r3, [pc, #404]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	b2d2      	uxtb	r2, r2
 800b980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b982:	4b63      	ldr	r3, [pc, #396]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 030f 	and.w	r3, r3, #15
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d001      	beq.n	800b994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e0b8      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d020      	beq.n	800b9e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b9ac:	4b59      	ldr	r3, [pc, #356]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4a58      	ldr	r2, [pc, #352]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b9b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b9c4:	4b53      	ldr	r3, [pc, #332]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	4a52      	ldr	r2, [pc, #328]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b9ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9d0:	4b50      	ldr	r3, [pc, #320]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	494d      	ldr	r1, [pc, #308]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d044      	beq.n	800ba78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d107      	bne.n	800ba06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9f6:	4b47      	ldr	r3, [pc, #284]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d119      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e07f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d003      	beq.n	800ba16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d107      	bne.n	800ba26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba16:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e06f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba26:	4b3b      	ldr	r3, [pc, #236]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0302 	and.w	r3, r3, #2
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e067      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba36:	4b37      	ldr	r3, [pc, #220]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 0203 	bic.w	r2, r3, #3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4934      	ldr	r1, [pc, #208]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba48:	f7ff fc64 	bl	800b314 <HAL_GetTick>
 800ba4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba4e:	e00a      	b.n	800ba66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba50:	f7ff fc60 	bl	800b314 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e04f      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba66:	4b2b      	ldr	r3, [pc, #172]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 020c 	and.w	r2, r3, #12
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d1eb      	bne.n	800ba50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba78:	4b25      	ldr	r3, [pc, #148]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d20c      	bcs.n	800baa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba86:	4b22      	ldr	r3, [pc, #136]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba8e:	4b20      	ldr	r3, [pc, #128]	; (800bb10 <HAL_RCC_ClockConfig+0x1b8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d001      	beq.n	800baa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e032      	b.n	800bb06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800baac:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	4916      	ldr	r1, [pc, #88]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800baba:	4313      	orrs	r3, r2
 800babc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 0308 	and.w	r3, r3, #8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800baca:	4b12      	ldr	r3, [pc, #72]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	490e      	ldr	r1, [pc, #56]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bada:	4313      	orrs	r3, r2
 800badc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bade:	f000 f855 	bl	800bb8c <HAL_RCC_GetSysClockFreq>
 800bae2:	4602      	mov	r2, r0
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <HAL_RCC_ClockConfig+0x1bc>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	091b      	lsrs	r3, r3, #4
 800baea:	f003 030f 	and.w	r3, r3, #15
 800baee:	490a      	ldr	r1, [pc, #40]	; (800bb18 <HAL_RCC_ClockConfig+0x1c0>)
 800baf0:	5ccb      	ldrb	r3, [r1, r3]
 800baf2:	fa22 f303 	lsr.w	r3, r2, r3
 800baf6:	4a09      	ldr	r2, [pc, #36]	; (800bb1c <HAL_RCC_ClockConfig+0x1c4>)
 800baf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <HAL_RCC_ClockConfig+0x1c8>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff fbc4 	bl	800b28c <HAL_InitTick>

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40023c00 	.word	0x40023c00
 800bb14:	40023800 	.word	0x40023800
 800bb18:	0800d370 	.word	0x0800d370
 800bb1c:	20000000 	.word	0x20000000
 800bb20:	20000004 	.word	0x20000004

0800bb24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000000 	.word	0x20000000

0800bb3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bb40:	f7ff fff0 	bl	800bb24 <HAL_RCC_GetHCLKFreq>
 800bb44:	4602      	mov	r2, r0
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	0a9b      	lsrs	r3, r3, #10
 800bb4c:	f003 0307 	and.w	r3, r3, #7
 800bb50:	4903      	ldr	r1, [pc, #12]	; (800bb60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb52:	5ccb      	ldrb	r3, [r1, r3]
 800bb54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	40023800 	.word	0x40023800
 800bb60:	0800d380 	.word	0x0800d380

0800bb64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bb68:	f7ff ffdc 	bl	800bb24 <HAL_RCC_GetHCLKFreq>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	0b5b      	lsrs	r3, r3, #13
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	4903      	ldr	r1, [pc, #12]	; (800bb88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb7a:	5ccb      	ldrb	r3, [r1, r3]
 800bb7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	40023800 	.word	0x40023800
 800bb88:	0800d380 	.word	0x0800d380

0800bb8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb90:	b0ae      	sub	sp, #184	; 0xb8
 800bb92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbb2:	4bcb      	ldr	r3, [pc, #812]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 030c 	and.w	r3, r3, #12
 800bbba:	2b0c      	cmp	r3, #12
 800bbbc:	f200 8206 	bhi.w	800bfcc <HAL_RCC_GetSysClockFreq+0x440>
 800bbc0:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bbfd 	.word	0x0800bbfd
 800bbcc:	0800bfcd 	.word	0x0800bfcd
 800bbd0:	0800bfcd 	.word	0x0800bfcd
 800bbd4:	0800bfcd 	.word	0x0800bfcd
 800bbd8:	0800bc05 	.word	0x0800bc05
 800bbdc:	0800bfcd 	.word	0x0800bfcd
 800bbe0:	0800bfcd 	.word	0x0800bfcd
 800bbe4:	0800bfcd 	.word	0x0800bfcd
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bfcd 	.word	0x0800bfcd
 800bbf0:	0800bfcd 	.word	0x0800bfcd
 800bbf4:	0800bfcd 	.word	0x0800bfcd
 800bbf8:	0800bdfd 	.word	0x0800bdfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bbfc:	4bb9      	ldr	r3, [pc, #740]	; (800bee4 <HAL_RCC_GetSysClockFreq+0x358>)
 800bbfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800bc02:	e1e7      	b.n	800bfd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc04:	4bb8      	ldr	r3, [pc, #736]	; (800bee8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bc06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bc0a:	e1e3      	b.n	800bfd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc0c:	4bb4      	ldr	r3, [pc, #720]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bc18:	4bb1      	ldr	r3, [pc, #708]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d071      	beq.n	800bd08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc24:	4bae      	ldr	r3, [pc, #696]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	099b      	lsrs	r3, r3, #6
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bc34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc40:	2300      	movs	r3, #0
 800bc42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f04f 0000 	mov.w	r0, #0
 800bc52:	f04f 0100 	mov.w	r1, #0
 800bc56:	0159      	lsls	r1, r3, #5
 800bc58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bc5c:	0150      	lsls	r0, r2, #5
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4621      	mov	r1, r4
 800bc64:	1a51      	subs	r1, r2, r1
 800bc66:	6439      	str	r1, [r7, #64]	; 0x40
 800bc68:	4629      	mov	r1, r5
 800bc6a:	eb63 0301 	sbc.w	r3, r3, r1
 800bc6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc70:	f04f 0200 	mov.w	r2, #0
 800bc74:	f04f 0300 	mov.w	r3, #0
 800bc78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	018b      	lsls	r3, r1, #6
 800bc80:	4641      	mov	r1, r8
 800bc82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bc86:	4641      	mov	r1, r8
 800bc88:	018a      	lsls	r2, r1, #6
 800bc8a:	4641      	mov	r1, r8
 800bc8c:	1a51      	subs	r1, r2, r1
 800bc8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc90:	4649      	mov	r1, r9
 800bc92:	eb63 0301 	sbc.w	r3, r3, r1
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc98:	f04f 0200 	mov.w	r2, #0
 800bc9c:	f04f 0300 	mov.w	r3, #0
 800bca0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800bca4:	4649      	mov	r1, r9
 800bca6:	00cb      	lsls	r3, r1, #3
 800bca8:	4641      	mov	r1, r8
 800bcaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcae:	4641      	mov	r1, r8
 800bcb0:	00ca      	lsls	r2, r1, #3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	4622      	mov	r2, r4
 800bcba:	189b      	adds	r3, r3, r2
 800bcbc:	633b      	str	r3, [r7, #48]	; 0x30
 800bcbe:	462b      	mov	r3, r5
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	eb42 0303 	adc.w	r3, r2, r3
 800bcc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	024b      	lsls	r3, r1, #9
 800bcd8:	4621      	mov	r1, r4
 800bcda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800bcde:	4621      	mov	r1, r4
 800bce0:	024a      	lsls	r2, r1, #9
 800bce2:	4610      	mov	r0, r2
 800bce4:	4619      	mov	r1, r3
 800bce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcea:	2200      	movs	r2, #0
 800bcec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bcf8:	f7fe fe8c 	bl	800aa14 <__aeabi_uldivmod>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4613      	mov	r3, r2
 800bd02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd06:	e067      	b.n	800bdd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd08:	4b75      	ldr	r3, [pc, #468]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	099b      	lsrs	r3, r3, #6
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800bd18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd22:	2300      	movs	r3, #0
 800bd24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f04f 0000 	mov.w	r0, #0
 800bd32:	f04f 0100 	mov.w	r1, #0
 800bd36:	0159      	lsls	r1, r3, #5
 800bd38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bd3c:	0150      	lsls	r0, r2, #5
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4621      	mov	r1, r4
 800bd44:	1a51      	subs	r1, r2, r1
 800bd46:	62b9      	str	r1, [r7, #40]	; 0x28
 800bd48:	4629      	mov	r1, r5
 800bd4a:	eb63 0301 	sbc.w	r3, r3, r1
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd50:	f04f 0200 	mov.w	r2, #0
 800bd54:	f04f 0300 	mov.w	r3, #0
 800bd58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	018b      	lsls	r3, r1, #6
 800bd60:	4641      	mov	r1, r8
 800bd62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bd66:	4641      	mov	r1, r8
 800bd68:	018a      	lsls	r2, r1, #6
 800bd6a:	4641      	mov	r1, r8
 800bd6c:	ebb2 0a01 	subs.w	sl, r2, r1
 800bd70:	4649      	mov	r1, r9
 800bd72:	eb63 0b01 	sbc.w	fp, r3, r1
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd8a:	4692      	mov	sl, r2
 800bd8c:	469b      	mov	fp, r3
 800bd8e:	4623      	mov	r3, r4
 800bd90:	eb1a 0303 	adds.w	r3, sl, r3
 800bd94:	623b      	str	r3, [r7, #32]
 800bd96:	462b      	mov	r3, r5
 800bd98:	eb4b 0303 	adc.w	r3, fp, r3
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	f04f 0300 	mov.w	r3, #0
 800bda6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800bdaa:	4629      	mov	r1, r5
 800bdac:	028b      	lsls	r3, r1, #10
 800bdae:	4621      	mov	r1, r4
 800bdb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	028a      	lsls	r2, r1, #10
 800bdb8:	4610      	mov	r0, r2
 800bdba:	4619      	mov	r1, r3
 800bdbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	673b      	str	r3, [r7, #112]	; 0x70
 800bdc4:	677a      	str	r2, [r7, #116]	; 0x74
 800bdc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800bdca:	f7fe fe23 	bl	800aa14 <__aeabi_uldivmod>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bdd8:	4b41      	ldr	r3, [pc, #260]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	0c1b      	lsrs	r3, r3, #16
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	3301      	adds	r3, #1
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800bdea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bdee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bdfa:	e0eb      	b.n	800bfd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bdfc:	4b38      	ldr	r3, [pc, #224]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be08:	4b35      	ldr	r3, [pc, #212]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d06b      	beq.n	800beec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be14:	4b32      	ldr	r3, [pc, #200]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x354>)
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	099b      	lsrs	r3, r3, #6
 800be1a:	2200      	movs	r2, #0
 800be1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be26:	663b      	str	r3, [r7, #96]	; 0x60
 800be28:	2300      	movs	r3, #0
 800be2a:	667b      	str	r3, [r7, #100]	; 0x64
 800be2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	f04f 0000 	mov.w	r0, #0
 800be38:	f04f 0100 	mov.w	r1, #0
 800be3c:	0159      	lsls	r1, r3, #5
 800be3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800be42:	0150      	lsls	r0, r2, #5
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4621      	mov	r1, r4
 800be4a:	1a51      	subs	r1, r2, r1
 800be4c:	61b9      	str	r1, [r7, #24]
 800be4e:	4629      	mov	r1, r5
 800be50:	eb63 0301 	sbc.w	r3, r3, r1
 800be54:	61fb      	str	r3, [r7, #28]
 800be56:	f04f 0200 	mov.w	r2, #0
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800be62:	4659      	mov	r1, fp
 800be64:	018b      	lsls	r3, r1, #6
 800be66:	4651      	mov	r1, sl
 800be68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800be6c:	4651      	mov	r1, sl
 800be6e:	018a      	lsls	r2, r1, #6
 800be70:	4651      	mov	r1, sl
 800be72:	ebb2 0801 	subs.w	r8, r2, r1
 800be76:	4659      	mov	r1, fp
 800be78:	eb63 0901 	sbc.w	r9, r3, r1
 800be7c:	f04f 0200 	mov.w	r2, #0
 800be80:	f04f 0300 	mov.w	r3, #0
 800be84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be90:	4690      	mov	r8, r2
 800be92:	4699      	mov	r9, r3
 800be94:	4623      	mov	r3, r4
 800be96:	eb18 0303 	adds.w	r3, r8, r3
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	462b      	mov	r3, r5
 800be9e:	eb49 0303 	adc.w	r3, r9, r3
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	f04f 0200 	mov.w	r2, #0
 800bea8:	f04f 0300 	mov.w	r3, #0
 800beac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800beb0:	4629      	mov	r1, r5
 800beb2:	024b      	lsls	r3, r1, #9
 800beb4:	4621      	mov	r1, r4
 800beb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800beba:	4621      	mov	r1, r4
 800bebc:	024a      	lsls	r2, r1, #9
 800bebe:	4610      	mov	r0, r2
 800bec0:	4619      	mov	r1, r3
 800bec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bec6:	2200      	movs	r2, #0
 800bec8:	65bb      	str	r3, [r7, #88]	; 0x58
 800beca:	65fa      	str	r2, [r7, #92]	; 0x5c
 800becc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bed0:	f7fe fda0 	bl	800aa14 <__aeabi_uldivmod>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4613      	mov	r3, r2
 800beda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bede:	e065      	b.n	800bfac <HAL_RCC_GetSysClockFreq+0x420>
 800bee0:	40023800 	.word	0x40023800
 800bee4:	00f42400 	.word	0x00f42400
 800bee8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800beec:	4b3d      	ldr	r3, [pc, #244]	; (800bfe4 <HAL_RCC_GetSysClockFreq+0x458>)
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	099b      	lsrs	r3, r3, #6
 800bef2:	2200      	movs	r2, #0
 800bef4:	4618      	mov	r0, r3
 800bef6:	4611      	mov	r1, r2
 800bef8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800befc:	653b      	str	r3, [r7, #80]	; 0x50
 800befe:	2300      	movs	r3, #0
 800bf00:	657b      	str	r3, [r7, #84]	; 0x54
 800bf02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800bf06:	4642      	mov	r2, r8
 800bf08:	464b      	mov	r3, r9
 800bf0a:	f04f 0000 	mov.w	r0, #0
 800bf0e:	f04f 0100 	mov.w	r1, #0
 800bf12:	0159      	lsls	r1, r3, #5
 800bf14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf18:	0150      	lsls	r0, r2, #5
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4641      	mov	r1, r8
 800bf20:	1a51      	subs	r1, r2, r1
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	4649      	mov	r1, r9
 800bf26:	eb63 0301 	sbc.w	r3, r3, r1
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	f04f 0300 	mov.w	r3, #0
 800bf34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800bf38:	4659      	mov	r1, fp
 800bf3a:	018b      	lsls	r3, r1, #6
 800bf3c:	4651      	mov	r1, sl
 800bf3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bf42:	4651      	mov	r1, sl
 800bf44:	018a      	lsls	r2, r1, #6
 800bf46:	4651      	mov	r1, sl
 800bf48:	1a54      	subs	r4, r2, r1
 800bf4a:	4659      	mov	r1, fp
 800bf4c:	eb63 0501 	sbc.w	r5, r3, r1
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	f04f 0300 	mov.w	r3, #0
 800bf58:	00eb      	lsls	r3, r5, #3
 800bf5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf5e:	00e2      	lsls	r2, r4, #3
 800bf60:	4614      	mov	r4, r2
 800bf62:	461d      	mov	r5, r3
 800bf64:	4643      	mov	r3, r8
 800bf66:	18e3      	adds	r3, r4, r3
 800bf68:	603b      	str	r3, [r7, #0]
 800bf6a:	464b      	mov	r3, r9
 800bf6c:	eb45 0303 	adc.w	r3, r5, r3
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	f04f 0200 	mov.w	r2, #0
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bf7e:	4629      	mov	r1, r5
 800bf80:	028b      	lsls	r3, r1, #10
 800bf82:	4621      	mov	r1, r4
 800bf84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf88:	4621      	mov	r1, r4
 800bf8a:	028a      	lsls	r2, r1, #10
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf94:	2200      	movs	r2, #0
 800bf96:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf98:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bf9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf9e:	f7fe fd39 	bl	800aa14 <__aeabi_uldivmod>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <HAL_RCC_GetSysClockFreq+0x458>)
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	0f1b      	lsrs	r3, r3, #28
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800bfba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bfca:	e003      	b.n	800bfd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bfcc:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800bfce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bfd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bfd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	37b8      	adds	r7, #184	; 0xb8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfe2:	bf00      	nop
 800bfe4:	40023800 	.word	0x40023800
 800bfe8:	00f42400 	.word	0x00f42400

0800bfec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e28d      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8083 	beq.w	800c112 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c00c:	4b94      	ldr	r3, [pc, #592]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 030c 	and.w	r3, r3, #12
 800c014:	2b04      	cmp	r3, #4
 800c016:	d019      	beq.n	800c04c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c018:	4b91      	ldr	r3, [pc, #580]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c020:	2b08      	cmp	r3, #8
 800c022:	d106      	bne.n	800c032 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c024:	4b8e      	ldr	r3, [pc, #568]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c030:	d00c      	beq.n	800c04c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c032:	4b8b      	ldr	r3, [pc, #556]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c03a:	2b0c      	cmp	r3, #12
 800c03c:	d112      	bne.n	800c064 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c03e:	4b88      	ldr	r3, [pc, #544]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c04a:	d10b      	bne.n	800c064 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c04c:	4b84      	ldr	r3, [pc, #528]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d05b      	beq.n	800c110 <HAL_RCC_OscConfig+0x124>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d157      	bne.n	800c110 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e25a      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	d106      	bne.n	800c07c <HAL_RCC_OscConfig+0x90>
 800c06e:	4b7c      	ldr	r3, [pc, #496]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a7b      	ldr	r2, [pc, #492]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	e01d      	b.n	800c0b8 <HAL_RCC_OscConfig+0xcc>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c084:	d10c      	bne.n	800c0a0 <HAL_RCC_OscConfig+0xb4>
 800c086:	4b76      	ldr	r3, [pc, #472]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a75      	ldr	r2, [pc, #468]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c08c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	4b73      	ldr	r3, [pc, #460]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a72      	ldr	r2, [pc, #456]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	e00b      	b.n	800c0b8 <HAL_RCC_OscConfig+0xcc>
 800c0a0:	4b6f      	ldr	r3, [pc, #444]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a6e      	ldr	r2, [pc, #440]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c0a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	4b6c      	ldr	r3, [pc, #432]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a6b      	ldr	r2, [pc, #428]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c0b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d013      	beq.n	800c0e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c0:	f7ff f928 	bl	800b314 <HAL_GetTick>
 800c0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0c6:	e008      	b.n	800c0da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c0c8:	f7ff f924 	bl	800b314 <HAL_GetTick>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	2b64      	cmp	r3, #100	; 0x64
 800c0d4:	d901      	bls.n	800c0da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e21f      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0da:	4b61      	ldr	r3, [pc, #388]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0f0      	beq.n	800c0c8 <HAL_RCC_OscConfig+0xdc>
 800c0e6:	e014      	b.n	800c112 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e8:	f7ff f914 	bl	800b314 <HAL_GetTick>
 800c0ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c0ee:	e008      	b.n	800c102 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c0f0:	f7ff f910 	bl	800b314 <HAL_GetTick>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	2b64      	cmp	r3, #100	; 0x64
 800c0fc:	d901      	bls.n	800c102 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e20b      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c102:	4b57      	ldr	r3, [pc, #348]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1f0      	bne.n	800c0f0 <HAL_RCC_OscConfig+0x104>
 800c10e:	e000      	b.n	800c112 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d06f      	beq.n	800c1fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c11e:	4b50      	ldr	r3, [pc, #320]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 030c 	and.w	r3, r3, #12
 800c126:	2b00      	cmp	r3, #0
 800c128:	d017      	beq.n	800c15a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c12a:	4b4d      	ldr	r3, [pc, #308]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c132:	2b08      	cmp	r3, #8
 800c134:	d105      	bne.n	800c142 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c136:	4b4a      	ldr	r3, [pc, #296]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c142:	4b47      	ldr	r3, [pc, #284]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c14a:	2b0c      	cmp	r3, #12
 800c14c:	d11c      	bne.n	800c188 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c14e:	4b44      	ldr	r3, [pc, #272]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d116      	bne.n	800c188 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c15a:	4b41      	ldr	r3, [pc, #260]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d005      	beq.n	800c172 <HAL_RCC_OscConfig+0x186>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d001      	beq.n	800c172 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e1d3      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c172:	4b3b      	ldr	r3, [pc, #236]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	4937      	ldr	r1, [pc, #220]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c182:	4313      	orrs	r3, r2
 800c184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c186:	e03a      	b.n	800c1fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d020      	beq.n	800c1d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c190:	4b34      	ldr	r3, [pc, #208]	; (800c264 <HAL_RCC_OscConfig+0x278>)
 800c192:	2201      	movs	r2, #1
 800c194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c196:	f7ff f8bd 	bl	800b314 <HAL_GetTick>
 800c19a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c19c:	e008      	b.n	800c1b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c19e:	f7ff f8b9 	bl	800b314 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d901      	bls.n	800c1b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e1b4      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1b0:	4b2b      	ldr	r3, [pc, #172]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 0302 	and.w	r3, r3, #2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0f0      	beq.n	800c19e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c1bc:	4b28      	ldr	r3, [pc, #160]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	4925      	ldr	r1, [pc, #148]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	600b      	str	r3, [r1, #0]
 800c1d0:	e015      	b.n	800c1fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c1d2:	4b24      	ldr	r3, [pc, #144]	; (800c264 <HAL_RCC_OscConfig+0x278>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1d8:	f7ff f89c 	bl	800b314 <HAL_GetTick>
 800c1dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c1de:	e008      	b.n	800c1f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c1e0:	f7ff f898 	bl	800b314 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d901      	bls.n	800c1f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e193      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c1f2:	4b1b      	ldr	r3, [pc, #108]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1f0      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0308 	and.w	r3, r3, #8
 800c206:	2b00      	cmp	r3, #0
 800c208:	d036      	beq.n	800c278 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d016      	beq.n	800c240 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c212:	4b15      	ldr	r3, [pc, #84]	; (800c268 <HAL_RCC_OscConfig+0x27c>)
 800c214:	2201      	movs	r2, #1
 800c216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c218:	f7ff f87c 	bl	800b314 <HAL_GetTick>
 800c21c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c220:	f7ff f878 	bl	800b314 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e173      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <HAL_RCC_OscConfig+0x274>)
 800c234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0f0      	beq.n	800c220 <HAL_RCC_OscConfig+0x234>
 800c23e:	e01b      	b.n	800c278 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c240:	4b09      	ldr	r3, [pc, #36]	; (800c268 <HAL_RCC_OscConfig+0x27c>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c246:	f7ff f865 	bl	800b314 <HAL_GetTick>
 800c24a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c24c:	e00e      	b.n	800c26c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c24e:	f7ff f861 	bl	800b314 <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d907      	bls.n	800c26c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e15c      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
 800c260:	40023800 	.word	0x40023800
 800c264:	42470000 	.word	0x42470000
 800c268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c26c:	4b8a      	ldr	r3, [pc, #552]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ea      	bne.n	800c24e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 8097 	beq.w	800c3b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c286:	2300      	movs	r3, #0
 800c288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c28a:	4b83      	ldr	r3, [pc, #524]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10f      	bne.n	800c2b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c296:	2300      	movs	r3, #0
 800c298:	60bb      	str	r3, [r7, #8]
 800c29a:	4b7f      	ldr	r3, [pc, #508]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29e:	4a7e      	ldr	r2, [pc, #504]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2a6:	4b7c      	ldr	r3, [pc, #496]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ae:	60bb      	str	r3, [r7, #8]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2b6:	4b79      	ldr	r3, [pc, #484]	; (800c49c <HAL_RCC_OscConfig+0x4b0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d118      	bne.n	800c2f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c2c2:	4b76      	ldr	r3, [pc, #472]	; (800c49c <HAL_RCC_OscConfig+0x4b0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a75      	ldr	r2, [pc, #468]	; (800c49c <HAL_RCC_OscConfig+0x4b0>)
 800c2c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c2ce:	f7ff f821 	bl	800b314 <HAL_GetTick>
 800c2d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2d4:	e008      	b.n	800c2e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2d6:	f7ff f81d 	bl	800b314 <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d901      	bls.n	800c2e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e118      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c2e8:	4b6c      	ldr	r3, [pc, #432]	; (800c49c <HAL_RCC_OscConfig+0x4b0>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d0f0      	beq.n	800c2d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d106      	bne.n	800c30a <HAL_RCC_OscConfig+0x31e>
 800c2fc:	4b66      	ldr	r3, [pc, #408]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c300:	4a65      	ldr	r2, [pc, #404]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	6713      	str	r3, [r2, #112]	; 0x70
 800c308:	e01c      	b.n	800c344 <HAL_RCC_OscConfig+0x358>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d10c      	bne.n	800c32c <HAL_RCC_OscConfig+0x340>
 800c312:	4b61      	ldr	r3, [pc, #388]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c316:	4a60      	ldr	r2, [pc, #384]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c318:	f043 0304 	orr.w	r3, r3, #4
 800c31c:	6713      	str	r3, [r2, #112]	; 0x70
 800c31e:	4b5e      	ldr	r3, [pc, #376]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c322:	4a5d      	ldr	r2, [pc, #372]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c324:	f043 0301 	orr.w	r3, r3, #1
 800c328:	6713      	str	r3, [r2, #112]	; 0x70
 800c32a:	e00b      	b.n	800c344 <HAL_RCC_OscConfig+0x358>
 800c32c:	4b5a      	ldr	r3, [pc, #360]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c330:	4a59      	ldr	r2, [pc, #356]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c332:	f023 0301 	bic.w	r3, r3, #1
 800c336:	6713      	str	r3, [r2, #112]	; 0x70
 800c338:	4b57      	ldr	r3, [pc, #348]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33c:	4a56      	ldr	r2, [pc, #344]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c33e:	f023 0304 	bic.w	r3, r3, #4
 800c342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d015      	beq.n	800c378 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c34c:	f7fe ffe2 	bl	800b314 <HAL_GetTick>
 800c350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c352:	e00a      	b.n	800c36a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c354:	f7fe ffde 	bl	800b314 <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c362:	4293      	cmp	r3, r2
 800c364:	d901      	bls.n	800c36a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	e0d7      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c36a:	4b4b      	ldr	r3, [pc, #300]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36e:	f003 0302 	and.w	r3, r3, #2
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0ee      	beq.n	800c354 <HAL_RCC_OscConfig+0x368>
 800c376:	e014      	b.n	800c3a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c378:	f7fe ffcc 	bl	800b314 <HAL_GetTick>
 800c37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c37e:	e00a      	b.n	800c396 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c380:	f7fe ffc8 	bl	800b314 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c38e:	4293      	cmp	r3, r2
 800c390:	d901      	bls.n	800c396 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e0c1      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c396:	4b40      	ldr	r3, [pc, #256]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1ee      	bne.n	800c380 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d105      	bne.n	800c3b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3a8:	4b3b      	ldr	r3, [pc, #236]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ac:	4a3a      	ldr	r2, [pc, #232]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c3ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 80ad 	beq.w	800c518 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c3be:	4b36      	ldr	r3, [pc, #216]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f003 030c 	and.w	r3, r3, #12
 800c3c6:	2b08      	cmp	r3, #8
 800c3c8:	d060      	beq.n	800c48c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d145      	bne.n	800c45e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3d2:	4b33      	ldr	r3, [pc, #204]	; (800c4a0 <HAL_RCC_OscConfig+0x4b4>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3d8:	f7fe ff9c 	bl	800b314 <HAL_GetTick>
 800c3dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3de:	e008      	b.n	800c3f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c3e0:	f7fe ff98 	bl	800b314 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d901      	bls.n	800c3f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e093      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3f2:	4b29      	ldr	r3, [pc, #164]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1f0      	bne.n	800c3e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	69da      	ldr	r2, [r3, #28]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	431a      	orrs	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	019b      	lsls	r3, r3, #6
 800c40e:	431a      	orrs	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c414:	085b      	lsrs	r3, r3, #1
 800c416:	3b01      	subs	r3, #1
 800c418:	041b      	lsls	r3, r3, #16
 800c41a:	431a      	orrs	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	061b      	lsls	r3, r3, #24
 800c422:	431a      	orrs	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c428:	071b      	lsls	r3, r3, #28
 800c42a:	491b      	ldr	r1, [pc, #108]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c430:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <HAL_RCC_OscConfig+0x4b4>)
 800c432:	2201      	movs	r2, #1
 800c434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c436:	f7fe ff6d 	bl	800b314 <HAL_GetTick>
 800c43a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c43c:	e008      	b.n	800c450 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c43e:	f7fe ff69 	bl	800b314 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d901      	bls.n	800c450 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e064      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c450:	4b11      	ldr	r3, [pc, #68]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0f0      	beq.n	800c43e <HAL_RCC_OscConfig+0x452>
 800c45c:	e05c      	b.n	800c518 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c45e:	4b10      	ldr	r3, [pc, #64]	; (800c4a0 <HAL_RCC_OscConfig+0x4b4>)
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c464:	f7fe ff56 	bl	800b314 <HAL_GetTick>
 800c468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c46a:	e008      	b.n	800c47e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c46c:	f7fe ff52 	bl	800b314 <HAL_GetTick>
 800c470:	4602      	mov	r2, r0
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	2b02      	cmp	r3, #2
 800c478:	d901      	bls.n	800c47e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e04d      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c47e:	4b06      	ldr	r3, [pc, #24]	; (800c498 <HAL_RCC_OscConfig+0x4ac>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1f0      	bne.n	800c46c <HAL_RCC_OscConfig+0x480>
 800c48a:	e045      	b.n	800c518 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d107      	bne.n	800c4a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e040      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
 800c498:	40023800 	.word	0x40023800
 800c49c:	40007000 	.word	0x40007000
 800c4a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c4a4:	4b1f      	ldr	r3, [pc, #124]	; (800c524 <HAL_RCC_OscConfig+0x538>)
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d030      	beq.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d129      	bne.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d122      	bne.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d119      	bne.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ea:	085b      	lsrs	r3, r3, #1
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d10f      	bne.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c500:	429a      	cmp	r2, r3
 800c502:	d107      	bne.n	800c514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c510:	429a      	cmp	r2, r3
 800c512:	d001      	beq.n	800c518 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e000      	b.n	800c51a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	40023800 	.word	0x40023800

0800c528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e041      	b.n	800c5be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7fe fdb6 	bl	800b0c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f000 f9ce 	bl	800c908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d001      	beq.n	800c5e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e04e      	b.n	800c67e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2202      	movs	r2, #2
 800c5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f042 0201 	orr.w	r2, r2, #1
 800c5f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a23      	ldr	r2, [pc, #140]	; (800c68c <HAL_TIM_Base_Start_IT+0xc4>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d022      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60a:	d01d      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1f      	ldr	r2, [pc, #124]	; (800c690 <HAL_TIM_Base_Start_IT+0xc8>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d018      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <HAL_TIM_Base_Start_IT+0xcc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d013      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a1c      	ldr	r2, [pc, #112]	; (800c698 <HAL_TIM_Base_Start_IT+0xd0>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d00e      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <HAL_TIM_Base_Start_IT+0xd4>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d009      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a19      	ldr	r2, [pc, #100]	; (800c6a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d004      	beq.n	800c648 <HAL_TIM_Base_Start_IT+0x80>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a18      	ldr	r2, [pc, #96]	; (800c6a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d111      	bne.n	800c66c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 0307 	and.w	r3, r3, #7
 800c652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b06      	cmp	r3, #6
 800c658:	d010      	beq.n	800c67c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f042 0201 	orr.w	r2, r2, #1
 800c668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c66a:	e007      	b.n	800c67c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f042 0201 	orr.w	r2, r2, #1
 800c67a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3714      	adds	r7, #20
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	40010000 	.word	0x40010000
 800c690:	40000400 	.word	0x40000400
 800c694:	40000800 	.word	0x40000800
 800c698:	40000c00 	.word	0x40000c00
 800c69c:	40010400 	.word	0x40010400
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	40001800 	.word	0x40001800

0800c6a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d122      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d11b      	bne.n	800c704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f06f 0202 	mvn.w	r2, #2
 800c6d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	f003 0303 	and.w	r3, r3, #3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f8ee 	bl	800c8cc <HAL_TIM_IC_CaptureCallback>
 800c6f0:	e005      	b.n	800c6fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f8e0 	bl	800c8b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f8f1 	bl	800c8e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0304 	and.w	r3, r3, #4
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d122      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d11b      	bne.n	800c758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0204 	mvn.w	r2, #4
 800c728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2202      	movs	r2, #2
 800c72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f8c4 	bl	800c8cc <HAL_TIM_IC_CaptureCallback>
 800c744:	e005      	b.n	800c752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f8b6 	bl	800c8b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f8c7 	bl	800c8e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b08      	cmp	r3, #8
 800c764:	d122      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0308 	and.w	r3, r3, #8
 800c770:	2b08      	cmp	r3, #8
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0208 	mvn.w	r2, #8
 800c77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2204      	movs	r2, #4
 800c782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f89a 	bl	800c8cc <HAL_TIM_IC_CaptureCallback>
 800c798:	e005      	b.n	800c7a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f88c 	bl	800c8b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f89d 	bl	800c8e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d122      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f003 0310 	and.w	r3, r3, #16
 800c7c4:	2b10      	cmp	r3, #16
 800c7c6:	d11b      	bne.n	800c800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f06f 0210 	mvn.w	r2, #16
 800c7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2208      	movs	r2, #8
 800c7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f870 	bl	800c8cc <HAL_TIM_IC_CaptureCallback>
 800c7ec:	e005      	b.n	800c7fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f862 	bl	800c8b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f873 	bl	800c8e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d10e      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d107      	bne.n	800c82c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f06f 0201 	mvn.w	r2, #1
 800c824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7fe fb7c 	bl	800af24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	2b80      	cmp	r3, #128	; 0x80
 800c838:	d10e      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c844:	2b80      	cmp	r3, #128	; 0x80
 800c846:	d107      	bne.n	800c858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f97e 	bl	800cb54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c862:	2b40      	cmp	r3, #64	; 0x40
 800c864:	d10e      	bne.n	800c884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b40      	cmp	r3, #64	; 0x40
 800c872:	d107      	bne.n	800c884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c87c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f838 	bl	800c8f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	f003 0320 	and.w	r3, r3, #32
 800c88e:	2b20      	cmp	r3, #32
 800c890:	d10e      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f003 0320 	and.w	r3, r3, #32
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	d107      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f06f 0220 	mvn.w	r2, #32
 800c8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f948 	bl	800cb40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a40      	ldr	r2, [pc, #256]	; (800ca1c <TIM_Base_SetConfig+0x114>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d013      	beq.n	800c948 <TIM_Base_SetConfig+0x40>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c926:	d00f      	beq.n	800c948 <TIM_Base_SetConfig+0x40>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a3d      	ldr	r2, [pc, #244]	; (800ca20 <TIM_Base_SetConfig+0x118>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d00b      	beq.n	800c948 <TIM_Base_SetConfig+0x40>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a3c      	ldr	r2, [pc, #240]	; (800ca24 <TIM_Base_SetConfig+0x11c>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d007      	beq.n	800c948 <TIM_Base_SetConfig+0x40>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a3b      	ldr	r2, [pc, #236]	; (800ca28 <TIM_Base_SetConfig+0x120>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d003      	beq.n	800c948 <TIM_Base_SetConfig+0x40>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a3a      	ldr	r2, [pc, #232]	; (800ca2c <TIM_Base_SetConfig+0x124>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d108      	bne.n	800c95a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c94e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4313      	orrs	r3, r2
 800c958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a2f      	ldr	r2, [pc, #188]	; (800ca1c <TIM_Base_SetConfig+0x114>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d02b      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c968:	d027      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a2c      	ldr	r2, [pc, #176]	; (800ca20 <TIM_Base_SetConfig+0x118>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d023      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a2b      	ldr	r2, [pc, #172]	; (800ca24 <TIM_Base_SetConfig+0x11c>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d01f      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a2a      	ldr	r2, [pc, #168]	; (800ca28 <TIM_Base_SetConfig+0x120>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d01b      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a29      	ldr	r2, [pc, #164]	; (800ca2c <TIM_Base_SetConfig+0x124>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d017      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a28      	ldr	r2, [pc, #160]	; (800ca30 <TIM_Base_SetConfig+0x128>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a27      	ldr	r2, [pc, #156]	; (800ca34 <TIM_Base_SetConfig+0x12c>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d00f      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a26      	ldr	r2, [pc, #152]	; (800ca38 <TIM_Base_SetConfig+0x130>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d00b      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a25      	ldr	r2, [pc, #148]	; (800ca3c <TIM_Base_SetConfig+0x134>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d007      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a24      	ldr	r2, [pc, #144]	; (800ca40 <TIM_Base_SetConfig+0x138>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d003      	beq.n	800c9ba <TIM_Base_SetConfig+0xb2>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a23      	ldr	r2, [pc, #140]	; (800ca44 <TIM_Base_SetConfig+0x13c>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d108      	bne.n	800c9cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <TIM_Base_SetConfig+0x114>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d003      	beq.n	800ca00 <TIM_Base_SetConfig+0xf8>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a0c      	ldr	r2, [pc, #48]	; (800ca2c <TIM_Base_SetConfig+0x124>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d103      	bne.n	800ca08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	615a      	str	r2, [r3, #20]
}
 800ca0e:	bf00      	nop
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	40010000 	.word	0x40010000
 800ca20:	40000400 	.word	0x40000400
 800ca24:	40000800 	.word	0x40000800
 800ca28:	40000c00 	.word	0x40000c00
 800ca2c:	40010400 	.word	0x40010400
 800ca30:	40014000 	.word	0x40014000
 800ca34:	40014400 	.word	0x40014400
 800ca38:	40014800 	.word	0x40014800
 800ca3c:	40001800 	.word	0x40001800
 800ca40:	40001c00 	.word	0x40001c00
 800ca44:	40002000 	.word	0x40002000

0800ca48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d101      	bne.n	800ca60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e05a      	b.n	800cb16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a21      	ldr	r2, [pc, #132]	; (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d022      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caac:	d01d      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a1d      	ldr	r2, [pc, #116]	; (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d018      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a1b      	ldr	r2, [pc, #108]	; (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d013      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a1a      	ldr	r2, [pc, #104]	; (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d00e      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a18      	ldr	r2, [pc, #96]	; (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d009      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a17      	ldr	r2, [pc, #92]	; (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d004      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a15      	ldr	r2, [pc, #84]	; (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d10c      	bne.n	800cb04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	40010000 	.word	0x40010000
 800cb28:	40000400 	.word	0x40000400
 800cb2c:	40000800 	.word	0x40000800
 800cb30:	40000c00 	.word	0x40000c00
 800cb34:	40010400 	.word	0x40010400
 800cb38:	40014000 	.word	0x40014000
 800cb3c:	40001800 	.word	0x40001800

0800cb40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e03f      	b.n	800cbfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d106      	bne.n	800cb94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe fae8 	bl	800b164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2224      	movs	r2, #36	; 0x24
 800cb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f929 	bl	800ce04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	691a      	ldr	r2, [r3, #16]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	695a      	ldr	r2, [r3, #20]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2220      	movs	r2, #32
 800cbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b08a      	sub	sp, #40	; 0x28
 800cc06:	af02      	add	r7, sp, #8
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	d17c      	bne.n	800cd1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <HAL_UART_Transmit+0x2c>
 800cc28:	88fb      	ldrh	r3, [r7, #6]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e075      	b.n	800cd1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d101      	bne.n	800cc40 <HAL_UART_Transmit+0x3e>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e06e      	b.n	800cd1e <HAL_UART_Transmit+0x11c>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2221      	movs	r2, #33	; 0x21
 800cc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc56:	f7fe fb5d 	bl	800b314 <HAL_GetTick>
 800cc5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	88fa      	ldrh	r2, [r7, #6]
 800cc60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	88fa      	ldrh	r2, [r7, #6]
 800cc66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc70:	d108      	bne.n	800cc84 <HAL_UART_Transmit+0x82>
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d104      	bne.n	800cc84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	e003      	b.n	800cc8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cc94:	e02a      	b.n	800ccec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2180      	movs	r1, #128	; 0x80
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 f840 	bl	800cd26 <UART_WaitOnFlagUntilTimeout>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e036      	b.n	800cd1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	3302      	adds	r3, #2
 800ccca:	61bb      	str	r3, [r7, #24]
 800cccc:	e007      	b.n	800ccde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	781a      	ldrb	r2, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	3b01      	subs	r3, #1
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1cf      	bne.n	800cc96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2140      	movs	r1, #64	; 0x40
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f000 f810 	bl	800cd26 <UART_WaitOnFlagUntilTimeout>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e006      	b.n	800cd1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2220      	movs	r2, #32
 800cd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e000      	b.n	800cd1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cd1c:	2302      	movs	r3, #2
  }
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3720      	adds	r7, #32
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b090      	sub	sp, #64	; 0x40
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	603b      	str	r3, [r7, #0]
 800cd32:	4613      	mov	r3, r2
 800cd34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd36:	e050      	b.n	800cdda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd3e:	d04c      	beq.n	800cdda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d007      	beq.n	800cd56 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd46:	f7fe fae5 	bl	800b314 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d241      	bcs.n	800cdda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	330c      	adds	r3, #12
 800cd5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	330c      	adds	r3, #12
 800cd74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd76:	637a      	str	r2, [r7, #52]	; 0x34
 800cd78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e5      	bne.n	800cd56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3314      	adds	r3, #20
 800cd90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	613b      	str	r3, [r7, #16]
   return(result);
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f023 0301 	bic.w	r3, r3, #1
 800cda0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3314      	adds	r3, #20
 800cda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdaa:	623a      	str	r2, [r7, #32]
 800cdac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdae:	69f9      	ldr	r1, [r7, #28]
 800cdb0:	6a3a      	ldr	r2, [r7, #32]
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e5      	bne.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2220      	movs	r2, #32
 800cdca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e00f      	b.n	800cdfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4013      	ands	r3, r2
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	bf0c      	ite	eq
 800cdea:	2301      	moveq	r3, #1
 800cdec:	2300      	movne	r3, #0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d09f      	beq.n	800cd38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3740      	adds	r7, #64	; 0x40
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce08:	b0c0      	sub	sp, #256	; 0x100
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ce1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce20:	68d9      	ldr	r1, [r3, #12]
 800ce22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	ea40 0301 	orr.w	r3, r0, r1
 800ce2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ce5c:	f021 010c 	bic.w	r1, r1, #12
 800ce60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ce7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7e:	6999      	ldr	r1, [r3, #24]
 800ce80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	ea40 0301 	orr.w	r3, r0, r1
 800ce8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	4b8f      	ldr	r3, [pc, #572]	; (800d0d0 <UART_SetConfig+0x2cc>)
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d005      	beq.n	800cea4 <UART_SetConfig+0xa0>
 800ce98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	4b8d      	ldr	r3, [pc, #564]	; (800d0d4 <UART_SetConfig+0x2d0>)
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d104      	bne.n	800ceae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cea4:	f7fe fe5e 	bl	800bb64 <HAL_RCC_GetPCLK2Freq>
 800cea8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ceac:	e003      	b.n	800ceb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ceae:	f7fe fe45 	bl	800bb3c <HAL_RCC_GetPCLK1Freq>
 800ceb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec0:	f040 810c 	bne.w	800d0dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cece:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ced2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ced6:	4622      	mov	r2, r4
 800ced8:	462b      	mov	r3, r5
 800ceda:	1891      	adds	r1, r2, r2
 800cedc:	65b9      	str	r1, [r7, #88]	; 0x58
 800cede:	415b      	adcs	r3, r3
 800cee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cee6:	4621      	mov	r1, r4
 800cee8:	eb12 0801 	adds.w	r8, r2, r1
 800ceec:	4629      	mov	r1, r5
 800ceee:	eb43 0901 	adc.w	r9, r3, r1
 800cef2:	f04f 0200 	mov.w	r2, #0
 800cef6:	f04f 0300 	mov.w	r3, #0
 800cefa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cefe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf06:	4690      	mov	r8, r2
 800cf08:	4699      	mov	r9, r3
 800cf0a:	4623      	mov	r3, r4
 800cf0c:	eb18 0303 	adds.w	r3, r8, r3
 800cf10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf14:	462b      	mov	r3, r5
 800cf16:	eb49 0303 	adc.w	r3, r9, r3
 800cf1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cf1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cf2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf32:	460b      	mov	r3, r1
 800cf34:	18db      	adds	r3, r3, r3
 800cf36:	653b      	str	r3, [r7, #80]	; 0x50
 800cf38:	4613      	mov	r3, r2
 800cf3a:	eb42 0303 	adc.w	r3, r2, r3
 800cf3e:	657b      	str	r3, [r7, #84]	; 0x54
 800cf40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cf44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cf48:	f7fd fd64 	bl	800aa14 <__aeabi_uldivmod>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4b61      	ldr	r3, [pc, #388]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800cf52:	fba3 2302 	umull	r2, r3, r3, r2
 800cf56:	095b      	lsrs	r3, r3, #5
 800cf58:	011c      	lsls	r4, r3, #4
 800cf5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cf68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	464b      	mov	r3, r9
 800cf70:	1891      	adds	r1, r2, r2
 800cf72:	64b9      	str	r1, [r7, #72]	; 0x48
 800cf74:	415b      	adcs	r3, r3
 800cf76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cf7c:	4641      	mov	r1, r8
 800cf7e:	eb12 0a01 	adds.w	sl, r2, r1
 800cf82:	4649      	mov	r1, r9
 800cf84:	eb43 0b01 	adc.w	fp, r3, r1
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf9c:	4692      	mov	sl, r2
 800cf9e:	469b      	mov	fp, r3
 800cfa0:	4643      	mov	r3, r8
 800cfa2:	eb1a 0303 	adds.w	r3, sl, r3
 800cfa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cfaa:	464b      	mov	r3, r9
 800cfac:	eb4b 0303 	adc.w	r3, fp, r3
 800cfb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cfc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfc8:	460b      	mov	r3, r1
 800cfca:	18db      	adds	r3, r3, r3
 800cfcc:	643b      	str	r3, [r7, #64]	; 0x40
 800cfce:	4613      	mov	r3, r2
 800cfd0:	eb42 0303 	adc.w	r3, r2, r3
 800cfd4:	647b      	str	r3, [r7, #68]	; 0x44
 800cfd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cfde:	f7fd fd19 	bl	800aa14 <__aeabi_uldivmod>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4b3b      	ldr	r3, [pc, #236]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800cfea:	fba3 2301 	umull	r2, r3, r3, r1
 800cfee:	095b      	lsrs	r3, r3, #5
 800cff0:	2264      	movs	r2, #100	; 0x64
 800cff2:	fb02 f303 	mul.w	r3, r2, r3
 800cff6:	1acb      	subs	r3, r1, r3
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cffe:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d000:	fba3 2302 	umull	r2, r3, r3, r2
 800d004:	095b      	lsrs	r3, r3, #5
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d00c:	441c      	add	r4, r3
 800d00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d012:	2200      	movs	r2, #0
 800d014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d018:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d01c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d020:	4642      	mov	r2, r8
 800d022:	464b      	mov	r3, r9
 800d024:	1891      	adds	r1, r2, r2
 800d026:	63b9      	str	r1, [r7, #56]	; 0x38
 800d028:	415b      	adcs	r3, r3
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d030:	4641      	mov	r1, r8
 800d032:	1851      	adds	r1, r2, r1
 800d034:	6339      	str	r1, [r7, #48]	; 0x30
 800d036:	4649      	mov	r1, r9
 800d038:	414b      	adcs	r3, r1
 800d03a:	637b      	str	r3, [r7, #52]	; 0x34
 800d03c:	f04f 0200 	mov.w	r2, #0
 800d040:	f04f 0300 	mov.w	r3, #0
 800d044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d048:	4659      	mov	r1, fp
 800d04a:	00cb      	lsls	r3, r1, #3
 800d04c:	4651      	mov	r1, sl
 800d04e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d052:	4651      	mov	r1, sl
 800d054:	00ca      	lsls	r2, r1, #3
 800d056:	4610      	mov	r0, r2
 800d058:	4619      	mov	r1, r3
 800d05a:	4603      	mov	r3, r0
 800d05c:	4642      	mov	r2, r8
 800d05e:	189b      	adds	r3, r3, r2
 800d060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d064:	464b      	mov	r3, r9
 800d066:	460a      	mov	r2, r1
 800d068:	eb42 0303 	adc.w	r3, r2, r3
 800d06c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d07c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d084:	460b      	mov	r3, r1
 800d086:	18db      	adds	r3, r3, r3
 800d088:	62bb      	str	r3, [r7, #40]	; 0x28
 800d08a:	4613      	mov	r3, r2
 800d08c:	eb42 0303 	adc.w	r3, r2, r3
 800d090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d09a:	f7fd fcbb 	bl	800aa14 <__aeabi_uldivmod>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	2164      	movs	r1, #100	; 0x64
 800d0ac:	fb01 f303 	mul.w	r3, r1, r3
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	3332      	adds	r3, #50	; 0x32
 800d0b6:	4a08      	ldr	r2, [pc, #32]	; (800d0d8 <UART_SetConfig+0x2d4>)
 800d0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0bc:	095b      	lsrs	r3, r3, #5
 800d0be:	f003 0207 	and.w	r2, r3, #7
 800d0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4422      	add	r2, r4
 800d0ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0cc:	e105      	b.n	800d2da <UART_SetConfig+0x4d6>
 800d0ce:	bf00      	nop
 800d0d0:	40011000 	.word	0x40011000
 800d0d4:	40011400 	.word	0x40011400
 800d0d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d0ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	1891      	adds	r1, r2, r2
 800d0f4:	6239      	str	r1, [r7, #32]
 800d0f6:	415b      	adcs	r3, r3
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0fe:	4641      	mov	r1, r8
 800d100:	1854      	adds	r4, r2, r1
 800d102:	4649      	mov	r1, r9
 800d104:	eb43 0501 	adc.w	r5, r3, r1
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 0300 	mov.w	r3, #0
 800d110:	00eb      	lsls	r3, r5, #3
 800d112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d116:	00e2      	lsls	r2, r4, #3
 800d118:	4614      	mov	r4, r2
 800d11a:	461d      	mov	r5, r3
 800d11c:	4643      	mov	r3, r8
 800d11e:	18e3      	adds	r3, r4, r3
 800d120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d124:	464b      	mov	r3, r9
 800d126:	eb45 0303 	adc.w	r3, r5, r3
 800d12a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d13a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d14a:	4629      	mov	r1, r5
 800d14c:	008b      	lsls	r3, r1, #2
 800d14e:	4621      	mov	r1, r4
 800d150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d154:	4621      	mov	r1, r4
 800d156:	008a      	lsls	r2, r1, #2
 800d158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d15c:	f7fd fc5a 	bl	800aa14 <__aeabi_uldivmod>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4b60      	ldr	r3, [pc, #384]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d166:	fba3 2302 	umull	r2, r3, r3, r2
 800d16a:	095b      	lsrs	r3, r3, #5
 800d16c:	011c      	lsls	r4, r3, #4
 800d16e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d172:	2200      	movs	r2, #0
 800d174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d178:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d17c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	1891      	adds	r1, r2, r2
 800d186:	61b9      	str	r1, [r7, #24]
 800d188:	415b      	adcs	r3, r3
 800d18a:	61fb      	str	r3, [r7, #28]
 800d18c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d190:	4641      	mov	r1, r8
 800d192:	1851      	adds	r1, r2, r1
 800d194:	6139      	str	r1, [r7, #16]
 800d196:	4649      	mov	r1, r9
 800d198:	414b      	adcs	r3, r1
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	f04f 0200 	mov.w	r2, #0
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1a8:	4659      	mov	r1, fp
 800d1aa:	00cb      	lsls	r3, r1, #3
 800d1ac:	4651      	mov	r1, sl
 800d1ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1b2:	4651      	mov	r1, sl
 800d1b4:	00ca      	lsls	r2, r1, #3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	4642      	mov	r2, r8
 800d1be:	189b      	adds	r3, r3, r2
 800d1c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1c4:	464b      	mov	r3, r9
 800d1c6:	460a      	mov	r2, r1
 800d1c8:	eb42 0303 	adc.w	r3, r2, r3
 800d1cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1da:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	008b      	lsls	r3, r1, #2
 800d1ec:	4641      	mov	r1, r8
 800d1ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1f2:	4641      	mov	r1, r8
 800d1f4:	008a      	lsls	r2, r1, #2
 800d1f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d1fa:	f7fd fc0b 	bl	800aa14 <__aeabi_uldivmod>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d204:	fba3 1302 	umull	r1, r3, r3, r2
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	2164      	movs	r1, #100	; 0x64
 800d20c:	fb01 f303 	mul.w	r3, r1, r3
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	011b      	lsls	r3, r3, #4
 800d214:	3332      	adds	r3, #50	; 0x32
 800d216:	4a34      	ldr	r2, [pc, #208]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d218:	fba2 2303 	umull	r2, r3, r2, r3
 800d21c:	095b      	lsrs	r3, r3, #5
 800d21e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d222:	441c      	add	r4, r3
 800d224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d228:	2200      	movs	r2, #0
 800d22a:	673b      	str	r3, [r7, #112]	; 0x70
 800d22c:	677a      	str	r2, [r7, #116]	; 0x74
 800d22e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d232:	4642      	mov	r2, r8
 800d234:	464b      	mov	r3, r9
 800d236:	1891      	adds	r1, r2, r2
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	415b      	adcs	r3, r3
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d242:	4641      	mov	r1, r8
 800d244:	1851      	adds	r1, r2, r1
 800d246:	6039      	str	r1, [r7, #0]
 800d248:	4649      	mov	r1, r9
 800d24a:	414b      	adcs	r3, r1
 800d24c:	607b      	str	r3, [r7, #4]
 800d24e:	f04f 0200 	mov.w	r2, #0
 800d252:	f04f 0300 	mov.w	r3, #0
 800d256:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d25a:	4659      	mov	r1, fp
 800d25c:	00cb      	lsls	r3, r1, #3
 800d25e:	4651      	mov	r1, sl
 800d260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d264:	4651      	mov	r1, sl
 800d266:	00ca      	lsls	r2, r1, #3
 800d268:	4610      	mov	r0, r2
 800d26a:	4619      	mov	r1, r3
 800d26c:	4603      	mov	r3, r0
 800d26e:	4642      	mov	r2, r8
 800d270:	189b      	adds	r3, r3, r2
 800d272:	66bb      	str	r3, [r7, #104]	; 0x68
 800d274:	464b      	mov	r3, r9
 800d276:	460a      	mov	r2, r1
 800d278:	eb42 0303 	adc.w	r3, r2, r3
 800d27c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	663b      	str	r3, [r7, #96]	; 0x60
 800d288:	667a      	str	r2, [r7, #100]	; 0x64
 800d28a:	f04f 0200 	mov.w	r2, #0
 800d28e:	f04f 0300 	mov.w	r3, #0
 800d292:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d296:	4649      	mov	r1, r9
 800d298:	008b      	lsls	r3, r1, #2
 800d29a:	4641      	mov	r1, r8
 800d29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	008a      	lsls	r2, r1, #2
 800d2a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d2a8:	f7fd fbb4 	bl	800aa14 <__aeabi_uldivmod>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d2b2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2b6:	095b      	lsrs	r3, r3, #5
 800d2b8:	2164      	movs	r1, #100	; 0x64
 800d2ba:	fb01 f303 	mul.w	r3, r1, r3
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	3332      	adds	r3, #50	; 0x32
 800d2c4:	4a08      	ldr	r2, [pc, #32]	; (800d2e8 <UART_SetConfig+0x4e4>)
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	095b      	lsrs	r3, r3, #5
 800d2cc:	f003 020f 	and.w	r2, r3, #15
 800d2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4422      	add	r2, r4
 800d2d8:	609a      	str	r2, [r3, #8]
}
 800d2da:	bf00      	nop
 800d2dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2e6:	bf00      	nop
 800d2e8:	51eb851f 	.word	0x51eb851f

0800d2ec <__libc_init_array>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	4d0d      	ldr	r5, [pc, #52]	; (800d324 <__libc_init_array+0x38>)
 800d2f0:	4c0d      	ldr	r4, [pc, #52]	; (800d328 <__libc_init_array+0x3c>)
 800d2f2:	1b64      	subs	r4, r4, r5
 800d2f4:	10a4      	asrs	r4, r4, #2
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	42a6      	cmp	r6, r4
 800d2fa:	d109      	bne.n	800d310 <__libc_init_array+0x24>
 800d2fc:	4d0b      	ldr	r5, [pc, #44]	; (800d32c <__libc_init_array+0x40>)
 800d2fe:	4c0c      	ldr	r4, [pc, #48]	; (800d330 <__libc_init_array+0x44>)
 800d300:	f000 f820 	bl	800d344 <_init>
 800d304:	1b64      	subs	r4, r4, r5
 800d306:	10a4      	asrs	r4, r4, #2
 800d308:	2600      	movs	r6, #0
 800d30a:	42a6      	cmp	r6, r4
 800d30c:	d105      	bne.n	800d31a <__libc_init_array+0x2e>
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	f855 3b04 	ldr.w	r3, [r5], #4
 800d314:	4798      	blx	r3
 800d316:	3601      	adds	r6, #1
 800d318:	e7ee      	b.n	800d2f8 <__libc_init_array+0xc>
 800d31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31e:	4798      	blx	r3
 800d320:	3601      	adds	r6, #1
 800d322:	e7f2      	b.n	800d30a <__libc_init_array+0x1e>
 800d324:	0800d390 	.word	0x0800d390
 800d328:	0800d390 	.word	0x0800d390
 800d32c:	0800d390 	.word	0x0800d390
 800d330:	0800d394 	.word	0x0800d394

0800d334 <memset>:
 800d334:	4402      	add	r2, r0
 800d336:	4603      	mov	r3, r0
 800d338:	4293      	cmp	r3, r2
 800d33a:	d100      	bne.n	800d33e <memset+0xa>
 800d33c:	4770      	bx	lr
 800d33e:	f803 1b01 	strb.w	r1, [r3], #1
 800d342:	e7f9      	b.n	800d338 <memset+0x4>

0800d344 <_init>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	bf00      	nop
 800d348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34a:	bc08      	pop	{r3}
 800d34c:	469e      	mov	lr, r3
 800d34e:	4770      	bx	lr

0800d350 <_fini>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr
