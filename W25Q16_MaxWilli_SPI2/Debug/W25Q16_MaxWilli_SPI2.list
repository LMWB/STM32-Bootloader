
W25Q16_MaxWilli_SPI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000003c0  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  200003c4  200003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  200003cc  200003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  200003d0  200003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  200003d4  200003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000a0  2000044c  2000044c  0001044c  2**2
                  ALLOC
  6 .text         0000ae08  200004ec  200004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RamFunc      00000110  2000b2f4  2000b2f4  0001b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .Dev_info     000000c8  2000b404  2000b404  0002b404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata       0000006c  2000b4cc  2000b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .eh_frame     00000004  2000b538  2000b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 ._user_heap_stack 00000600  2000b53c  2000b53c  0001b53c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002b4cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdd0  00000000  00000000  0002b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd3  00000000  00000000  000372cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00039fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234fd  00000000  00000000  0003ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011221  00000000  00000000  0005e15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca70b  00000000  00000000  0006f37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139a89  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000af0  00000000  00000000  00139ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002fc8  00000000  00000000  0013a5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200004ec <__do_global_dtors_aux>:
200004ec:	b510      	push	{r4, lr}
200004ee:	4c05      	ldr	r4, [pc, #20]	; (20000504 <__do_global_dtors_aux+0x18>)
200004f0:	7823      	ldrb	r3, [r4, #0]
200004f2:	b933      	cbnz	r3, 20000502 <__do_global_dtors_aux+0x16>
200004f4:	4b04      	ldr	r3, [pc, #16]	; (20000508 <__do_global_dtors_aux+0x1c>)
200004f6:	b113      	cbz	r3, 200004fe <__do_global_dtors_aux+0x12>
200004f8:	4804      	ldr	r0, [pc, #16]	; (2000050c <__do_global_dtors_aux+0x20>)
200004fa:	f3af 8000 	nop.w
200004fe:	2301      	movs	r3, #1
20000500:	7023      	strb	r3, [r4, #0]
20000502:	bd10      	pop	{r4, pc}
20000504:	2000044c 	.word	0x2000044c
20000508:	00000000 	.word	0x00000000
2000050c:	2000b538 	.word	0x2000b538

20000510 <frame_dummy>:
20000510:	b508      	push	{r3, lr}
20000512:	4b03      	ldr	r3, [pc, #12]	; (20000520 <frame_dummy+0x10>)
20000514:	b11b      	cbz	r3, 2000051e <frame_dummy+0xe>
20000516:	4903      	ldr	r1, [pc, #12]	; (20000524 <frame_dummy+0x14>)
20000518:	4803      	ldr	r0, [pc, #12]	; (20000528 <frame_dummy+0x18>)
2000051a:	f3af 8000 	nop.w
2000051e:	bd08      	pop	{r3, pc}
20000520:	00000000 	.word	0x00000000
20000524:	20000450 	.word	0x20000450
20000528:	2000b538 	.word	0x2000b538

2000052c <_stack_init>:
2000052c:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
20000530:	4770      	bx	lr
20000532:	bf00      	nop

20000534 <_mainCRTStartup>:
20000534:	4b17      	ldr	r3, [pc, #92]	; (20000594 <_mainCRTStartup+0x60>)
20000536:	2b00      	cmp	r3, #0
20000538:	bf08      	it	eq
2000053a:	4b13      	ldreq	r3, [pc, #76]	; (20000588 <_mainCRTStartup+0x54>)
2000053c:	469d      	mov	sp, r3
2000053e:	f7ff fff5 	bl	2000052c <_stack_init>
20000542:	2100      	movs	r1, #0
20000544:	468b      	mov	fp, r1
20000546:	460f      	mov	r7, r1
20000548:	4813      	ldr	r0, [pc, #76]	; (20000598 <_mainCRTStartup+0x64>)
2000054a:	4a14      	ldr	r2, [pc, #80]	; (2000059c <_mainCRTStartup+0x68>)
2000054c:	1a12      	subs	r2, r2, r0
2000054e:	f00a febd 	bl	2000b2cc <memset>
20000552:	4b0e      	ldr	r3, [pc, #56]	; (2000058c <_mainCRTStartup+0x58>)
20000554:	2b00      	cmp	r3, #0
20000556:	d000      	beq.n	2000055a <_mainCRTStartup+0x26>
20000558:	4798      	blx	r3
2000055a:	4b0d      	ldr	r3, [pc, #52]	; (20000590 <_mainCRTStartup+0x5c>)
2000055c:	2b00      	cmp	r3, #0
2000055e:	d000      	beq.n	20000562 <_mainCRTStartup+0x2e>
20000560:	4798      	blx	r3
20000562:	2000      	movs	r0, #0
20000564:	2100      	movs	r1, #0
20000566:	0004      	movs	r4, r0
20000568:	000d      	movs	r5, r1
2000056a:	480d      	ldr	r0, [pc, #52]	; (200005a0 <_mainCRTStartup+0x6c>)
2000056c:	2800      	cmp	r0, #0
2000056e:	d002      	beq.n	20000576 <_mainCRTStartup+0x42>
20000570:	480c      	ldr	r0, [pc, #48]	; (200005a4 <_mainCRTStartup+0x70>)
20000572:	f3af 8000 	nop.w
20000576:	f00a fe85 	bl	2000b284 <__libc_init_array>
2000057a:	0020      	movs	r0, r4
2000057c:	0029      	movs	r1, r5
2000057e:	f000 fc53 	bl	20000e28 <main>
20000582:	f00a fe6b 	bl	2000b25c <exit>
20000586:	bf00      	nop
20000588:	00080000 	.word	0x00080000
	...
20000598:	2000044c 	.word	0x2000044c
2000059c:	200004ec 	.word	0x200004ec
	...
200005a8:	200003d4 	.word	0x200003d4
200005ac:	200003d4 	.word	0x200003d4
200005b0:	2000044c 	.word	0x2000044c
200005b4:	2000044c 	.word	0x2000044c
200005b8:	200004ec 	.word	0x200004ec

200005bc <__aeabi_uldivmod>:
200005bc:	b953      	cbnz	r3, 200005d4 <__aeabi_uldivmod+0x18>
200005be:	b94a      	cbnz	r2, 200005d4 <__aeabi_uldivmod+0x18>
200005c0:	2900      	cmp	r1, #0
200005c2:	bf08      	it	eq
200005c4:	2800      	cmpeq	r0, #0
200005c6:	bf1c      	itt	ne
200005c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
200005cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
200005d0:	f000 b974 	b.w	200008bc <__aeabi_idiv0>
200005d4:	f1ad 0c08 	sub.w	ip, sp, #8
200005d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200005dc:	f000 f806 	bl	200005ec <__udivmoddi4>
200005e0:	f8dd e004 	ldr.w	lr, [sp, #4]
200005e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200005e8:	b004      	add	sp, #16
200005ea:	4770      	bx	lr

200005ec <__udivmoddi4>:
200005ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200005f0:	9d08      	ldr	r5, [sp, #32]
200005f2:	4604      	mov	r4, r0
200005f4:	468e      	mov	lr, r1
200005f6:	2b00      	cmp	r3, #0
200005f8:	d14d      	bne.n	20000696 <__udivmoddi4+0xaa>
200005fa:	428a      	cmp	r2, r1
200005fc:	4694      	mov	ip, r2
200005fe:	d969      	bls.n	200006d4 <__udivmoddi4+0xe8>
20000600:	fab2 f282 	clz	r2, r2
20000604:	b152      	cbz	r2, 2000061c <__udivmoddi4+0x30>
20000606:	fa01 f302 	lsl.w	r3, r1, r2
2000060a:	f1c2 0120 	rsb	r1, r2, #32
2000060e:	fa20 f101 	lsr.w	r1, r0, r1
20000612:	fa0c fc02 	lsl.w	ip, ip, r2
20000616:	ea41 0e03 	orr.w	lr, r1, r3
2000061a:	4094      	lsls	r4, r2
2000061c:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000620:	0c21      	lsrs	r1, r4, #16
20000622:	fbbe f6f8 	udiv	r6, lr, r8
20000626:	fa1f f78c 	uxth.w	r7, ip
2000062a:	fb08 e316 	mls	r3, r8, r6, lr
2000062e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
20000632:	fb06 f107 	mul.w	r1, r6, r7
20000636:	4299      	cmp	r1, r3
20000638:	d90a      	bls.n	20000650 <__udivmoddi4+0x64>
2000063a:	eb1c 0303 	adds.w	r3, ip, r3
2000063e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
20000642:	f080 811f 	bcs.w	20000884 <__udivmoddi4+0x298>
20000646:	4299      	cmp	r1, r3
20000648:	f240 811c 	bls.w	20000884 <__udivmoddi4+0x298>
2000064c:	3e02      	subs	r6, #2
2000064e:	4463      	add	r3, ip
20000650:	1a5b      	subs	r3, r3, r1
20000652:	b2a4      	uxth	r4, r4
20000654:	fbb3 f0f8 	udiv	r0, r3, r8
20000658:	fb08 3310 	mls	r3, r8, r0, r3
2000065c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000660:	fb00 f707 	mul.w	r7, r0, r7
20000664:	42a7      	cmp	r7, r4
20000666:	d90a      	bls.n	2000067e <__udivmoddi4+0x92>
20000668:	eb1c 0404 	adds.w	r4, ip, r4
2000066c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
20000670:	f080 810a 	bcs.w	20000888 <__udivmoddi4+0x29c>
20000674:	42a7      	cmp	r7, r4
20000676:	f240 8107 	bls.w	20000888 <__udivmoddi4+0x29c>
2000067a:	4464      	add	r4, ip
2000067c:	3802      	subs	r0, #2
2000067e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000682:	1be4      	subs	r4, r4, r7
20000684:	2600      	movs	r6, #0
20000686:	b11d      	cbz	r5, 20000690 <__udivmoddi4+0xa4>
20000688:	40d4      	lsrs	r4, r2
2000068a:	2300      	movs	r3, #0
2000068c:	e9c5 4300 	strd	r4, r3, [r5]
20000690:	4631      	mov	r1, r6
20000692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000696:	428b      	cmp	r3, r1
20000698:	d909      	bls.n	200006ae <__udivmoddi4+0xc2>
2000069a:	2d00      	cmp	r5, #0
2000069c:	f000 80ef 	beq.w	2000087e <__udivmoddi4+0x292>
200006a0:	2600      	movs	r6, #0
200006a2:	e9c5 0100 	strd	r0, r1, [r5]
200006a6:	4630      	mov	r0, r6
200006a8:	4631      	mov	r1, r6
200006aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200006ae:	fab3 f683 	clz	r6, r3
200006b2:	2e00      	cmp	r6, #0
200006b4:	d14a      	bne.n	2000074c <__udivmoddi4+0x160>
200006b6:	428b      	cmp	r3, r1
200006b8:	d302      	bcc.n	200006c0 <__udivmoddi4+0xd4>
200006ba:	4282      	cmp	r2, r0
200006bc:	f200 80f9 	bhi.w	200008b2 <__udivmoddi4+0x2c6>
200006c0:	1a84      	subs	r4, r0, r2
200006c2:	eb61 0303 	sbc.w	r3, r1, r3
200006c6:	2001      	movs	r0, #1
200006c8:	469e      	mov	lr, r3
200006ca:	2d00      	cmp	r5, #0
200006cc:	d0e0      	beq.n	20000690 <__udivmoddi4+0xa4>
200006ce:	e9c5 4e00 	strd	r4, lr, [r5]
200006d2:	e7dd      	b.n	20000690 <__udivmoddi4+0xa4>
200006d4:	b902      	cbnz	r2, 200006d8 <__udivmoddi4+0xec>
200006d6:	deff      	udf	#255	; 0xff
200006d8:	fab2 f282 	clz	r2, r2
200006dc:	2a00      	cmp	r2, #0
200006de:	f040 8092 	bne.w	20000806 <__udivmoddi4+0x21a>
200006e2:	eba1 010c 	sub.w	r1, r1, ip
200006e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
200006ea:	fa1f fe8c 	uxth.w	lr, ip
200006ee:	2601      	movs	r6, #1
200006f0:	0c20      	lsrs	r0, r4, #16
200006f2:	fbb1 f3f7 	udiv	r3, r1, r7
200006f6:	fb07 1113 	mls	r1, r7, r3, r1
200006fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
200006fe:	fb0e f003 	mul.w	r0, lr, r3
20000702:	4288      	cmp	r0, r1
20000704:	d908      	bls.n	20000718 <__udivmoddi4+0x12c>
20000706:	eb1c 0101 	adds.w	r1, ip, r1
2000070a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
2000070e:	d202      	bcs.n	20000716 <__udivmoddi4+0x12a>
20000710:	4288      	cmp	r0, r1
20000712:	f200 80cb 	bhi.w	200008ac <__udivmoddi4+0x2c0>
20000716:	4643      	mov	r3, r8
20000718:	1a09      	subs	r1, r1, r0
2000071a:	b2a4      	uxth	r4, r4
2000071c:	fbb1 f0f7 	udiv	r0, r1, r7
20000720:	fb07 1110 	mls	r1, r7, r0, r1
20000724:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
20000728:	fb0e fe00 	mul.w	lr, lr, r0
2000072c:	45a6      	cmp	lr, r4
2000072e:	d908      	bls.n	20000742 <__udivmoddi4+0x156>
20000730:	eb1c 0404 	adds.w	r4, ip, r4
20000734:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
20000738:	d202      	bcs.n	20000740 <__udivmoddi4+0x154>
2000073a:	45a6      	cmp	lr, r4
2000073c:	f200 80bb 	bhi.w	200008b6 <__udivmoddi4+0x2ca>
20000740:	4608      	mov	r0, r1
20000742:	eba4 040e 	sub.w	r4, r4, lr
20000746:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
2000074a:	e79c      	b.n	20000686 <__udivmoddi4+0x9a>
2000074c:	f1c6 0720 	rsb	r7, r6, #32
20000750:	40b3      	lsls	r3, r6
20000752:	fa22 fc07 	lsr.w	ip, r2, r7
20000756:	ea4c 0c03 	orr.w	ip, ip, r3
2000075a:	fa20 f407 	lsr.w	r4, r0, r7
2000075e:	fa01 f306 	lsl.w	r3, r1, r6
20000762:	431c      	orrs	r4, r3
20000764:	40f9      	lsrs	r1, r7
20000766:	ea4f 491c 	mov.w	r9, ip, lsr #16
2000076a:	fa00 f306 	lsl.w	r3, r0, r6
2000076e:	fbb1 f8f9 	udiv	r8, r1, r9
20000772:	0c20      	lsrs	r0, r4, #16
20000774:	fa1f fe8c 	uxth.w	lr, ip
20000778:	fb09 1118 	mls	r1, r9, r8, r1
2000077c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
20000780:	fb08 f00e 	mul.w	r0, r8, lr
20000784:	4288      	cmp	r0, r1
20000786:	fa02 f206 	lsl.w	r2, r2, r6
2000078a:	d90b      	bls.n	200007a4 <__udivmoddi4+0x1b8>
2000078c:	eb1c 0101 	adds.w	r1, ip, r1
20000790:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
20000794:	f080 8088 	bcs.w	200008a8 <__udivmoddi4+0x2bc>
20000798:	4288      	cmp	r0, r1
2000079a:	f240 8085 	bls.w	200008a8 <__udivmoddi4+0x2bc>
2000079e:	f1a8 0802 	sub.w	r8, r8, #2
200007a2:	4461      	add	r1, ip
200007a4:	1a09      	subs	r1, r1, r0
200007a6:	b2a4      	uxth	r4, r4
200007a8:	fbb1 f0f9 	udiv	r0, r1, r9
200007ac:	fb09 1110 	mls	r1, r9, r0, r1
200007b0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
200007b4:	fb00 fe0e 	mul.w	lr, r0, lr
200007b8:	458e      	cmp	lr, r1
200007ba:	d908      	bls.n	200007ce <__udivmoddi4+0x1e2>
200007bc:	eb1c 0101 	adds.w	r1, ip, r1
200007c0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
200007c4:	d26c      	bcs.n	200008a0 <__udivmoddi4+0x2b4>
200007c6:	458e      	cmp	lr, r1
200007c8:	d96a      	bls.n	200008a0 <__udivmoddi4+0x2b4>
200007ca:	3802      	subs	r0, #2
200007cc:	4461      	add	r1, ip
200007ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
200007d2:	fba0 9402 	umull	r9, r4, r0, r2
200007d6:	eba1 010e 	sub.w	r1, r1, lr
200007da:	42a1      	cmp	r1, r4
200007dc:	46c8      	mov	r8, r9
200007de:	46a6      	mov	lr, r4
200007e0:	d356      	bcc.n	20000890 <__udivmoddi4+0x2a4>
200007e2:	d053      	beq.n	2000088c <__udivmoddi4+0x2a0>
200007e4:	b15d      	cbz	r5, 200007fe <__udivmoddi4+0x212>
200007e6:	ebb3 0208 	subs.w	r2, r3, r8
200007ea:	eb61 010e 	sbc.w	r1, r1, lr
200007ee:	fa01 f707 	lsl.w	r7, r1, r7
200007f2:	fa22 f306 	lsr.w	r3, r2, r6
200007f6:	40f1      	lsrs	r1, r6
200007f8:	431f      	orrs	r7, r3
200007fa:	e9c5 7100 	strd	r7, r1, [r5]
200007fe:	2600      	movs	r6, #0
20000800:	4631      	mov	r1, r6
20000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000806:	f1c2 0320 	rsb	r3, r2, #32
2000080a:	40d8      	lsrs	r0, r3
2000080c:	fa0c fc02 	lsl.w	ip, ip, r2
20000810:	fa21 f303 	lsr.w	r3, r1, r3
20000814:	4091      	lsls	r1, r2
20000816:	4301      	orrs	r1, r0
20000818:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000081c:	fa1f fe8c 	uxth.w	lr, ip
20000820:	fbb3 f0f7 	udiv	r0, r3, r7
20000824:	fb07 3610 	mls	r6, r7, r0, r3
20000828:	0c0b      	lsrs	r3, r1, #16
2000082a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
2000082e:	fb00 f60e 	mul.w	r6, r0, lr
20000832:	429e      	cmp	r6, r3
20000834:	fa04 f402 	lsl.w	r4, r4, r2
20000838:	d908      	bls.n	2000084c <__udivmoddi4+0x260>
2000083a:	eb1c 0303 	adds.w	r3, ip, r3
2000083e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
20000842:	d22f      	bcs.n	200008a4 <__udivmoddi4+0x2b8>
20000844:	429e      	cmp	r6, r3
20000846:	d92d      	bls.n	200008a4 <__udivmoddi4+0x2b8>
20000848:	3802      	subs	r0, #2
2000084a:	4463      	add	r3, ip
2000084c:	1b9b      	subs	r3, r3, r6
2000084e:	b289      	uxth	r1, r1
20000850:	fbb3 f6f7 	udiv	r6, r3, r7
20000854:	fb07 3316 	mls	r3, r7, r6, r3
20000858:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000085c:	fb06 f30e 	mul.w	r3, r6, lr
20000860:	428b      	cmp	r3, r1
20000862:	d908      	bls.n	20000876 <__udivmoddi4+0x28a>
20000864:	eb1c 0101 	adds.w	r1, ip, r1
20000868:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
2000086c:	d216      	bcs.n	2000089c <__udivmoddi4+0x2b0>
2000086e:	428b      	cmp	r3, r1
20000870:	d914      	bls.n	2000089c <__udivmoddi4+0x2b0>
20000872:	3e02      	subs	r6, #2
20000874:	4461      	add	r1, ip
20000876:	1ac9      	subs	r1, r1, r3
20000878:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
2000087c:	e738      	b.n	200006f0 <__udivmoddi4+0x104>
2000087e:	462e      	mov	r6, r5
20000880:	4628      	mov	r0, r5
20000882:	e705      	b.n	20000690 <__udivmoddi4+0xa4>
20000884:	4606      	mov	r6, r0
20000886:	e6e3      	b.n	20000650 <__udivmoddi4+0x64>
20000888:	4618      	mov	r0, r3
2000088a:	e6f8      	b.n	2000067e <__udivmoddi4+0x92>
2000088c:	454b      	cmp	r3, r9
2000088e:	d2a9      	bcs.n	200007e4 <__udivmoddi4+0x1f8>
20000890:	ebb9 0802 	subs.w	r8, r9, r2
20000894:	eb64 0e0c 	sbc.w	lr, r4, ip
20000898:	3801      	subs	r0, #1
2000089a:	e7a3      	b.n	200007e4 <__udivmoddi4+0x1f8>
2000089c:	4646      	mov	r6, r8
2000089e:	e7ea      	b.n	20000876 <__udivmoddi4+0x28a>
200008a0:	4620      	mov	r0, r4
200008a2:	e794      	b.n	200007ce <__udivmoddi4+0x1e2>
200008a4:	4640      	mov	r0, r8
200008a6:	e7d1      	b.n	2000084c <__udivmoddi4+0x260>
200008a8:	46d0      	mov	r8, sl
200008aa:	e77b      	b.n	200007a4 <__udivmoddi4+0x1b8>
200008ac:	3b02      	subs	r3, #2
200008ae:	4461      	add	r1, ip
200008b0:	e732      	b.n	20000718 <__udivmoddi4+0x12c>
200008b2:	4630      	mov	r0, r6
200008b4:	e709      	b.n	200006ca <__udivmoddi4+0xde>
200008b6:	4464      	add	r4, ip
200008b8:	3802      	subs	r0, #2
200008ba:	e742      	b.n	20000742 <__udivmoddi4+0x156>

200008bc <__aeabi_idiv0>:
200008bc:	4770      	bx	lr
200008be:	bf00      	nop

200008c0 <LOC_SPI_Init>:
/* STEP 3 *************************************
 * change the init function to call as per SPI
 * port used (hint: that's the function
 * available in spi.c, check it)
 * ********************************************/
void LOC_SPI_Init(){
200008c0:	b580      	push	{r7, lr}
200008c2:	af00      	add	r7, sp, #0
	MX_SPI2_Init();        // !!! this line needs to be aligned to the SPI port used!  Check this function: it is defined in spi.c !!!
200008c4:	f000 fb30 	bl	20000f28 <MX_SPI2_Init>
}
200008c8:	bf00      	nop
200008ca:	bd80      	pop	{r7, pc}

200008cc <LOC_Delay>:
/**********************************************
 * roughly waints for "Delay" ms before return
 * set uC clock speed. Tested on M4, maybe has
 *  to change using other uC.
 * ********************************************/
void LOC_Delay(uint32_t Delay) {
200008cc:	b480      	push	{r7}
200008ce:	b087      	sub	sp, #28
200008d0:	af00      	add	r7, sp, #0
200008d2:	6078      	str	r0, [r7, #4]
const uint32_t clock=100; 		// uC MHz
200008d4:	2364      	movs	r3, #100	; 0x64
200008d6:	617b      	str	r3, [r7, #20]
volatile uint32_t delay1;			//
volatile uint32_t multiplier=35;  // that's "converting" Delay value into time spent in the below loop
200008d8:	2323      	movs	r3, #35	; 0x23
200008da:	60fb      	str	r3, [r7, #12]
volatile uint32_t k;
	delay1=Delay;
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	613b      	str	r3, [r7, #16]
	for (k=0; (k<(delay1*clock*multiplier)); k++) {};
200008e0:	2300      	movs	r3, #0
200008e2:	60bb      	str	r3, [r7, #8]
200008e4:	e002      	b.n	200008ec <LOC_Delay+0x20>
200008e6:	68bb      	ldr	r3, [r7, #8]
200008e8:	3301      	adds	r3, #1
200008ea:	60bb      	str	r3, [r7, #8]
200008ec:	693b      	ldr	r3, [r7, #16]
200008ee:	697a      	ldr	r2, [r7, #20]
200008f0:	fb02 f303 	mul.w	r3, r2, r3
200008f4:	68fa      	ldr	r2, [r7, #12]
200008f6:	fb03 f202 	mul.w	r2, r3, r2
200008fa:	68bb      	ldr	r3, [r7, #8]
200008fc:	429a      	cmp	r2, r3
200008fe:	d8f2      	bhi.n	200008e6 <LOC_Delay+0x1a>
}
20000900:	bf00      	nop
20000902:	bf00      	nop
20000904:	371c      	adds	r7, #28
20000906:	46bd      	mov	sp, r7
20000908:	f85d 7b04 	ldr.w	r7, [sp], #4
2000090c:	4770      	bx	lr

2000090e <HAL_GetTick>:



uint32_t HAL_GetTick(void) {
2000090e:	b480      	push	{r7}
20000910:	af00      	add	r7, sp, #0
	return 1;
20000912:	2301      	movs	r3, #1
}
20000914:	4618      	mov	r0, r3
20000916:	46bd      	mov	sp, r7
20000918:	f85d 7b04 	ldr.w	r7, [sp], #4
2000091c:	4770      	bx	lr

2000091e <HAL_Delay>:


void HAL_Delay(uint32_t Delay) {
2000091e:	b580      	push	{r7, lr}
20000920:	b082      	sub	sp, #8
20000922:	af00      	add	r7, sp, #0
20000924:	6078      	str	r0, [r7, #4]
	LOC_Delay(Delay);
20000926:	6878      	ldr	r0, [r7, #4]
20000928:	f7ff ffd0 	bl	200008cc <LOC_Delay>
}
2000092c:	bf00      	nop
2000092e:	3708      	adds	r7, #8
20000930:	46bd      	mov	sp, r7
20000932:	bd80      	pop	{r7, pc}

20000934 <HAL_InitTick>:


HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
20000934:	b480      	push	{r7}
20000936:	b083      	sub	sp, #12
20000938:	af00      	add	r7, sp, #0
2000093a:	6078      	str	r0, [r7, #4]
	return HAL_OK;
2000093c:	2300      	movs	r3, #0
}
2000093e:	4618      	mov	r0, r3
20000940:	370c      	adds	r7, #12
20000942:	46bd      	mov	sp, r7
20000944:	f85d 7b04 	ldr.w	r7, [sp], #4
20000948:	4770      	bx	lr
	...

2000094c <LOC_LedOn>:



void LOC_LedOn(){
2000094c:	b580      	push	{r7, lr}
2000094e:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_PIN_ON);
20000950:	2200      	movs	r2, #0
20000952:	2120      	movs	r1, #32
20000954:	4802      	ldr	r0, [pc, #8]	; (20000960 <LOC_LedOn+0x14>)
20000956:	f005 fa0b 	bl	20005d70 <HAL_GPIO_WritePin>
#endif //IS_LED

}
2000095a:	bf00      	nop
2000095c:	bd80      	pop	{r7, pc}
2000095e:	bf00      	nop
20000960:	40020000 	.word	0x40020000

20000964 <LOC_LedOff>:

void LOC_LedOff(){
20000964:	b580      	push	{r7, lr}
20000966:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !LED_PIN_ON);
20000968:	2201      	movs	r2, #1
2000096a:	2120      	movs	r1, #32
2000096c:	4802      	ldr	r0, [pc, #8]	; (20000978 <LOC_LedOff+0x14>)
2000096e:	f005 f9ff 	bl	20005d70 <HAL_GPIO_WritePin>
#endif //IS_LED
}
20000972:	bf00      	nop
20000974:	bd80      	pop	{r7, pc}
20000976:	bf00      	nop
20000978:	40020000 	.word	0x40020000

2000097c <Init>:



int Init (void){
2000097c:	b580      	push	{r7, lr}
2000097e:	b084      	sub	sp, #16
20000980:	af00      	add	r7, sp, #0

	*(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
20000982:	4b14      	ldr	r3, [pc, #80]	; (200009d4 <Init+0x58>)
20000984:	4a14      	ldr	r2, [pc, #80]	; (200009d8 <Init+0x5c>)
20000986:	601a      	str	r2, [r3, #0]

    SystemInit();
20000988:	f000 fd22 	bl	200013d0 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     */

    SCB->VTOR = 0x20000000 | 0x200;
2000098c:	4b13      	ldr	r3, [pc, #76]	; (200009dc <Init+0x60>)
2000098e:	4a14      	ldr	r2, [pc, #80]	; (200009e0 <Init+0x64>)
20000990:	609a      	str	r2, [r3, #8]
20000992:	2300      	movs	r3, #0
20000994:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000996:	687b      	ldr	r3, [r7, #4]
20000998:	f383 8810 	msr	PRIMASK, r3
}
2000099c:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
2000099e:	f001 f915 	bl	20001bcc <HAL_Init>
    uint8_t result;

    SystemClock_Config();
200009a2:	f000 fa4d 	bl	20000e40 <SystemClock_Config>

    MX_GPIO_Init();
200009a6:	f000 f9cb 	bl	20000d40 <MX_GPIO_Init>
    LOC_SPI_Init();
200009aa:	f7ff ff89 	bl	200008c0 <LOC_SPI_Init>

	LOC_LedOn();
200009ae:	f7ff ffcd 	bl	2000094c <LOC_LedOn>
    result = Flash_Init();
200009b2:	f001 f87e 	bl	20001ab2 <Flash_Init>
200009b6:	4603      	mov	r3, r0
200009b8:	73fb      	strb	r3, [r7, #15]
	LOC_LedOff();
200009ba:	f7ff ffd3 	bl	20000964 <LOC_LedOff>
200009be:	2301      	movs	r3, #1
200009c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009c2:	68bb      	ldr	r3, [r7, #8]
200009c4:	f383 8810 	msr	PRIMASK, r3
}
200009c8:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts

    return result;
200009ca:	7bfb      	ldrb	r3, [r7, #15]

}
200009cc:	4618      	mov	r0, r3
200009ce:	3710      	adds	r7, #16
200009d0:	46bd      	mov	sp, r7
200009d2:	bd80      	pop	{r7, pc}
200009d4:	e000edf0 	.word	0xe000edf0
200009d8:	a05f0000 	.word	0xa05f0000
200009dc:	e000ed00 	.word	0xe000ed00
200009e0:	20000200 	.word	0x20000200

200009e4 <Read>:
  * outputs   :
  *      R0             : "1" 			: Operation succeeded
  * 			 		  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer){
200009e4:	b580      	push	{r7, lr}
200009e6:	b086      	sub	sp, #24
200009e8:	af00      	add	r7, sp, #0
200009ea:	60f8      	str	r0, [r7, #12]
200009ec:	60b9      	str	r1, [r7, #8]
200009ee:	607a      	str	r2, [r7, #4]
200009f0:	2300      	movs	r3, #0
200009f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009f4:	693b      	ldr	r3, [r7, #16]
200009f6:	f383 8810 	msr	PRIMASK, r3
}
200009fa:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
200009fc:	68fb      	ldr	r3, [r7, #12]
200009fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000a02:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000a04:	f7ff ffa2 	bl	2000094c <LOC_LedOn>
	Flash_Read(Address, buffer, Size);
20000a08:	68ba      	ldr	r2, [r7, #8]
20000a0a:	6879      	ldr	r1, [r7, #4]
20000a0c:	68f8      	ldr	r0, [r7, #12]
20000a0e:	f000 fde9 	bl	200015e4 <Flash_Read>
	LOC_LedOff();
20000a12:	f7ff ffa7 	bl	20000964 <LOC_LedOff>
20000a16:	2301      	movs	r3, #1
20000a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a1a:	697b      	ldr	r3, [r7, #20]
20000a1c:	f383 8810 	msr	PRIMASK, r3
}
20000a20:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000a22:	2301      	movs	r3, #1
} 
20000a24:	4618      	mov	r0, r3
20000a26:	3718      	adds	r7, #24
20000a28:	46bd      	mov	sp, r7
20000a2a:	bd80      	pop	{r7, pc}

20000a2c <Write>:
  * outputs   :
  *      R0           : "1" 			: Operation succeeded
  *                     "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Write (uint32_t Address, uint32_t Size, uint8_t* buffer){
20000a2c:	b580      	push	{r7, lr}
20000a2e:	b086      	sub	sp, #24
20000a30:	af00      	add	r7, sp, #0
20000a32:	60f8      	str	r0, [r7, #12]
20000a34:	60b9      	str	r1, [r7, #8]
20000a36:	607a      	str	r2, [r7, #4]
20000a38:	2300      	movs	r3, #0
20000a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a3c:	693b      	ldr	r3, [r7, #16]
20000a3e:	f383 8810 	msr	PRIMASK, r3
}
20000a42:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
20000a44:	68fb      	ldr	r3, [r7, #12]
20000a46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000a4a:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000a4c:	f7ff ff7e 	bl	2000094c <LOC_LedOn>
	Flash_Write(Address, buffer, Size);
20000a50:	68ba      	ldr	r2, [r7, #8]
20000a52:	6879      	ldr	r1, [r7, #4]
20000a54:	68f8      	ldr	r0, [r7, #12]
20000a56:	f000 fe2a 	bl	200016ae <Flash_Write>
	LOC_LedOff();
20000a5a:	f7ff ff83 	bl	20000964 <LOC_LedOff>
20000a5e:	2301      	movs	r3, #1
20000a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a62:	697b      	ldr	r3, [r7, #20]
20000a64:	f383 8810 	msr	PRIMASK, r3
}
20000a68:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000a6a:	2301      	movs	r3, #1
} 
20000a6c:	4618      	mov	r0, r3
20000a6e:	3718      	adds	r7, #24
20000a70:	46bd      	mov	sp, r7
20000a72:	bd80      	pop	{r7, pc}

20000a74 <MassErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 					 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int MassErase (void){
20000a74:	b580      	push	{r7, lr}
20000a76:	b082      	sub	sp, #8
20000a78:	af00      	add	r7, sp, #0
20000a7a:	2300      	movs	r3, #0
20000a7c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a7e:	683b      	ldr	r3, [r7, #0]
20000a80:	f383 8810 	msr	PRIMASK, r3
}
20000a84:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	LOC_LedOn();
20000a86:	f7ff ff61 	bl	2000094c <LOC_LedOn>
	Flash_ChipErase();
20000a8a:	f000 fef9 	bl	20001880 <Flash_ChipErase>
	LOC_LedOff();
20000a8e:	f7ff ff69 	bl	20000964 <LOC_LedOff>
20000a92:	2301      	movs	r3, #1
20000a94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	f383 8810 	msr	PRIMASK, r3
}
20000a9c:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000a9e:	2301      	movs	r3, #1
}
20000aa0:	4618      	mov	r0, r3
20000aa2:	3708      	adds	r7, #8
20000aa4:	46bd      	mov	sp, r7
20000aa6:	bd80      	pop	{r7, pc}

20000aa8 <SectorErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 			 		 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int SectorErase (uint32_t EraseStartAddress ,uint32_t EraseEndAddress) {
20000aa8:	b580      	push	{r7, lr}
20000aaa:	b084      	sub	sp, #16
20000aac:	af00      	add	r7, sp, #0
20000aae:	6078      	str	r0, [r7, #4]
20000ab0:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress & EXT_FLASH_ADDR_MASK;
20000ab2:	687b      	ldr	r3, [r7, #4]
20000ab4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000ab8:	607b      	str	r3, [r7, #4]
	EraseEndAddress = EraseEndAddress & EXT_FLASH_ADDR_MASK;
20000aba:	683b      	ldr	r3, [r7, #0]
20000abc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000ac0:	603b      	str	r3, [r7, #0]
20000ac2:	2300      	movs	r3, #0
20000ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000ac6:	68fb      	ldr	r3, [r7, #12]
20000ac8:	f383 8810 	msr	PRIMASK, r3
}
20000acc:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
	EraseStartAddress = (EraseStartAddress -  (EraseStartAddress % EXT_FLASH_BLOCK_SIZE));
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	0c1b      	lsrs	r3, r3, #16
20000ad2:	041b      	lsls	r3, r3, #16
20000ad4:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000ad6:	e00a      	b.n	20000aee <SectorErase+0x46>
		LOC_LedOn();
20000ad8:	f7ff ff38 	bl	2000094c <LOC_LedOn>
		Flash_BErase64k(EraseStartAddress);
20000adc:	6878      	ldr	r0, [r7, #4]
20000ade:	f000 fea2 	bl	20001826 <Flash_BErase64k>
		LOC_LedOff();
20000ae2:	f7ff ff3f 	bl	20000964 <LOC_LedOff>
		EraseStartAddress += EXT_FLASH_BLOCK_SIZE;
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20000aec:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000aee:	683a      	ldr	r2, [r7, #0]
20000af0:	687b      	ldr	r3, [r7, #4]
20000af2:	429a      	cmp	r2, r3
20000af4:	d2f0      	bcs.n	20000ad8 <SectorErase+0x30>
20000af6:	2301      	movs	r3, #1
20000af8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000afa:	68bb      	ldr	r3, [r7, #8]
20000afc:	f383 8810 	msr	PRIMASK, r3
}
20000b00:	bf00      	nop
	}
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b02:	2301      	movs	r3, #1
}
20000b04:	4618      	mov	r0, r3
20000b06:	3710      	adds	r7, #16
20000b08:	46bd      	mov	sp, r7
20000b0a:	bd80      	pop	{r7, pc}

20000b0c <CheckSum>:
  * outputs   :
  *     R0             : Checksum value
  * Note - Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
20000b0c:	b580      	push	{r7, lr}
20000b0e:	b088      	sub	sp, #32
20000b10:	af00      	add	r7, sp, #0
20000b12:	60f8      	str	r0, [r7, #12]
20000b14:	60b9      	str	r1, [r7, #8]
20000b16:	607a      	str	r2, [r7, #4]
uint8_t missalignementAddress = StartAddress%4;
20000b18:	68fb      	ldr	r3, [r7, #12]
20000b1a:	b2db      	uxtb	r3, r3
20000b1c:	f003 0303 	and.w	r3, r3, #3
20000b20:	77fb      	strb	r3, [r7, #31]
uint8_t missalignementSize = Size ;
20000b22:	68bb      	ldr	r3, [r7, #8]
20000b24:	77bb      	strb	r3, [r7, #30]
int cnt;
uint32_t Val;
//uint8_t value;
	
  StartAddress-=StartAddress%4;
20000b26:	68fb      	ldr	r3, [r7, #12]
20000b28:	f023 0303 	bic.w	r3, r3, #3
20000b2c:	60fb      	str	r3, [r7, #12]
  Size += (Size%4==0)?0:4-(Size%4);
20000b2e:	68bb      	ldr	r3, [r7, #8]
20000b30:	f003 0303 	and.w	r3, r3, #3
20000b34:	2b00      	cmp	r3, #0
20000b36:	d005      	beq.n	20000b44 <CheckSum+0x38>
20000b38:	68bb      	ldr	r3, [r7, #8]
20000b3a:	f003 0303 	and.w	r3, r3, #3
20000b3e:	f1c3 0304 	rsb	r3, r3, #4
20000b42:	e000      	b.n	20000b46 <CheckSum+0x3a>
20000b44:	2300      	movs	r3, #0
20000b46:	68ba      	ldr	r2, [r7, #8]
20000b48:	4413      	add	r3, r2
20000b4a:	60bb      	str	r3, [r7, #8]
  
  for(cnt=0; cnt<Size ; cnt+=4)
20000b4c:	2300      	movs	r3, #0
20000b4e:	61bb      	str	r3, [r7, #24]
20000b50:	e068      	b.n	20000c24 <CheckSum+0x118>
  {
	LOC_LedOn();
20000b52:	f7ff fefb 	bl	2000094c <LOC_LedOn>
	Flash_Read(StartAddress + 1,(uint8_t *) &Val, 4);
20000b56:	68fb      	ldr	r3, [r7, #12]
20000b58:	3301      	adds	r3, #1
20000b5a:	f107 0110 	add.w	r1, r7, #16
20000b5e:	2204      	movs	r2, #4
20000b60:	4618      	mov	r0, r3
20000b62:	f000 fd3f 	bl	200015e4 <Flash_Read>
	LOC_LedOff();
20000b66:	f7ff fefd 	bl	20000964 <LOC_LedOff>

	if(missalignementAddress)
20000b6a:	7ffb      	ldrb	r3, [r7, #31]
20000b6c:	2b00      	cmp	r3, #0
20000b6e:	d015      	beq.n	20000b9c <CheckSum+0x90>
    {
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000b70:	7ffb      	ldrb	r3, [r7, #31]
20000b72:	75fb      	strb	r3, [r7, #23]
20000b74:	e00c      	b.n	20000b90 <CheckSum+0x84>
          InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000b76:	693a      	ldr	r2, [r7, #16]
20000b78:	7dfb      	ldrb	r3, [r7, #23]
20000b7a:	00db      	lsls	r3, r3, #3
20000b7c:	fa22 f303 	lsr.w	r3, r2, r3
20000b80:	b2db      	uxtb	r3, r3
20000b82:	461a      	mov	r2, r3
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	4413      	add	r3, r2
20000b88:	607b      	str	r3, [r7, #4]
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000b8a:	7dfb      	ldrb	r3, [r7, #23]
20000b8c:	3301      	adds	r3, #1
20000b8e:	75fb      	strb	r3, [r7, #23]
20000b90:	7dfb      	ldrb	r3, [r7, #23]
20000b92:	2b03      	cmp	r3, #3
20000b94:	d9ef      	bls.n	20000b76 <CheckSum+0x6a>
      }
      missalignementAddress=0;
20000b96:	2300      	movs	r3, #0
20000b98:	77fb      	strb	r3, [r7, #31]
20000b9a:	e03d      	b.n	20000c18 <CheckSum+0x10c>
    }
    else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
20000b9c:	7fbb      	ldrb	r3, [r7, #30]
20000b9e:	68ba      	ldr	r2, [r7, #8]
20000ba0:	1ad3      	subs	r3, r2, r3
20000ba2:	f003 0303 	and.w	r3, r3, #3
20000ba6:	2b00      	cmp	r3, #0
20000ba8:	d023      	beq.n	20000bf2 <CheckSum+0xe6>
20000baa:	69bb      	ldr	r3, [r7, #24]
20000bac:	68ba      	ldr	r2, [r7, #8]
20000bae:	1ad3      	subs	r3, r2, r3
20000bb0:	2b04      	cmp	r3, #4
20000bb2:	d81e      	bhi.n	20000bf2 <CheckSum+0xe6>
    {
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000bb4:	68bb      	ldr	r3, [r7, #8]
20000bb6:	b2da      	uxtb	r2, r3
20000bb8:	7fbb      	ldrb	r3, [r7, #30]
20000bba:	1ad3      	subs	r3, r2, r3
20000bbc:	75bb      	strb	r3, [r7, #22]
20000bbe:	e00d      	b.n	20000bdc <CheckSum+0xd0>
          InitVal += (uint8_t) (Val>>(8*(k-1)) & 0xff);
20000bc0:	693a      	ldr	r2, [r7, #16]
20000bc2:	7dbb      	ldrb	r3, [r7, #22]
20000bc4:	3b01      	subs	r3, #1
20000bc6:	00db      	lsls	r3, r3, #3
20000bc8:	fa22 f303 	lsr.w	r3, r2, r3
20000bcc:	b2db      	uxtb	r3, r3
20000bce:	461a      	mov	r2, r3
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	4413      	add	r3, r2
20000bd4:	607b      	str	r3, [r7, #4]
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000bd6:	7dbb      	ldrb	r3, [r7, #22]
20000bd8:	3301      	adds	r3, #1
20000bda:	75bb      	strb	r3, [r7, #22]
20000bdc:	7dbb      	ldrb	r3, [r7, #22]
20000bde:	2b03      	cmp	r3, #3
20000be0:	d9ee      	bls.n	20000bc0 <CheckSum+0xb4>
      }
      missalignementSize=2 * missalignementSize - Size;
20000be2:	7fbb      	ldrb	r3, [r7, #30]
20000be4:	005b      	lsls	r3, r3, #1
20000be6:	b2da      	uxtb	r2, r3
20000be8:	68bb      	ldr	r3, [r7, #8]
20000bea:	b2db      	uxtb	r3, r3
20000bec:	1ad3      	subs	r3, r2, r3
20000bee:	77bb      	strb	r3, [r7, #30]
20000bf0:	e012      	b.n	20000c18 <CheckSum+0x10c>
    }
    else
    {
        for (uint8_t k=0; k<=3;k++){
20000bf2:	2300      	movs	r3, #0
20000bf4:	757b      	strb	r3, [r7, #21]
20000bf6:	e00c      	b.n	20000c12 <CheckSum+0x106>
            InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000bf8:	693a      	ldr	r2, [r7, #16]
20000bfa:	7d7b      	ldrb	r3, [r7, #21]
20000bfc:	00db      	lsls	r3, r3, #3
20000bfe:	fa22 f303 	lsr.w	r3, r2, r3
20000c02:	b2db      	uxtb	r3, r3
20000c04:	461a      	mov	r2, r3
20000c06:	687b      	ldr	r3, [r7, #4]
20000c08:	4413      	add	r3, r2
20000c0a:	607b      	str	r3, [r7, #4]
        for (uint8_t k=0; k<=3;k++){
20000c0c:	7d7b      	ldrb	r3, [r7, #21]
20000c0e:	3301      	adds	r3, #1
20000c10:	757b      	strb	r3, [r7, #21]
20000c12:	7d7b      	ldrb	r3, [r7, #21]
20000c14:	2b03      	cmp	r3, #3
20000c16:	d9ef      	bls.n	20000bf8 <CheckSum+0xec>
        }
    }
    StartAddress+=4;
20000c18:	68fb      	ldr	r3, [r7, #12]
20000c1a:	3304      	adds	r3, #4
20000c1c:	60fb      	str	r3, [r7, #12]
  for(cnt=0; cnt<Size ; cnt+=4)
20000c1e:	69bb      	ldr	r3, [r7, #24]
20000c20:	3304      	adds	r3, #4
20000c22:	61bb      	str	r3, [r7, #24]
20000c24:	69bb      	ldr	r3, [r7, #24]
20000c26:	68ba      	ldr	r2, [r7, #8]
20000c28:	429a      	cmp	r2, r3
20000c2a:	d892      	bhi.n	20000b52 <CheckSum+0x46>
  }
  
  return (InitVal);
20000c2c:	687b      	ldr	r3, [r7, #4]
}
20000c2e:	4618      	mov	r0, r3
20000c30:	3720      	adds	r7, #32
20000c32:	46bd      	mov	sp, r7
20000c34:	bd80      	pop	{r7, pc}

20000c36 <Verify>:
  *     R1             : Checksum value
  * Note: Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */

uint64_t Verify (uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement){
20000c36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20000c3a:	b090      	sub	sp, #64	; 0x40
20000c3c:	af00      	add	r7, sp, #0
20000c3e:	61f8      	str	r0, [r7, #28]
20000c40:	61b9      	str	r1, [r7, #24]
20000c42:	617a      	str	r2, [r7, #20]
20000c44:	613b      	str	r3, [r7, #16]
#define BUF_SIZE 2
  uint32_t InitVal = 0;
20000c46:	2300      	movs	r3, #0
20000c48:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t VerifiedData = 0;
20000c4a:	2300      	movs	r3, #0
20000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
//  uint8_t TmpBuffer = 0x00;
	uint64_t checksum;
  Size*=4;
20000c4e:	697b      	ldr	r3, [r7, #20]
20000c50:	009b      	lsls	r3, r3, #2
20000c52:	617b      	str	r3, [r7, #20]
  uint8_t Buffer[BUF_SIZE];
  uint32_t LocAddr = MemoryAddr & EXT_FLASH_ADDR_MASK;
20000c54:	69fb      	ldr	r3, [r7, #28]
20000c56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t posBuf;
        
  checksum = CheckSum((uint32_t)LocAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
20000c5c:	693b      	ldr	r3, [r7, #16]
20000c5e:	f003 020f 	and.w	r2, r3, #15
20000c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000c64:	18d0      	adds	r0, r2, r3
20000c66:	693b      	ldr	r3, [r7, #16]
20000c68:	0c1b      	lsrs	r3, r3, #16
20000c6a:	f003 030f 	and.w	r3, r3, #15
20000c6e:	697a      	ldr	r2, [r7, #20]
20000c70:	1ad3      	subs	r3, r2, r3
20000c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20000c74:	4619      	mov	r1, r3
20000c76:	f7ff ff49 	bl	20000b0c <CheckSum>
20000c7a:	4603      	mov	r3, r0
20000c7c:	2200      	movs	r2, #0
20000c7e:	603b      	str	r3, [r7, #0]
20000c80:	607a      	str	r2, [r7, #4]
20000c82:	e9d7 2300 	ldrd	r2, r3, [r7]
20000c86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  
  while (Size>VerifiedData)
20000c8a:	e045      	b.n	20000d18 <Verify+0xe2>
  {
	LOC_LedOn();
20000c8c:	f7ff fe5e 	bl	2000094c <LOC_LedOn>
	Flash_Read(MemoryAddr+VerifiedData, Buffer, BUF_SIZE);
20000c90:	69fa      	ldr	r2, [r7, #28]
20000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000c94:	4413      	add	r3, r2
20000c96:	f107 0124 	add.w	r1, r7, #36	; 0x24
20000c9a:	2202      	movs	r2, #2
20000c9c:	4618      	mov	r0, r3
20000c9e:	f000 fca1 	bl	200015e4 <Flash_Read>
	LOC_LedOff();
20000ca2:	f7ff fe5f 	bl	20000964 <LOC_LedOff>

	posBuf=0;
20000ca6:	2300      	movs	r3, #0
20000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000caa:	e02d      	b.n	20000d08 <Verify+0xd2>
	    if (Buffer[posBuf] != *((uint8_t*)RAMBufferAddr+VerifiedData))
20000cac:	f107 0224 	add.w	r2, r7, #36	; 0x24
20000cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000cb2:	4413      	add	r3, r2
20000cb4:	781a      	ldrb	r2, [r3, #0]
20000cb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
20000cb8:	69bb      	ldr	r3, [r7, #24]
20000cba:	440b      	add	r3, r1
20000cbc:	781b      	ldrb	r3, [r3, #0]
20000cbe:	429a      	cmp	r2, r3
20000cc0:	d01c      	beq.n	20000cfc <Verify+0xc6>
	      return ((checksum<<32) + MemoryAddr+VerifiedData);
20000cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20000cc6:	f04f 0200 	mov.w	r2, #0
20000cca:	f04f 0300 	mov.w	r3, #0
20000cce:	0003      	movs	r3, r0
20000cd0:	2200      	movs	r2, #0
20000cd2:	69f9      	ldr	r1, [r7, #28]
20000cd4:	2000      	movs	r0, #0
20000cd6:	468a      	mov	sl, r1
20000cd8:	4683      	mov	fp, r0
20000cda:	eb12 080a 	adds.w	r8, r2, sl
20000cde:	eb43 090b 	adc.w	r9, r3, fp
20000ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000ce4:	2200      	movs	r2, #0
20000ce6:	60bb      	str	r3, [r7, #8]
20000ce8:	60fa      	str	r2, [r7, #12]
20000cea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
20000cee:	460b      	mov	r3, r1
20000cf0:	eb18 0403 	adds.w	r4, r8, r3
20000cf4:	4613      	mov	r3, r2
20000cf6:	eb49 0503 	adc.w	r5, r9, r3
20000cfa:	e019      	b.n	20000d30 <Verify+0xfa>
	    posBuf++;
20000cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000cfe:	3301      	adds	r3, #1
20000d00:	63bb      	str	r3, [r7, #56]	; 0x38
	    VerifiedData++;
20000d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000d04:	3301      	adds	r3, #1
20000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000d08:	697a      	ldr	r2, [r7, #20]
20000d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000d0c:	429a      	cmp	r2, r3
20000d0e:	d903      	bls.n	20000d18 <Verify+0xe2>
20000d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20000d16:	d3c9      	bcc.n	20000cac <Verify+0x76>
  while (Size>VerifiedData)
20000d18:	697a      	ldr	r2, [r7, #20]
20000d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000d1c:	429a      	cmp	r2, r3
20000d1e:	d8b5      	bhi.n	20000c8c <Verify+0x56>
	}
  }
       
  return (checksum<<32);
20000d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20000d24:	f04f 0400 	mov.w	r4, #0
20000d28:	f04f 0500 	mov.w	r5, #0
20000d2c:	0015      	movs	r5, r2
20000d2e:	2400      	movs	r4, #0
}
20000d30:	4622      	mov	r2, r4
20000d32:	462b      	mov	r3, r5
20000d34:	4610      	mov	r0, r2
20000d36:	4619      	mov	r1, r3
20000d38:	3740      	adds	r7, #64	; 0x40
20000d3a:	46bd      	mov	sp, r7
20000d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000d40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20000d40:	b580      	push	{r7, lr}
20000d42:	b08a      	sub	sp, #40	; 0x28
20000d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000d46:	f107 0314 	add.w	r3, r7, #20
20000d4a:	2200      	movs	r2, #0
20000d4c:	601a      	str	r2, [r3, #0]
20000d4e:	605a      	str	r2, [r3, #4]
20000d50:	609a      	str	r2, [r3, #8]
20000d52:	60da      	str	r2, [r3, #12]
20000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
20000d56:	2300      	movs	r3, #0
20000d58:	613b      	str	r3, [r7, #16]
20000d5a:	4b30      	ldr	r3, [pc, #192]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d5e:	4a2f      	ldr	r2, [pc, #188]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20000d64:	6313      	str	r3, [r2, #48]	; 0x30
20000d66:	4b2d      	ldr	r3, [pc, #180]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000d6e:	613b      	str	r3, [r7, #16]
20000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20000d72:	2300      	movs	r3, #0
20000d74:	60fb      	str	r3, [r7, #12]
20000d76:	4b29      	ldr	r3, [pc, #164]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d7a:	4a28      	ldr	r2, [pc, #160]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d7c:	f043 0304 	orr.w	r3, r3, #4
20000d80:	6313      	str	r3, [r2, #48]	; 0x30
20000d82:	4b26      	ldr	r3, [pc, #152]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d86:	f003 0304 	and.w	r3, r3, #4
20000d8a:	60fb      	str	r3, [r7, #12]
20000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000d8e:	2300      	movs	r3, #0
20000d90:	60bb      	str	r3, [r7, #8]
20000d92:	4b22      	ldr	r3, [pc, #136]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000d96:	4a21      	ldr	r2, [pc, #132]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000d98:	f043 0301 	orr.w	r3, r3, #1
20000d9c:	6313      	str	r3, [r2, #48]	; 0x30
20000d9e:	4b1f      	ldr	r3, [pc, #124]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000da2:	f003 0301 	and.w	r3, r3, #1
20000da6:	60bb      	str	r3, [r7, #8]
20000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20000daa:	2300      	movs	r3, #0
20000dac:	607b      	str	r3, [r7, #4]
20000dae:	4b1b      	ldr	r3, [pc, #108]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000db2:	4a1a      	ldr	r2, [pc, #104]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000db4:	f043 0302 	orr.w	r3, r3, #2
20000db8:	6313      	str	r3, [r2, #48]	; 0x30
20000dba:	4b18      	ldr	r3, [pc, #96]	; (20000e1c <MX_GPIO_Init+0xdc>)
20000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000dbe:	f003 0302 	and.w	r3, r3, #2
20000dc2:	607b      	str	r3, [r7, #4]
20000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
20000dc6:	2200      	movs	r2, #0
20000dc8:	2120      	movs	r1, #32
20000dca:	4815      	ldr	r0, [pc, #84]	; (20000e20 <MX_GPIO_Init+0xe0>)
20000dcc:	f004 ffd0 	bl	20005d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
20000dd0:	2201      	movs	r2, #1
20000dd2:	2120      	movs	r1, #32
20000dd4:	4813      	ldr	r0, [pc, #76]	; (20000e24 <MX_GPIO_Init+0xe4>)
20000dd6:	f004 ffcb 	bl	20005d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
20000dda:	2320      	movs	r3, #32
20000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000dde:	2301      	movs	r3, #1
20000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000de2:	2300      	movs	r3, #0
20000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
20000de6:	2300      	movs	r3, #0
20000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
20000dea:	f107 0314 	add.w	r3, r7, #20
20000dee:	4619      	mov	r1, r3
20000df0:	480b      	ldr	r0, [pc, #44]	; (20000e20 <MX_GPIO_Init+0xe0>)
20000df2:	f004 fd1d 	bl	20005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
20000df6:	2320      	movs	r3, #32
20000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000dfa:	2301      	movs	r3, #1
20000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000dfe:	2300      	movs	r3, #0
20000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
20000e02:	2302      	movs	r3, #2
20000e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
20000e06:	f107 0314 	add.w	r3, r7, #20
20000e0a:	4619      	mov	r1, r3
20000e0c:	4805      	ldr	r0, [pc, #20]	; (20000e24 <MX_GPIO_Init+0xe4>)
20000e0e:	f004 fd0f 	bl	20005830 <HAL_GPIO_Init>

}
20000e12:	bf00      	nop
20000e14:	3728      	adds	r7, #40	; 0x28
20000e16:	46bd      	mov	sp, r7
20000e18:	bd80      	pop	{r7, pc}
20000e1a:	bf00      	nop
20000e1c:	40023800 	.word	0x40023800
20000e20:	40020000 	.word	0x40020000
20000e24:	40020800 	.word	0x40020800

20000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000e28:	b580      	push	{r7, lr}
20000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000e2c:	f000 fece 	bl	20001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000e30:	f000 f806 	bl	20000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000e34:	f7ff ff84 	bl	20000d40 <MX_GPIO_Init>
  MX_SPI2_Init();
20000e38:	f000 f876 	bl	20000f28 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000e3c:	e7fe      	b.n	20000e3c <main+0x14>
	...

20000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000e40:	b580      	push	{r7, lr}
20000e42:	b094      	sub	sp, #80	; 0x50
20000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000e46:	f107 031c 	add.w	r3, r7, #28
20000e4a:	2234      	movs	r2, #52	; 0x34
20000e4c:	2100      	movs	r1, #0
20000e4e:	4618      	mov	r0, r3
20000e50:	f00a fa3c 	bl	2000b2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000e54:	f107 0308 	add.w	r3, r7, #8
20000e58:	2200      	movs	r2, #0
20000e5a:	601a      	str	r2, [r3, #0]
20000e5c:	605a      	str	r2, [r3, #4]
20000e5e:	609a      	str	r2, [r3, #8]
20000e60:	60da      	str	r2, [r3, #12]
20000e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20000e64:	2300      	movs	r3, #0
20000e66:	607b      	str	r3, [r7, #4]
20000e68:	4b2a      	ldr	r3, [pc, #168]	; (20000f14 <SystemClock_Config+0xd4>)
20000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000e6c:	4a29      	ldr	r2, [pc, #164]	; (20000f14 <SystemClock_Config+0xd4>)
20000e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000e72:	6413      	str	r3, [r2, #64]	; 0x40
20000e74:	4b27      	ldr	r3, [pc, #156]	; (20000f14 <SystemClock_Config+0xd4>)
20000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000e7c:	607b      	str	r3, [r7, #4]
20000e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
20000e80:	2300      	movs	r3, #0
20000e82:	603b      	str	r3, [r7, #0]
20000e84:	4b24      	ldr	r3, [pc, #144]	; (20000f18 <SystemClock_Config+0xd8>)
20000e86:	681b      	ldr	r3, [r3, #0]
20000e88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
20000e8c:	4a22      	ldr	r2, [pc, #136]	; (20000f18 <SystemClock_Config+0xd8>)
20000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000e92:	6013      	str	r3, [r2, #0]
20000e94:	4b20      	ldr	r3, [pc, #128]	; (20000f18 <SystemClock_Config+0xd8>)
20000e96:	681b      	ldr	r3, [r3, #0]
20000e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20000e9c:	603b      	str	r3, [r7, #0]
20000e9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20000ea0:	2302      	movs	r3, #2
20000ea2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20000ea4:	2301      	movs	r3, #1
20000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20000ea8:	2310      	movs	r3, #16
20000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000eac:	2302      	movs	r3, #2
20000eae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20000eb0:	2300      	movs	r3, #0
20000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
20000eb4:	2310      	movs	r3, #16
20000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
20000eb8:	f44f 73a8 	mov.w	r3, #336	; 0x150
20000ebc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
20000ebe:	2304      	movs	r3, #4
20000ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
20000ec2:	2302      	movs	r3, #2
20000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
20000ec6:	2302      	movs	r3, #2
20000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000eca:	f107 031c 	add.w	r3, r7, #28
20000ece:	4618      	mov	r0, r3
20000ed0:	f007 fbae 	bl	20008630 <HAL_RCC_OscConfig>
20000ed4:	4603      	mov	r3, r0
20000ed6:	2b00      	cmp	r3, #0
20000ed8:	d001      	beq.n	20000ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
20000eda:	f000 f81f 	bl	20000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000ede:	230f      	movs	r3, #15
20000ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000ee2:	2302      	movs	r3, #2
20000ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20000ee6:	2300      	movs	r3, #0
20000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20000eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20000ef0:	2300      	movs	r3, #0
20000ef2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
20000ef4:	f107 0308 	add.w	r3, r7, #8
20000ef8:	2102      	movs	r1, #2
20000efa:	4618      	mov	r0, r3
20000efc:	f005 fdb4 	bl	20006a68 <HAL_RCC_ClockConfig>
20000f00:	4603      	mov	r3, r0
20000f02:	2b00      	cmp	r3, #0
20000f04:	d001      	beq.n	20000f0a <SystemClock_Config+0xca>
  {
    Error_Handler();
20000f06:	f000 f809 	bl	20000f1c <Error_Handler>
  }
}
20000f0a:	bf00      	nop
20000f0c:	3750      	adds	r7, #80	; 0x50
20000f0e:	46bd      	mov	sp, r7
20000f10:	bd80      	pop	{r7, pc}
20000f12:	bf00      	nop
20000f14:	40023800 	.word	0x40023800
20000f18:	40007000 	.word	0x40007000

20000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20000f1c:	b480      	push	{r7}
20000f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20000f20:	b672      	cpsid	i
}
20000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20000f24:	e7fe      	b.n	20000f24 <Error_Handler+0x8>
	...

20000f28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
20000f28:	b580      	push	{r7, lr}
20000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
20000f2c:	4b17      	ldr	r3, [pc, #92]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f2e:	4a18      	ldr	r2, [pc, #96]	; (20000f90 <MX_SPI2_Init+0x68>)
20000f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
20000f32:	4b16      	ldr	r3, [pc, #88]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
20000f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
20000f3a:	4b14      	ldr	r3, [pc, #80]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f3c:	2200      	movs	r2, #0
20000f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
20000f40:	4b12      	ldr	r3, [pc, #72]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f42:	2200      	movs	r2, #0
20000f44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
20000f46:	4b11      	ldr	r3, [pc, #68]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f48:	2200      	movs	r2, #0
20000f4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
20000f4c:	4b0f      	ldr	r3, [pc, #60]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f4e:	2200      	movs	r2, #0
20000f50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
20000f52:	4b0e      	ldr	r3, [pc, #56]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
20000f58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
20000f5a:	4b0c      	ldr	r3, [pc, #48]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f5c:	2220      	movs	r2, #32
20000f5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
20000f60:	4b0a      	ldr	r3, [pc, #40]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f62:	2200      	movs	r2, #0
20000f64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
20000f66:	4b09      	ldr	r3, [pc, #36]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f68:	2200      	movs	r2, #0
20000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20000f6c:	4b07      	ldr	r3, [pc, #28]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f6e:	2200      	movs	r2, #0
20000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
20000f72:	4b06      	ldr	r3, [pc, #24]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f74:	220a      	movs	r2, #10
20000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
20000f78:	4804      	ldr	r0, [pc, #16]	; (20000f8c <MX_SPI2_Init+0x64>)
20000f7a:	f007 fe93 	bl	20008ca4 <HAL_SPI_Init>
20000f7e:	4603      	mov	r3, r0
20000f80:	2b00      	cmp	r3, #0
20000f82:	d001      	beq.n	20000f88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
20000f84:	f7ff ffca 	bl	20000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
20000f88:	bf00      	nop
20000f8a:	bd80      	pop	{r7, pc}
20000f8c:	20000468 	.word	0x20000468
20000f90:	40003800 	.word	0x40003800

20000f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
20000f94:	b580      	push	{r7, lr}
20000f96:	b08a      	sub	sp, #40	; 0x28
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000f9c:	f107 0314 	add.w	r3, r7, #20
20000fa0:	2200      	movs	r2, #0
20000fa2:	601a      	str	r2, [r3, #0]
20000fa4:	605a      	str	r2, [r3, #4]
20000fa6:	609a      	str	r2, [r3, #8]
20000fa8:	60da      	str	r2, [r3, #12]
20000faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
20000fac:	687b      	ldr	r3, [r7, #4]
20000fae:	681b      	ldr	r3, [r3, #0]
20000fb0:	4a28      	ldr	r2, [pc, #160]	; (20001054 <HAL_SPI_MspInit+0xc0>)
20000fb2:	4293      	cmp	r3, r2
20000fb4:	d14a      	bne.n	2000104c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
20000fb6:	2300      	movs	r3, #0
20000fb8:	613b      	str	r3, [r7, #16]
20000fba:	4b27      	ldr	r3, [pc, #156]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fbe:	4a26      	ldr	r2, [pc, #152]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000fc4:	6413      	str	r3, [r2, #64]	; 0x40
20000fc6:	4b24      	ldr	r3, [pc, #144]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000fce:	613b      	str	r3, [r7, #16]
20000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20000fd2:	2300      	movs	r3, #0
20000fd4:	60fb      	str	r3, [r7, #12]
20000fd6:	4b20      	ldr	r3, [pc, #128]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000fda:	4a1f      	ldr	r2, [pc, #124]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fdc:	f043 0304 	orr.w	r3, r3, #4
20000fe0:	6313      	str	r3, [r2, #48]	; 0x30
20000fe2:	4b1d      	ldr	r3, [pc, #116]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000fe6:	f003 0304 	and.w	r3, r3, #4
20000fea:	60fb      	str	r3, [r7, #12]
20000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20000fee:	2300      	movs	r3, #0
20000ff0:	60bb      	str	r3, [r7, #8]
20000ff2:	4b19      	ldr	r3, [pc, #100]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000ff6:	4a18      	ldr	r2, [pc, #96]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20000ff8:	f043 0302 	orr.w	r3, r3, #2
20000ffc:	6313      	str	r3, [r2, #48]	; 0x30
20000ffe:	4b16      	ldr	r3, [pc, #88]	; (20001058 <HAL_SPI_MspInit+0xc4>)
20001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001002:	f003 0302 	and.w	r3, r3, #2
20001006:	60bb      	str	r3, [r7, #8]
20001008:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = FLASH_MOSI_Pin;
2000100a:	2308      	movs	r3, #8
2000100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000100e:	2302      	movs	r3, #2
20001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001012:	2300      	movs	r3, #0
20001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001016:	2303      	movs	r3, #3
20001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
2000101a:	2305      	movs	r3, #5
2000101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FLASH_MOSI_GPIO_Port, &GPIO_InitStruct);
2000101e:	f107 0314 	add.w	r3, r7, #20
20001022:	4619      	mov	r1, r3
20001024:	480d      	ldr	r0, [pc, #52]	; (2000105c <HAL_SPI_MspInit+0xc8>)
20001026:	f004 fc03 	bl	20005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin;
2000102a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
2000102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001030:	2302      	movs	r3, #2
20001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001034:	2300      	movs	r3, #0
20001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20001038:	2303      	movs	r3, #3
2000103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
2000103c:	2305      	movs	r3, #5
2000103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001040:	f107 0314 	add.w	r3, r7, #20
20001044:	4619      	mov	r1, r3
20001046:	4806      	ldr	r0, [pc, #24]	; (20001060 <HAL_SPI_MspInit+0xcc>)
20001048:	f004 fbf2 	bl	20005830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
2000104c:	bf00      	nop
2000104e:	3728      	adds	r7, #40	; 0x28
20001050:	46bd      	mov	sp, r7
20001052:	bd80      	pop	{r7, pc}
20001054:	40003800 	.word	0x40003800
20001058:	40023800 	.word	0x40023800
2000105c:	40020800 	.word	0x40020800
20001060:	40020400 	.word	0x40020400

20001064 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
20001064:	b580      	push	{r7, lr}
20001066:	b082      	sub	sp, #8
20001068:	af00      	add	r7, sp, #0
2000106a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
2000106c:	687b      	ldr	r3, [r7, #4]
2000106e:	681b      	ldr	r3, [r3, #0]
20001070:	4a0a      	ldr	r2, [pc, #40]	; (2000109c <HAL_SPI_MspDeInit+0x38>)
20001072:	4293      	cmp	r3, r2
20001074:	d10e      	bne.n	20001094 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
20001076:	4b0a      	ldr	r3, [pc, #40]	; (200010a0 <HAL_SPI_MspDeInit+0x3c>)
20001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000107a:	4a09      	ldr	r2, [pc, #36]	; (200010a0 <HAL_SPI_MspDeInit+0x3c>)
2000107c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20001080:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    HAL_GPIO_DeInit(FLASH_MOSI_GPIO_Port, FLASH_MOSI_Pin);
20001082:	2108      	movs	r1, #8
20001084:	4807      	ldr	r0, [pc, #28]	; (200010a4 <HAL_SPI_MspDeInit+0x40>)
20001086:	f004 fd67 	bl	20005b58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, FLASH_SCK_Pin|FLASH_MISO_Pin);
2000108a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
2000108e:	4806      	ldr	r0, [pc, #24]	; (200010a8 <HAL_SPI_MspDeInit+0x44>)
20001090:	f004 fd62 	bl	20005b58 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
20001094:	bf00      	nop
20001096:	3708      	adds	r7, #8
20001098:	46bd      	mov	sp, r7
2000109a:	bd80      	pop	{r7, pc}
2000109c:	40003800 	.word	0x40003800
200010a0:	40023800 	.word	0x40023800
200010a4:	40020800 	.word	0x40020800
200010a8:	40020400 	.word	0x40020400

200010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200010ac:	b580      	push	{r7, lr}
200010ae:	b082      	sub	sp, #8
200010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
200010b2:	2300      	movs	r3, #0
200010b4:	607b      	str	r3, [r7, #4]
200010b6:	4b10      	ldr	r3, [pc, #64]	; (200010f8 <HAL_MspInit+0x4c>)
200010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200010ba:	4a0f      	ldr	r2, [pc, #60]	; (200010f8 <HAL_MspInit+0x4c>)
200010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200010c0:	6453      	str	r3, [r2, #68]	; 0x44
200010c2:	4b0d      	ldr	r3, [pc, #52]	; (200010f8 <HAL_MspInit+0x4c>)
200010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200010ca:	607b      	str	r3, [r7, #4]
200010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
200010ce:	2300      	movs	r3, #0
200010d0:	603b      	str	r3, [r7, #0]
200010d2:	4b09      	ldr	r3, [pc, #36]	; (200010f8 <HAL_MspInit+0x4c>)
200010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200010d6:	4a08      	ldr	r2, [pc, #32]	; (200010f8 <HAL_MspInit+0x4c>)
200010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200010dc:	6413      	str	r3, [r2, #64]	; 0x40
200010de:	4b06      	ldr	r3, [pc, #24]	; (200010f8 <HAL_MspInit+0x4c>)
200010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200010e6:	603b      	str	r3, [r7, #0]
200010e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
200010ea:	2007      	movs	r0, #7
200010ec:	f001 f946 	bl	2000237c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200010f0:	bf00      	nop
200010f2:	3708      	adds	r7, #8
200010f4:	46bd      	mov	sp, r7
200010f6:	bd80      	pop	{r7, pc}
200010f8:	40023800 	.word	0x40023800

200010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200010fc:	b480      	push	{r7}
200010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20001100:	e7fe      	b.n	20001100 <NMI_Handler+0x4>

20001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001102:	b480      	push	{r7}
20001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001106:	e7fe      	b.n	20001106 <HardFault_Handler+0x4>

20001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001108:	b480      	push	{r7}
2000110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000110c:	e7fe      	b.n	2000110c <MemManage_Handler+0x4>

2000110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000110e:	b480      	push	{r7}
20001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001112:	e7fe      	b.n	20001112 <BusFault_Handler+0x4>

20001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001114:	b480      	push	{r7}
20001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001118:	e7fe      	b.n	20001118 <UsageFault_Handler+0x4>

2000111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000111a:	b480      	push	{r7}
2000111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000111e:	bf00      	nop
20001120:	46bd      	mov	sp, r7
20001122:	f85d 7b04 	ldr.w	r7, [sp], #4
20001126:	4770      	bx	lr

20001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001128:	b480      	push	{r7}
2000112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000112c:	bf00      	nop
2000112e:	46bd      	mov	sp, r7
20001130:	f85d 7b04 	ldr.w	r7, [sp], #4
20001134:	4770      	bx	lr

20001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001136:	b480      	push	{r7}
20001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000113a:	bf00      	nop
2000113c:	46bd      	mov	sp, r7
2000113e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001142:	4770      	bx	lr

20001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20001144:	b580      	push	{r7, lr}
20001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001148:	f000 fdcc 	bl	20001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000114c:	bf00      	nop
2000114e:	bd80      	pop	{r7, pc}

20001150 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
20001150:	b480      	push	{r7}
20001152:	af00      	add	r7, sp, #0
}
20001154:	bf00      	nop
20001156:	46bd      	mov	sp, r7
20001158:	f85d 7b04 	ldr.w	r7, [sp], #4
2000115c:	4770      	bx	lr

2000115e <_getpid>:

int _getpid(void)
{
2000115e:	b480      	push	{r7}
20001160:	af00      	add	r7, sp, #0
  return 1;
20001162:	2301      	movs	r3, #1
}
20001164:	4618      	mov	r0, r3
20001166:	46bd      	mov	sp, r7
20001168:	f85d 7b04 	ldr.w	r7, [sp], #4
2000116c:	4770      	bx	lr

2000116e <_kill>:

int _kill(int pid, int sig)
{
2000116e:	b580      	push	{r7, lr}
20001170:	b082      	sub	sp, #8
20001172:	af00      	add	r7, sp, #0
20001174:	6078      	str	r0, [r7, #4]
20001176:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
20001178:	f00a f86a 	bl	2000b250 <__errno>
2000117c:	4603      	mov	r3, r0
2000117e:	2216      	movs	r2, #22
20001180:	601a      	str	r2, [r3, #0]
  return -1;
20001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20001186:	4618      	mov	r0, r3
20001188:	3708      	adds	r7, #8
2000118a:	46bd      	mov	sp, r7
2000118c:	bd80      	pop	{r7, pc}

2000118e <_exit>:

void _exit (int status)
{
2000118e:	b580      	push	{r7, lr}
20001190:	b082      	sub	sp, #8
20001192:	af00      	add	r7, sp, #0
20001194:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
20001196:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
2000119a:	6878      	ldr	r0, [r7, #4]
2000119c:	f7ff ffe7 	bl	2000116e <_kill>
  while (1) {}    /* Make sure we hang here */
200011a0:	e7fe      	b.n	200011a0 <_exit+0x12>

200011a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
200011a2:	b580      	push	{r7, lr}
200011a4:	b086      	sub	sp, #24
200011a6:	af00      	add	r7, sp, #0
200011a8:	60f8      	str	r0, [r7, #12]
200011aa:	60b9      	str	r1, [r7, #8]
200011ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
200011ae:	2300      	movs	r3, #0
200011b0:	617b      	str	r3, [r7, #20]
200011b2:	e00a      	b.n	200011ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
200011b4:	f3af 8000 	nop.w
200011b8:	4601      	mov	r1, r0
200011ba:	68bb      	ldr	r3, [r7, #8]
200011bc:	1c5a      	adds	r2, r3, #1
200011be:	60ba      	str	r2, [r7, #8]
200011c0:	b2ca      	uxtb	r2, r1
200011c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
200011c4:	697b      	ldr	r3, [r7, #20]
200011c6:	3301      	adds	r3, #1
200011c8:	617b      	str	r3, [r7, #20]
200011ca:	697a      	ldr	r2, [r7, #20]
200011cc:	687b      	ldr	r3, [r7, #4]
200011ce:	429a      	cmp	r2, r3
200011d0:	dbf0      	blt.n	200011b4 <_read+0x12>
  }

  return len;
200011d2:	687b      	ldr	r3, [r7, #4]
}
200011d4:	4618      	mov	r0, r3
200011d6:	3718      	adds	r7, #24
200011d8:	46bd      	mov	sp, r7
200011da:	bd80      	pop	{r7, pc}

200011dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
200011dc:	b580      	push	{r7, lr}
200011de:	b086      	sub	sp, #24
200011e0:	af00      	add	r7, sp, #0
200011e2:	60f8      	str	r0, [r7, #12]
200011e4:	60b9      	str	r1, [r7, #8]
200011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
200011e8:	2300      	movs	r3, #0
200011ea:	617b      	str	r3, [r7, #20]
200011ec:	e009      	b.n	20001202 <_write+0x26>
  {
    __io_putchar(*ptr++);
200011ee:	68bb      	ldr	r3, [r7, #8]
200011f0:	1c5a      	adds	r2, r3, #1
200011f2:	60ba      	str	r2, [r7, #8]
200011f4:	781b      	ldrb	r3, [r3, #0]
200011f6:	4618      	mov	r0, r3
200011f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
200011fc:	697b      	ldr	r3, [r7, #20]
200011fe:	3301      	adds	r3, #1
20001200:	617b      	str	r3, [r7, #20]
20001202:	697a      	ldr	r2, [r7, #20]
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	429a      	cmp	r2, r3
20001208:	dbf1      	blt.n	200011ee <_write+0x12>
  }
  return len;
2000120a:	687b      	ldr	r3, [r7, #4]
}
2000120c:	4618      	mov	r0, r3
2000120e:	3718      	adds	r7, #24
20001210:	46bd      	mov	sp, r7
20001212:	bd80      	pop	{r7, pc}

20001214 <_close>:

int _close(int file)
{
20001214:	b480      	push	{r7}
20001216:	b083      	sub	sp, #12
20001218:	af00      	add	r7, sp, #0
2000121a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
2000121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20001220:	4618      	mov	r0, r3
20001222:	370c      	adds	r7, #12
20001224:	46bd      	mov	sp, r7
20001226:	f85d 7b04 	ldr.w	r7, [sp], #4
2000122a:	4770      	bx	lr

2000122c <_fstat>:


int _fstat(int file, struct stat *st)
{
2000122c:	b480      	push	{r7}
2000122e:	b083      	sub	sp, #12
20001230:	af00      	add	r7, sp, #0
20001232:	6078      	str	r0, [r7, #4]
20001234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001236:	683b      	ldr	r3, [r7, #0]
20001238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000123c:	605a      	str	r2, [r3, #4]
  return 0;
2000123e:	2300      	movs	r3, #0
}
20001240:	4618      	mov	r0, r3
20001242:	370c      	adds	r7, #12
20001244:	46bd      	mov	sp, r7
20001246:	f85d 7b04 	ldr.w	r7, [sp], #4
2000124a:	4770      	bx	lr

2000124c <_isatty>:

int _isatty(int file)
{
2000124c:	b480      	push	{r7}
2000124e:	b083      	sub	sp, #12
20001250:	af00      	add	r7, sp, #0
20001252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
20001254:	2301      	movs	r3, #1
}
20001256:	4618      	mov	r0, r3
20001258:	370c      	adds	r7, #12
2000125a:	46bd      	mov	sp, r7
2000125c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001260:	4770      	bx	lr

20001262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
20001262:	b480      	push	{r7}
20001264:	b085      	sub	sp, #20
20001266:	af00      	add	r7, sp, #0
20001268:	60f8      	str	r0, [r7, #12]
2000126a:	60b9      	str	r1, [r7, #8]
2000126c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
2000126e:	2300      	movs	r3, #0
}
20001270:	4618      	mov	r0, r3
20001272:	3714      	adds	r7, #20
20001274:	46bd      	mov	sp, r7
20001276:	f85d 7b04 	ldr.w	r7, [sp], #4
2000127a:	4770      	bx	lr

2000127c <_open>:

int _open(char *path, int flags, ...)
{
2000127c:	b40e      	push	{r1, r2, r3}
2000127e:	b480      	push	{r7}
20001280:	b082      	sub	sp, #8
20001282:	af00      	add	r7, sp, #0
20001284:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
20001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000128a:	4618      	mov	r0, r3
2000128c:	3708      	adds	r7, #8
2000128e:	46bd      	mov	sp, r7
20001290:	f85d 7b04 	ldr.w	r7, [sp], #4
20001294:	b003      	add	sp, #12
20001296:	4770      	bx	lr

20001298 <_wait>:

int _wait(int *status)
{
20001298:	b580      	push	{r7, lr}
2000129a:	b082      	sub	sp, #8
2000129c:	af00      	add	r7, sp, #0
2000129e:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
200012a0:	f009 ffd6 	bl	2000b250 <__errno>
200012a4:	4603      	mov	r3, r0
200012a6:	220a      	movs	r2, #10
200012a8:	601a      	str	r2, [r3, #0]
  return -1;
200012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200012ae:	4618      	mov	r0, r3
200012b0:	3708      	adds	r7, #8
200012b2:	46bd      	mov	sp, r7
200012b4:	bd80      	pop	{r7, pc}

200012b6 <_unlink>:

int _unlink(char *name)
{
200012b6:	b580      	push	{r7, lr}
200012b8:	b082      	sub	sp, #8
200012ba:	af00      	add	r7, sp, #0
200012bc:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
200012be:	f009 ffc7 	bl	2000b250 <__errno>
200012c2:	4603      	mov	r3, r0
200012c4:	2202      	movs	r2, #2
200012c6:	601a      	str	r2, [r3, #0]
  return -1;
200012c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200012cc:	4618      	mov	r0, r3
200012ce:	3708      	adds	r7, #8
200012d0:	46bd      	mov	sp, r7
200012d2:	bd80      	pop	{r7, pc}

200012d4 <_times>:

int _times(struct tms *buf)
{
200012d4:	b480      	push	{r7}
200012d6:	b083      	sub	sp, #12
200012d8:	af00      	add	r7, sp, #0
200012da:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
200012dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200012e0:	4618      	mov	r0, r3
200012e2:	370c      	adds	r7, #12
200012e4:	46bd      	mov	sp, r7
200012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200012ea:	4770      	bx	lr

200012ec <_stat>:

int _stat(char *file, struct stat *st)
{
200012ec:	b480      	push	{r7}
200012ee:	b083      	sub	sp, #12
200012f0:	af00      	add	r7, sp, #0
200012f2:	6078      	str	r0, [r7, #4]
200012f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
200012f6:	683b      	ldr	r3, [r7, #0]
200012f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
200012fc:	605a      	str	r2, [r3, #4]
  return 0;
200012fe:	2300      	movs	r3, #0
}
20001300:	4618      	mov	r0, r3
20001302:	370c      	adds	r7, #12
20001304:	46bd      	mov	sp, r7
20001306:	f85d 7b04 	ldr.w	r7, [sp], #4
2000130a:	4770      	bx	lr

2000130c <_link>:

int _link(char *old, char *new)
{
2000130c:	b580      	push	{r7, lr}
2000130e:	b082      	sub	sp, #8
20001310:	af00      	add	r7, sp, #0
20001312:	6078      	str	r0, [r7, #4]
20001314:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
20001316:	f009 ff9b 	bl	2000b250 <__errno>
2000131a:	4603      	mov	r3, r0
2000131c:	221f      	movs	r2, #31
2000131e:	601a      	str	r2, [r3, #0]
  return -1;
20001320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20001324:	4618      	mov	r0, r3
20001326:	3708      	adds	r7, #8
20001328:	46bd      	mov	sp, r7
2000132a:	bd80      	pop	{r7, pc}

2000132c <_fork>:

int _fork(void)
{
2000132c:	b580      	push	{r7, lr}
2000132e:	af00      	add	r7, sp, #0
  errno = EAGAIN;
20001330:	f009 ff8e 	bl	2000b250 <__errno>
20001334:	4603      	mov	r3, r0
20001336:	220b      	movs	r2, #11
20001338:	601a      	str	r2, [r3, #0]
  return -1;
2000133a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000133e:	4618      	mov	r0, r3
20001340:	bd80      	pop	{r7, pc}

20001342 <_execve>:

int _execve(char *name, char **argv, char **env)
{
20001342:	b580      	push	{r7, lr}
20001344:	b084      	sub	sp, #16
20001346:	af00      	add	r7, sp, #0
20001348:	60f8      	str	r0, [r7, #12]
2000134a:	60b9      	str	r1, [r7, #8]
2000134c:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
2000134e:	f009 ff7f 	bl	2000b250 <__errno>
20001352:	4603      	mov	r3, r0
20001354:	220c      	movs	r2, #12
20001356:	601a      	str	r2, [r3, #0]
  return -1;
20001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000135c:	4618      	mov	r0, r3
2000135e:	3710      	adds	r7, #16
20001360:	46bd      	mov	sp, r7
20001362:	bd80      	pop	{r7, pc}

20001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20001364:	b580      	push	{r7, lr}
20001366:	b086      	sub	sp, #24
20001368:	af00      	add	r7, sp, #0
2000136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000136c:	4a14      	ldr	r2, [pc, #80]	; (200013c0 <_sbrk+0x5c>)
2000136e:	4b15      	ldr	r3, [pc, #84]	; (200013c4 <_sbrk+0x60>)
20001370:	1ad3      	subs	r3, r2, r3
20001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20001374:	697b      	ldr	r3, [r7, #20]
20001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20001378:	4b13      	ldr	r3, [pc, #76]	; (200013c8 <_sbrk+0x64>)
2000137a:	681b      	ldr	r3, [r3, #0]
2000137c:	2b00      	cmp	r3, #0
2000137e:	d102      	bne.n	20001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001380:	4b11      	ldr	r3, [pc, #68]	; (200013c8 <_sbrk+0x64>)
20001382:	4a12      	ldr	r2, [pc, #72]	; (200013cc <_sbrk+0x68>)
20001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20001386:	4b10      	ldr	r3, [pc, #64]	; (200013c8 <_sbrk+0x64>)
20001388:	681a      	ldr	r2, [r3, #0]
2000138a:	687b      	ldr	r3, [r7, #4]
2000138c:	4413      	add	r3, r2
2000138e:	693a      	ldr	r2, [r7, #16]
20001390:	429a      	cmp	r2, r3
20001392:	d207      	bcs.n	200013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001394:	f009 ff5c 	bl	2000b250 <__errno>
20001398:	4603      	mov	r3, r0
2000139a:	220c      	movs	r2, #12
2000139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200013a2:	e009      	b.n	200013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
200013a4:	4b08      	ldr	r3, [pc, #32]	; (200013c8 <_sbrk+0x64>)
200013a6:	681b      	ldr	r3, [r3, #0]
200013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
200013aa:	4b07      	ldr	r3, [pc, #28]	; (200013c8 <_sbrk+0x64>)
200013ac:	681a      	ldr	r2, [r3, #0]
200013ae:	687b      	ldr	r3, [r7, #4]
200013b0:	4413      	add	r3, r2
200013b2:	4a05      	ldr	r2, [pc, #20]	; (200013c8 <_sbrk+0x64>)
200013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
200013b6:	68fb      	ldr	r3, [r7, #12]
}
200013b8:	4618      	mov	r0, r3
200013ba:	3718      	adds	r7, #24
200013bc:	46bd      	mov	sp, r7
200013be:	bd80      	pop	{r7, pc}
200013c0:	20020004 	.word	0x20020004
200013c4:	00000400 	.word	0x00000400
200013c8:	200004c4 	.word	0x200004c4
200013cc:	2000b53c 	.word	0x2000b53c

200013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200013d0:	b480      	push	{r7}
200013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200013d4:	4b06      	ldr	r3, [pc, #24]	; (200013f0 <SystemInit+0x20>)
200013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200013da:	4a05      	ldr	r2, [pc, #20]	; (200013f0 <SystemInit+0x20>)
200013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
200013e4:	bf00      	nop
200013e6:	46bd      	mov	sp, r7
200013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200013ec:	4770      	bx	lr
200013ee:	bf00      	nop
200013f0:	e000ed00 	.word	0xe000ed00

200013f4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
200013f4:	b480      	push	{r7}
200013f6:	b087      	sub	sp, #28
200013f8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
200013fa:	2300      	movs	r3, #0
200013fc:	613b      	str	r3, [r7, #16]
200013fe:	2300      	movs	r3, #0
20001400:	617b      	str	r3, [r7, #20]
20001402:	2302      	movs	r3, #2
20001404:	60fb      	str	r3, [r7, #12]
20001406:	2300      	movs	r3, #0
20001408:	60bb      	str	r3, [r7, #8]
2000140a:	2302      	movs	r3, #2
2000140c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
2000140e:	4b34      	ldr	r3, [pc, #208]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001410:	689b      	ldr	r3, [r3, #8]
20001412:	f003 030c 	and.w	r3, r3, #12
20001416:	613b      	str	r3, [r7, #16]

  switch (tmp)
20001418:	693b      	ldr	r3, [r7, #16]
2000141a:	2b08      	cmp	r3, #8
2000141c:	d011      	beq.n	20001442 <SystemCoreClockUpdate+0x4e>
2000141e:	693b      	ldr	r3, [r7, #16]
20001420:	2b08      	cmp	r3, #8
20001422:	d844      	bhi.n	200014ae <SystemCoreClockUpdate+0xba>
20001424:	693b      	ldr	r3, [r7, #16]
20001426:	2b00      	cmp	r3, #0
20001428:	d003      	beq.n	20001432 <SystemCoreClockUpdate+0x3e>
2000142a:	693b      	ldr	r3, [r7, #16]
2000142c:	2b04      	cmp	r3, #4
2000142e:	d004      	beq.n	2000143a <SystemCoreClockUpdate+0x46>
20001430:	e03d      	b.n	200014ae <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
20001432:	4b2c      	ldr	r3, [pc, #176]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
20001434:	4a2c      	ldr	r2, [pc, #176]	; (200014e8 <SystemCoreClockUpdate+0xf4>)
20001436:	601a      	str	r2, [r3, #0]
      break;
20001438:	e03d      	b.n	200014b6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
2000143a:	4b2a      	ldr	r3, [pc, #168]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
2000143c:	4a2b      	ldr	r2, [pc, #172]	; (200014ec <SystemCoreClockUpdate+0xf8>)
2000143e:	601a      	str	r2, [r3, #0]
      break;
20001440:	e039      	b.n	200014b6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20001442:	4b27      	ldr	r3, [pc, #156]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001444:	685b      	ldr	r3, [r3, #4]
20001446:	0d9b      	lsrs	r3, r3, #22
20001448:	f003 0301 	and.w	r3, r3, #1
2000144c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000144e:	4b24      	ldr	r3, [pc, #144]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001450:	685b      	ldr	r3, [r3, #4]
20001452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20001456:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
20001458:	68bb      	ldr	r3, [r7, #8]
2000145a:	2b00      	cmp	r3, #0
2000145c:	d00c      	beq.n	20001478 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000145e:	4a23      	ldr	r2, [pc, #140]	; (200014ec <SystemCoreClockUpdate+0xf8>)
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	fbb2 f3f3 	udiv	r3, r2, r3
20001466:	4a1e      	ldr	r2, [pc, #120]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001468:	6852      	ldr	r2, [r2, #4]
2000146a:	0992      	lsrs	r2, r2, #6
2000146c:	f3c2 0208 	ubfx	r2, r2, #0, #9
20001470:	fb02 f303 	mul.w	r3, r2, r3
20001474:	617b      	str	r3, [r7, #20]
20001476:	e00b      	b.n	20001490 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001478:	4a1b      	ldr	r2, [pc, #108]	; (200014e8 <SystemCoreClockUpdate+0xf4>)
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	fbb2 f3f3 	udiv	r3, r2, r3
20001480:	4a17      	ldr	r2, [pc, #92]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001482:	6852      	ldr	r2, [r2, #4]
20001484:	0992      	lsrs	r2, r2, #6
20001486:	f3c2 0208 	ubfx	r2, r2, #0, #9
2000148a:	fb02 f303 	mul.w	r3, r2, r3
2000148e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001490:	4b13      	ldr	r3, [pc, #76]	; (200014e0 <SystemCoreClockUpdate+0xec>)
20001492:	685b      	ldr	r3, [r3, #4]
20001494:	0c1b      	lsrs	r3, r3, #16
20001496:	f003 0303 	and.w	r3, r3, #3
2000149a:	3301      	adds	r3, #1
2000149c:	005b      	lsls	r3, r3, #1
2000149e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
200014a0:	697a      	ldr	r2, [r7, #20]
200014a2:	68fb      	ldr	r3, [r7, #12]
200014a4:	fbb2 f3f3 	udiv	r3, r2, r3
200014a8:	4a0e      	ldr	r2, [pc, #56]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
200014aa:	6013      	str	r3, [r2, #0]
      break;
200014ac:	e003      	b.n	200014b6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
200014ae:	4b0d      	ldr	r3, [pc, #52]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
200014b0:	4a0d      	ldr	r2, [pc, #52]	; (200014e8 <SystemCoreClockUpdate+0xf4>)
200014b2:	601a      	str	r2, [r3, #0]
      break;
200014b4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
200014b6:	4b0a      	ldr	r3, [pc, #40]	; (200014e0 <SystemCoreClockUpdate+0xec>)
200014b8:	689b      	ldr	r3, [r3, #8]
200014ba:	091b      	lsrs	r3, r3, #4
200014bc:	f003 030f 	and.w	r3, r3, #15
200014c0:	4a0b      	ldr	r2, [pc, #44]	; (200014f0 <SystemCoreClockUpdate+0xfc>)
200014c2:	5cd3      	ldrb	r3, [r2, r3]
200014c4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
200014c6:	4b07      	ldr	r3, [pc, #28]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
200014c8:	681a      	ldr	r2, [r3, #0]
200014ca:	693b      	ldr	r3, [r7, #16]
200014cc:	fa22 f303 	lsr.w	r3, r2, r3
200014d0:	4a04      	ldr	r2, [pc, #16]	; (200014e4 <SystemCoreClockUpdate+0xf0>)
200014d2:	6013      	str	r3, [r2, #0]
}
200014d4:	bf00      	nop
200014d6:	371c      	adds	r7, #28
200014d8:	46bd      	mov	sp, r7
200014da:	f85d 7b04 	ldr.w	r7, [sp], #4
200014de:	4770      	bx	lr
200014e0:	40023800 	.word	0x40023800
200014e4:	200003dc 	.word	0x200003dc
200014e8:	00f42400 	.word	0x00f42400
200014ec:	007a1200 	.word	0x007a1200
200014f0:	2000b514 	.word	0x2000b514

200014f4 <Flash_Select>:
 * 			So testing CS pin let understand if a
 * 			transmission is still running:
 * 			before selecting chip a test over the same CS let
 * 			understand if previous transmission terminated
 ******************************************/
void Flash_Select(void) {
200014f4:	b580      	push	{r7, lr}
200014f6:	af00      	add	r7, sp, #0
		while (SPI_IS_BUSY) {}
200014f8:	bf00      	nop
200014fa:	2120      	movs	r1, #32
200014fc:	4806      	ldr	r0, [pc, #24]	; (20001518 <Flash_Select+0x24>)
200014fe:	f004 fc1f 	bl	20005d40 <HAL_GPIO_ReadPin>
20001502:	4603      	mov	r3, r0
20001504:	2b00      	cmp	r3, #0
20001506:	d0f8      	beq.n	200014fa <Flash_Select+0x6>
		HAL_GPIO_WritePin(FLASH_SPI_CS_PORT, FLASH_SPI_CS_PIN, GPIO_PIN_RESET);
20001508:	2200      	movs	r2, #0
2000150a:	2120      	movs	r1, #32
2000150c:	4802      	ldr	r0, [pc, #8]	; (20001518 <Flash_Select+0x24>)
2000150e:	f004 fc2f 	bl	20005d70 <HAL_GPIO_WritePin>
}
20001512:	bf00      	nop
20001514:	bd80      	pop	{r7, pc}
20001516:	bf00      	nop
20001518:	40020800 	.word	0x40020800

2000151c <Flash_UnSelect>:

/******************************************
 * @brief	disable Flash SPI
 * 			verifying that there is no a running data transfer
 ******************************************/
void Flash_UnSelect(void) {
2000151c:	b580      	push	{r7, lr}
2000151e:	af00      	add	r7, sp, #0
	// CS pin must be low (selected flash) until previous transmission is completed
#ifdef	EXT_FLASH_SPI_POLLING_MODE
	HAL_GPIO_WritePin(FLASH_SPI_CS_PORT, FLASH_SPI_CS_PIN, GPIO_PIN_SET);	//unselect
20001520:	2201      	movs	r2, #1
20001522:	2120      	movs	r1, #32
20001524:	4802      	ldr	r0, [pc, #8]	; (20001530 <Flash_UnSelect+0x14>)
20001526:	f004 fc23 	bl	20005d70 <HAL_GPIO_WritePin>
#endif  // FLASH_SPI_POLLING_MODE
}
2000152a:	bf00      	nop
2000152c:	bd80      	pop	{r7, pc}
2000152e:	bf00      	nop
20001530:	40020800 	.word	0x40020800

20001534 <Flash_Receive>:




void Flash_Receive(uint8_t* data, uint16_t dataSize){
20001534:	b580      	push	{r7, lr}
20001536:	b082      	sub	sp, #8
20001538:	af00      	add	r7, sp, #0
2000153a:	6078      	str	r0, [r7, #4]
2000153c:	460b      	mov	r3, r1
2000153e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
20001540:	887a      	ldrh	r2, [r7, #2]
20001542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001546:	6879      	ldr	r1, [r7, #4]
20001548:	4803      	ldr	r0, [pc, #12]	; (20001558 <Flash_Receive+0x24>)
2000154a:	f007 fdac 	bl	200090a6 <HAL_SPI_Receive>
}
2000154e:	bf00      	nop
20001550:	3708      	adds	r7, #8
20001552:	46bd      	mov	sp, r7
20001554:	bd80      	pop	{r7, pc}
20001556:	bf00      	nop
20001558:	20000468 	.word	0x20000468

2000155c <Flash_Polling_Transmit>:
 * @BRIEF	engages SPI port tranferring data to Flash
 * 			just using Polling mode (TouchGFX requires this function)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 *********************************************************************/
void Flash_Polling_Transmit(uint8_t* data, uint16_t dataSize){
2000155c:	b580      	push	{r7, lr}
2000155e:	b082      	sub	sp, #8
20001560:	af00      	add	r7, sp, #0
20001562:	6078      	str	r0, [r7, #4]
20001564:	460b      	mov	r3, r1
20001566:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
20001568:	887a      	ldrh	r2, [r7, #2]
2000156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000156e:	6879      	ldr	r1, [r7, #4]
20001570:	4803      	ldr	r0, [pc, #12]	; (20001580 <Flash_Polling_Transmit+0x24>)
20001572:	f007 fc5c 	bl	20008e2e <HAL_SPI_Transmit>
}
20001576:	bf00      	nop
20001578:	3708      	adds	r7, #8
2000157a:	46bd      	mov	sp, r7
2000157c:	bd80      	pop	{r7, pc}
2000157e:	bf00      	nop
20001580:	20000468 	.word	0x20000468

20001584 <Flash_Transmit>:
 * 			you need to set this macro even using TouchGFX (having its own configuration parameter:
 * 			set DISPL_DMA_CUTOFF and CubeMX parameter to the same value)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 **************************/
void Flash_Transmit(uint8_t* data, uint16_t dataSize){
20001584:	b580      	push	{r7, lr}
20001586:	b082      	sub	sp, #8
20001588:	af00      	add	r7, sp, #0
2000158a:	6078      	str	r0, [r7, #4]
2000158c:	460b      	mov	r3, r1
2000158e:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
20001590:	887a      	ldrh	r2, [r7, #2]
20001592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001596:	6879      	ldr	r1, [r7, #4]
20001598:	4803      	ldr	r0, [pc, #12]	; (200015a8 <Flash_Transmit+0x24>)
2000159a:	f007 fc48 	bl	20008e2e <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
2000159e:	bf00      	nop
200015a0:	3708      	adds	r7, #8
200015a2:	46bd      	mov	sp, r7
200015a4:	bd80      	pop	{r7, pc}
200015a6:	bf00      	nop
200015a8:	20000468 	.word	0x20000468

200015ac <Flash_WaitForWritingComplete>:
/**************************
 * @BRIEF	keeps looping inside this function until "BUSY" bit in SR1 register
 * 			becomes 0, meaning that the runnin data operation (writing or erasing)
 * 			on the chip, ended
 **************************/
void Flash_WaitForWritingComplete(){
200015ac:	b580      	push	{r7, lr}
200015ae:	b082      	sub	sp, #8
200015b0:	af00      	add	r7, sp, #0
uint8_t buffer[1];
	Flash_Select();
200015b2:	f7ff ff9f 	bl	200014f4 <Flash_Select>
	buffer[0] = W25_R_SR1;
200015b6:	2305      	movs	r3, #5
200015b8:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
200015ba:	1d3b      	adds	r3, r7, #4
200015bc:	2101      	movs	r1, #1
200015be:	4618      	mov	r0, r3
200015c0:	f7ff ffe0 	bl	20001584 <Flash_Transmit>
	do {
		Flash_Receive(buffer, 1);  //SR1 is repeteadly sent until Flash is selected
200015c4:	1d3b      	adds	r3, r7, #4
200015c6:	2101      	movs	r1, #1
200015c8:	4618      	mov	r0, r3
200015ca:	f7ff ffb3 	bl	20001534 <Flash_Receive>
	} while (buffer[0] & SR1_BIT_BUSY);
200015ce:	793b      	ldrb	r3, [r7, #4]
200015d0:	f003 0301 	and.w	r3, r3, #1
200015d4:	2b00      	cmp	r3, #0
200015d6:	d1f5      	bne.n	200015c4 <Flash_WaitForWritingComplete+0x18>
	Flash_UnSelect();
200015d8:	f7ff ffa0 	bl	2000151c <Flash_UnSelect>
}
200015dc:	bf00      	nop
200015de:	3708      	adds	r7, #8
200015e0:	46bd      	mov	sp, r7
200015e2:	bd80      	pop	{r7, pc}

200015e4 <Flash_Read>:
 * 			current version of library doesn't need it
 * @PARAM	addr		EEPROM address to start reading
 *  		data		buffer to fill with read data
 * 			dataSize	number of bytes to read
 **************************/
void Flash_Read(uint32_t addr, uint8_t* data, uint32_t dataSize){
200015e4:	b580      	push	{r7, lr}
200015e6:	b086      	sub	sp, #24
200015e8:	af00      	add	r7, sp, #0
200015ea:	60f8      	str	r0, [r7, #12]
200015ec:	60b9      	str	r1, [r7, #8]
200015ee:	607a      	str	r2, [r7, #4]
uint16_t data_to_transfer;
uint8_t buffer[5];

	buffer[0] = FLASH_READ_COMMAND;
200015f0:	2303      	movs	r3, #3
200015f2:	743b      	strb	r3, [r7, #16]
	buffer[1] = (addr >> 16) & 0xFF;
200015f4:	68fb      	ldr	r3, [r7, #12]
200015f6:	0c1b      	lsrs	r3, r3, #16
200015f8:	b2db      	uxtb	r3, r3
200015fa:	747b      	strb	r3, [r7, #17]
	buffer[2] = (addr >> 8) & 0xFF;
200015fc:	68fb      	ldr	r3, [r7, #12]
200015fe:	0a1b      	lsrs	r3, r3, #8
20001600:	b2db      	uxtb	r3, r3
20001602:	74bb      	strb	r3, [r7, #18]
	buffer[3] = addr & 0xFF;
20001604:	68fb      	ldr	r3, [r7, #12]
20001606:	b2db      	uxtb	r3, r3
20001608:	74fb      	strb	r3, [r7, #19]
	buffer[4] = W25_DUMMY;
2000160a:	2300      	movs	r3, #0
2000160c:	753b      	strb	r3, [r7, #20]
	Flash_Select();
2000160e:	f7ff ff71 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, (FLASH_READ_COMMAND == W25_READ ? 4 : 5));  // "normal/slow" read command doesn't need sending dummy byte
20001612:	f107 0310 	add.w	r3, r7, #16
20001616:	2104      	movs	r1, #4
20001618:	4618      	mov	r0, r3
2000161a:	f7ff ffb3 	bl	20001584 <Flash_Transmit>

	// dataSize is 32 bit, spi_receive handles 16bit transfers, so I have to loop...
	while (dataSize) {
2000161e:	e016      	b.n	2000164e <Flash_Read+0x6a>
		data_to_transfer = ((dataSize>0xFFFF) ? 0xFFFF : (uint16_t)dataSize);
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001626:	d202      	bcs.n	2000162e <Flash_Read+0x4a>
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	b29b      	uxth	r3, r3
2000162c:	e001      	b.n	20001632 <Flash_Read+0x4e>
2000162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001632:	82fb      	strh	r3, [r7, #22]
		Flash_Receive(data, data_to_transfer);
20001634:	8afb      	ldrh	r3, [r7, #22]
20001636:	4619      	mov	r1, r3
20001638:	68b8      	ldr	r0, [r7, #8]
2000163a:	f7ff ff7b 	bl	20001534 <Flash_Receive>
		data+=data_to_transfer;
2000163e:	8afb      	ldrh	r3, [r7, #22]
20001640:	68ba      	ldr	r2, [r7, #8]
20001642:	4413      	add	r3, r2
20001644:	60bb      	str	r3, [r7, #8]
		dataSize-=data_to_transfer;
20001646:	8afb      	ldrh	r3, [r7, #22]
20001648:	687a      	ldr	r2, [r7, #4]
2000164a:	1ad3      	subs	r3, r2, r3
2000164c:	607b      	str	r3, [r7, #4]
	while (dataSize) {
2000164e:	687b      	ldr	r3, [r7, #4]
20001650:	2b00      	cmp	r3, #0
20001652:	d1e5      	bne.n	20001620 <Flash_Read+0x3c>
	}
	Flash_UnSelect();
20001654:	f7ff ff62 	bl	2000151c <Flash_UnSelect>
}
20001658:	bf00      	nop
2000165a:	3718      	adds	r7, #24
2000165c:	46bd      	mov	sp, r7
2000165e:	bd80      	pop	{r7, pc}

20001660 <Flash_SimpleWriteAPage>:
 * 			function doesn't check for the EEPROM page boundary override
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_SimpleWriteAPage(uint32_t addr, uint8_t* data, uint16_t dataSize){
20001660:	b580      	push	{r7, lr}
20001662:	b086      	sub	sp, #24
20001664:	af00      	add	r7, sp, #0
20001666:	60f8      	str	r0, [r7, #12]
20001668:	60b9      	str	r1, [r7, #8]
2000166a:	4613      	mov	r3, r2
2000166c:	80fb      	strh	r3, [r7, #6]
uint8_t buffer[4];
	buffer[0] = W25_PAGE_P;
2000166e:	2302      	movs	r3, #2
20001670:	753b      	strb	r3, [r7, #20]
	buffer[1] = (addr >> 16) & 0xFF;
20001672:	68fb      	ldr	r3, [r7, #12]
20001674:	0c1b      	lsrs	r3, r3, #16
20001676:	b2db      	uxtb	r3, r3
20001678:	757b      	strb	r3, [r7, #21]
	buffer[2] = (addr >> 8) & 0xFF;
2000167a:	68fb      	ldr	r3, [r7, #12]
2000167c:	0a1b      	lsrs	r3, r3, #8
2000167e:	b2db      	uxtb	r3, r3
20001680:	75bb      	strb	r3, [r7, #22]
	buffer[3] = addr & 0xFF;
20001682:	68fb      	ldr	r3, [r7, #12]
20001684:	b2db      	uxtb	r3, r3
20001686:	75fb      	strb	r3, [r7, #23]
	Flash_Select();
20001688:	f7ff ff34 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
2000168c:	f107 0314 	add.w	r3, r7, #20
20001690:	2104      	movs	r1, #4
20001692:	4618      	mov	r0, r3
20001694:	f7ff ff76 	bl	20001584 <Flash_Transmit>
	Flash_Transmit(data, dataSize);
20001698:	88fb      	ldrh	r3, [r7, #6]
2000169a:	4619      	mov	r1, r3
2000169c:	68b8      	ldr	r0, [r7, #8]
2000169e:	f7ff ff71 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200016a2:	f7ff ff3b 	bl	2000151c <Flash_UnSelect>
}
200016a6:	bf00      	nop
200016a8:	3718      	adds	r7, #24
200016aa:	46bd      	mov	sp, r7
200016ac:	bd80      	pop	{r7, pc}

200016ae <Flash_Write>:
 * 			and waiting the writing complete each time
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_Write(uint32_t addr, uint8_t* data, uint32_t dataSize){
200016ae:	b580      	push	{r7, lr}
200016b0:	b088      	sub	sp, #32
200016b2:	af00      	add	r7, sp, #0
200016b4:	60f8      	str	r0, [r7, #12]
200016b6:	60b9      	str	r1, [r7, #8]
200016b8:	607a      	str	r2, [r7, #4]
uint8_t buffer[4];
uint16_t quota;
uint32_t inpage_addr;

	if (dataSize==0)
200016ba:	687b      	ldr	r3, [r7, #4]
200016bc:	2b00      	cmp	r3, #0
200016be:	d054      	beq.n	2000176a <Flash_Write+0xbc>
		return;

	// quota is the data size trasferred until now
	quota=0;
200016c0:	2300      	movs	r3, #0
200016c2:	83fb      	strh	r3, [r7, #30]

	// define the starting write position inside the first Flash page to write...
	inpage_addr=addr & (EXT_FLASH_PAGE_SIZE-1);
200016c4:	68fb      	ldr	r3, [r7, #12]
200016c6:	b2db      	uxtb	r3, r3
200016c8:	61bb      	str	r3, [r7, #24]

	// ... so I can detect if more than 1 Flash page has still to be written
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
200016ca:	e025      	b.n	20001718 <Flash_Write+0x6a>
	//loop here inside, until more than 1 Flash page...

		Flash_Select();
200016cc:	f7ff ff12 	bl	200014f4 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
200016d0:	2306      	movs	r3, #6
200016d2:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
200016d4:	f107 0314 	add.w	r3, r7, #20
200016d8:	2101      	movs	r1, #1
200016da:	4618      	mov	r0, r3
200016dc:	f7ff ff52 	bl	20001584 <Flash_Transmit>
		Flash_UnSelect();
200016e0:	f7ff ff1c 	bl	2000151c <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,(EXT_FLASH_PAGE_SIZE-inpage_addr));
200016e4:	8bfa      	ldrh	r2, [r7, #30]
200016e6:	68fb      	ldr	r3, [r7, #12]
200016e8:	18d0      	adds	r0, r2, r3
200016ea:	8bfb      	ldrh	r3, [r7, #30]
200016ec:	68ba      	ldr	r2, [r7, #8]
200016ee:	18d1      	adds	r1, r2, r3
200016f0:	69bb      	ldr	r3, [r7, #24]
200016f2:	b29b      	uxth	r3, r3
200016f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
200016f8:	b29b      	uxth	r3, r3
200016fa:	461a      	mov	r2, r3
200016fc:	f7ff ffb0 	bl	20001660 <Flash_SimpleWriteAPage>
		quota+=(EXT_FLASH_PAGE_SIZE-inpage_addr);
20001700:	69bb      	ldr	r3, [r7, #24]
20001702:	b29b      	uxth	r3, r3
20001704:	8bfa      	ldrh	r2, [r7, #30]
20001706:	1ad3      	subs	r3, r2, r3
20001708:	b29b      	uxth	r3, r3
2000170a:	f503 7380 	add.w	r3, r3, #256	; 0x100
2000170e:	83fb      	strh	r3, [r7, #30]
		// having aligned data to page border on the first writing
		// next writings start from 0 position inside a page
		inpage_addr=0;
20001710:	2300      	movs	r3, #0
20001712:	61bb      	str	r3, [r7, #24]
		Flash_WaitForWritingComplete();
20001714:	f7ff ff4a 	bl	200015ac <Flash_WaitForWritingComplete>
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
20001718:	8bfb      	ldrh	r3, [r7, #30]
2000171a:	687a      	ldr	r2, [r7, #4]
2000171c:	1ad2      	subs	r2, r2, r3
2000171e:	69bb      	ldr	r3, [r7, #24]
20001720:	4413      	add	r3, r2
20001722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20001726:	d8d1      	bhi.n	200016cc <Flash_Write+0x1e>
	}
	// now just the final Flash page...
	if (dataSize-quota) {
20001728:	8bfb      	ldrh	r3, [r7, #30]
2000172a:	687a      	ldr	r2, [r7, #4]
2000172c:	429a      	cmp	r2, r3
2000172e:	d01d      	beq.n	2000176c <Flash_Write+0xbe>
		Flash_Select();
20001730:	f7ff fee0 	bl	200014f4 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
20001734:	2306      	movs	r3, #6
20001736:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
20001738:	f107 0314 	add.w	r3, r7, #20
2000173c:	2101      	movs	r1, #1
2000173e:	4618      	mov	r0, r3
20001740:	f7ff ff20 	bl	20001584 <Flash_Transmit>
		Flash_UnSelect();
20001744:	f7ff feea 	bl	2000151c <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,dataSize-quota);
20001748:	8bfa      	ldrh	r2, [r7, #30]
2000174a:	68fb      	ldr	r3, [r7, #12]
2000174c:	18d0      	adds	r0, r2, r3
2000174e:	8bfb      	ldrh	r3, [r7, #30]
20001750:	68ba      	ldr	r2, [r7, #8]
20001752:	18d1      	adds	r1, r2, r3
20001754:	687b      	ldr	r3, [r7, #4]
20001756:	b29a      	uxth	r2, r3
20001758:	8bfb      	ldrh	r3, [r7, #30]
2000175a:	1ad3      	subs	r3, r2, r3
2000175c:	b29b      	uxth	r3, r3
2000175e:	461a      	mov	r2, r3
20001760:	f7ff ff7e 	bl	20001660 <Flash_SimpleWriteAPage>
		Flash_WaitForWritingComplete();
20001764:	f7ff ff22 	bl	200015ac <Flash_WaitForWritingComplete>
20001768:	e000      	b.n	2000176c <Flash_Write+0xbe>
		return;
2000176a:	bf00      	nop
	}
}
2000176c:	3720      	adds	r7, #32
2000176e:	46bd      	mov	sp, r7
20001770:	bd80      	pop	{r7, pc}

20001772 <Flash_SErase4k>:
 * 			0x1000, 0x2000, 0x3000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 4k sector boundary)
 *********************************/
void Flash_SErase4k(uint32_t addr){
20001772:	b580      	push	{r7, lr}
20001774:	b084      	sub	sp, #16
20001776:	af00      	add	r7, sp, #0
20001778:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
2000177a:	f7ff febb 	bl	200014f4 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
2000177e:	2306      	movs	r3, #6
20001780:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
20001782:	f107 030c 	add.w	r3, r7, #12
20001786:	2101      	movs	r1, #1
20001788:	4618      	mov	r0, r3
2000178a:	f7ff fefb 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
2000178e:	f7ff fec5 	bl	2000151c <Flash_UnSelect>

	buffer[0] = W25_S_ERASE4K;
20001792:	2320      	movs	r3, #32
20001794:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
20001796:	687b      	ldr	r3, [r7, #4]
20001798:	0c1b      	lsrs	r3, r3, #16
2000179a:	b2db      	uxtb	r3, r3
2000179c:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
2000179e:	687b      	ldr	r3, [r7, #4]
200017a0:	0a1b      	lsrs	r3, r3, #8
200017a2:	b2db      	uxtb	r3, r3
200017a4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
200017a6:	687b      	ldr	r3, [r7, #4]
200017a8:	b2db      	uxtb	r3, r3
200017aa:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
200017ac:	f7ff fea2 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
200017b0:	f107 030c 	add.w	r3, r7, #12
200017b4:	2104      	movs	r1, #4
200017b6:	4618      	mov	r0, r3
200017b8:	f7ff fee4 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200017bc:	f7ff feae 	bl	2000151c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
200017c0:	f7ff fef4 	bl	200015ac <Flash_WaitForWritingComplete>
}
200017c4:	bf00      	nop
200017c6:	3710      	adds	r7, #16
200017c8:	46bd      	mov	sp, r7
200017ca:	bd80      	pop	{r7, pc}

200017cc <Flash_BErase32k>:
 * 			0x008000, 0x010000, 0x018000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 32k block boundary)
 *********************************/
void Flash_BErase32k(uint32_t addr){
200017cc:	b580      	push	{r7, lr}
200017ce:	b084      	sub	sp, #16
200017d0:	af00      	add	r7, sp, #0
200017d2:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
200017d4:	f7ff fe8e 	bl	200014f4 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
200017d8:	2306      	movs	r3, #6
200017da:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
200017dc:	f107 030c 	add.w	r3, r7, #12
200017e0:	2101      	movs	r1, #1
200017e2:	4618      	mov	r0, r3
200017e4:	f7ff fece 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200017e8:	f7ff fe98 	bl	2000151c <Flash_UnSelect>

	buffer[0] = W25_B_ERASE32K;
200017ec:	2352      	movs	r3, #82	; 0x52
200017ee:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
200017f0:	687b      	ldr	r3, [r7, #4]
200017f2:	0c1b      	lsrs	r3, r3, #16
200017f4:	b2db      	uxtb	r3, r3
200017f6:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
200017f8:	687b      	ldr	r3, [r7, #4]
200017fa:	0a1b      	lsrs	r3, r3, #8
200017fc:	b2db      	uxtb	r3, r3
200017fe:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
20001800:	687b      	ldr	r3, [r7, #4]
20001802:	b2db      	uxtb	r3, r3
20001804:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
20001806:	f7ff fe75 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
2000180a:	f107 030c 	add.w	r3, r7, #12
2000180e:	2104      	movs	r1, #4
20001810:	4618      	mov	r0, r3
20001812:	f7ff feb7 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001816:	f7ff fe81 	bl	2000151c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
2000181a:	f7ff fec7 	bl	200015ac <Flash_WaitForWritingComplete>
}
2000181e:	bf00      	nop
20001820:	3710      	adds	r7, #16
20001822:	46bd      	mov	sp, r7
20001824:	bd80      	pop	{r7, pc}

20001826 <Flash_BErase64k>:
 * 			0x010000, 0x020000, 0x030000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 64k block boundary)
 *********************************/
void Flash_BErase64k(uint32_t addr){
20001826:	b580      	push	{r7, lr}
20001828:	b084      	sub	sp, #16
2000182a:	af00      	add	r7, sp, #0
2000182c:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
2000182e:	f7ff fe61 	bl	200014f4 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001832:	2306      	movs	r3, #6
20001834:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
20001836:	f107 030c 	add.w	r3, r7, #12
2000183a:	2101      	movs	r1, #1
2000183c:	4618      	mov	r0, r3
2000183e:	f7ff fea1 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001842:	f7ff fe6b 	bl	2000151c <Flash_UnSelect>

	buffer[0] = W25_B_ERASE64K;
20001846:	23d8      	movs	r3, #216	; 0xd8
20001848:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
2000184a:	687b      	ldr	r3, [r7, #4]
2000184c:	0c1b      	lsrs	r3, r3, #16
2000184e:	b2db      	uxtb	r3, r3
20001850:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
20001852:	687b      	ldr	r3, [r7, #4]
20001854:	0a1b      	lsrs	r3, r3, #8
20001856:	b2db      	uxtb	r3, r3
20001858:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
2000185a:	687b      	ldr	r3, [r7, #4]
2000185c:	b2db      	uxtb	r3, r3
2000185e:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
20001860:	f7ff fe48 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001864:	f107 030c 	add.w	r3, r7, #12
20001868:	2104      	movs	r1, #4
2000186a:	4618      	mov	r0, r3
2000186c:	f7ff fe8a 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001870:	f7ff fe54 	bl	2000151c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
20001874:	f7ff fe9a 	bl	200015ac <Flash_WaitForWritingComplete>
}
20001878:	bf00      	nop
2000187a:	3710      	adds	r7, #16
2000187c:	46bd      	mov	sp, r7
2000187e:	bd80      	pop	{r7, pc}

20001880 <Flash_ChipErase>:
 * @BRIEF	Full chip erase to 0XFF
 * 			Chip Erase may need up to 100s
 * 			(typ. 20s)
 * 			waiting the writing complete in each page
 *********************************/
void Flash_ChipErase(){
20001880:	b580      	push	{r7, lr}
20001882:	b082      	sub	sp, #8
20001884:	af00      	add	r7, sp, #0
uint8_t buffer[4];
	Flash_Select();
20001886:	f7ff fe35 	bl	200014f4 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
2000188a:	2306      	movs	r3, #6
2000188c:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
2000188e:	1d3b      	adds	r3, r7, #4
20001890:	2101      	movs	r1, #1
20001892:	4618      	mov	r0, r3
20001894:	f7ff fe76 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001898:	f7ff fe40 	bl	2000151c <Flash_UnSelect>

	buffer[0] = W25_CH_ERASE;
2000189c:	23c7      	movs	r3, #199	; 0xc7
2000189e:	713b      	strb	r3, [r7, #4]
	Flash_Select();
200018a0:	f7ff fe28 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 1);
200018a4:	1d3b      	adds	r3, r7, #4
200018a6:	2101      	movs	r1, #1
200018a8:	4618      	mov	r0, r3
200018aa:	f7ff fe6b 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200018ae:	f7ff fe35 	bl	2000151c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
200018b2:	f7ff fe7b 	bl	200015ac <Flash_WaitForWritingComplete>
}
200018b6:	bf00      	nop
200018b8:	3708      	adds	r7, #8
200018ba:	46bd      	mov	sp, r7
200018bc:	bd80      	pop	{r7, pc}

200018be <Flash_PowerDown>:
/**********************************
 * @BRIEF	Initiates a powerdown
 * 			after a powerDown only accepted a porweUp command
 * 			opwerDown operation is 3us long
 *********************************/
void Flash_PowerDown(){
200018be:	b580      	push	{r7, lr}
200018c0:	b082      	sub	sp, #8
200018c2:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERDOWN;
200018c4:	23b9      	movs	r3, #185	; 0xb9
200018c6:	713b      	strb	r3, [r7, #4]
	Flash_Select();
200018c8:	f7ff fe14 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 1);
200018cc:	1d3b      	adds	r3, r7, #4
200018ce:	2101      	movs	r1, #1
200018d0:	4618      	mov	r0, r3
200018d2:	f7ff fe57 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200018d6:	f7ff fe21 	bl	2000151c <Flash_UnSelect>
}
200018da:	bf00      	nop
200018dc:	3708      	adds	r7, #8
200018de:	46bd      	mov	sp, r7
200018e0:	bd80      	pop	{r7, pc}

200018e2 <Flash_PowerUp>:


/**********************************
 * @BRIEF	Release from powerdown (3 us to restart) or read device ID
 *********************************/
void Flash_PowerUp(){
200018e2:	b580      	push	{r7, lr}
200018e4:	b082      	sub	sp, #8
200018e6:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERUP_ID;
200018e8:	23ab      	movs	r3, #171	; 0xab
200018ea:	713b      	strb	r3, [r7, #4]
	Flash_Select();
200018ec:	f7ff fe02 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 1);
200018f0:	1d3b      	adds	r3, r7, #4
200018f2:	2101      	movs	r1, #1
200018f4:	4618      	mov	r0, r3
200018f6:	f7ff fe45 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
200018fa:	f7ff fe0f 	bl	2000151c <Flash_UnSelect>
	HAL_Delay(1);
200018fe:	2001      	movs	r0, #1
20001900:	f7ff f80d 	bl	2000091e <HAL_Delay>
}
20001904:	bf00      	nop
20001906:	3708      	adds	r7, #8
20001908:	46bd      	mov	sp, r7
2000190a:	bd80      	pop	{r7, pc}

2000190c <Flash_ReadDevID>:

/**********************************
 * @BRIEF	read device id from chip
 * @RETURN	device id
 *********************************/
uint8_t Flash_ReadDevID(){
2000190c:	b580      	push	{r7, lr}
2000190e:	b082      	sub	sp, #8
20001910:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data;

	buffer[0] = W25_POWERUP_ID;
20001912:	23ab      	movs	r3, #171	; 0xab
20001914:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
20001916:	2300      	movs	r3, #0
20001918:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
2000191a:	2300      	movs	r3, #0
2000191c:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
2000191e:	2300      	movs	r3, #0
20001920:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001922:	f7ff fde7 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001926:	1d3b      	adds	r3, r7, #4
20001928:	2104      	movs	r1, #4
2000192a:	4618      	mov	r0, r3
2000192c:	f7ff fe2a 	bl	20001584 <Flash_Transmit>
	Flash_Receive(&data, 1);
20001930:	1cfb      	adds	r3, r7, #3
20001932:	2101      	movs	r1, #1
20001934:	4618      	mov	r0, r3
20001936:	f7ff fdfd 	bl	20001534 <Flash_Receive>
	Flash_UnSelect();
2000193a:	f7ff fdef 	bl	2000151c <Flash_UnSelect>
	return data;
2000193e:	78fb      	ldrb	r3, [r7, #3]
}
20001940:	4618      	mov	r0, r3
20001942:	3708      	adds	r7, #8
20001944:	46bd      	mov	sp, r7
20001946:	bd80      	pop	{r7, pc}

20001948 <Flash_ReadManufactutrerAndDevID>:





uint16_t Flash_ReadManufactutrerAndDevID() {
20001948:	b580      	push	{r7, lr}
2000194a:	b082      	sub	sp, #8
2000194c:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint16_t data;

	buffer[0] = W25_POWERUP_ID;
2000194e:	23ab      	movs	r3, #171	; 0xab
20001950:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
20001952:	2300      	movs	r3, #0
20001954:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
20001956:	2300      	movs	r3, #0
20001958:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
2000195a:	2300      	movs	r3, #0
2000195c:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
2000195e:	f7ff fdc9 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001962:	1d3b      	adds	r3, r7, #4
20001964:	2104      	movs	r1, #4
20001966:	4618      	mov	r0, r3
20001968:	f7ff fe0c 	bl	20001584 <Flash_Transmit>
	Flash_Receive((uint8_t*)&data, 2);
2000196c:	1cbb      	adds	r3, r7, #2
2000196e:	2102      	movs	r1, #2
20001970:	4618      	mov	r0, r3
20001972:	f7ff fddf 	bl	20001534 <Flash_Receive>
	Flash_UnSelect();
20001976:	f7ff fdd1 	bl	2000151c <Flash_UnSelect>
	return data;
2000197a:	887b      	ldrh	r3, [r7, #2]
}
2000197c:	4618      	mov	r0, r3
2000197e:	3708      	adds	r7, #8
20001980:	46bd      	mov	sp, r7
20001982:	bd80      	pop	{r7, pc}

20001984 <Flash_ReadJedecID>:
 * 			10H ->	 5Mb		11H ->  10Mb		12H ->  20Mb
 * 			13H ->  40Mb		14H ->  80Mb		15H ->  16Mb
 * 			16H ->  32Mb		17H ->  64Mb		18H -> 128Mb
 * 			19H -> 256Mb		20H -> 512Mb		21H ->   1Gb
 ******************************************************************/
uint32_t Flash_ReadJedecID() {
20001984:	b580      	push	{r7, lr}
20001986:	b084      	sub	sp, #16
20001988:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data[3];
uint32_t result;

	buffer[0] = W25_JEDEC_ID;
2000198a:	239f      	movs	r3, #159	; 0x9f
2000198c:	723b      	strb	r3, [r7, #8]
	Flash_Select();
2000198e:	f7ff fdb1 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001992:	f107 0308 	add.w	r3, r7, #8
20001996:	2101      	movs	r1, #1
20001998:	4618      	mov	r0, r3
2000199a:	f7ff fdf3 	bl	20001584 <Flash_Transmit>
	Flash_Receive(data, 3);
2000199e:	1d3b      	adds	r3, r7, #4
200019a0:	2103      	movs	r1, #3
200019a2:	4618      	mov	r0, r3
200019a4:	f7ff fdc6 	bl	20001534 <Flash_Receive>
	Flash_UnSelect();
200019a8:	f7ff fdb8 	bl	2000151c <Flash_UnSelect>
	result=((data[0]<<16) | (data[1] <<8) | data[2]);
200019ac:	793b      	ldrb	r3, [r7, #4]
200019ae:	041a      	lsls	r2, r3, #16
200019b0:	797b      	ldrb	r3, [r7, #5]
200019b2:	021b      	lsls	r3, r3, #8
200019b4:	4313      	orrs	r3, r2
200019b6:	79ba      	ldrb	r2, [r7, #6]
200019b8:	4313      	orrs	r3, r2
200019ba:	60fb      	str	r3, [r7, #12]
	return result;
200019bc:	68fb      	ldr	r3, [r7, #12]
}
200019be:	4618      	mov	r0, r3
200019c0:	3710      	adds	r7, #16
200019c2:	46bd      	mov	sp, r7
200019c4:	bd80      	pop	{r7, pc}

200019c6 <Flash_ReadSFDP>:


/*********************************
 * @RETURN	256byte SFDP register content:
 *********************************/
void Flash_ReadSFDP(uint8_t* data) {
200019c6:	b580      	push	{r7, lr}
200019c8:	b084      	sub	sp, #16
200019ca:	af00      	add	r7, sp, #0
200019cc:	6078      	str	r0, [r7, #4]
uint8_t buffer[5];
	buffer[0] = W25_R_SFPD_REG;
200019ce:	235a      	movs	r3, #90	; 0x5a
200019d0:	723b      	strb	r3, [r7, #8]
	for (uint8_t k=1;k<5;k++)
200019d2:	2301      	movs	r3, #1
200019d4:	73fb      	strb	r3, [r7, #15]
200019d6:	e008      	b.n	200019ea <Flash_ReadSFDP+0x24>
		buffer[k]=0;
200019d8:	7bfb      	ldrb	r3, [r7, #15]
200019da:	3310      	adds	r3, #16
200019dc:	443b      	add	r3, r7
200019de:	2200      	movs	r2, #0
200019e0:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t k=1;k<5;k++)
200019e4:	7bfb      	ldrb	r3, [r7, #15]
200019e6:	3301      	adds	r3, #1
200019e8:	73fb      	strb	r3, [r7, #15]
200019ea:	7bfb      	ldrb	r3, [r7, #15]
200019ec:	2b04      	cmp	r3, #4
200019ee:	d9f3      	bls.n	200019d8 <Flash_ReadSFDP+0x12>
	Flash_Select();
200019f0:	f7ff fd80 	bl	200014f4 <Flash_Select>
	Flash_Transmit(buffer, 5);
200019f4:	f107 0308 	add.w	r3, r7, #8
200019f8:	2105      	movs	r1, #5
200019fa:	4618      	mov	r0, r3
200019fc:	f7ff fdc2 	bl	20001584 <Flash_Transmit>
	Flash_Receive(data, 256);
20001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
20001a04:	6878      	ldr	r0, [r7, #4]
20001a06:	f7ff fd95 	bl	20001534 <Flash_Receive>
	Flash_UnSelect();
20001a0a:	f7ff fd87 	bl	2000151c <Flash_UnSelect>
}
20001a0e:	bf00      	nop
20001a10:	3710      	adds	r7, #16
20001a12:	46bd      	mov	sp, r7
20001a14:	bd80      	pop	{r7, pc}

20001a16 <Flash_TestAvailability>:
 * 			reading SFDP record, it must return
 * 			a string beginning with "SFDP"
 * @RETURN	1 	test passed
 * 			0	no
 *********************************/
uint8_t Flash_TestAvailability() {
20001a16:	b580      	push	{r7, lr}
20001a18:	b0c2      	sub	sp, #264	; 0x108
20001a1a:	af00      	add	r7, sp, #0
uint8_t data[256];
uint8_t test=1;
20001a1c:	2301      	movs	r3, #1
20001a1e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	for (uint8_t k=0;k!=254;k++)
20001a22:	2300      	movs	r3, #0
20001a24:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
20001a28:	e00c      	b.n	20001a44 <Flash_TestAvailability+0x2e>
		  data[k]=0xFF;
20001a2a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001a2e:	f507 7284 	add.w	r2, r7, #264	; 0x108
20001a32:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
20001a36:	21ff      	movs	r1, #255	; 0xff
20001a38:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k!=254;k++)
20001a3a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001a3e:	3301      	adds	r3, #1
20001a40:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
20001a44:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001a48:	2bfe      	cmp	r3, #254	; 0xfe
20001a4a:	d1ee      	bne.n	20001a2a <Flash_TestAvailability+0x14>
	Flash_ReadSFDP(data);
20001a4c:	1d3b      	adds	r3, r7, #4
20001a4e:	4618      	mov	r0, r3
20001a50:	f7ff ffb9 	bl	200019c6 <Flash_ReadSFDP>
	if (data[0]!='S')
20001a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001a5c:	781b      	ldrb	r3, [r3, #0]
20001a5e:	2b53      	cmp	r3, #83	; 0x53
20001a60:	d002      	beq.n	20001a68 <Flash_TestAvailability+0x52>
		test=0;
20001a62:	2300      	movs	r3, #0
20001a64:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[1]!='F')
20001a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001a70:	785b      	ldrb	r3, [r3, #1]
20001a72:	2b46      	cmp	r3, #70	; 0x46
20001a74:	d002      	beq.n	20001a7c <Flash_TestAvailability+0x66>
		test=0;
20001a76:	2300      	movs	r3, #0
20001a78:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[2]!='D')
20001a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001a84:	789b      	ldrb	r3, [r3, #2]
20001a86:	2b44      	cmp	r3, #68	; 0x44
20001a88:	d002      	beq.n	20001a90 <Flash_TestAvailability+0x7a>
		test=0;
20001a8a:	2300      	movs	r3, #0
20001a8c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[3]!='P')
20001a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001a98:	78db      	ldrb	r3, [r3, #3]
20001a9a:	2b50      	cmp	r3, #80	; 0x50
20001a9c:	d002      	beq.n	20001aa4 <Flash_TestAvailability+0x8e>
		test=0;
20001a9e:	2300      	movs	r3, #0
20001aa0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	return test;
20001aa4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
20001aa8:	4618      	mov	r0, r3
20001aaa:	f507 7784 	add.w	r7, r7, #264	; 0x108
20001aae:	46bd      	mov	sp, r7
20001ab0:	bd80      	pop	{r7, pc}

20001ab2 <Flash_Init>:

/******************************************************************
 * @BRIEF	reading manufacutrer and device ID
 * 			checking if connected device is a Winbond Flash
 ******************************************************************/
uint8_t Flash_Init(){
20001ab2:	b580      	push	{r7, lr}
20001ab4:	b082      	sub	sp, #8
20001ab6:	af00      	add	r7, sp, #0
uint32_t JedecID;
	HAL_Delay(6);	// supposing init is called on system startup: 5 ms (tPUW) required after power-up to be fully available
20001ab8:	2006      	movs	r0, #6
20001aba:	f7fe ff30 	bl	2000091e <HAL_Delay>
	Flash_Reset();
20001abe:	f000 f816 	bl	20001aee <Flash_Reset>
	if (!Flash_TestAvailability())
20001ac2:	f7ff ffa8 	bl	20001a16 <Flash_TestAvailability>
20001ac6:	4603      	mov	r3, r0
20001ac8:	2b00      	cmp	r3, #0
20001aca:	d101      	bne.n	20001ad0 <Flash_Init+0x1e>
		return 0;
20001acc:	2300      	movs	r3, #0
20001ace:	e00a      	b.n	20001ae6 <Flash_Init+0x34>
	JedecID=Flash_ReadJedecID() ;	//select the memSize byte
20001ad0:	f7ff ff58 	bl	20001984 <Flash_ReadJedecID>
20001ad4:	6078      	str	r0, [r7, #4]
	if (((JedecID >> 16) & 0XFF) != 0xEF)  // if ManufacturerID is not Winbond (0xEF)
20001ad6:	687b      	ldr	r3, [r7, #4]
20001ad8:	0c1b      	lsrs	r3, r3, #16
20001ada:	b2db      	uxtb	r3, r3
20001adc:	2bef      	cmp	r3, #239	; 0xef
20001ade:	d001      	beq.n	20001ae4 <Flash_Init+0x32>
		return 0;
20001ae0:	2300      	movs	r3, #0
20001ae2:	e000      	b.n	20001ae6 <Flash_Init+0x34>
	return 1;  //return memSize as per table in Flash_ReadJedecID() definition
20001ae4:	2301      	movs	r3, #1
}
20001ae6:	4618      	mov	r0, r3
20001ae8:	3708      	adds	r7, #8
20001aea:	46bd      	mov	sp, r7
20001aec:	bd80      	pop	{r7, pc}

20001aee <Flash_Reset>:





void Flash_Reset(){
20001aee:	b580      	push	{r7, lr}
20001af0:	b082      	sub	sp, #8
20001af2:	af00      	add	r7, sp, #0
uint8_t command;
	command = W25_RESET_EN;
20001af4:	2366      	movs	r3, #102	; 0x66
20001af6:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001af8:	f7ff fcfc 	bl	200014f4 <Flash_Select>
	Flash_Transmit(&command, 1);
20001afc:	1dfb      	adds	r3, r7, #7
20001afe:	2101      	movs	r1, #1
20001b00:	4618      	mov	r0, r3
20001b02:	f7ff fd3f 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001b06:	f7ff fd09 	bl	2000151c <Flash_UnSelect>
	command = W25_RESET;
20001b0a:	2399      	movs	r3, #153	; 0x99
20001b0c:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001b0e:	f7ff fcf1 	bl	200014f4 <Flash_Select>
	Flash_Transmit(&command, 1);
20001b12:	1dfb      	adds	r3, r7, #7
20001b14:	2101      	movs	r1, #1
20001b16:	4618      	mov	r0, r3
20001b18:	f7ff fd34 	bl	20001584 <Flash_Transmit>
	Flash_UnSelect();
20001b1c:	f7ff fcfe 	bl	2000151c <Flash_UnSelect>
	HAL_Delay(1);	// 30us needed by resetting
20001b20:	2001      	movs	r0, #1
20001b22:	f7fe fefc 	bl	2000091e <HAL_Delay>
}
20001b26:	bf00      	nop
20001b28:	3708      	adds	r7, #8
20001b2a:	46bd      	mov	sp, r7
20001b2c:	bd80      	pop	{r7, pc}

20001b2e <DataReader_WaitForReceiveDone>:





void DataReader_WaitForReceiveDone(){
20001b2e:	b480      	push	{r7}
20001b30:	af00      	add	r7, sp, #0
// nothing to do, being reading always in polling mode
	return;
20001b32:	bf00      	nop
}
20001b34:	46bd      	mov	sp, r7
20001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b3a:	4770      	bx	lr

20001b3c <DataReader_ReadData>:

void DataReader_ReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001b3c:	b580      	push	{r7, lr}
20001b3e:	b084      	sub	sp, #16
20001b40:	af00      	add	r7, sp, #0
20001b42:	60f8      	str	r0, [r7, #12]
20001b44:	60b9      	str	r1, [r7, #8]
20001b46:	607a      	str	r2, [r7, #4]
	Flash_Read(address24, buffer, length);
20001b48:	687a      	ldr	r2, [r7, #4]
20001b4a:	68b9      	ldr	r1, [r7, #8]
20001b4c:	68f8      	ldr	r0, [r7, #12]
20001b4e:	f7ff fd49 	bl	200015e4 <Flash_Read>
}
20001b52:	bf00      	nop
20001b54:	3710      	adds	r7, #16
20001b56:	46bd      	mov	sp, r7
20001b58:	bd80      	pop	{r7, pc}

20001b5a <DataReader_StartDMAReadData>:


void DataReader_StartDMAReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001b5a:	b580      	push	{r7, lr}
20001b5c:	b084      	sub	sp, #16
20001b5e:	af00      	add	r7, sp, #0
20001b60:	60f8      	str	r0, [r7, #12]
20001b62:	60b9      	str	r1, [r7, #8]
20001b64:	607a      	str	r2, [r7, #4]
//currently using polling mode even if requested DMA
	Flash_Read(address24, buffer, length);
20001b66:	687a      	ldr	r2, [r7, #4]
20001b68:	68b9      	ldr	r1, [r7, #8]
20001b6a:	68f8      	ldr	r0, [r7, #12]
20001b6c:	f7ff fd3a 	bl	200015e4 <Flash_Read>
}
20001b70:	bf00      	nop
20001b72:	3710      	adds	r7, #16
20001b74:	46bd      	mov	sp, r7
20001b76:	bd80      	pop	{r7, pc}

20001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001b7c:	480d      	ldr	r0, [pc, #52]	; (20001bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20001b7e:	490e      	ldr	r1, [pc, #56]	; (20001bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20001b80:	4a0e      	ldr	r2, [pc, #56]	; (20001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
20001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001b84:	e002      	b.n	20001b8c <LoopCopyDataInit>

20001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001b8a:	3304      	adds	r3, #4

20001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001b90:	d3f9      	bcc.n	20001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001b92:	4a0b      	ldr	r2, [pc, #44]	; (20001bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001b94:	4c0b      	ldr	r4, [pc, #44]	; (20001bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
20001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
20001b98:	e001      	b.n	20001b9e <LoopFillZerobss>

20001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001b9c:	3204      	adds	r2, #4

20001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001ba0:	d3fb      	bcc.n	20001b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001ba2:	f7ff fc15 	bl	200013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20001ba6:	f009 fb6d 	bl	2000b284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001baa:	f7ff f93d 	bl	20000e28 <main>
  bx  lr    
20001bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001bb0:	20020004 	.word	0x20020004
  ldr r0, =_sdata
20001bb4:	200003d4 	.word	0x200003d4
  ldr r1, =_edata
20001bb8:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
20001bbc:	200003d4 	.word	0x200003d4
  ldr r2, =_sbss
20001bc0:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
20001bc4:	200004ec 	.word	0x200004ec

20001bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001bc8:	e7fe      	b.n	20001bc8 <ADC_IRQHandler>
	...

20001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001bcc:	b580      	push	{r7, lr}
20001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001bd0:	4b0e      	ldr	r3, [pc, #56]	; (20001c0c <HAL_Init+0x40>)
20001bd2:	681b      	ldr	r3, [r3, #0]
20001bd4:	4a0d      	ldr	r2, [pc, #52]	; (20001c0c <HAL_Init+0x40>)
20001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20001bdc:	4b0b      	ldr	r3, [pc, #44]	; (20001c0c <HAL_Init+0x40>)
20001bde:	681b      	ldr	r3, [r3, #0]
20001be0:	4a0a      	ldr	r2, [pc, #40]	; (20001c0c <HAL_Init+0x40>)
20001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001be8:	4b08      	ldr	r3, [pc, #32]	; (20001c0c <HAL_Init+0x40>)
20001bea:	681b      	ldr	r3, [r3, #0]
20001bec:	4a07      	ldr	r2, [pc, #28]	; (20001c0c <HAL_Init+0x40>)
20001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001bf4:	2003      	movs	r0, #3
20001bf6:	f000 fbc1 	bl	2000237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001bfa:	2000      	movs	r0, #0
20001bfc:	f7fe fe9a 	bl	20000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001c00:	f7ff fa54 	bl	200010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001c04:	2300      	movs	r3, #0
}
20001c06:	4618      	mov	r0, r3
20001c08:	bd80      	pop	{r7, pc}
20001c0a:	bf00      	nop
20001c0c:	40023c00 	.word	0x40023c00

20001c10 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20001c10:	b580      	push	{r7, lr}
20001c12:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20001c14:	4b13      	ldr	r3, [pc, #76]	; (20001c64 <HAL_DeInit+0x54>)
20001c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001c1a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001c1c:	4b11      	ldr	r3, [pc, #68]	; (20001c64 <HAL_DeInit+0x54>)
20001c1e:	2200      	movs	r2, #0
20001c20:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
20001c22:	4b10      	ldr	r3, [pc, #64]	; (20001c64 <HAL_DeInit+0x54>)
20001c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001c28:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001c2a:	4b0e      	ldr	r3, [pc, #56]	; (20001c64 <HAL_DeInit+0x54>)
20001c2c:	2200      	movs	r2, #0
20001c2e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
20001c30:	4b0c      	ldr	r3, [pc, #48]	; (20001c64 <HAL_DeInit+0x54>)
20001c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001c36:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001c38:	4b0a      	ldr	r3, [pc, #40]	; (20001c64 <HAL_DeInit+0x54>)
20001c3a:	2200      	movs	r2, #0
20001c3c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
20001c3e:	4b09      	ldr	r3, [pc, #36]	; (20001c64 <HAL_DeInit+0x54>)
20001c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001c44:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20001c46:	4b07      	ldr	r3, [pc, #28]	; (20001c64 <HAL_DeInit+0x54>)
20001c48:	2200      	movs	r2, #0
20001c4a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20001c4c:	4b05      	ldr	r3, [pc, #20]	; (20001c64 <HAL_DeInit+0x54>)
20001c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001c52:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001c54:	4b03      	ldr	r3, [pc, #12]	; (20001c64 <HAL_DeInit+0x54>)
20001c56:	2200      	movs	r2, #0
20001c58:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20001c5a:	f000 f80c 	bl	20001c76 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
20001c5e:	2300      	movs	r3, #0
}
20001c60:	4618      	mov	r0, r3
20001c62:	bd80      	pop	{r7, pc}
20001c64:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001c68:	b480      	push	{r7}
20001c6a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20001c6c:	bf00      	nop
20001c6e:	46bd      	mov	sp, r7
20001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c74:	4770      	bx	lr

20001c76 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20001c76:	b480      	push	{r7}
20001c78:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20001c7a:	bf00      	nop
20001c7c:	46bd      	mov	sp, r7
20001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c82:	4770      	bx	lr
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001c84:	b580      	push	{r7, lr}
20001c86:	b082      	sub	sp, #8
20001c88:	af00      	add	r7, sp, #0
20001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001c8c:	4b12      	ldr	r3, [pc, #72]	; (20001cd8 <HAL_MspDeInit+0x62>)
20001c8e:	681a      	ldr	r2, [r3, #0]
20001c90:	4b12      	ldr	r3, [pc, #72]	; (20001cdc <HAL_MspDeInit+0x66>)
20001c92:	781b      	ldrb	r3, [r3, #0]
20001c94:	4619      	mov	r1, r3
20001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
20001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
20001ca2:	4618      	mov	r0, r3
20001ca4:	f000 fbb1 	bl	2000240a <HAL_SYSTICK_Config>
20001ca8:	4603      	mov	r3, r0
20001caa:	2b00      	cmp	r3, #0
20001cac:	d001      	beq.n	20001cb2 <HAL_MspDeInit+0x3c>
  {
    return HAL_ERROR;
20001cae:	2301      	movs	r3, #1
20001cb0:	e00e      	b.n	20001cd0 <HAL_MspDeInit+0x5a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001cb2:	687b      	ldr	r3, [r7, #4]
20001cb4:	2b0f      	cmp	r3, #15
20001cb6:	d80a      	bhi.n	20001cce <HAL_MspDeInit+0x58>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001cb8:	2200      	movs	r2, #0
20001cba:	6879      	ldr	r1, [r7, #4]
20001cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
20001cc0:	f000 fb67 	bl	20002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001cc4:	4a06      	ldr	r2, [pc, #24]	; (20001ce0 <HAL_MspDeInit+0x6a>)
20001cc6:	687b      	ldr	r3, [r7, #4]
20001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001cca:	2300      	movs	r3, #0
20001ccc:	e000      	b.n	20001cd0 <HAL_MspDeInit+0x5a>
    return HAL_ERROR;
20001cce:	2301      	movs	r3, #1
}
20001cd0:	4618      	mov	r0, r3
20001cd2:	3708      	adds	r7, #8
20001cd4:	46bd      	mov	sp, r7
20001cd6:	bd80      	pop	{r7, pc}
20001cd8:	200003dc 	.word	0x200003dc
20001cdc:	200003e4 	.word	0x200003e4
20001ce0:	200003e0 	.word	0x200003e0

20001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001ce4:	b480      	push	{r7}
20001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001ce8:	4b06      	ldr	r3, [pc, #24]	; (20001d04 <HAL_IncTick+0x20>)
20001cea:	781b      	ldrb	r3, [r3, #0]
20001cec:	461a      	mov	r2, r3
20001cee:	4b06      	ldr	r3, [pc, #24]	; (20001d08 <HAL_IncTick+0x24>)
20001cf0:	681b      	ldr	r3, [r3, #0]
20001cf2:	4413      	add	r3, r2
20001cf4:	4a04      	ldr	r2, [pc, #16]	; (20001d08 <HAL_IncTick+0x24>)
20001cf6:	6013      	str	r3, [r2, #0]
}
20001cf8:	bf00      	nop
20001cfa:	46bd      	mov	sp, r7
20001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d00:	4770      	bx	lr
20001d02:	bf00      	nop
20001d04:	200003e4 	.word	0x200003e4
20001d08:	200004c8 	.word	0x200004c8
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001d0c:	b480      	push	{r7}
20001d0e:	af00      	add	r7, sp, #0
  return uwTick;
20001d10:	4b03      	ldr	r3, [pc, #12]	; (20001d20 <HAL_IncTick+0x3c>)
20001d12:	681b      	ldr	r3, [r3, #0]
}
20001d14:	4618      	mov	r0, r3
20001d16:	46bd      	mov	sp, r7
20001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d1c:	4770      	bx	lr
20001d1e:	bf00      	nop
20001d20:	200004c8 	.word	0x200004c8

20001d24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20001d24:	b480      	push	{r7}
20001d26:	af00      	add	r7, sp, #0
  return uwTickPrio;
20001d28:	4b03      	ldr	r3, [pc, #12]	; (20001d38 <HAL_GetTickPrio+0x14>)
20001d2a:	681b      	ldr	r3, [r3, #0]
}
20001d2c:	4618      	mov	r0, r3
20001d2e:	46bd      	mov	sp, r7
20001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d34:	4770      	bx	lr
20001d36:	bf00      	nop
20001d38:	200003e0 	.word	0x200003e0

20001d3c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20001d3c:	b580      	push	{r7, lr}
20001d3e:	b084      	sub	sp, #16
20001d40:	af00      	add	r7, sp, #0
20001d42:	4603      	mov	r3, r0
20001d44:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20001d46:	2300      	movs	r3, #0
20001d48:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20001d4a:	4b0e      	ldr	r3, [pc, #56]	; (20001d84 <HAL_SetTickFreq+0x48>)
20001d4c:	781b      	ldrb	r3, [r3, #0]
20001d4e:	79fa      	ldrb	r2, [r7, #7]
20001d50:	429a      	cmp	r2, r3
20001d52:	d012      	beq.n	20001d7a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20001d54:	4b0b      	ldr	r3, [pc, #44]	; (20001d84 <HAL_SetTickFreq+0x48>)
20001d56:	781b      	ldrb	r3, [r3, #0]
20001d58:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20001d5a:	4a0a      	ldr	r2, [pc, #40]	; (20001d84 <HAL_SetTickFreq+0x48>)
20001d5c:	79fb      	ldrb	r3, [r7, #7]
20001d5e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20001d60:	4b09      	ldr	r3, [pc, #36]	; (20001d88 <HAL_SetTickFreq+0x4c>)
20001d62:	681b      	ldr	r3, [r3, #0]
20001d64:	4618      	mov	r0, r3
20001d66:	f7fe fde5 	bl	20000934 <HAL_InitTick>
20001d6a:	4603      	mov	r3, r0
20001d6c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
20001d6e:	7bfb      	ldrb	r3, [r7, #15]
20001d70:	2b00      	cmp	r3, #0
20001d72:	d002      	beq.n	20001d7a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20001d74:	4a03      	ldr	r2, [pc, #12]	; (20001d84 <HAL_SetTickFreq+0x48>)
20001d76:	7bbb      	ldrb	r3, [r7, #14]
20001d78:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
20001d7c:	4618      	mov	r0, r3
20001d7e:	3710      	adds	r7, #16
20001d80:	46bd      	mov	sp, r7
20001d82:	bd80      	pop	{r7, pc}
20001d84:	200003e4 	.word	0x200003e4
20001d88:	200003e0 	.word	0x200003e0

20001d8c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20001d8c:	b480      	push	{r7}
20001d8e:	af00      	add	r7, sp, #0
  return uwTickFreq;
20001d90:	4b03      	ldr	r3, [pc, #12]	; (20001da0 <HAL_GetTickFreq+0x14>)
20001d92:	781b      	ldrb	r3, [r3, #0]
}
20001d94:	4618      	mov	r0, r3
20001d96:	46bd      	mov	sp, r7
20001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d9c:	4770      	bx	lr
20001d9e:	bf00      	nop
20001da0:	200003e4 	.word	0x200003e4
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001da4:	b580      	push	{r7, lr}
20001da6:	b084      	sub	sp, #16
20001da8:	af00      	add	r7, sp, #0
20001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001dac:	f7fe fdaf 	bl	2000090e <HAL_GetTick>
20001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001db2:	687b      	ldr	r3, [r7, #4]
20001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001db6:	68fb      	ldr	r3, [r7, #12]
20001db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20001dbc:	d005      	beq.n	20001dca <HAL_GetTickFreq+0x3e>
  {
    wait += (uint32_t)(uwTickFreq);
20001dbe:	4b0a      	ldr	r3, [pc, #40]	; (20001de8 <HAL_GetTickFreq+0x5c>)
20001dc0:	781b      	ldrb	r3, [r3, #0]
20001dc2:	461a      	mov	r2, r3
20001dc4:	68fb      	ldr	r3, [r7, #12]
20001dc6:	4413      	add	r3, r2
20001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20001dca:	bf00      	nop
20001dcc:	f7fe fd9f 	bl	2000090e <HAL_GetTick>
20001dd0:	4602      	mov	r2, r0
20001dd2:	68bb      	ldr	r3, [r7, #8]
20001dd4:	1ad3      	subs	r3, r2, r3
20001dd6:	68fa      	ldr	r2, [r7, #12]
20001dd8:	429a      	cmp	r2, r3
20001dda:	d8f7      	bhi.n	20001dcc <HAL_GetTickFreq+0x40>
  {
  }
}
20001ddc:	bf00      	nop
20001dde:	bf00      	nop
20001de0:	3710      	adds	r7, #16
20001de2:	46bd      	mov	sp, r7
20001de4:	bd80      	pop	{r7, pc}
20001de6:	bf00      	nop
20001de8:	200003e4 	.word	0x200003e4

20001dec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
20001dec:	b480      	push	{r7}
20001dee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20001df0:	4b05      	ldr	r3, [pc, #20]	; (20001e08 <HAL_SuspendTick+0x1c>)
20001df2:	681b      	ldr	r3, [r3, #0]
20001df4:	4a04      	ldr	r2, [pc, #16]	; (20001e08 <HAL_SuspendTick+0x1c>)
20001df6:	f023 0302 	bic.w	r3, r3, #2
20001dfa:	6013      	str	r3, [r2, #0]
}
20001dfc:	bf00      	nop
20001dfe:	46bd      	mov	sp, r7
20001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e04:	4770      	bx	lr
20001e06:	bf00      	nop
20001e08:	e000e010 	.word	0xe000e010

20001e0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20001e0c:	b480      	push	{r7}
20001e0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001e10:	4b05      	ldr	r3, [pc, #20]	; (20001e28 <HAL_ResumeTick+0x1c>)
20001e12:	681b      	ldr	r3, [r3, #0]
20001e14:	4a04      	ldr	r2, [pc, #16]	; (20001e28 <HAL_ResumeTick+0x1c>)
20001e16:	f043 0302 	orr.w	r3, r3, #2
20001e1a:	6013      	str	r3, [r2, #0]
}
20001e1c:	bf00      	nop
20001e1e:	46bd      	mov	sp, r7
20001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e24:	4770      	bx	lr
20001e26:	bf00      	nop
20001e28:	e000e010 	.word	0xe000e010

20001e2c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20001e2c:	b480      	push	{r7}
20001e2e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
20001e30:	4b02      	ldr	r3, [pc, #8]	; (20001e3c <HAL_GetHalVersion+0x10>)
}
20001e32:	4618      	mov	r0, r3
20001e34:	46bd      	mov	sp, r7
20001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e3a:	4770      	bx	lr
20001e3c:	01080100 	.word	0x01080100

20001e40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20001e40:	b480      	push	{r7}
20001e42:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
20001e44:	4b03      	ldr	r3, [pc, #12]	; (20001e54 <HAL_GetREVID+0x14>)
20001e46:	681b      	ldr	r3, [r3, #0]
20001e48:	0c1b      	lsrs	r3, r3, #16
}
20001e4a:	4618      	mov	r0, r3
20001e4c:	46bd      	mov	sp, r7
20001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e52:	4770      	bx	lr
20001e54:	e0042000 	.word	0xe0042000

20001e58 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20001e58:	b480      	push	{r7}
20001e5a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20001e5c:	4b04      	ldr	r3, [pc, #16]	; (20001e70 <HAL_GetDEVID+0x18>)
20001e5e:	681b      	ldr	r3, [r3, #0]
20001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20001e64:	4618      	mov	r0, r3
20001e66:	46bd      	mov	sp, r7
20001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e6c:	4770      	bx	lr
20001e6e:	bf00      	nop
20001e70:	e0042000 	.word	0xe0042000

20001e74 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20001e74:	b480      	push	{r7}
20001e76:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001e78:	4b05      	ldr	r3, [pc, #20]	; (20001e90 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001e7a:	685b      	ldr	r3, [r3, #4]
20001e7c:	4a04      	ldr	r2, [pc, #16]	; (20001e90 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001e7e:	f043 0301 	orr.w	r3, r3, #1
20001e82:	6053      	str	r3, [r2, #4]
}
20001e84:	bf00      	nop
20001e86:	46bd      	mov	sp, r7
20001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e8c:	4770      	bx	lr
20001e8e:	bf00      	nop
20001e90:	e0042000 	.word	0xe0042000

20001e94 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20001e94:	b480      	push	{r7}
20001e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001e98:	4b05      	ldr	r3, [pc, #20]	; (20001eb0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001e9a:	685b      	ldr	r3, [r3, #4]
20001e9c:	4a04      	ldr	r2, [pc, #16]	; (20001eb0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001e9e:	f023 0301 	bic.w	r3, r3, #1
20001ea2:	6053      	str	r3, [r2, #4]
}
20001ea4:	bf00      	nop
20001ea6:	46bd      	mov	sp, r7
20001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eac:	4770      	bx	lr
20001eae:	bf00      	nop
20001eb0:	e0042000 	.word	0xe0042000

20001eb4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20001eb4:	b480      	push	{r7}
20001eb6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001eb8:	4b05      	ldr	r3, [pc, #20]	; (20001ed0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001eba:	685b      	ldr	r3, [r3, #4]
20001ebc:	4a04      	ldr	r2, [pc, #16]	; (20001ed0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001ebe:	f043 0302 	orr.w	r3, r3, #2
20001ec2:	6053      	str	r3, [r2, #4]
}
20001ec4:	bf00      	nop
20001ec6:	46bd      	mov	sp, r7
20001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ecc:	4770      	bx	lr
20001ece:	bf00      	nop
20001ed0:	e0042000 	.word	0xe0042000

20001ed4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20001ed4:	b480      	push	{r7}
20001ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001ed8:	4b05      	ldr	r3, [pc, #20]	; (20001ef0 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001eda:	685b      	ldr	r3, [r3, #4]
20001edc:	4a04      	ldr	r2, [pc, #16]	; (20001ef0 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001ede:	f023 0302 	bic.w	r3, r3, #2
20001ee2:	6053      	str	r3, [r2, #4]
}
20001ee4:	bf00      	nop
20001ee6:	46bd      	mov	sp, r7
20001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eec:	4770      	bx	lr
20001eee:	bf00      	nop
20001ef0:	e0042000 	.word	0xe0042000

20001ef4 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20001ef4:	b480      	push	{r7}
20001ef6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001ef8:	4b05      	ldr	r3, [pc, #20]	; (20001f10 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001efa:	685b      	ldr	r3, [r3, #4]
20001efc:	4a04      	ldr	r2, [pc, #16]	; (20001f10 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001efe:	f043 0304 	orr.w	r3, r3, #4
20001f02:	6053      	str	r3, [r2, #4]
}
20001f04:	bf00      	nop
20001f06:	46bd      	mov	sp, r7
20001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f0c:	4770      	bx	lr
20001f0e:	bf00      	nop
20001f10:	e0042000 	.word	0xe0042000

20001f14 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20001f14:	b480      	push	{r7}
20001f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001f18:	4b05      	ldr	r3, [pc, #20]	; (20001f30 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001f1a:	685b      	ldr	r3, [r3, #4]
20001f1c:	4a04      	ldr	r2, [pc, #16]	; (20001f30 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001f1e:	f023 0304 	bic.w	r3, r3, #4
20001f22:	6053      	str	r3, [r2, #4]
}
20001f24:	bf00      	nop
20001f26:	46bd      	mov	sp, r7
20001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f2c:	4770      	bx	lr
20001f2e:	bf00      	nop
20001f30:	e0042000 	.word	0xe0042000

20001f34 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20001f34:	b480      	push	{r7}
20001f36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
20001f38:	4b03      	ldr	r3, [pc, #12]	; (20001f48 <HAL_EnableCompensationCell+0x14>)
20001f3a:	2201      	movs	r2, #1
20001f3c:	601a      	str	r2, [r3, #0]
}
20001f3e:	bf00      	nop
20001f40:	46bd      	mov	sp, r7
20001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f46:	4770      	bx	lr
20001f48:	42270400 	.word	0x42270400

20001f4c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20001f4c:	b480      	push	{r7}
20001f4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
20001f50:	4b03      	ldr	r3, [pc, #12]	; (20001f60 <HAL_DisableCompensationCell+0x14>)
20001f52:	2200      	movs	r2, #0
20001f54:	601a      	str	r2, [r3, #0]
}
20001f56:	bf00      	nop
20001f58:	46bd      	mov	sp, r7
20001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f5e:	4770      	bx	lr
20001f60:	42270400 	.word	0x42270400

20001f64 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20001f64:	b480      	push	{r7}
20001f66:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
20001f68:	4b03      	ldr	r3, [pc, #12]	; (20001f78 <HAL_GetUIDw0+0x14>)
20001f6a:	681b      	ldr	r3, [r3, #0]
}
20001f6c:	4618      	mov	r0, r3
20001f6e:	46bd      	mov	sp, r7
20001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f74:	4770      	bx	lr
20001f76:	bf00      	nop
20001f78:	1fff7a10 	.word	0x1fff7a10

20001f7c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20001f7c:	b480      	push	{r7}
20001f7e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20001f80:	4b03      	ldr	r3, [pc, #12]	; (20001f90 <HAL_GetUIDw1+0x14>)
20001f82:	681b      	ldr	r3, [r3, #0]
}
20001f84:	4618      	mov	r0, r3
20001f86:	46bd      	mov	sp, r7
20001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f8c:	4770      	bx	lr
20001f8e:	bf00      	nop
20001f90:	1fff7a14 	.word	0x1fff7a14

20001f94 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20001f94:	b480      	push	{r7}
20001f96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20001f98:	4b03      	ldr	r3, [pc, #12]	; (20001fa8 <HAL_GetUIDw2+0x14>)
20001f9a:	681b      	ldr	r3, [r3, #0]
}
20001f9c:	4618      	mov	r0, r3
20001f9e:	46bd      	mov	sp, r7
20001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fa4:	4770      	bx	lr
20001fa6:	bf00      	nop
20001fa8:	1fff7a18 	.word	0x1fff7a18

20001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001fac:	b480      	push	{r7}
20001fae:	b085      	sub	sp, #20
20001fb0:	af00      	add	r7, sp, #0
20001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	f003 0307 	and.w	r3, r3, #7
20001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001fbc:	4b0c      	ldr	r3, [pc, #48]	; (20001ff0 <__NVIC_SetPriorityGrouping+0x44>)
20001fbe:	68db      	ldr	r3, [r3, #12]
20001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20001fc2:	68ba      	ldr	r2, [r7, #8]
20001fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20001fc8:	4013      	ands	r3, r2
20001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001fcc:	68fb      	ldr	r3, [r7, #12]
20001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20001fd0:	68bb      	ldr	r3, [r7, #8]
20001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20001fde:	4a04      	ldr	r2, [pc, #16]	; (20001ff0 <__NVIC_SetPriorityGrouping+0x44>)
20001fe0:	68bb      	ldr	r3, [r7, #8]
20001fe2:	60d3      	str	r3, [r2, #12]
}
20001fe4:	bf00      	nop
20001fe6:	3714      	adds	r7, #20
20001fe8:	46bd      	mov	sp, r7
20001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fee:	4770      	bx	lr
20001ff0:	e000ed00 	.word	0xe000ed00

20001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20001ff4:	b480      	push	{r7}
20001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001ff8:	4b04      	ldr	r3, [pc, #16]	; (2000200c <__NVIC_GetPriorityGrouping+0x18>)
20001ffa:	68db      	ldr	r3, [r3, #12]
20001ffc:	0a1b      	lsrs	r3, r3, #8
20001ffe:	f003 0307 	and.w	r3, r3, #7
}
20002002:	4618      	mov	r0, r3
20002004:	46bd      	mov	sp, r7
20002006:	f85d 7b04 	ldr.w	r7, [sp], #4
2000200a:	4770      	bx	lr
2000200c:	e000ed00 	.word	0xe000ed00

20002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002010:	b480      	push	{r7}
20002012:	b083      	sub	sp, #12
20002014:	af00      	add	r7, sp, #0
20002016:	4603      	mov	r3, r0
20002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000201e:	2b00      	cmp	r3, #0
20002020:	db0b      	blt.n	2000203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002022:	79fb      	ldrb	r3, [r7, #7]
20002024:	f003 021f 	and.w	r2, r3, #31
20002028:	4907      	ldr	r1, [pc, #28]	; (20002048 <__NVIC_EnableIRQ+0x38>)
2000202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000202e:	095b      	lsrs	r3, r3, #5
20002030:	2001      	movs	r0, #1
20002032:	fa00 f202 	lsl.w	r2, r0, r2
20002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
2000203a:	bf00      	nop
2000203c:	370c      	adds	r7, #12
2000203e:	46bd      	mov	sp, r7
20002040:	f85d 7b04 	ldr.w	r7, [sp], #4
20002044:	4770      	bx	lr
20002046:	bf00      	nop
20002048:	e000e100 	.word	0xe000e100

2000204c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000204c:	b480      	push	{r7}
2000204e:	b083      	sub	sp, #12
20002050:	af00      	add	r7, sp, #0
20002052:	4603      	mov	r3, r0
20002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000205a:	2b00      	cmp	r3, #0
2000205c:	db12      	blt.n	20002084 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000205e:	79fb      	ldrb	r3, [r7, #7]
20002060:	f003 021f 	and.w	r2, r3, #31
20002064:	490a      	ldr	r1, [pc, #40]	; (20002090 <__NVIC_DisableIRQ+0x44>)
20002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000206a:	095b      	lsrs	r3, r3, #5
2000206c:	2001      	movs	r0, #1
2000206e:	fa00 f202 	lsl.w	r2, r0, r2
20002072:	3320      	adds	r3, #32
20002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20002078:	f3bf 8f4f 	dsb	sy
}
2000207c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2000207e:	f3bf 8f6f 	isb	sy
}
20002082:	bf00      	nop
    __DSB();
    __ISB();
  }
}
20002084:	bf00      	nop
20002086:	370c      	adds	r7, #12
20002088:	46bd      	mov	sp, r7
2000208a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000208e:	4770      	bx	lr
20002090:	e000e100 	.word	0xe000e100

20002094 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002094:	b480      	push	{r7}
20002096:	b083      	sub	sp, #12
20002098:	af00      	add	r7, sp, #0
2000209a:	4603      	mov	r3, r0
2000209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020a2:	2b00      	cmp	r3, #0
200020a4:	db0e      	blt.n	200020c4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
200020a6:	4a0b      	ldr	r2, [pc, #44]	; (200020d4 <__NVIC_GetPendingIRQ+0x40>)
200020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020ac:	095b      	lsrs	r3, r3, #5
200020ae:	3340      	adds	r3, #64	; 0x40
200020b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
200020b4:	79fb      	ldrb	r3, [r7, #7]
200020b6:	f003 031f 	and.w	r3, r3, #31
200020ba:	fa22 f303 	lsr.w	r3, r2, r3
200020be:	f003 0301 	and.w	r3, r3, #1
200020c2:	e000      	b.n	200020c6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
200020c4:	2300      	movs	r3, #0
  }
}
200020c6:	4618      	mov	r0, r3
200020c8:	370c      	adds	r7, #12
200020ca:	46bd      	mov	sp, r7
200020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200020d0:	4770      	bx	lr
200020d2:	bf00      	nop
200020d4:	e000e100 	.word	0xe000e100

200020d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
200020d8:	b480      	push	{r7}
200020da:	b083      	sub	sp, #12
200020dc:	af00      	add	r7, sp, #0
200020de:	4603      	mov	r3, r0
200020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020e6:	2b00      	cmp	r3, #0
200020e8:	db0c      	blt.n	20002104 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200020ea:	79fb      	ldrb	r3, [r7, #7]
200020ec:	f003 021f 	and.w	r2, r3, #31
200020f0:	4907      	ldr	r1, [pc, #28]	; (20002110 <__NVIC_SetPendingIRQ+0x38>)
200020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020f6:	095b      	lsrs	r3, r3, #5
200020f8:	2001      	movs	r0, #1
200020fa:	fa00 f202 	lsl.w	r2, r0, r2
200020fe:	3340      	adds	r3, #64	; 0x40
20002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002104:	bf00      	nop
20002106:	370c      	adds	r7, #12
20002108:	46bd      	mov	sp, r7
2000210a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000210e:	4770      	bx	lr
20002110:	e000e100 	.word	0xe000e100

20002114 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002114:	b480      	push	{r7}
20002116:	b083      	sub	sp, #12
20002118:	af00      	add	r7, sp, #0
2000211a:	4603      	mov	r3, r0
2000211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002122:	2b00      	cmp	r3, #0
20002124:	db0c      	blt.n	20002140 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002126:	79fb      	ldrb	r3, [r7, #7]
20002128:	f003 021f 	and.w	r2, r3, #31
2000212c:	4907      	ldr	r1, [pc, #28]	; (2000214c <__NVIC_ClearPendingIRQ+0x38>)
2000212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002132:	095b      	lsrs	r3, r3, #5
20002134:	2001      	movs	r0, #1
20002136:	fa00 f202 	lsl.w	r2, r0, r2
2000213a:	3360      	adds	r3, #96	; 0x60
2000213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002140:	bf00      	nop
20002142:	370c      	adds	r7, #12
20002144:	46bd      	mov	sp, r7
20002146:	f85d 7b04 	ldr.w	r7, [sp], #4
2000214a:	4770      	bx	lr
2000214c:	e000e100 	.word	0xe000e100

20002150 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
20002150:	b480      	push	{r7}
20002152:	b083      	sub	sp, #12
20002154:	af00      	add	r7, sp, #0
20002156:	4603      	mov	r3, r0
20002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000215e:	2b00      	cmp	r3, #0
20002160:	db0e      	blt.n	20002180 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20002162:	4a0b      	ldr	r2, [pc, #44]	; (20002190 <__NVIC_GetActive+0x40>)
20002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002168:	095b      	lsrs	r3, r3, #5
2000216a:	3380      	adds	r3, #128	; 0x80
2000216c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002170:	79fb      	ldrb	r3, [r7, #7]
20002172:	f003 031f 	and.w	r3, r3, #31
20002176:	fa22 f303 	lsr.w	r3, r2, r3
2000217a:	f003 0301 	and.w	r3, r3, #1
2000217e:	e000      	b.n	20002182 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
20002180:	2300      	movs	r3, #0
  }
}
20002182:	4618      	mov	r0, r3
20002184:	370c      	adds	r7, #12
20002186:	46bd      	mov	sp, r7
20002188:	f85d 7b04 	ldr.w	r7, [sp], #4
2000218c:	4770      	bx	lr
2000218e:	bf00      	nop
20002190:	e000e100 	.word	0xe000e100

20002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20002194:	b480      	push	{r7}
20002196:	b083      	sub	sp, #12
20002198:	af00      	add	r7, sp, #0
2000219a:	4603      	mov	r3, r0
2000219c:	6039      	str	r1, [r7, #0]
2000219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021a4:	2b00      	cmp	r3, #0
200021a6:	db0a      	blt.n	200021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200021a8:	683b      	ldr	r3, [r7, #0]
200021aa:	b2da      	uxtb	r2, r3
200021ac:	490c      	ldr	r1, [pc, #48]	; (200021e0 <__NVIC_SetPriority+0x4c>)
200021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021b2:	0112      	lsls	r2, r2, #4
200021b4:	b2d2      	uxtb	r2, r2
200021b6:	440b      	add	r3, r1
200021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200021bc:	e00a      	b.n	200021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200021be:	683b      	ldr	r3, [r7, #0]
200021c0:	b2da      	uxtb	r2, r3
200021c2:	4908      	ldr	r1, [pc, #32]	; (200021e4 <__NVIC_SetPriority+0x50>)
200021c4:	79fb      	ldrb	r3, [r7, #7]
200021c6:	f003 030f 	and.w	r3, r3, #15
200021ca:	3b04      	subs	r3, #4
200021cc:	0112      	lsls	r2, r2, #4
200021ce:	b2d2      	uxtb	r2, r2
200021d0:	440b      	add	r3, r1
200021d2:	761a      	strb	r2, [r3, #24]
}
200021d4:	bf00      	nop
200021d6:	370c      	adds	r7, #12
200021d8:	46bd      	mov	sp, r7
200021da:	f85d 7b04 	ldr.w	r7, [sp], #4
200021de:	4770      	bx	lr
200021e0:	e000e100 	.word	0xe000e100
200021e4:	e000ed00 	.word	0xe000ed00

200021e8 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
200021e8:	b480      	push	{r7}
200021ea:	b083      	sub	sp, #12
200021ec:	af00      	add	r7, sp, #0
200021ee:	4603      	mov	r3, r0
200021f0:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
200021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021f6:	2b00      	cmp	r3, #0
200021f8:	db09      	blt.n	2000220e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
200021fa:	4a0d      	ldr	r2, [pc, #52]	; (20002230 <__NVIC_GetPriority+0x48>)
200021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002200:	4413      	add	r3, r2
20002202:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
20002206:	b2db      	uxtb	r3, r3
20002208:	091b      	lsrs	r3, r3, #4
2000220a:	b2db      	uxtb	r3, r3
2000220c:	e009      	b.n	20002222 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
2000220e:	4a09      	ldr	r2, [pc, #36]	; (20002234 <__NVIC_GetPriority+0x4c>)
20002210:	79fb      	ldrb	r3, [r7, #7]
20002212:	f003 030f 	and.w	r3, r3, #15
20002216:	3b04      	subs	r3, #4
20002218:	4413      	add	r3, r2
2000221a:	7e1b      	ldrb	r3, [r3, #24]
2000221c:	b2db      	uxtb	r3, r3
2000221e:	091b      	lsrs	r3, r3, #4
20002220:	b2db      	uxtb	r3, r3
  }
}
20002222:	4618      	mov	r0, r3
20002224:	370c      	adds	r7, #12
20002226:	46bd      	mov	sp, r7
20002228:	f85d 7b04 	ldr.w	r7, [sp], #4
2000222c:	4770      	bx	lr
2000222e:	bf00      	nop
20002230:	e000e100 	.word	0xe000e100
20002234:	e000ed00 	.word	0xe000ed00

20002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20002238:	b480      	push	{r7}
2000223a:	b089      	sub	sp, #36	; 0x24
2000223c:	af00      	add	r7, sp, #0
2000223e:	60f8      	str	r0, [r7, #12]
20002240:	60b9      	str	r1, [r7, #8]
20002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002244:	68fb      	ldr	r3, [r7, #12]
20002246:	f003 0307 	and.w	r3, r3, #7
2000224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000224c:	69fb      	ldr	r3, [r7, #28]
2000224e:	f1c3 0307 	rsb	r3, r3, #7
20002252:	2b04      	cmp	r3, #4
20002254:	bf28      	it	cs
20002256:	2304      	movcs	r3, #4
20002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000225a:	69fb      	ldr	r3, [r7, #28]
2000225c:	3304      	adds	r3, #4
2000225e:	2b06      	cmp	r3, #6
20002260:	d902      	bls.n	20002268 <NVIC_EncodePriority+0x30>
20002262:	69fb      	ldr	r3, [r7, #28]
20002264:	3b03      	subs	r3, #3
20002266:	e000      	b.n	2000226a <NVIC_EncodePriority+0x32>
20002268:	2300      	movs	r3, #0
2000226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000226c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20002270:	69bb      	ldr	r3, [r7, #24]
20002272:	fa02 f303 	lsl.w	r3, r2, r3
20002276:	43da      	mvns	r2, r3
20002278:	68bb      	ldr	r3, [r7, #8]
2000227a:	401a      	ands	r2, r3
2000227c:	697b      	ldr	r3, [r7, #20]
2000227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20002280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
20002284:	697b      	ldr	r3, [r7, #20]
20002286:	fa01 f303 	lsl.w	r3, r1, r3
2000228a:	43d9      	mvns	r1, r3
2000228c:	687b      	ldr	r3, [r7, #4]
2000228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20002290:	4313      	orrs	r3, r2
         );
}
20002292:	4618      	mov	r0, r3
20002294:	3724      	adds	r7, #36	; 0x24
20002296:	46bd      	mov	sp, r7
20002298:	f85d 7b04 	ldr.w	r7, [sp], #4
2000229c:	4770      	bx	lr

2000229e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
2000229e:	b480      	push	{r7}
200022a0:	b089      	sub	sp, #36	; 0x24
200022a2:	af00      	add	r7, sp, #0
200022a4:	60f8      	str	r0, [r7, #12]
200022a6:	60b9      	str	r1, [r7, #8]
200022a8:	607a      	str	r2, [r7, #4]
200022aa:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200022ac:	68bb      	ldr	r3, [r7, #8]
200022ae:	f003 0307 	and.w	r3, r3, #7
200022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200022b4:	69fb      	ldr	r3, [r7, #28]
200022b6:	f1c3 0307 	rsb	r3, r3, #7
200022ba:	2b04      	cmp	r3, #4
200022bc:	bf28      	it	cs
200022be:	2304      	movcs	r3, #4
200022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200022c2:	69fb      	ldr	r3, [r7, #28]
200022c4:	3304      	adds	r3, #4
200022c6:	2b06      	cmp	r3, #6
200022c8:	d902      	bls.n	200022d0 <NVIC_DecodePriority+0x32>
200022ca:	69fb      	ldr	r3, [r7, #28]
200022cc:	3b03      	subs	r3, #3
200022ce:	e000      	b.n	200022d2 <NVIC_DecodePriority+0x34>
200022d0:	2300      	movs	r3, #0
200022d2:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
200022d4:	68fa      	ldr	r2, [r7, #12]
200022d6:	697b      	ldr	r3, [r7, #20]
200022d8:	40da      	lsrs	r2, r3
200022da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
200022de:	69bb      	ldr	r3, [r7, #24]
200022e0:	fa01 f303 	lsl.w	r3, r1, r3
200022e4:	43db      	mvns	r3, r3
200022e6:	401a      	ands	r2, r3
200022e8:	687b      	ldr	r3, [r7, #4]
200022ea:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
200022ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
200022f0:	697b      	ldr	r3, [r7, #20]
200022f2:	fa02 f303 	lsl.w	r3, r2, r3
200022f6:	43da      	mvns	r2, r3
200022f8:	68fb      	ldr	r3, [r7, #12]
200022fa:	401a      	ands	r2, r3
200022fc:	683b      	ldr	r3, [r7, #0]
200022fe:	601a      	str	r2, [r3, #0]
}
20002300:	bf00      	nop
20002302:	3724      	adds	r7, #36	; 0x24
20002304:	46bd      	mov	sp, r7
20002306:	f85d 7b04 	ldr.w	r7, [sp], #4
2000230a:	4770      	bx	lr

2000230c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
2000230c:	b480      	push	{r7}
2000230e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
20002310:	f3bf 8f4f 	dsb	sy
}
20002314:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20002316:	4b06      	ldr	r3, [pc, #24]	; (20002330 <__NVIC_SystemReset+0x24>)
20002318:	68db      	ldr	r3, [r3, #12]
2000231a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2000231e:	4904      	ldr	r1, [pc, #16]	; (20002330 <__NVIC_SystemReset+0x24>)
20002320:	4b04      	ldr	r3, [pc, #16]	; (20002334 <__NVIC_SystemReset+0x28>)
20002322:	4313      	orrs	r3, r2
20002324:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20002326:	f3bf 8f4f 	dsb	sy
}
2000232a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
2000232c:	bf00      	nop
2000232e:	e7fd      	b.n	2000232c <__NVIC_SystemReset+0x20>
20002330:	e000ed00 	.word	0xe000ed00
20002334:	05fa0004 	.word	0x05fa0004

20002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20002338:	b580      	push	{r7, lr}
2000233a:	b082      	sub	sp, #8
2000233c:	af00      	add	r7, sp, #0
2000233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20002340:	687b      	ldr	r3, [r7, #4]
20002342:	3b01      	subs	r3, #1
20002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20002348:	d301      	bcc.n	2000234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000234a:	2301      	movs	r3, #1
2000234c:	e00f      	b.n	2000236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000234e:	4a0a      	ldr	r2, [pc, #40]	; (20002378 <SysTick_Config+0x40>)
20002350:	687b      	ldr	r3, [r7, #4]
20002352:	3b01      	subs	r3, #1
20002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20002356:	210f      	movs	r1, #15
20002358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000235c:	f7ff ff1a 	bl	20002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20002360:	4b05      	ldr	r3, [pc, #20]	; (20002378 <SysTick_Config+0x40>)
20002362:	2200      	movs	r2, #0
20002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20002366:	4b04      	ldr	r3, [pc, #16]	; (20002378 <SysTick_Config+0x40>)
20002368:	2207      	movs	r2, #7
2000236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000236c:	2300      	movs	r3, #0
}
2000236e:	4618      	mov	r0, r3
20002370:	3708      	adds	r7, #8
20002372:	46bd      	mov	sp, r7
20002374:	bd80      	pop	{r7, pc}
20002376:	bf00      	nop
20002378:	e000e010 	.word	0xe000e010

2000237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000237c:	b580      	push	{r7, lr}
2000237e:	b082      	sub	sp, #8
20002380:	af00      	add	r7, sp, #0
20002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20002384:	6878      	ldr	r0, [r7, #4]
20002386:	f7ff fe11 	bl	20001fac <__NVIC_SetPriorityGrouping>
}
2000238a:	bf00      	nop
2000238c:	3708      	adds	r7, #8
2000238e:	46bd      	mov	sp, r7
20002390:	bd80      	pop	{r7, pc}

20002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20002392:	b580      	push	{r7, lr}
20002394:	b086      	sub	sp, #24
20002396:	af00      	add	r7, sp, #0
20002398:	4603      	mov	r3, r0
2000239a:	60b9      	str	r1, [r7, #8]
2000239c:	607a      	str	r2, [r7, #4]
2000239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
200023a0:	2300      	movs	r3, #0
200023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200023a4:	f7ff fe26 	bl	20001ff4 <__NVIC_GetPriorityGrouping>
200023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200023aa:	687a      	ldr	r2, [r7, #4]
200023ac:	68b9      	ldr	r1, [r7, #8]
200023ae:	6978      	ldr	r0, [r7, #20]
200023b0:	f7ff ff42 	bl	20002238 <NVIC_EncodePriority>
200023b4:	4602      	mov	r2, r0
200023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
200023ba:	4611      	mov	r1, r2
200023bc:	4618      	mov	r0, r3
200023be:	f7ff fee9 	bl	20002194 <__NVIC_SetPriority>
}
200023c2:	bf00      	nop
200023c4:	3718      	adds	r7, #24
200023c6:	46bd      	mov	sp, r7
200023c8:	bd80      	pop	{r7, pc}

200023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
200023ca:	b580      	push	{r7, lr}
200023cc:	b082      	sub	sp, #8
200023ce:	af00      	add	r7, sp, #0
200023d0:	4603      	mov	r3, r0
200023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
200023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
200023d8:	4618      	mov	r0, r3
200023da:	f7ff fe19 	bl	20002010 <__NVIC_EnableIRQ>
}
200023de:	bf00      	nop
200023e0:	3708      	adds	r7, #8
200023e2:	46bd      	mov	sp, r7
200023e4:	bd80      	pop	{r7, pc}

200023e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
200023e6:	b580      	push	{r7, lr}
200023e8:	b082      	sub	sp, #8
200023ea:	af00      	add	r7, sp, #0
200023ec:	4603      	mov	r3, r0
200023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
200023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
200023f4:	4618      	mov	r0, r3
200023f6:	f7ff fe29 	bl	2000204c <__NVIC_DisableIRQ>
}
200023fa:	bf00      	nop
200023fc:	3708      	adds	r7, #8
200023fe:	46bd      	mov	sp, r7
20002400:	bd80      	pop	{r7, pc}

20002402 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
20002402:	b580      	push	{r7, lr}
20002404:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
20002406:	f7ff ff81 	bl	2000230c <__NVIC_SystemReset>

2000240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000240a:	b580      	push	{r7, lr}
2000240c:	b082      	sub	sp, #8
2000240e:	af00      	add	r7, sp, #0
20002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20002412:	6878      	ldr	r0, [r7, #4]
20002414:	f7ff ff90 	bl	20002338 <SysTick_Config>
20002418:	4603      	mov	r3, r0
}
2000241a:	4618      	mov	r0, r3
2000241c:	3708      	adds	r7, #8
2000241e:	46bd      	mov	sp, r7
20002420:	bd80      	pop	{r7, pc}
	...

20002424 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
20002424:	b480      	push	{r7}
20002426:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
20002428:	f3bf 8f5f 	dmb	sy
}
2000242c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2000242e:	4b07      	ldr	r3, [pc, #28]	; (2000244c <HAL_MPU_Disable+0x28>)
20002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002432:	4a06      	ldr	r2, [pc, #24]	; (2000244c <HAL_MPU_Disable+0x28>)
20002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20002438:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
2000243a:	4b05      	ldr	r3, [pc, #20]	; (20002450 <HAL_MPU_Disable+0x2c>)
2000243c:	2200      	movs	r2, #0
2000243e:	605a      	str	r2, [r3, #4]
}
20002440:	bf00      	nop
20002442:	46bd      	mov	sp, r7
20002444:	f85d 7b04 	ldr.w	r7, [sp], #4
20002448:	4770      	bx	lr
2000244a:	bf00      	nop
2000244c:	e000ed00 	.word	0xe000ed00
20002450:	e000ed90 	.word	0xe000ed90

20002454 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
20002454:	b480      	push	{r7}
20002456:	b083      	sub	sp, #12
20002458:	af00      	add	r7, sp, #0
2000245a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
2000245c:	4a0b      	ldr	r2, [pc, #44]	; (2000248c <HAL_MPU_Enable+0x38>)
2000245e:	687b      	ldr	r3, [r7, #4]
20002460:	f043 0301 	orr.w	r3, r3, #1
20002464:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20002466:	4b0a      	ldr	r3, [pc, #40]	; (20002490 <HAL_MPU_Enable+0x3c>)
20002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000246a:	4a09      	ldr	r2, [pc, #36]	; (20002490 <HAL_MPU_Enable+0x3c>)
2000246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20002470:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
20002472:	f3bf 8f4f 	dsb	sy
}
20002476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002478:	f3bf 8f6f 	isb	sy
}
2000247c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2000247e:	bf00      	nop
20002480:	370c      	adds	r7, #12
20002482:	46bd      	mov	sp, r7
20002484:	f85d 7b04 	ldr.w	r7, [sp], #4
20002488:	4770      	bx	lr
2000248a:	bf00      	nop
2000248c:	e000ed90 	.word	0xe000ed90
20002490:	e000ed00 	.word	0xe000ed00

20002494 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
20002494:	b480      	push	{r7}
20002496:	b083      	sub	sp, #12
20002498:	af00      	add	r7, sp, #0
2000249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
2000249c:	687b      	ldr	r3, [r7, #4]
2000249e:	785a      	ldrb	r2, [r3, #1]
200024a0:	4b1d      	ldr	r3, [pc, #116]	; (20002518 <HAL_MPU_ConfigRegion+0x84>)
200024a2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
200024a4:	687b      	ldr	r3, [r7, #4]
200024a6:	781b      	ldrb	r3, [r3, #0]
200024a8:	2b00      	cmp	r3, #0
200024aa:	d029      	beq.n	20002500 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
200024ac:	4a1a      	ldr	r2, [pc, #104]	; (20002518 <HAL_MPU_ConfigRegion+0x84>)
200024ae:	687b      	ldr	r3, [r7, #4]
200024b0:	685b      	ldr	r3, [r3, #4]
200024b2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200024b4:	687b      	ldr	r3, [r7, #4]
200024b6:	7b1b      	ldrb	r3, [r3, #12]
200024b8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200024ba:	687b      	ldr	r3, [r7, #4]
200024bc:	7adb      	ldrb	r3, [r3, #11]
200024be:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200024c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200024c2:	687b      	ldr	r3, [r7, #4]
200024c4:	7a9b      	ldrb	r3, [r3, #10]
200024c6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200024c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200024ca:	687b      	ldr	r3, [r7, #4]
200024cc:	7b5b      	ldrb	r3, [r3, #13]
200024ce:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200024d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200024d2:	687b      	ldr	r3, [r7, #4]
200024d4:	7b9b      	ldrb	r3, [r3, #14]
200024d6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200024d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200024da:	687b      	ldr	r3, [r7, #4]
200024dc:	7bdb      	ldrb	r3, [r3, #15]
200024de:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200024e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200024e2:	687b      	ldr	r3, [r7, #4]
200024e4:	7a5b      	ldrb	r3, [r3, #9]
200024e6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200024e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200024ea:	687b      	ldr	r3, [r7, #4]
200024ec:	7a1b      	ldrb	r3, [r3, #8]
200024ee:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200024f0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
200024f2:	687a      	ldr	r2, [r7, #4]
200024f4:	7812      	ldrb	r2, [r2, #0]
200024f6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200024f8:	4a07      	ldr	r2, [pc, #28]	; (20002518 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200024fa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200024fc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
200024fe:	e005      	b.n	2000250c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
20002500:	4b05      	ldr	r3, [pc, #20]	; (20002518 <HAL_MPU_ConfigRegion+0x84>)
20002502:	2200      	movs	r2, #0
20002504:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
20002506:	4b04      	ldr	r3, [pc, #16]	; (20002518 <HAL_MPU_ConfigRegion+0x84>)
20002508:	2200      	movs	r2, #0
2000250a:	611a      	str	r2, [r3, #16]
}
2000250c:	bf00      	nop
2000250e:	370c      	adds	r7, #12
20002510:	46bd      	mov	sp, r7
20002512:	f85d 7b04 	ldr.w	r7, [sp], #4
20002516:	4770      	bx	lr
20002518:	e000ed90 	.word	0xe000ed90

2000251c <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
2000251c:	b580      	push	{r7, lr}
2000251e:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
20002520:	f7ff fd68 	bl	20001ff4 <__NVIC_GetPriorityGrouping>
20002524:	4603      	mov	r3, r0
}
20002526:	4618      	mov	r0, r3
20002528:	bd80      	pop	{r7, pc}

2000252a <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
2000252a:	b580      	push	{r7, lr}
2000252c:	b084      	sub	sp, #16
2000252e:	af00      	add	r7, sp, #0
20002530:	60b9      	str	r1, [r7, #8]
20002532:	607a      	str	r2, [r7, #4]
20002534:	603b      	str	r3, [r7, #0]
20002536:	4603      	mov	r3, r0
20002538:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
2000253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000253e:	4618      	mov	r0, r3
20002540:	f7ff fe52 	bl	200021e8 <__NVIC_GetPriority>
20002544:	683b      	ldr	r3, [r7, #0]
20002546:	687a      	ldr	r2, [r7, #4]
20002548:	68b9      	ldr	r1, [r7, #8]
2000254a:	f7ff fea8 	bl	2000229e <NVIC_DecodePriority>
}
2000254e:	bf00      	nop
20002550:	3710      	adds	r7, #16
20002552:	46bd      	mov	sp, r7
20002554:	bd80      	pop	{r7, pc}

20002556 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002556:	b580      	push	{r7, lr}
20002558:	b082      	sub	sp, #8
2000255a:	af00      	add	r7, sp, #0
2000255c:	4603      	mov	r3, r0
2000255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
20002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002564:	4618      	mov	r0, r3
20002566:	f7ff fdb7 	bl	200020d8 <__NVIC_SetPendingIRQ>
}
2000256a:	bf00      	nop
2000256c:	3708      	adds	r7, #8
2000256e:	46bd      	mov	sp, r7
20002570:	bd80      	pop	{r7, pc}

20002572 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002572:	b580      	push	{r7, lr}
20002574:	b082      	sub	sp, #8
20002576:	af00      	add	r7, sp, #0
20002578:	4603      	mov	r3, r0
2000257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
2000257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002580:	4618      	mov	r0, r3
20002582:	f7ff fd87 	bl	20002094 <__NVIC_GetPendingIRQ>
20002586:	4603      	mov	r3, r0
}
20002588:	4618      	mov	r0, r3
2000258a:	3708      	adds	r7, #8
2000258c:	46bd      	mov	sp, r7
2000258e:	bd80      	pop	{r7, pc}

20002590 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002590:	b580      	push	{r7, lr}
20002592:	b082      	sub	sp, #8
20002594:	af00      	add	r7, sp, #0
20002596:	4603      	mov	r3, r0
20002598:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
2000259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000259e:	4618      	mov	r0, r3
200025a0:	f7ff fdb8 	bl	20002114 <__NVIC_ClearPendingIRQ>
}
200025a4:	bf00      	nop
200025a6:	3708      	adds	r7, #8
200025a8:	46bd      	mov	sp, r7
200025aa:	bd80      	pop	{r7, pc}

200025ac <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
200025ac:	b580      	push	{r7, lr}
200025ae:	b082      	sub	sp, #8
200025b0:	af00      	add	r7, sp, #0
200025b2:	4603      	mov	r3, r0
200025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
200025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200025ba:	4618      	mov	r0, r3
200025bc:	f7ff fdc8 	bl	20002150 <__NVIC_GetActive>
200025c0:	4603      	mov	r3, r0
}
200025c2:	4618      	mov	r0, r3
200025c4:	3708      	adds	r7, #8
200025c6:	46bd      	mov	sp, r7
200025c8:	bd80      	pop	{r7, pc}
	...

200025cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
200025cc:	b480      	push	{r7}
200025ce:	b083      	sub	sp, #12
200025d0:	af00      	add	r7, sp, #0
200025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
200025d4:	687b      	ldr	r3, [r7, #4]
200025d6:	2b04      	cmp	r3, #4
200025d8:	d106      	bne.n	200025e8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
200025da:	4b09      	ldr	r3, [pc, #36]	; (20002600 <HAL_SYSTICK_CLKSourceConfig+0x34>)
200025dc:	681b      	ldr	r3, [r3, #0]
200025de:	4a08      	ldr	r2, [pc, #32]	; (20002600 <HAL_SYSTICK_CLKSourceConfig+0x34>)
200025e0:	f043 0304 	orr.w	r3, r3, #4
200025e4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
200025e6:	e005      	b.n	200025f4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
200025e8:	4b05      	ldr	r3, [pc, #20]	; (20002600 <HAL_SYSTICK_CLKSourceConfig+0x34>)
200025ea:	681b      	ldr	r3, [r3, #0]
200025ec:	4a04      	ldr	r2, [pc, #16]	; (20002600 <HAL_SYSTICK_CLKSourceConfig+0x34>)
200025ee:	f023 0304 	bic.w	r3, r3, #4
200025f2:	6013      	str	r3, [r2, #0]
}
200025f4:	bf00      	nop
200025f6:	370c      	adds	r7, #12
200025f8:	46bd      	mov	sp, r7
200025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200025fe:	4770      	bx	lr
20002600:	e000e010 	.word	0xe000e010

20002604 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
20002604:	b580      	push	{r7, lr}
20002606:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
20002608:	f000 f802 	bl	20002610 <HAL_SYSTICK_Callback>
}
2000260c:	bf00      	nop
2000260e:	bd80      	pop	{r7, pc}

20002610 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
20002610:	b480      	push	{r7}
20002612:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20002614:	bf00      	nop
20002616:	46bd      	mov	sp, r7
20002618:	f85d 7b04 	ldr.w	r7, [sp], #4
2000261c:	4770      	bx	lr
	...

20002620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
20002620:	b580      	push	{r7, lr}
20002622:	b086      	sub	sp, #24
20002624:	af00      	add	r7, sp, #0
20002626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
20002628:	2300      	movs	r3, #0
2000262a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
2000262c:	f7fe f96f 	bl	2000090e <HAL_GetTick>
20002630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20002632:	687b      	ldr	r3, [r7, #4]
20002634:	2b00      	cmp	r3, #0
20002636:	d101      	bne.n	2000263c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
20002638:	2301      	movs	r3, #1
2000263a:	e099      	b.n	20002770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
2000263c:	687b      	ldr	r3, [r7, #4]
2000263e:	2202      	movs	r2, #2
20002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
20002644:	687b      	ldr	r3, [r7, #4]
20002646:	2200      	movs	r2, #0
20002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
2000264c:	687b      	ldr	r3, [r7, #4]
2000264e:	681b      	ldr	r3, [r3, #0]
20002650:	681a      	ldr	r2, [r3, #0]
20002652:	687b      	ldr	r3, [r7, #4]
20002654:	681b      	ldr	r3, [r3, #0]
20002656:	f022 0201 	bic.w	r2, r2, #1
2000265a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000265c:	e00f      	b.n	2000267e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2000265e:	f7fe f956 	bl	2000090e <HAL_GetTick>
20002662:	4602      	mov	r2, r0
20002664:	693b      	ldr	r3, [r7, #16]
20002666:	1ad3      	subs	r3, r2, r3
20002668:	2b05      	cmp	r3, #5
2000266a:	d908      	bls.n	2000267e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2000266c:	687b      	ldr	r3, [r7, #4]
2000266e:	2220      	movs	r2, #32
20002670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
20002672:	687b      	ldr	r3, [r7, #4]
20002674:	2203      	movs	r2, #3
20002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
2000267a:	2303      	movs	r3, #3
2000267c:	e078      	b.n	20002770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000267e:	687b      	ldr	r3, [r7, #4]
20002680:	681b      	ldr	r3, [r3, #0]
20002682:	681b      	ldr	r3, [r3, #0]
20002684:	f003 0301 	and.w	r3, r3, #1
20002688:	2b00      	cmp	r3, #0
2000268a:	d1e8      	bne.n	2000265e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
2000268c:	687b      	ldr	r3, [r7, #4]
2000268e:	681b      	ldr	r3, [r3, #0]
20002690:	681b      	ldr	r3, [r3, #0]
20002692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20002694:	697a      	ldr	r2, [r7, #20]
20002696:	4b38      	ldr	r3, [pc, #224]	; (20002778 <HAL_DMA_Init+0x158>)
20002698:	4013      	ands	r3, r2
2000269a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000269c:	687b      	ldr	r3, [r7, #4]
2000269e:	685a      	ldr	r2, [r3, #4]
200026a0:	687b      	ldr	r3, [r7, #4]
200026a2:	689b      	ldr	r3, [r3, #8]
200026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200026a6:	687b      	ldr	r3, [r7, #4]
200026a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200026ac:	687b      	ldr	r3, [r7, #4]
200026ae:	691b      	ldr	r3, [r3, #16]
200026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200026b2:	687b      	ldr	r3, [r7, #4]
200026b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200026b8:	687b      	ldr	r3, [r7, #4]
200026ba:	699b      	ldr	r3, [r3, #24]
200026bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200026be:	687b      	ldr	r3, [r7, #4]
200026c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200026c4:	687b      	ldr	r3, [r7, #4]
200026c6:	6a1b      	ldr	r3, [r3, #32]
200026c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200026ca:	697a      	ldr	r2, [r7, #20]
200026cc:	4313      	orrs	r3, r2
200026ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200026d0:	687b      	ldr	r3, [r7, #4]
200026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200026d4:	2b04      	cmp	r3, #4
200026d6:	d107      	bne.n	200026e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
200026d8:	687b      	ldr	r3, [r7, #4]
200026da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200026dc:	687b      	ldr	r3, [r7, #4]
200026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200026e0:	4313      	orrs	r3, r2
200026e2:	697a      	ldr	r2, [r7, #20]
200026e4:	4313      	orrs	r3, r2
200026e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
200026e8:	687b      	ldr	r3, [r7, #4]
200026ea:	681b      	ldr	r3, [r3, #0]
200026ec:	697a      	ldr	r2, [r7, #20]
200026ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
200026f0:	687b      	ldr	r3, [r7, #4]
200026f2:	681b      	ldr	r3, [r3, #0]
200026f4:	695b      	ldr	r3, [r3, #20]
200026f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
200026f8:	697b      	ldr	r3, [r7, #20]
200026fa:	f023 0307 	bic.w	r3, r3, #7
200026fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
20002700:	687b      	ldr	r3, [r7, #4]
20002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002704:	697a      	ldr	r2, [r7, #20]
20002706:	4313      	orrs	r3, r2
20002708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2000270a:	687b      	ldr	r3, [r7, #4]
2000270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000270e:	2b04      	cmp	r3, #4
20002710:	d117      	bne.n	20002742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
20002712:	687b      	ldr	r3, [r7, #4]
20002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002716:	697a      	ldr	r2, [r7, #20]
20002718:	4313      	orrs	r3, r2
2000271a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2000271c:	687b      	ldr	r3, [r7, #4]
2000271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002720:	2b00      	cmp	r3, #0
20002722:	d00e      	beq.n	20002742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
20002724:	6878      	ldr	r0, [r7, #4]
20002726:	f000 fd51 	bl	200031cc <DMA_CheckFifoParam>
2000272a:	4603      	mov	r3, r0
2000272c:	2b00      	cmp	r3, #0
2000272e:	d008      	beq.n	20002742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20002730:	687b      	ldr	r3, [r7, #4]
20002732:	2240      	movs	r2, #64	; 0x40
20002734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002736:	687b      	ldr	r3, [r7, #4]
20002738:	2201      	movs	r2, #1
2000273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
2000273e:	2301      	movs	r3, #1
20002740:	e016      	b.n	20002770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
20002742:	687b      	ldr	r3, [r7, #4]
20002744:	681b      	ldr	r3, [r3, #0]
20002746:	697a      	ldr	r2, [r7, #20]
20002748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2000274a:	6878      	ldr	r0, [r7, #4]
2000274c:	f000 fd08 	bl	20003160 <DMA_CalcBaseAndBitshift>
20002750:	4603      	mov	r3, r0
20002752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002754:	687b      	ldr	r3, [r7, #4]
20002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002758:	223f      	movs	r2, #63	; 0x3f
2000275a:	409a      	lsls	r2, r3
2000275c:	68fb      	ldr	r3, [r7, #12]
2000275e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002760:	687b      	ldr	r3, [r7, #4]
20002762:	2200      	movs	r2, #0
20002764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
20002766:	687b      	ldr	r3, [r7, #4]
20002768:	2201      	movs	r2, #1
2000276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2000276e:	2300      	movs	r3, #0
}
20002770:	4618      	mov	r0, r3
20002772:	3718      	adds	r7, #24
20002774:	46bd      	mov	sp, r7
20002776:	bd80      	pop	{r7, pc}
20002778:	f010803f 	.word	0xf010803f

2000277c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
2000277c:	b580      	push	{r7, lr}
2000277e:	b084      	sub	sp, #16
20002780:	af00      	add	r7, sp, #0
20002782:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20002784:	687b      	ldr	r3, [r7, #4]
20002786:	2b00      	cmp	r3, #0
20002788:	d101      	bne.n	2000278e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
2000278a:	2301      	movs	r3, #1
2000278c:	e050      	b.n	20002830 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
2000278e:	687b      	ldr	r3, [r7, #4]
20002790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002794:	b2db      	uxtb	r3, r3
20002796:	2b02      	cmp	r3, #2
20002798:	d101      	bne.n	2000279e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
2000279a:	2302      	movs	r3, #2
2000279c:	e048      	b.n	20002830 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
2000279e:	687b      	ldr	r3, [r7, #4]
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	681a      	ldr	r2, [r3, #0]
200027a4:	687b      	ldr	r3, [r7, #4]
200027a6:	681b      	ldr	r3, [r3, #0]
200027a8:	f022 0201 	bic.w	r2, r2, #1
200027ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
200027ae:	687b      	ldr	r3, [r7, #4]
200027b0:	681b      	ldr	r3, [r3, #0]
200027b2:	2200      	movs	r2, #0
200027b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
200027b6:	687b      	ldr	r3, [r7, #4]
200027b8:	681b      	ldr	r3, [r3, #0]
200027ba:	2200      	movs	r2, #0
200027bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
200027be:	687b      	ldr	r3, [r7, #4]
200027c0:	681b      	ldr	r3, [r3, #0]
200027c2:	2200      	movs	r2, #0
200027c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
200027c6:	687b      	ldr	r3, [r7, #4]
200027c8:	681b      	ldr	r3, [r3, #0]
200027ca:	2200      	movs	r2, #0
200027cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
200027ce:	687b      	ldr	r3, [r7, #4]
200027d0:	681b      	ldr	r3, [r3, #0]
200027d2:	2200      	movs	r2, #0
200027d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
200027d6:	687b      	ldr	r3, [r7, #4]
200027d8:	681b      	ldr	r3, [r3, #0]
200027da:	2221      	movs	r2, #33	; 0x21
200027dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200027de:	6878      	ldr	r0, [r7, #4]
200027e0:	f000 fcbe 	bl	20003160 <DMA_CalcBaseAndBitshift>
200027e4:	4603      	mov	r3, r0
200027e6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
200027e8:	687b      	ldr	r3, [r7, #4]
200027ea:	2200      	movs	r2, #0
200027ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
200027ee:	687b      	ldr	r3, [r7, #4]
200027f0:	2200      	movs	r2, #0
200027f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
200027f4:	687b      	ldr	r3, [r7, #4]
200027f6:	2200      	movs	r2, #0
200027f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
200027fa:	687b      	ldr	r3, [r7, #4]
200027fc:	2200      	movs	r2, #0
200027fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
20002800:	687b      	ldr	r3, [r7, #4]
20002802:	2200      	movs	r2, #0
20002804:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
20002806:	687b      	ldr	r3, [r7, #4]
20002808:	2200      	movs	r2, #0
2000280a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
2000280c:	687b      	ldr	r3, [r7, #4]
2000280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002810:	223f      	movs	r2, #63	; 0x3f
20002812:	409a      	lsls	r2, r3
20002814:	68fb      	ldr	r3, [r7, #12]
20002816:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002818:	687b      	ldr	r3, [r7, #4]
2000281a:	2200      	movs	r2, #0
2000281c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
2000281e:	687b      	ldr	r3, [r7, #4]
20002820:	2200      	movs	r2, #0
20002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002826:	687b      	ldr	r3, [r7, #4]
20002828:	2200      	movs	r2, #0
2000282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
2000282e:	2300      	movs	r3, #0
}
20002830:	4618      	mov	r0, r3
20002832:	3710      	adds	r7, #16
20002834:	46bd      	mov	sp, r7
20002836:	bd80      	pop	{r7, pc}

20002838 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002838:	b580      	push	{r7, lr}
2000283a:	b086      	sub	sp, #24
2000283c:	af00      	add	r7, sp, #0
2000283e:	60f8      	str	r0, [r7, #12]
20002840:	60b9      	str	r1, [r7, #8]
20002842:	607a      	str	r2, [r7, #4]
20002844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002846:	2300      	movs	r3, #0
20002848:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
2000284a:	68fb      	ldr	r3, [r7, #12]
2000284c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002850:	2b01      	cmp	r3, #1
20002852:	d101      	bne.n	20002858 <HAL_DMA_Start+0x20>
20002854:	2302      	movs	r3, #2
20002856:	e026      	b.n	200028a6 <HAL_DMA_Start+0x6e>
20002858:	68fb      	ldr	r3, [r7, #12]
2000285a:	2201      	movs	r2, #1
2000285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20002860:	68fb      	ldr	r3, [r7, #12]
20002862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002866:	b2db      	uxtb	r3, r3
20002868:	2b01      	cmp	r3, #1
2000286a:	d115      	bne.n	20002898 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2000286c:	68fb      	ldr	r3, [r7, #12]
2000286e:	2202      	movs	r2, #2
20002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002874:	68fb      	ldr	r3, [r7, #12]
20002876:	2200      	movs	r2, #0
20002878:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000287a:	683b      	ldr	r3, [r7, #0]
2000287c:	687a      	ldr	r2, [r7, #4]
2000287e:	68b9      	ldr	r1, [r7, #8]
20002880:	68f8      	ldr	r0, [r7, #12]
20002882:	f000 fc3f 	bl	20003104 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002886:	68fb      	ldr	r3, [r7, #12]
20002888:	681b      	ldr	r3, [r3, #0]
2000288a:	681a      	ldr	r2, [r3, #0]
2000288c:	68fb      	ldr	r3, [r7, #12]
2000288e:	681b      	ldr	r3, [r3, #0]
20002890:	f042 0201 	orr.w	r2, r2, #1
20002894:	601a      	str	r2, [r3, #0]
20002896:	e005      	b.n	200028a4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
20002898:	68fb      	ldr	r3, [r7, #12]
2000289a:	2200      	movs	r2, #0
2000289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200028a0:	2302      	movs	r3, #2
200028a2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
200028a4:	7dfb      	ldrb	r3, [r7, #23]
}
200028a6:	4618      	mov	r0, r3
200028a8:	3718      	adds	r7, #24
200028aa:	46bd      	mov	sp, r7
200028ac:	bd80      	pop	{r7, pc}

200028ae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200028ae:	b580      	push	{r7, lr}
200028b0:	b086      	sub	sp, #24
200028b2:	af00      	add	r7, sp, #0
200028b4:	60f8      	str	r0, [r7, #12]
200028b6:	60b9      	str	r1, [r7, #8]
200028b8:	607a      	str	r2, [r7, #4]
200028ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200028bc:	2300      	movs	r3, #0
200028be:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200028c0:	68fb      	ldr	r3, [r7, #12]
200028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200028c4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
200028c6:	68fb      	ldr	r3, [r7, #12]
200028c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200028cc:	2b01      	cmp	r3, #1
200028ce:	d101      	bne.n	200028d4 <HAL_DMA_Start_IT+0x26>
200028d0:	2302      	movs	r3, #2
200028d2:	e040      	b.n	20002956 <HAL_DMA_Start_IT+0xa8>
200028d4:	68fb      	ldr	r3, [r7, #12]
200028d6:	2201      	movs	r2, #1
200028d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200028dc:	68fb      	ldr	r3, [r7, #12]
200028de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200028e2:	b2db      	uxtb	r3, r3
200028e4:	2b01      	cmp	r3, #1
200028e6:	d12f      	bne.n	20002948 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200028e8:	68fb      	ldr	r3, [r7, #12]
200028ea:	2202      	movs	r2, #2
200028ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200028f0:	68fb      	ldr	r3, [r7, #12]
200028f2:	2200      	movs	r2, #0
200028f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
200028f6:	683b      	ldr	r3, [r7, #0]
200028f8:	687a      	ldr	r2, [r7, #4]
200028fa:	68b9      	ldr	r1, [r7, #8]
200028fc:	68f8      	ldr	r0, [r7, #12]
200028fe:	f000 fc01 	bl	20003104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002902:	68fb      	ldr	r3, [r7, #12]
20002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002906:	223f      	movs	r2, #63	; 0x3f
20002908:	409a      	lsls	r2, r3
2000290a:	693b      	ldr	r3, [r7, #16]
2000290c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
2000290e:	68fb      	ldr	r3, [r7, #12]
20002910:	681b      	ldr	r3, [r3, #0]
20002912:	681a      	ldr	r2, [r3, #0]
20002914:	68fb      	ldr	r3, [r7, #12]
20002916:	681b      	ldr	r3, [r3, #0]
20002918:	f042 0216 	orr.w	r2, r2, #22
2000291c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
2000291e:	68fb      	ldr	r3, [r7, #12]
20002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002922:	2b00      	cmp	r3, #0
20002924:	d007      	beq.n	20002936 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20002926:	68fb      	ldr	r3, [r7, #12]
20002928:	681b      	ldr	r3, [r3, #0]
2000292a:	681a      	ldr	r2, [r3, #0]
2000292c:	68fb      	ldr	r3, [r7, #12]
2000292e:	681b      	ldr	r3, [r3, #0]
20002930:	f042 0208 	orr.w	r2, r2, #8
20002934:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002936:	68fb      	ldr	r3, [r7, #12]
20002938:	681b      	ldr	r3, [r3, #0]
2000293a:	681a      	ldr	r2, [r3, #0]
2000293c:	68fb      	ldr	r3, [r7, #12]
2000293e:	681b      	ldr	r3, [r3, #0]
20002940:	f042 0201 	orr.w	r2, r2, #1
20002944:	601a      	str	r2, [r3, #0]
20002946:	e005      	b.n	20002954 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20002948:	68fb      	ldr	r3, [r7, #12]
2000294a:	2200      	movs	r2, #0
2000294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20002950:	2302      	movs	r3, #2
20002952:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
20002954:	7dfb      	ldrb	r3, [r7, #23]
}
20002956:	4618      	mov	r0, r3
20002958:	3718      	adds	r7, #24
2000295a:	46bd      	mov	sp, r7
2000295c:	bd80      	pop	{r7, pc}

2000295e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
2000295e:	b580      	push	{r7, lr}
20002960:	b084      	sub	sp, #16
20002962:	af00      	add	r7, sp, #0
20002964:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002966:	687b      	ldr	r3, [r7, #4]
20002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000296a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
2000296c:	f7fd ffcf 	bl	2000090e <HAL_GetTick>
20002970:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002972:	687b      	ldr	r3, [r7, #4]
20002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002978:	b2db      	uxtb	r3, r3
2000297a:	2b02      	cmp	r3, #2
2000297c:	d008      	beq.n	20002990 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2000297e:	687b      	ldr	r3, [r7, #4]
20002980:	2280      	movs	r2, #128	; 0x80
20002982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002984:	687b      	ldr	r3, [r7, #4]
20002986:	2200      	movs	r2, #0
20002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
2000298c:	2301      	movs	r3, #1
2000298e:	e052      	b.n	20002a36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002990:	687b      	ldr	r3, [r7, #4]
20002992:	681b      	ldr	r3, [r3, #0]
20002994:	681a      	ldr	r2, [r3, #0]
20002996:	687b      	ldr	r3, [r7, #4]
20002998:	681b      	ldr	r3, [r3, #0]
2000299a:	f022 0216 	bic.w	r2, r2, #22
2000299e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
200029a0:	687b      	ldr	r3, [r7, #4]
200029a2:	681b      	ldr	r3, [r3, #0]
200029a4:	695a      	ldr	r2, [r3, #20]
200029a6:	687b      	ldr	r3, [r7, #4]
200029a8:	681b      	ldr	r3, [r3, #0]
200029aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200029ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200029b0:	687b      	ldr	r3, [r7, #4]
200029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200029b4:	2b00      	cmp	r3, #0
200029b6:	d103      	bne.n	200029c0 <HAL_DMA_Abort+0x62>
200029b8:	687b      	ldr	r3, [r7, #4]
200029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200029bc:	2b00      	cmp	r3, #0
200029be:	d007      	beq.n	200029d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
200029c0:	687b      	ldr	r3, [r7, #4]
200029c2:	681b      	ldr	r3, [r3, #0]
200029c4:	681a      	ldr	r2, [r3, #0]
200029c6:	687b      	ldr	r3, [r7, #4]
200029c8:	681b      	ldr	r3, [r3, #0]
200029ca:	f022 0208 	bic.w	r2, r2, #8
200029ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
200029d0:	687b      	ldr	r3, [r7, #4]
200029d2:	681b      	ldr	r3, [r3, #0]
200029d4:	681a      	ldr	r2, [r3, #0]
200029d6:	687b      	ldr	r3, [r7, #4]
200029d8:	681b      	ldr	r3, [r3, #0]
200029da:	f022 0201 	bic.w	r2, r2, #1
200029de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
200029e0:	e013      	b.n	20002a0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
200029e2:	f7fd ff94 	bl	2000090e <HAL_GetTick>
200029e6:	4602      	mov	r2, r0
200029e8:	68bb      	ldr	r3, [r7, #8]
200029ea:	1ad3      	subs	r3, r2, r3
200029ec:	2b05      	cmp	r3, #5
200029ee:	d90c      	bls.n	20002a0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
200029f0:	687b      	ldr	r3, [r7, #4]
200029f2:	2220      	movs	r2, #32
200029f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	2203      	movs	r2, #3
200029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
200029fe:	687b      	ldr	r3, [r7, #4]
20002a00:	2200      	movs	r2, #0
20002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
20002a06:	2303      	movs	r3, #3
20002a08:	e015      	b.n	20002a36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002a0a:	687b      	ldr	r3, [r7, #4]
20002a0c:	681b      	ldr	r3, [r3, #0]
20002a0e:	681b      	ldr	r3, [r3, #0]
20002a10:	f003 0301 	and.w	r3, r3, #1
20002a14:	2b00      	cmp	r3, #0
20002a16:	d1e4      	bne.n	200029e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002a18:	687b      	ldr	r3, [r7, #4]
20002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002a1c:	223f      	movs	r2, #63	; 0x3f
20002a1e:	409a      	lsls	r2, r3
20002a20:	68fb      	ldr	r3, [r7, #12]
20002a22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
20002a24:	687b      	ldr	r3, [r7, #4]
20002a26:	2201      	movs	r2, #1
20002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002a2c:	687b      	ldr	r3, [r7, #4]
20002a2e:	2200      	movs	r2, #0
20002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
20002a34:	2300      	movs	r3, #0
}
20002a36:	4618      	mov	r0, r3
20002a38:	3710      	adds	r7, #16
20002a3a:	46bd      	mov	sp, r7
20002a3c:	bd80      	pop	{r7, pc}

20002a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
20002a3e:	b480      	push	{r7}
20002a40:	b083      	sub	sp, #12
20002a42:	af00      	add	r7, sp, #0
20002a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002a46:	687b      	ldr	r3, [r7, #4]
20002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002a4c:	b2db      	uxtb	r3, r3
20002a4e:	2b02      	cmp	r3, #2
20002a50:	d004      	beq.n	20002a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002a52:	687b      	ldr	r3, [r7, #4]
20002a54:	2280      	movs	r2, #128	; 0x80
20002a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002a58:	2301      	movs	r3, #1
20002a5a:	e00c      	b.n	20002a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
20002a5c:	687b      	ldr	r3, [r7, #4]
20002a5e:	2205      	movs	r2, #5
20002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002a64:	687b      	ldr	r3, [r7, #4]
20002a66:	681b      	ldr	r3, [r3, #0]
20002a68:	681a      	ldr	r2, [r3, #0]
20002a6a:	687b      	ldr	r3, [r7, #4]
20002a6c:	681b      	ldr	r3, [r3, #0]
20002a6e:	f022 0201 	bic.w	r2, r2, #1
20002a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20002a74:	2300      	movs	r3, #0
}
20002a76:	4618      	mov	r0, r3
20002a78:	370c      	adds	r7, #12
20002a7a:	46bd      	mov	sp, r7
20002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002a80:	4770      	bx	lr

20002a82 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20002a82:	b580      	push	{r7, lr}
20002a84:	b08a      	sub	sp, #40	; 0x28
20002a86:	af00      	add	r7, sp, #0
20002a88:	60f8      	str	r0, [r7, #12]
20002a8a:	460b      	mov	r3, r1
20002a8c:	607a      	str	r2, [r7, #4]
20002a8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
20002a90:	2300      	movs	r3, #0
20002a92:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20002a94:	f7fd ff3b 	bl	2000090e <HAL_GetTick>
20002a98:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
20002a9a:	68fb      	ldr	r3, [r7, #12]
20002a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002aa0:	b2db      	uxtb	r3, r3
20002aa2:	2b02      	cmp	r3, #2
20002aa4:	d008      	beq.n	20002ab8 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002aa6:	68fb      	ldr	r3, [r7, #12]
20002aa8:	2280      	movs	r2, #128	; 0x80
20002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20002aac:	68fb      	ldr	r3, [r7, #12]
20002aae:	2200      	movs	r2, #0
20002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
20002ab4:	2301      	movs	r3, #1
20002ab6:	e0bf      	b.n	20002c38 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
20002ab8:	68fb      	ldr	r3, [r7, #12]
20002aba:	681b      	ldr	r3, [r3, #0]
20002abc:	681b      	ldr	r3, [r3, #0]
20002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002ac2:	2b00      	cmp	r3, #0
20002ac4:	d005      	beq.n	20002ad2 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002ac6:	68fb      	ldr	r3, [r7, #12]
20002ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
20002acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002ace:	2301      	movs	r3, #1
20002ad0:	e0b2      	b.n	20002c38 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002ad2:	7afb      	ldrb	r3, [r7, #11]
20002ad4:	2b00      	cmp	r3, #0
20002ad6:	d106      	bne.n	20002ae6 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002ad8:	68fb      	ldr	r3, [r7, #12]
20002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002adc:	2220      	movs	r2, #32
20002ade:	fa02 f303 	lsl.w	r3, r2, r3
20002ae2:	627b      	str	r3, [r7, #36]	; 0x24
20002ae4:	e005      	b.n	20002af2 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002ae6:	68fb      	ldr	r3, [r7, #12]
20002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002aea:	2210      	movs	r2, #16
20002aec:	fa02 f303 	lsl.w	r3, r2, r3
20002af0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002af2:	68fb      	ldr	r3, [r7, #12]
20002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002af6:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
20002af8:	697b      	ldr	r3, [r7, #20]
20002afa:	681b      	ldr	r3, [r3, #0]
20002afc:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002afe:	e05a      	b.n	20002bb6 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
20002b00:	687b      	ldr	r3, [r7, #4]
20002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20002b06:	d017      	beq.n	20002b38 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	2b00      	cmp	r3, #0
20002b0c:	d007      	beq.n	20002b1e <HAL_DMA_PollForTransfer+0x9c>
20002b0e:	f7fd fefe 	bl	2000090e <HAL_GetTick>
20002b12:	4602      	mov	r2, r0
20002b14:	69bb      	ldr	r3, [r7, #24]
20002b16:	1ad3      	subs	r3, r2, r3
20002b18:	687a      	ldr	r2, [r7, #4]
20002b1a:	429a      	cmp	r2, r3
20002b1c:	d20c      	bcs.n	20002b38 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002b1e:	68fb      	ldr	r3, [r7, #12]
20002b20:	2220      	movs	r2, #32
20002b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002b24:	68fb      	ldr	r3, [r7, #12]
20002b26:	2201      	movs	r2, #1
20002b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002b2c:	68fb      	ldr	r3, [r7, #12]
20002b2e:	2200      	movs	r2, #0
20002b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
20002b34:	2303      	movs	r3, #3
20002b36:	e07f      	b.n	20002c38 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
20002b38:	697b      	ldr	r3, [r7, #20]
20002b3a:	681b      	ldr	r3, [r3, #0]
20002b3c:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002b3e:	68fb      	ldr	r3, [r7, #12]
20002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b42:	2208      	movs	r2, #8
20002b44:	409a      	lsls	r2, r3
20002b46:	6a3b      	ldr	r3, [r7, #32]
20002b48:	4013      	ands	r3, r2
20002b4a:	2b00      	cmp	r3, #0
20002b4c:	d00b      	beq.n	20002b66 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002b4e:	68fb      	ldr	r3, [r7, #12]
20002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002b52:	f043 0201 	orr.w	r2, r3, #1
20002b56:	68fb      	ldr	r3, [r7, #12]
20002b58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002b5a:	68fb      	ldr	r3, [r7, #12]
20002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b5e:	2208      	movs	r2, #8
20002b60:	409a      	lsls	r2, r3
20002b62:	697b      	ldr	r3, [r7, #20]
20002b64:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002b66:	68fb      	ldr	r3, [r7, #12]
20002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b6a:	2201      	movs	r2, #1
20002b6c:	409a      	lsls	r2, r3
20002b6e:	6a3b      	ldr	r3, [r7, #32]
20002b70:	4013      	ands	r3, r2
20002b72:	2b00      	cmp	r3, #0
20002b74:	d00b      	beq.n	20002b8e <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002b76:	68fb      	ldr	r3, [r7, #12]
20002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002b7a:	f043 0202 	orr.w	r2, r3, #2
20002b7e:	68fb      	ldr	r3, [r7, #12]
20002b80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002b82:	68fb      	ldr	r3, [r7, #12]
20002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b86:	2201      	movs	r2, #1
20002b88:	409a      	lsls	r2, r3
20002b8a:	697b      	ldr	r3, [r7, #20]
20002b8c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002b8e:	68fb      	ldr	r3, [r7, #12]
20002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b92:	2204      	movs	r2, #4
20002b94:	409a      	lsls	r2, r3
20002b96:	6a3b      	ldr	r3, [r7, #32]
20002b98:	4013      	ands	r3, r2
20002b9a:	2b00      	cmp	r3, #0
20002b9c:	d00b      	beq.n	20002bb6 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002b9e:	68fb      	ldr	r3, [r7, #12]
20002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002ba2:	f043 0204 	orr.w	r2, r3, #4
20002ba6:	68fb      	ldr	r3, [r7, #12]
20002ba8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002baa:	68fb      	ldr	r3, [r7, #12]
20002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bae:	2204      	movs	r2, #4
20002bb0:	409a      	lsls	r2, r3
20002bb2:	697b      	ldr	r3, [r7, #20]
20002bb4:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002bb6:	6a3a      	ldr	r2, [r7, #32]
20002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002bba:	4013      	ands	r3, r2
20002bbc:	2b00      	cmp	r3, #0
20002bbe:	d105      	bne.n	20002bcc <HAL_DMA_PollForTransfer+0x14a>
20002bc0:	68fb      	ldr	r3, [r7, #12]
20002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002bc4:	f003 0301 	and.w	r3, r3, #1
20002bc8:	2b00      	cmp	r3, #0
20002bca:	d099      	beq.n	20002b00 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002bcc:	68fb      	ldr	r3, [r7, #12]
20002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002bd0:	2b00      	cmp	r3, #0
20002bd2:	d018      	beq.n	20002c06 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002bd4:	68fb      	ldr	r3, [r7, #12]
20002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002bd8:	f003 0301 	and.w	r3, r3, #1
20002bdc:	2b00      	cmp	r3, #0
20002bde:	d012      	beq.n	20002c06 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
20002be0:	68f8      	ldr	r0, [r7, #12]
20002be2:	f7ff febc 	bl	2000295e <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002be6:	68fb      	ldr	r3, [r7, #12]
20002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bea:	2230      	movs	r2, #48	; 0x30
20002bec:	409a      	lsls	r2, r3
20002bee:	697b      	ldr	r3, [r7, #20]
20002bf0:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
20002bf2:	68fb      	ldr	r3, [r7, #12]
20002bf4:	2201      	movs	r2, #1
20002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002bfa:	68fb      	ldr	r3, [r7, #12]
20002bfc:	2200      	movs	r2, #0
20002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
20002c02:	2301      	movs	r3, #1
20002c04:	e018      	b.n	20002c38 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002c06:	7afb      	ldrb	r3, [r7, #11]
20002c08:	2b00      	cmp	r3, #0
20002c0a:	d10e      	bne.n	20002c2a <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002c0c:	68fb      	ldr	r3, [r7, #12]
20002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c10:	2230      	movs	r2, #48	; 0x30
20002c12:	409a      	lsls	r2, r3
20002c14:	697b      	ldr	r3, [r7, #20]
20002c16:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
20002c18:	68fb      	ldr	r3, [r7, #12]
20002c1a:	2201      	movs	r2, #1
20002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002c20:	68fb      	ldr	r3, [r7, #12]
20002c22:	2200      	movs	r2, #0
20002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20002c28:	e005      	b.n	20002c36 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20002c2a:	68fb      	ldr	r3, [r7, #12]
20002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c2e:	2210      	movs	r2, #16
20002c30:	409a      	lsls	r2, r3
20002c32:	697b      	ldr	r3, [r7, #20]
20002c34:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20002c36:	7ffb      	ldrb	r3, [r7, #31]
}
20002c38:	4618      	mov	r0, r3
20002c3a:	3728      	adds	r7, #40	; 0x28
20002c3c:	46bd      	mov	sp, r7
20002c3e:	bd80      	pop	{r7, pc}

20002c40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20002c40:	b580      	push	{r7, lr}
20002c42:	b086      	sub	sp, #24
20002c44:	af00      	add	r7, sp, #0
20002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
20002c48:	2300      	movs	r3, #0
20002c4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20002c4c:	4b8e      	ldr	r3, [pc, #568]	; (20002e88 <HAL_DMA_IRQHandler+0x248>)
20002c4e:	681b      	ldr	r3, [r3, #0]
20002c50:	4a8e      	ldr	r2, [pc, #568]	; (20002e8c <HAL_DMA_IRQHandler+0x24c>)
20002c52:	fba2 2303 	umull	r2, r3, r2, r3
20002c56:	0a9b      	lsrs	r3, r3, #10
20002c58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002c5a:	687b      	ldr	r3, [r7, #4]
20002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002c5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
20002c60:	693b      	ldr	r3, [r7, #16]
20002c62:	681b      	ldr	r3, [r3, #0]
20002c64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002c66:	687b      	ldr	r3, [r7, #4]
20002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c6a:	2208      	movs	r2, #8
20002c6c:	409a      	lsls	r2, r3
20002c6e:	68fb      	ldr	r3, [r7, #12]
20002c70:	4013      	ands	r3, r2
20002c72:	2b00      	cmp	r3, #0
20002c74:	d01a      	beq.n	20002cac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002c76:	687b      	ldr	r3, [r7, #4]
20002c78:	681b      	ldr	r3, [r3, #0]
20002c7a:	681b      	ldr	r3, [r3, #0]
20002c7c:	f003 0304 	and.w	r3, r3, #4
20002c80:	2b00      	cmp	r3, #0
20002c82:	d013      	beq.n	20002cac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002c84:	687b      	ldr	r3, [r7, #4]
20002c86:	681b      	ldr	r3, [r3, #0]
20002c88:	681a      	ldr	r2, [r3, #0]
20002c8a:	687b      	ldr	r3, [r7, #4]
20002c8c:	681b      	ldr	r3, [r3, #0]
20002c8e:	f022 0204 	bic.w	r2, r2, #4
20002c92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002c94:	687b      	ldr	r3, [r7, #4]
20002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c98:	2208      	movs	r2, #8
20002c9a:	409a      	lsls	r2, r3
20002c9c:	693b      	ldr	r3, [r7, #16]
20002c9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002ca0:	687b      	ldr	r3, [r7, #4]
20002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002ca4:	f043 0201 	orr.w	r2, r3, #1
20002ca8:	687b      	ldr	r3, [r7, #4]
20002caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002cac:	687b      	ldr	r3, [r7, #4]
20002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002cb0:	2201      	movs	r2, #1
20002cb2:	409a      	lsls	r2, r3
20002cb4:	68fb      	ldr	r3, [r7, #12]
20002cb6:	4013      	ands	r3, r2
20002cb8:	2b00      	cmp	r3, #0
20002cba:	d012      	beq.n	20002ce2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20002cbc:	687b      	ldr	r3, [r7, #4]
20002cbe:	681b      	ldr	r3, [r3, #0]
20002cc0:	695b      	ldr	r3, [r3, #20]
20002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
20002cc6:	2b00      	cmp	r3, #0
20002cc8:	d00b      	beq.n	20002ce2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002cca:	687b      	ldr	r3, [r7, #4]
20002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002cce:	2201      	movs	r2, #1
20002cd0:	409a      	lsls	r2, r3
20002cd2:	693b      	ldr	r3, [r7, #16]
20002cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002cd6:	687b      	ldr	r3, [r7, #4]
20002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002cda:	f043 0202 	orr.w	r2, r3, #2
20002cde:	687b      	ldr	r3, [r7, #4]
20002ce0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002ce2:	687b      	ldr	r3, [r7, #4]
20002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002ce6:	2204      	movs	r2, #4
20002ce8:	409a      	lsls	r2, r3
20002cea:	68fb      	ldr	r3, [r7, #12]
20002cec:	4013      	ands	r3, r2
20002cee:	2b00      	cmp	r3, #0
20002cf0:	d012      	beq.n	20002d18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
20002cf2:	687b      	ldr	r3, [r7, #4]
20002cf4:	681b      	ldr	r3, [r3, #0]
20002cf6:	681b      	ldr	r3, [r3, #0]
20002cf8:	f003 0302 	and.w	r3, r3, #2
20002cfc:	2b00      	cmp	r3, #0
20002cfe:	d00b      	beq.n	20002d18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002d00:	687b      	ldr	r3, [r7, #4]
20002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d04:	2204      	movs	r2, #4
20002d06:	409a      	lsls	r2, r3
20002d08:	693b      	ldr	r3, [r7, #16]
20002d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002d0c:	687b      	ldr	r3, [r7, #4]
20002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d10:	f043 0204 	orr.w	r2, r3, #4
20002d14:	687b      	ldr	r3, [r7, #4]
20002d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002d18:	687b      	ldr	r3, [r7, #4]
20002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d1c:	2210      	movs	r2, #16
20002d1e:	409a      	lsls	r2, r3
20002d20:	68fb      	ldr	r3, [r7, #12]
20002d22:	4013      	ands	r3, r2
20002d24:	2b00      	cmp	r3, #0
20002d26:	d043      	beq.n	20002db0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20002d28:	687b      	ldr	r3, [r7, #4]
20002d2a:	681b      	ldr	r3, [r3, #0]
20002d2c:	681b      	ldr	r3, [r3, #0]
20002d2e:	f003 0308 	and.w	r3, r3, #8
20002d32:	2b00      	cmp	r3, #0
20002d34:	d03c      	beq.n	20002db0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002d36:	687b      	ldr	r3, [r7, #4]
20002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d3a:	2210      	movs	r2, #16
20002d3c:	409a      	lsls	r2, r3
20002d3e:	693b      	ldr	r3, [r7, #16]
20002d40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002d42:	687b      	ldr	r3, [r7, #4]
20002d44:	681b      	ldr	r3, [r3, #0]
20002d46:	681b      	ldr	r3, [r3, #0]
20002d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002d4c:	2b00      	cmp	r3, #0
20002d4e:	d018      	beq.n	20002d82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002d50:	687b      	ldr	r3, [r7, #4]
20002d52:	681b      	ldr	r3, [r3, #0]
20002d54:	681b      	ldr	r3, [r3, #0]
20002d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002d5a:	2b00      	cmp	r3, #0
20002d5c:	d108      	bne.n	20002d70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
20002d5e:	687b      	ldr	r3, [r7, #4]
20002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002d62:	2b00      	cmp	r3, #0
20002d64:	d024      	beq.n	20002db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20002d66:	687b      	ldr	r3, [r7, #4]
20002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002d6a:	6878      	ldr	r0, [r7, #4]
20002d6c:	4798      	blx	r3
20002d6e:	e01f      	b.n	20002db0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20002d70:	687b      	ldr	r3, [r7, #4]
20002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002d74:	2b00      	cmp	r3, #0
20002d76:	d01b      	beq.n	20002db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20002d78:	687b      	ldr	r3, [r7, #4]
20002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002d7c:	6878      	ldr	r0, [r7, #4]
20002d7e:	4798      	blx	r3
20002d80:	e016      	b.n	20002db0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002d82:	687b      	ldr	r3, [r7, #4]
20002d84:	681b      	ldr	r3, [r3, #0]
20002d86:	681b      	ldr	r3, [r3, #0]
20002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002d8c:	2b00      	cmp	r3, #0
20002d8e:	d107      	bne.n	20002da0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002d90:	687b      	ldr	r3, [r7, #4]
20002d92:	681b      	ldr	r3, [r3, #0]
20002d94:	681a      	ldr	r2, [r3, #0]
20002d96:	687b      	ldr	r3, [r7, #4]
20002d98:	681b      	ldr	r3, [r3, #0]
20002d9a:	f022 0208 	bic.w	r2, r2, #8
20002d9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
20002da0:	687b      	ldr	r3, [r7, #4]
20002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002da4:	2b00      	cmp	r3, #0
20002da6:	d003      	beq.n	20002db0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20002da8:	687b      	ldr	r3, [r7, #4]
20002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002dac:	6878      	ldr	r0, [r7, #4]
20002dae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20002db0:	687b      	ldr	r3, [r7, #4]
20002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002db4:	2220      	movs	r2, #32
20002db6:	409a      	lsls	r2, r3
20002db8:	68fb      	ldr	r3, [r7, #12]
20002dba:	4013      	ands	r3, r2
20002dbc:	2b00      	cmp	r3, #0
20002dbe:	f000 808f 	beq.w	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
20002dc2:	687b      	ldr	r3, [r7, #4]
20002dc4:	681b      	ldr	r3, [r3, #0]
20002dc6:	681b      	ldr	r3, [r3, #0]
20002dc8:	f003 0310 	and.w	r3, r3, #16
20002dcc:	2b00      	cmp	r3, #0
20002dce:	f000 8087 	beq.w	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002dd6:	2220      	movs	r2, #32
20002dd8:	409a      	lsls	r2, r3
20002dda:	693b      	ldr	r3, [r7, #16]
20002ddc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
20002dde:	687b      	ldr	r3, [r7, #4]
20002de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002de4:	b2db      	uxtb	r3, r3
20002de6:	2b05      	cmp	r3, #5
20002de8:	d136      	bne.n	20002e58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002dea:	687b      	ldr	r3, [r7, #4]
20002dec:	681b      	ldr	r3, [r3, #0]
20002dee:	681a      	ldr	r2, [r3, #0]
20002df0:	687b      	ldr	r3, [r7, #4]
20002df2:	681b      	ldr	r3, [r3, #0]
20002df4:	f022 0216 	bic.w	r2, r2, #22
20002df8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20002dfa:	687b      	ldr	r3, [r7, #4]
20002dfc:	681b      	ldr	r3, [r3, #0]
20002dfe:	695a      	ldr	r2, [r3, #20]
20002e00:	687b      	ldr	r3, [r7, #4]
20002e02:	681b      	ldr	r3, [r3, #0]
20002e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002e08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002e0a:	687b      	ldr	r3, [r7, #4]
20002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e0e:	2b00      	cmp	r3, #0
20002e10:	d103      	bne.n	20002e1a <HAL_DMA_IRQHandler+0x1da>
20002e12:	687b      	ldr	r3, [r7, #4]
20002e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002e16:	2b00      	cmp	r3, #0
20002e18:	d007      	beq.n	20002e2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002e1a:	687b      	ldr	r3, [r7, #4]
20002e1c:	681b      	ldr	r3, [r3, #0]
20002e1e:	681a      	ldr	r2, [r3, #0]
20002e20:	687b      	ldr	r3, [r7, #4]
20002e22:	681b      	ldr	r3, [r3, #0]
20002e24:	f022 0208 	bic.w	r2, r2, #8
20002e28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20002e2a:	687b      	ldr	r3, [r7, #4]
20002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002e2e:	223f      	movs	r2, #63	; 0x3f
20002e30:	409a      	lsls	r2, r3
20002e32:	693b      	ldr	r3, [r7, #16]
20002e34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002e36:	687b      	ldr	r3, [r7, #4]
20002e38:	2201      	movs	r2, #1
20002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002e3e:	687b      	ldr	r3, [r7, #4]
20002e40:	2200      	movs	r2, #0
20002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
20002e46:	687b      	ldr	r3, [r7, #4]
20002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002e4a:	2b00      	cmp	r3, #0
20002e4c:	d07e      	beq.n	20002f4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
20002e4e:	687b      	ldr	r3, [r7, #4]
20002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002e52:	6878      	ldr	r0, [r7, #4]
20002e54:	4798      	blx	r3
        }
        return;
20002e56:	e079      	b.n	20002f4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002e58:	687b      	ldr	r3, [r7, #4]
20002e5a:	681b      	ldr	r3, [r3, #0]
20002e5c:	681b      	ldr	r3, [r3, #0]
20002e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002e62:	2b00      	cmp	r3, #0
20002e64:	d01d      	beq.n	20002ea2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002e66:	687b      	ldr	r3, [r7, #4]
20002e68:	681b      	ldr	r3, [r3, #0]
20002e6a:	681b      	ldr	r3, [r3, #0]
20002e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002e70:	2b00      	cmp	r3, #0
20002e72:	d10d      	bne.n	20002e90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
20002e74:	687b      	ldr	r3, [r7, #4]
20002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002e78:	2b00      	cmp	r3, #0
20002e7a:	d031      	beq.n	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20002e7c:	687b      	ldr	r3, [r7, #4]
20002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002e80:	6878      	ldr	r0, [r7, #4]
20002e82:	4798      	blx	r3
20002e84:	e02c      	b.n	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
20002e86:	bf00      	nop
20002e88:	200003dc 	.word	0x200003dc
20002e8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20002e90:	687b      	ldr	r3, [r7, #4]
20002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002e94:	2b00      	cmp	r3, #0
20002e96:	d023      	beq.n	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20002e98:	687b      	ldr	r3, [r7, #4]
20002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002e9c:	6878      	ldr	r0, [r7, #4]
20002e9e:	4798      	blx	r3
20002ea0:	e01e      	b.n	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002ea2:	687b      	ldr	r3, [r7, #4]
20002ea4:	681b      	ldr	r3, [r3, #0]
20002ea6:	681b      	ldr	r3, [r3, #0]
20002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002eac:	2b00      	cmp	r3, #0
20002eae:	d10f      	bne.n	20002ed0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20002eb0:	687b      	ldr	r3, [r7, #4]
20002eb2:	681b      	ldr	r3, [r3, #0]
20002eb4:	681a      	ldr	r2, [r3, #0]
20002eb6:	687b      	ldr	r3, [r7, #4]
20002eb8:	681b      	ldr	r3, [r3, #0]
20002eba:	f022 0210 	bic.w	r2, r2, #16
20002ebe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20002ec0:	687b      	ldr	r3, [r7, #4]
20002ec2:	2201      	movs	r2, #1
20002ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20002ec8:	687b      	ldr	r3, [r7, #4]
20002eca:	2200      	movs	r2, #0
20002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
20002ed0:	687b      	ldr	r3, [r7, #4]
20002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002ed4:	2b00      	cmp	r3, #0
20002ed6:	d003      	beq.n	20002ee0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20002ed8:	687b      	ldr	r3, [r7, #4]
20002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002edc:	6878      	ldr	r0, [r7, #4]
20002ede:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002ee0:	687b      	ldr	r3, [r7, #4]
20002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002ee4:	2b00      	cmp	r3, #0
20002ee6:	d032      	beq.n	20002f4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002ee8:	687b      	ldr	r3, [r7, #4]
20002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002eec:	f003 0301 	and.w	r3, r3, #1
20002ef0:	2b00      	cmp	r3, #0
20002ef2:	d022      	beq.n	20002f3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20002ef4:	687b      	ldr	r3, [r7, #4]
20002ef6:	2205      	movs	r2, #5
20002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20002efc:	687b      	ldr	r3, [r7, #4]
20002efe:	681b      	ldr	r3, [r3, #0]
20002f00:	681a      	ldr	r2, [r3, #0]
20002f02:	687b      	ldr	r3, [r7, #4]
20002f04:	681b      	ldr	r3, [r3, #0]
20002f06:	f022 0201 	bic.w	r2, r2, #1
20002f0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20002f0c:	68bb      	ldr	r3, [r7, #8]
20002f0e:	3301      	adds	r3, #1
20002f10:	60bb      	str	r3, [r7, #8]
20002f12:	697a      	ldr	r2, [r7, #20]
20002f14:	429a      	cmp	r2, r3
20002f16:	d307      	bcc.n	20002f28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20002f18:	687b      	ldr	r3, [r7, #4]
20002f1a:	681b      	ldr	r3, [r3, #0]
20002f1c:	681b      	ldr	r3, [r3, #0]
20002f1e:	f003 0301 	and.w	r3, r3, #1
20002f22:	2b00      	cmp	r3, #0
20002f24:	d1f2      	bne.n	20002f0c <HAL_DMA_IRQHandler+0x2cc>
20002f26:	e000      	b.n	20002f2a <HAL_DMA_IRQHandler+0x2ea>
          break;
20002f28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20002f2a:	687b      	ldr	r3, [r7, #4]
20002f2c:	2201      	movs	r2, #1
20002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002f32:	687b      	ldr	r3, [r7, #4]
20002f34:	2200      	movs	r2, #0
20002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
20002f3a:	687b      	ldr	r3, [r7, #4]
20002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002f3e:	2b00      	cmp	r3, #0
20002f40:	d005      	beq.n	20002f4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
20002f42:	687b      	ldr	r3, [r7, #4]
20002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002f46:	6878      	ldr	r0, [r7, #4]
20002f48:	4798      	blx	r3
20002f4a:	e000      	b.n	20002f4e <HAL_DMA_IRQHandler+0x30e>
        return;
20002f4c:	bf00      	nop
    }
  }
}
20002f4e:	3718      	adds	r7, #24
20002f50:	46bd      	mov	sp, r7
20002f52:	bd80      	pop	{r7, pc}

20002f54 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20002f54:	b480      	push	{r7}
20002f56:	b087      	sub	sp, #28
20002f58:	af00      	add	r7, sp, #0
20002f5a:	60f8      	str	r0, [r7, #12]
20002f5c:	460b      	mov	r3, r1
20002f5e:	607a      	str	r2, [r7, #4]
20002f60:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
20002f62:	2300      	movs	r3, #0
20002f64:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20002f66:	68fb      	ldr	r3, [r7, #12]
20002f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002f6c:	2b01      	cmp	r3, #1
20002f6e:	d101      	bne.n	20002f74 <HAL_DMA_RegisterCallback+0x20>
20002f70:	2302      	movs	r3, #2
20002f72:	e03d      	b.n	20002ff0 <HAL_DMA_RegisterCallback+0x9c>
20002f74:	68fb      	ldr	r3, [r7, #12]
20002f76:	2201      	movs	r2, #1
20002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20002f7c:	68fb      	ldr	r3, [r7, #12]
20002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002f82:	b2db      	uxtb	r3, r3
20002f84:	2b01      	cmp	r3, #1
20002f86:	d12c      	bne.n	20002fe2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
20002f88:	7afb      	ldrb	r3, [r7, #11]
20002f8a:	2b05      	cmp	r3, #5
20002f8c:	d826      	bhi.n	20002fdc <HAL_DMA_RegisterCallback+0x88>
20002f8e:	a201      	add	r2, pc, #4	; (adr r2, 20002f94 <HAL_DMA_RegisterCallback+0x40>)
20002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002f94:	20002fad 	.word	0x20002fad
20002f98:	20002fb5 	.word	0x20002fb5
20002f9c:	20002fbd 	.word	0x20002fbd
20002fa0:	20002fc5 	.word	0x20002fc5
20002fa4:	20002fcd 	.word	0x20002fcd
20002fa8:	20002fd5 	.word	0x20002fd5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
20002fac:	68fb      	ldr	r3, [r7, #12]
20002fae:	687a      	ldr	r2, [r7, #4]
20002fb0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20002fb2:	e018      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
20002fb4:	68fb      	ldr	r3, [r7, #12]
20002fb6:	687a      	ldr	r2, [r7, #4]
20002fb8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20002fba:	e014      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
20002fbc:	68fb      	ldr	r3, [r7, #12]
20002fbe:	687a      	ldr	r2, [r7, #4]
20002fc0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20002fc2:	e010      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
20002fc4:	68fb      	ldr	r3, [r7, #12]
20002fc6:	687a      	ldr	r2, [r7, #4]
20002fc8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20002fca:	e00c      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
20002fcc:	68fb      	ldr	r3, [r7, #12]
20002fce:	687a      	ldr	r2, [r7, #4]
20002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20002fd2:	e008      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
20002fd4:	68fb      	ldr	r3, [r7, #12]
20002fd6:	687a      	ldr	r2, [r7, #4]
20002fd8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
20002fda:	e004      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
20002fdc:	2301      	movs	r3, #1
20002fde:	75fb      	strb	r3, [r7, #23]
      break;
20002fe0:	e001      	b.n	20002fe6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20002fe2:	2301      	movs	r3, #1
20002fe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002fe6:	68fb      	ldr	r3, [r7, #12]
20002fe8:	2200      	movs	r2, #0
20002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20002fee:	7dfb      	ldrb	r3, [r7, #23]
}
20002ff0:	4618      	mov	r0, r3
20002ff2:	371c      	adds	r7, #28
20002ff4:	46bd      	mov	sp, r7
20002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ffa:	4770      	bx	lr

20002ffc <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
20002ffc:	b480      	push	{r7}
20002ffe:	b085      	sub	sp, #20
20003000:	af00      	add	r7, sp, #0
20003002:	6078      	str	r0, [r7, #4]
20003004:	460b      	mov	r3, r1
20003006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20003008:	2300      	movs	r3, #0
2000300a:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
2000300c:	687b      	ldr	r3, [r7, #4]
2000300e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003012:	2b01      	cmp	r3, #1
20003014:	d101      	bne.n	2000301a <HAL_DMA_UnRegisterCallback+0x1e>
20003016:	2302      	movs	r3, #2
20003018:	e053      	b.n	200030c2 <HAL_DMA_UnRegisterCallback+0xc6>
2000301a:	687b      	ldr	r3, [r7, #4]
2000301c:	2201      	movs	r2, #1
2000301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20003022:	687b      	ldr	r3, [r7, #4]
20003024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20003028:	b2db      	uxtb	r3, r3
2000302a:	2b01      	cmp	r3, #1
2000302c:	d142      	bne.n	200030b4 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
2000302e:	78fb      	ldrb	r3, [r7, #3]
20003030:	2b06      	cmp	r3, #6
20003032:	d83c      	bhi.n	200030ae <HAL_DMA_UnRegisterCallback+0xb2>
20003034:	a201      	add	r2, pc, #4	; (adr r2, 2000303c <HAL_DMA_UnRegisterCallback+0x40>)
20003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000303a:	bf00      	nop
2000303c:	20003059 	.word	0x20003059
20003040:	20003061 	.word	0x20003061
20003044:	20003069 	.word	0x20003069
20003048:	20003071 	.word	0x20003071
2000304c:	20003079 	.word	0x20003079
20003050:	20003081 	.word	0x20003081
20003054:	20003089 	.word	0x20003089
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
20003058:	687b      	ldr	r3, [r7, #4]
2000305a:	2200      	movs	r2, #0
2000305c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
2000305e:	e02b      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
20003060:	687b      	ldr	r3, [r7, #4]
20003062:	2200      	movs	r2, #0
20003064:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20003066:	e027      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
20003068:	687b      	ldr	r3, [r7, #4]
2000306a:	2200      	movs	r2, #0
2000306c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2000306e:	e023      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
20003070:	687b      	ldr	r3, [r7, #4]
20003072:	2200      	movs	r2, #0
20003074:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20003076:	e01f      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
20003078:	687b      	ldr	r3, [r7, #4]
2000307a:	2200      	movs	r2, #0
2000307c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2000307e:	e01b      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
20003080:	687b      	ldr	r3, [r7, #4]
20003082:	2200      	movs	r2, #0
20003084:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20003086:	e017      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
20003088:	687b      	ldr	r3, [r7, #4]
2000308a:	2200      	movs	r2, #0
2000308c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
2000308e:	687b      	ldr	r3, [r7, #4]
20003090:	2200      	movs	r2, #0
20003092:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
20003094:	687b      	ldr	r3, [r7, #4]
20003096:	2200      	movs	r2, #0
20003098:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
2000309a:	687b      	ldr	r3, [r7, #4]
2000309c:	2200      	movs	r2, #0
2000309e:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
200030a0:	687b      	ldr	r3, [r7, #4]
200030a2:	2200      	movs	r2, #0
200030a4:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
200030a6:	687b      	ldr	r3, [r7, #4]
200030a8:	2200      	movs	r2, #0
200030aa:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
200030ac:	e004      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
200030ae:	2301      	movs	r3, #1
200030b0:	73fb      	strb	r3, [r7, #15]
      break;
200030b2:	e001      	b.n	200030b8 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
200030b4:	2301      	movs	r3, #1
200030b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
200030b8:	687b      	ldr	r3, [r7, #4]
200030ba:	2200      	movs	r2, #0
200030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
200030c0:	7bfb      	ldrb	r3, [r7, #15]
}
200030c2:	4618      	mov	r0, r3
200030c4:	3714      	adds	r7, #20
200030c6:	46bd      	mov	sp, r7
200030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200030cc:	4770      	bx	lr
200030ce:	bf00      	nop

200030d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
200030d0:	b480      	push	{r7}
200030d2:	b083      	sub	sp, #12
200030d4:	af00      	add	r7, sp, #0
200030d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
200030d8:	687b      	ldr	r3, [r7, #4]
200030da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200030de:	b2db      	uxtb	r3, r3
}
200030e0:	4618      	mov	r0, r3
200030e2:	370c      	adds	r7, #12
200030e4:	46bd      	mov	sp, r7
200030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200030ea:	4770      	bx	lr

200030ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
200030ec:	b480      	push	{r7}
200030ee:	b083      	sub	sp, #12
200030f0:	af00      	add	r7, sp, #0
200030f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
200030f4:	687b      	ldr	r3, [r7, #4]
200030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
200030f8:	4618      	mov	r0, r3
200030fa:	370c      	adds	r7, #12
200030fc:	46bd      	mov	sp, r7
200030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20003102:	4770      	bx	lr

20003104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20003104:	b480      	push	{r7}
20003106:	b085      	sub	sp, #20
20003108:	af00      	add	r7, sp, #0
2000310a:	60f8      	str	r0, [r7, #12]
2000310c:	60b9      	str	r1, [r7, #8]
2000310e:	607a      	str	r2, [r7, #4]
20003110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20003112:	68fb      	ldr	r3, [r7, #12]
20003114:	681b      	ldr	r3, [r3, #0]
20003116:	681a      	ldr	r2, [r3, #0]
20003118:	68fb      	ldr	r3, [r7, #12]
2000311a:	681b      	ldr	r3, [r3, #0]
2000311c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20003120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
20003122:	68fb      	ldr	r3, [r7, #12]
20003124:	681b      	ldr	r3, [r3, #0]
20003126:	683a      	ldr	r2, [r7, #0]
20003128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000312a:	68fb      	ldr	r3, [r7, #12]
2000312c:	689b      	ldr	r3, [r3, #8]
2000312e:	2b40      	cmp	r3, #64	; 0x40
20003130:	d108      	bne.n	20003144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
20003132:	68fb      	ldr	r3, [r7, #12]
20003134:	681b      	ldr	r3, [r3, #0]
20003136:	687a      	ldr	r2, [r7, #4]
20003138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
2000313a:	68fb      	ldr	r3, [r7, #12]
2000313c:	681b      	ldr	r3, [r3, #0]
2000313e:	68ba      	ldr	r2, [r7, #8]
20003140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
20003142:	e007      	b.n	20003154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
20003144:	68fb      	ldr	r3, [r7, #12]
20003146:	681b      	ldr	r3, [r3, #0]
20003148:	68ba      	ldr	r2, [r7, #8]
2000314a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
2000314c:	68fb      	ldr	r3, [r7, #12]
2000314e:	681b      	ldr	r3, [r3, #0]
20003150:	687a      	ldr	r2, [r7, #4]
20003152:	60da      	str	r2, [r3, #12]
}
20003154:	bf00      	nop
20003156:	3714      	adds	r7, #20
20003158:	46bd      	mov	sp, r7
2000315a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000315e:	4770      	bx	lr

20003160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
20003160:	b480      	push	{r7}
20003162:	b085      	sub	sp, #20
20003164:	af00      	add	r7, sp, #0
20003166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20003168:	687b      	ldr	r3, [r7, #4]
2000316a:	681b      	ldr	r3, [r3, #0]
2000316c:	b2db      	uxtb	r3, r3
2000316e:	3b10      	subs	r3, #16
20003170:	4a14      	ldr	r2, [pc, #80]	; (200031c4 <DMA_CalcBaseAndBitshift+0x64>)
20003172:	fba2 2303 	umull	r2, r3, r2, r3
20003176:	091b      	lsrs	r3, r3, #4
20003178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
2000317a:	4a13      	ldr	r2, [pc, #76]	; (200031c8 <DMA_CalcBaseAndBitshift+0x68>)
2000317c:	68fb      	ldr	r3, [r7, #12]
2000317e:	4413      	add	r3, r2
20003180:	781b      	ldrb	r3, [r3, #0]
20003182:	461a      	mov	r2, r3
20003184:	687b      	ldr	r3, [r7, #4]
20003186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
20003188:	68fb      	ldr	r3, [r7, #12]
2000318a:	2b03      	cmp	r3, #3
2000318c:	d909      	bls.n	200031a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
2000318e:	687b      	ldr	r3, [r7, #4]
20003190:	681b      	ldr	r3, [r3, #0]
20003192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
20003196:	f023 0303 	bic.w	r3, r3, #3
2000319a:	1d1a      	adds	r2, r3, #4
2000319c:	687b      	ldr	r3, [r7, #4]
2000319e:	659a      	str	r2, [r3, #88]	; 0x58
200031a0:	e007      	b.n	200031b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
200031a2:	687b      	ldr	r3, [r7, #4]
200031a4:	681b      	ldr	r3, [r3, #0]
200031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
200031aa:	f023 0303 	bic.w	r3, r3, #3
200031ae:	687a      	ldr	r2, [r7, #4]
200031b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
200031b2:	687b      	ldr	r3, [r7, #4]
200031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
200031b6:	4618      	mov	r0, r3
200031b8:	3714      	adds	r7, #20
200031ba:	46bd      	mov	sp, r7
200031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200031c0:	4770      	bx	lr
200031c2:	bf00      	nop
200031c4:	aaaaaaab 	.word	0xaaaaaaab
200031c8:	2000b52c 	.word	0x2000b52c

200031cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
200031cc:	b480      	push	{r7}
200031ce:	b085      	sub	sp, #20
200031d0:	af00      	add	r7, sp, #0
200031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200031d4:	2300      	movs	r3, #0
200031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
200031d8:	687b      	ldr	r3, [r7, #4]
200031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200031dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
200031de:	687b      	ldr	r3, [r7, #4]
200031e0:	699b      	ldr	r3, [r3, #24]
200031e2:	2b00      	cmp	r3, #0
200031e4:	d11f      	bne.n	20003226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
200031e6:	68bb      	ldr	r3, [r7, #8]
200031e8:	2b03      	cmp	r3, #3
200031ea:	d856      	bhi.n	2000329a <DMA_CheckFifoParam+0xce>
200031ec:	a201      	add	r2, pc, #4	; (adr r2, 200031f4 <DMA_CheckFifoParam+0x28>)
200031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200031f2:	bf00      	nop
200031f4:	20003205 	.word	0x20003205
200031f8:	20003217 	.word	0x20003217
200031fc:	20003205 	.word	0x20003205
20003200:	2000329b 	.word	0x2000329b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003204:	687b      	ldr	r3, [r7, #4]
20003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000320c:	2b00      	cmp	r3, #0
2000320e:	d046      	beq.n	2000329e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
20003210:	2301      	movs	r3, #1
20003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003214:	e043      	b.n	2000329e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003216:	687b      	ldr	r3, [r7, #4]
20003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000321a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2000321e:	d140      	bne.n	200032a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
20003220:	2301      	movs	r3, #1
20003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003224:	e03d      	b.n	200032a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20003226:	687b      	ldr	r3, [r7, #4]
20003228:	699b      	ldr	r3, [r3, #24]
2000322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2000322e:	d121      	bne.n	20003274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
20003230:	68bb      	ldr	r3, [r7, #8]
20003232:	2b03      	cmp	r3, #3
20003234:	d837      	bhi.n	200032a6 <DMA_CheckFifoParam+0xda>
20003236:	a201      	add	r2, pc, #4	; (adr r2, 2000323c <DMA_CheckFifoParam+0x70>)
20003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000323c:	2000324d 	.word	0x2000324d
20003240:	20003253 	.word	0x20003253
20003244:	2000324d 	.word	0x2000324d
20003248:	20003265 	.word	0x20003265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
2000324c:	2301      	movs	r3, #1
2000324e:	73fb      	strb	r3, [r7, #15]
      break;
20003250:	e030      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003252:	687b      	ldr	r3, [r7, #4]
20003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000325a:	2b00      	cmp	r3, #0
2000325c:	d025      	beq.n	200032aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
2000325e:	2301      	movs	r3, #1
20003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003262:	e022      	b.n	200032aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003264:	687b      	ldr	r3, [r7, #4]
20003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2000326c:	d11f      	bne.n	200032ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
2000326e:	2301      	movs	r3, #1
20003270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
20003272:	e01c      	b.n	200032ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
20003274:	68bb      	ldr	r3, [r7, #8]
20003276:	2b02      	cmp	r3, #2
20003278:	d903      	bls.n	20003282 <DMA_CheckFifoParam+0xb6>
2000327a:	68bb      	ldr	r3, [r7, #8]
2000327c:	2b03      	cmp	r3, #3
2000327e:	d003      	beq.n	20003288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
20003280:	e018      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
20003282:	2301      	movs	r3, #1
20003284:	73fb      	strb	r3, [r7, #15]
      break;
20003286:	e015      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003288:	687b      	ldr	r3, [r7, #4]
2000328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000328c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20003290:	2b00      	cmp	r3, #0
20003292:	d00e      	beq.n	200032b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
20003294:	2301      	movs	r3, #1
20003296:	73fb      	strb	r3, [r7, #15]
      break;
20003298:	e00b      	b.n	200032b2 <DMA_CheckFifoParam+0xe6>
      break;
2000329a:	bf00      	nop
2000329c:	e00a      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;
2000329e:	bf00      	nop
200032a0:	e008      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;
200032a2:	bf00      	nop
200032a4:	e006      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;
200032a6:	bf00      	nop
200032a8:	e004      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;
200032aa:	bf00      	nop
200032ac:	e002      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;   
200032ae:	bf00      	nop
200032b0:	e000      	b.n	200032b4 <DMA_CheckFifoParam+0xe8>
      break;
200032b2:	bf00      	nop
    }
  } 
  
  return status; 
200032b4:	7bfb      	ldrb	r3, [r7, #15]
}
200032b6:	4618      	mov	r0, r3
200032b8:	3714      	adds	r7, #20
200032ba:	46bd      	mov	sp, r7
200032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200032c0:	4770      	bx	lr
200032c2:	bf00      	nop

200032c4 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200032c4:	b580      	push	{r7, lr}
200032c6:	b086      	sub	sp, #24
200032c8:	af00      	add	r7, sp, #0
200032ca:	60f8      	str	r0, [r7, #12]
200032cc:	60b9      	str	r1, [r7, #8]
200032ce:	607a      	str	r2, [r7, #4]
200032d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200032d2:	2300      	movs	r3, #0
200032d4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200032d6:	68fb      	ldr	r3, [r7, #12]
200032d8:	689b      	ldr	r3, [r3, #8]
200032da:	2b80      	cmp	r3, #128	; 0x80
200032dc:	d106      	bne.n	200032ec <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200032de:	68fb      	ldr	r3, [r7, #12]
200032e0:	f44f 7280 	mov.w	r2, #256	; 0x100
200032e4:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
200032e6:	2301      	movs	r3, #1
200032e8:	75fb      	strb	r3, [r7, #23]
200032ea:	e031      	b.n	20003350 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
200032ec:	68fb      	ldr	r3, [r7, #12]
200032ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200032f2:	2b01      	cmp	r3, #1
200032f4:	d101      	bne.n	200032fa <HAL_DMAEx_MultiBufferStart+0x36>
200032f6:	2302      	movs	r3, #2
200032f8:	e02b      	b.n	20003352 <HAL_DMAEx_MultiBufferStart+0x8e>
200032fa:	68fb      	ldr	r3, [r7, #12]
200032fc:	2201      	movs	r2, #1
200032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
20003302:	68fb      	ldr	r3, [r7, #12]
20003304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20003308:	b2db      	uxtb	r3, r3
2000330a:	2b01      	cmp	r3, #1
2000330c:	d11e      	bne.n	2000334c <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
2000330e:	68fb      	ldr	r3, [r7, #12]
20003310:	2202      	movs	r2, #2
20003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20003316:	68fb      	ldr	r3, [r7, #12]
20003318:	681b      	ldr	r3, [r3, #0]
2000331a:	681a      	ldr	r2, [r3, #0]
2000331c:	68fb      	ldr	r3, [r7, #12]
2000331e:	681b      	ldr	r3, [r3, #0]
20003320:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20003324:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
20003326:	68fb      	ldr	r3, [r7, #12]
20003328:	681b      	ldr	r3, [r3, #0]
2000332a:	683a      	ldr	r2, [r7, #0]
2000332c:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000332e:	6a3b      	ldr	r3, [r7, #32]
20003330:	687a      	ldr	r2, [r7, #4]
20003332:	68b9      	ldr	r1, [r7, #8]
20003334:	68f8      	ldr	r0, [r7, #12]
20003336:	f001 f973 	bl	20004620 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
2000333a:	68fb      	ldr	r3, [r7, #12]
2000333c:	681b      	ldr	r3, [r3, #0]
2000333e:	681a      	ldr	r2, [r3, #0]
20003340:	68fb      	ldr	r3, [r7, #12]
20003342:	681b      	ldr	r3, [r3, #0]
20003344:	f042 0201 	orr.w	r2, r2, #1
20003348:	601a      	str	r2, [r3, #0]
2000334a:	e001      	b.n	20003350 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
2000334c:	2302      	movs	r3, #2
2000334e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
20003350:	7dfb      	ldrb	r3, [r7, #23]
}
20003352:	4618      	mov	r0, r3
20003354:	3718      	adds	r7, #24
20003356:	46bd      	mov	sp, r7
20003358:	bd80      	pop	{r7, pc}
	...

2000335c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
2000335c:	b580      	push	{r7, lr}
2000335e:	b086      	sub	sp, #24
20003360:	af00      	add	r7, sp, #0
20003362:	60f8      	str	r0, [r7, #12]
20003364:	60b9      	str	r1, [r7, #8]
20003366:	607a      	str	r2, [r7, #4]
20003368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000336a:	2300      	movs	r3, #0
2000336c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2000336e:	68fb      	ldr	r3, [r7, #12]
20003370:	689b      	ldr	r3, [r3, #8]
20003372:	2b80      	cmp	r3, #128	; 0x80
20003374:	d106      	bne.n	20003384 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20003376:	68fb      	ldr	r3, [r7, #12]
20003378:	f44f 7280 	mov.w	r2, #256	; 0x100
2000337c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2000337e:	2301      	movs	r3, #1
20003380:	f001 b911 	b.w	200045a6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
20003384:	68fb      	ldr	r3, [r7, #12]
20003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20003388:	2b00      	cmp	r3, #0
2000338a:	d007      	beq.n	2000339c <HAL_DMAEx_MultiBufferStart_IT+0x40>
2000338c:	68fb      	ldr	r3, [r7, #12]
2000338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20003390:	2b00      	cmp	r3, #0
20003392:	d003      	beq.n	2000339c <HAL_DMAEx_MultiBufferStart_IT+0x40>
20003394:	68fb      	ldr	r3, [r7, #12]
20003396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003398:	2b00      	cmp	r3, #0
2000339a:	d105      	bne.n	200033a8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2000339c:	68fb      	ldr	r3, [r7, #12]
2000339e:	2240      	movs	r2, #64	; 0x40
200033a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
200033a2:	2301      	movs	r3, #1
200033a4:	f001 b8ff 	b.w	200045a6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
200033a8:	68fb      	ldr	r3, [r7, #12]
200033aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200033ae:	2b01      	cmp	r3, #1
200033b0:	d102      	bne.n	200033b8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
200033b2:	2302      	movs	r3, #2
200033b4:	f001 b8f7 	b.w	200045a6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
200033b8:	68fb      	ldr	r3, [r7, #12]
200033ba:	2201      	movs	r2, #1
200033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200033c0:	68fb      	ldr	r3, [r7, #12]
200033c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200033c6:	b2db      	uxtb	r3, r3
200033c8:	2b01      	cmp	r3, #1
200033ca:	f041 80e5 	bne.w	20004598 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200033ce:	68fb      	ldr	r3, [r7, #12]
200033d0:	2202      	movs	r2, #2
200033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200033d6:	68fb      	ldr	r3, [r7, #12]
200033d8:	2200      	movs	r2, #0
200033da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
200033dc:	68fb      	ldr	r3, [r7, #12]
200033de:	681b      	ldr	r3, [r3, #0]
200033e0:	681a      	ldr	r2, [r3, #0]
200033e2:	68fb      	ldr	r3, [r7, #12]
200033e4:	681b      	ldr	r3, [r3, #0]
200033e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
200033ea:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
200033ec:	68fb      	ldr	r3, [r7, #12]
200033ee:	681b      	ldr	r3, [r3, #0]
200033f0:	683a      	ldr	r2, [r7, #0]
200033f2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
200033f4:	6a3b      	ldr	r3, [r7, #32]
200033f6:	687a      	ldr	r2, [r7, #4]
200033f8:	68b9      	ldr	r1, [r7, #8]
200033fa:	68f8      	ldr	r0, [r7, #12]
200033fc:	f001 f910 	bl	20004620 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20003400:	68fb      	ldr	r3, [r7, #12]
20003402:	681b      	ldr	r3, [r3, #0]
20003404:	461a      	mov	r2, r3
20003406:	4b8d      	ldr	r3, [pc, #564]	; (2000363c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
20003408:	429a      	cmp	r2, r3
2000340a:	d960      	bls.n	200034ce <HAL_DMAEx_MultiBufferStart_IT+0x172>
2000340c:	68fb      	ldr	r3, [r7, #12]
2000340e:	681b      	ldr	r3, [r3, #0]
20003410:	4a8b      	ldr	r2, [pc, #556]	; (20003640 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
20003412:	4293      	cmp	r3, r2
20003414:	d057      	beq.n	200034c6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
20003416:	68fb      	ldr	r3, [r7, #12]
20003418:	681b      	ldr	r3, [r3, #0]
2000341a:	4a8a      	ldr	r2, [pc, #552]	; (20003644 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
2000341c:	4293      	cmp	r3, r2
2000341e:	d050      	beq.n	200034c2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
20003420:	68fb      	ldr	r3, [r7, #12]
20003422:	681b      	ldr	r3, [r3, #0]
20003424:	4a88      	ldr	r2, [pc, #544]	; (20003648 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
20003426:	4293      	cmp	r3, r2
20003428:	d049      	beq.n	200034be <HAL_DMAEx_MultiBufferStart_IT+0x162>
2000342a:	68fb      	ldr	r3, [r7, #12]
2000342c:	681b      	ldr	r3, [r3, #0]
2000342e:	4a87      	ldr	r2, [pc, #540]	; (2000364c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
20003430:	4293      	cmp	r3, r2
20003432:	d042      	beq.n	200034ba <HAL_DMAEx_MultiBufferStart_IT+0x15e>
20003434:	68fb      	ldr	r3, [r7, #12]
20003436:	681b      	ldr	r3, [r3, #0]
20003438:	4a85      	ldr	r2, [pc, #532]	; (20003650 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
2000343a:	4293      	cmp	r3, r2
2000343c:	d03a      	beq.n	200034b4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
2000343e:	68fb      	ldr	r3, [r7, #12]
20003440:	681b      	ldr	r3, [r3, #0]
20003442:	4a84      	ldr	r2, [pc, #528]	; (20003654 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
20003444:	4293      	cmp	r3, r2
20003446:	d032      	beq.n	200034ae <HAL_DMAEx_MultiBufferStart_IT+0x152>
20003448:	68fb      	ldr	r3, [r7, #12]
2000344a:	681b      	ldr	r3, [r3, #0]
2000344c:	4a82      	ldr	r2, [pc, #520]	; (20003658 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
2000344e:	4293      	cmp	r3, r2
20003450:	d02a      	beq.n	200034a8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
20003452:	68fb      	ldr	r3, [r7, #12]
20003454:	681b      	ldr	r3, [r3, #0]
20003456:	4a81      	ldr	r2, [pc, #516]	; (2000365c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003458:	4293      	cmp	r3, r2
2000345a:	d022      	beq.n	200034a2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
2000345c:	68fb      	ldr	r3, [r7, #12]
2000345e:	681b      	ldr	r3, [r3, #0]
20003460:	4a7f      	ldr	r2, [pc, #508]	; (20003660 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
20003462:	4293      	cmp	r3, r2
20003464:	d01a      	beq.n	2000349c <HAL_DMAEx_MultiBufferStart_IT+0x140>
20003466:	68fb      	ldr	r3, [r7, #12]
20003468:	681b      	ldr	r3, [r3, #0]
2000346a:	4a7e      	ldr	r2, [pc, #504]	; (20003664 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
2000346c:	4293      	cmp	r3, r2
2000346e:	d012      	beq.n	20003496 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
20003470:	68fb      	ldr	r3, [r7, #12]
20003472:	681b      	ldr	r3, [r3, #0]
20003474:	4a7c      	ldr	r2, [pc, #496]	; (20003668 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003476:	4293      	cmp	r3, r2
20003478:	d00a      	beq.n	20003490 <HAL_DMAEx_MultiBufferStart_IT+0x134>
2000347a:	68fb      	ldr	r3, [r7, #12]
2000347c:	681b      	ldr	r3, [r3, #0]
2000347e:	4a7b      	ldr	r2, [pc, #492]	; (2000366c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
20003480:	4293      	cmp	r3, r2
20003482:	d102      	bne.n	2000348a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
20003484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003488:	e01e      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000348a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000348e:	e01b      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003494:	e018      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003496:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000349a:	e015      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000349c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200034a0:	e012      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
200034a6:	e00f      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
200034ac:	e00c      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
200034b2:	e009      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
200034b8:	e006      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034ba:	2320      	movs	r3, #32
200034bc:	e004      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034be:	2320      	movs	r3, #32
200034c0:	e002      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034c2:	2320      	movs	r3, #32
200034c4:	e000      	b.n	200034c8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034c6:	2320      	movs	r3, #32
200034c8:	4a69      	ldr	r2, [pc, #420]	; (20003670 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200034ca:	60d3      	str	r3, [r2, #12]
200034cc:	e14f      	b.n	2000376e <HAL_DMAEx_MultiBufferStart_IT+0x412>
200034ce:	68fb      	ldr	r3, [r7, #12]
200034d0:	681b      	ldr	r3, [r3, #0]
200034d2:	461a      	mov	r2, r3
200034d4:	4b67      	ldr	r3, [pc, #412]	; (20003674 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
200034d6:	429a      	cmp	r2, r3
200034d8:	d960      	bls.n	2000359c <HAL_DMAEx_MultiBufferStart_IT+0x240>
200034da:	68fb      	ldr	r3, [r7, #12]
200034dc:	681b      	ldr	r3, [r3, #0]
200034de:	4a58      	ldr	r2, [pc, #352]	; (20003640 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
200034e0:	4293      	cmp	r3, r2
200034e2:	d057      	beq.n	20003594 <HAL_DMAEx_MultiBufferStart_IT+0x238>
200034e4:	68fb      	ldr	r3, [r7, #12]
200034e6:	681b      	ldr	r3, [r3, #0]
200034e8:	4a56      	ldr	r2, [pc, #344]	; (20003644 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
200034ea:	4293      	cmp	r3, r2
200034ec:	d050      	beq.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x234>
200034ee:	68fb      	ldr	r3, [r7, #12]
200034f0:	681b      	ldr	r3, [r3, #0]
200034f2:	4a55      	ldr	r2, [pc, #340]	; (20003648 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
200034f4:	4293      	cmp	r3, r2
200034f6:	d049      	beq.n	2000358c <HAL_DMAEx_MultiBufferStart_IT+0x230>
200034f8:	68fb      	ldr	r3, [r7, #12]
200034fa:	681b      	ldr	r3, [r3, #0]
200034fc:	4a53      	ldr	r2, [pc, #332]	; (2000364c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200034fe:	4293      	cmp	r3, r2
20003500:	d042      	beq.n	20003588 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
20003502:	68fb      	ldr	r3, [r7, #12]
20003504:	681b      	ldr	r3, [r3, #0]
20003506:	4a52      	ldr	r2, [pc, #328]	; (20003650 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20003508:	4293      	cmp	r3, r2
2000350a:	d03a      	beq.n	20003582 <HAL_DMAEx_MultiBufferStart_IT+0x226>
2000350c:	68fb      	ldr	r3, [r7, #12]
2000350e:	681b      	ldr	r3, [r3, #0]
20003510:	4a50      	ldr	r2, [pc, #320]	; (20003654 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
20003512:	4293      	cmp	r3, r2
20003514:	d032      	beq.n	2000357c <HAL_DMAEx_MultiBufferStart_IT+0x220>
20003516:	68fb      	ldr	r3, [r7, #12]
20003518:	681b      	ldr	r3, [r3, #0]
2000351a:	4a4f      	ldr	r2, [pc, #316]	; (20003658 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
2000351c:	4293      	cmp	r3, r2
2000351e:	d02a      	beq.n	20003576 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
20003520:	68fb      	ldr	r3, [r7, #12]
20003522:	681b      	ldr	r3, [r3, #0]
20003524:	4a4d      	ldr	r2, [pc, #308]	; (2000365c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003526:	4293      	cmp	r3, r2
20003528:	d022      	beq.n	20003570 <HAL_DMAEx_MultiBufferStart_IT+0x214>
2000352a:	68fb      	ldr	r3, [r7, #12]
2000352c:	681b      	ldr	r3, [r3, #0]
2000352e:	4a4c      	ldr	r2, [pc, #304]	; (20003660 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
20003530:	4293      	cmp	r3, r2
20003532:	d01a      	beq.n	2000356a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
20003534:	68fb      	ldr	r3, [r7, #12]
20003536:	681b      	ldr	r3, [r3, #0]
20003538:	4a4a      	ldr	r2, [pc, #296]	; (20003664 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
2000353a:	4293      	cmp	r3, r2
2000353c:	d012      	beq.n	20003564 <HAL_DMAEx_MultiBufferStart_IT+0x208>
2000353e:	68fb      	ldr	r3, [r7, #12]
20003540:	681b      	ldr	r3, [r3, #0]
20003542:	4a49      	ldr	r2, [pc, #292]	; (20003668 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003544:	4293      	cmp	r3, r2
20003546:	d00a      	beq.n	2000355e <HAL_DMAEx_MultiBufferStart_IT+0x202>
20003548:	68fb      	ldr	r3, [r7, #12]
2000354a:	681b      	ldr	r3, [r3, #0]
2000354c:	4a47      	ldr	r2, [pc, #284]	; (2000366c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000354e:	4293      	cmp	r3, r2
20003550:	d102      	bne.n	20003558 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
20003552:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003556:	e01e      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000355c:	e01b      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000355e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003562:	e018      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003568:	e015      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000356a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000356e:	e012      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003570:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003574:	e00f      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003576:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000357a:	e00c      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000357c:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003580:	e009      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003582:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003586:	e006      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003588:	2320      	movs	r3, #32
2000358a:	e004      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000358c:	2320      	movs	r3, #32
2000358e:	e002      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003590:	2320      	movs	r3, #32
20003592:	e000      	b.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003594:	2320      	movs	r3, #32
20003596:	4a36      	ldr	r2, [pc, #216]	; (20003670 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20003598:	6093      	str	r3, [r2, #8]
2000359a:	e0e8      	b.n	2000376e <HAL_DMAEx_MultiBufferStart_IT+0x412>
2000359c:	68fb      	ldr	r3, [r7, #12]
2000359e:	681b      	ldr	r3, [r3, #0]
200035a0:	461a      	mov	r2, r3
200035a2:	4b35      	ldr	r3, [pc, #212]	; (20003678 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200035a4:	429a      	cmp	r2, r3
200035a6:	f240 8082 	bls.w	200036ae <HAL_DMAEx_MultiBufferStart_IT+0x352>
200035aa:	68fb      	ldr	r3, [r7, #12]
200035ac:	681b      	ldr	r3, [r3, #0]
200035ae:	4a24      	ldr	r2, [pc, #144]	; (20003640 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
200035b0:	4293      	cmp	r3, r2
200035b2:	d078      	beq.n	200036a6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
200035b4:	68fb      	ldr	r3, [r7, #12]
200035b6:	681b      	ldr	r3, [r3, #0]
200035b8:	4a22      	ldr	r2, [pc, #136]	; (20003644 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
200035ba:	4293      	cmp	r3, r2
200035bc:	d071      	beq.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
200035be:	68fb      	ldr	r3, [r7, #12]
200035c0:	681b      	ldr	r3, [r3, #0]
200035c2:	4a21      	ldr	r2, [pc, #132]	; (20003648 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
200035c4:	4293      	cmp	r3, r2
200035c6:	d06a      	beq.n	2000369e <HAL_DMAEx_MultiBufferStart_IT+0x342>
200035c8:	68fb      	ldr	r3, [r7, #12]
200035ca:	681b      	ldr	r3, [r3, #0]
200035cc:	4a1f      	ldr	r2, [pc, #124]	; (2000364c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200035ce:	4293      	cmp	r3, r2
200035d0:	d063      	beq.n	2000369a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
200035d2:	68fb      	ldr	r3, [r7, #12]
200035d4:	681b      	ldr	r3, [r3, #0]
200035d6:	4a1e      	ldr	r2, [pc, #120]	; (20003650 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200035d8:	4293      	cmp	r3, r2
200035da:	d05b      	beq.n	20003694 <HAL_DMAEx_MultiBufferStart_IT+0x338>
200035dc:	68fb      	ldr	r3, [r7, #12]
200035de:	681b      	ldr	r3, [r3, #0]
200035e0:	4a1c      	ldr	r2, [pc, #112]	; (20003654 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200035e2:	4293      	cmp	r3, r2
200035e4:	d053      	beq.n	2000368e <HAL_DMAEx_MultiBufferStart_IT+0x332>
200035e6:	68fb      	ldr	r3, [r7, #12]
200035e8:	681b      	ldr	r3, [r3, #0]
200035ea:	4a1b      	ldr	r2, [pc, #108]	; (20003658 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200035ec:	4293      	cmp	r3, r2
200035ee:	d04b      	beq.n	20003688 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
200035f0:	68fb      	ldr	r3, [r7, #12]
200035f2:	681b      	ldr	r3, [r3, #0]
200035f4:	4a19      	ldr	r2, [pc, #100]	; (2000365c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
200035f6:	4293      	cmp	r3, r2
200035f8:	d043      	beq.n	20003682 <HAL_DMAEx_MultiBufferStart_IT+0x326>
200035fa:	68fb      	ldr	r3, [r7, #12]
200035fc:	681b      	ldr	r3, [r3, #0]
200035fe:	4a18      	ldr	r2, [pc, #96]	; (20003660 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
20003600:	4293      	cmp	r3, r2
20003602:	d03b      	beq.n	2000367c <HAL_DMAEx_MultiBufferStart_IT+0x320>
20003604:	68fb      	ldr	r3, [r7, #12]
20003606:	681b      	ldr	r3, [r3, #0]
20003608:	4a16      	ldr	r2, [pc, #88]	; (20003664 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
2000360a:	4293      	cmp	r3, r2
2000360c:	d012      	beq.n	20003634 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
2000360e:	68fb      	ldr	r3, [r7, #12]
20003610:	681b      	ldr	r3, [r3, #0]
20003612:	4a15      	ldr	r2, [pc, #84]	; (20003668 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003614:	4293      	cmp	r3, r2
20003616:	d00a      	beq.n	2000362e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
20003618:	68fb      	ldr	r3, [r7, #12]
2000361a:	681b      	ldr	r3, [r3, #0]
2000361c:	4a13      	ldr	r2, [pc, #76]	; (2000366c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000361e:	4293      	cmp	r3, r2
20003620:	d102      	bne.n	20003628 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
20003622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003626:	e03f      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000362c:	e03c      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000362e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003632:	e039      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003634:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003638:	e036      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000363a:	bf00      	nop
2000363c:	40026458 	.word	0x40026458
20003640:	40026010 	.word	0x40026010
20003644:	40026410 	.word	0x40026410
20003648:	40026070 	.word	0x40026070
2000364c:	40026470 	.word	0x40026470
20003650:	40026028 	.word	0x40026028
20003654:	40026428 	.word	0x40026428
20003658:	40026088 	.word	0x40026088
2000365c:	40026488 	.word	0x40026488
20003660:	40026040 	.word	0x40026040
20003664:	40026440 	.word	0x40026440
20003668:	400260a0 	.word	0x400260a0
2000366c:	400264a0 	.word	0x400264a0
20003670:	40026400 	.word	0x40026400
20003674:	400260b8 	.word	0x400260b8
20003678:	40026058 	.word	0x40026058
2000367c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003680:	e012      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003682:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003686:	e00f      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003688:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000368c:	e00c      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000368e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003692:	e009      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003694:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003698:	e006      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000369a:	2320      	movs	r3, #32
2000369c:	e004      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000369e:	2320      	movs	r3, #32
200036a0:	e002      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036a2:	2320      	movs	r3, #32
200036a4:	e000      	b.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036a6:	2320      	movs	r3, #32
200036a8:	4a8c      	ldr	r2, [pc, #560]	; (200038dc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
200036aa:	60d3      	str	r3, [r2, #12]
200036ac:	e05f      	b.n	2000376e <HAL_DMAEx_MultiBufferStart_IT+0x412>
200036ae:	68fb      	ldr	r3, [r7, #12]
200036b0:	681b      	ldr	r3, [r3, #0]
200036b2:	4a8b      	ldr	r2, [pc, #556]	; (200038e0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
200036b4:	4293      	cmp	r3, r2
200036b6:	d057      	beq.n	20003768 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
200036b8:	68fb      	ldr	r3, [r7, #12]
200036ba:	681b      	ldr	r3, [r3, #0]
200036bc:	4a89      	ldr	r2, [pc, #548]	; (200038e4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
200036be:	4293      	cmp	r3, r2
200036c0:	d050      	beq.n	20003764 <HAL_DMAEx_MultiBufferStart_IT+0x408>
200036c2:	68fb      	ldr	r3, [r7, #12]
200036c4:	681b      	ldr	r3, [r3, #0]
200036c6:	4a88      	ldr	r2, [pc, #544]	; (200038e8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
200036c8:	4293      	cmp	r3, r2
200036ca:	d049      	beq.n	20003760 <HAL_DMAEx_MultiBufferStart_IT+0x404>
200036cc:	68fb      	ldr	r3, [r7, #12]
200036ce:	681b      	ldr	r3, [r3, #0]
200036d0:	4a86      	ldr	r2, [pc, #536]	; (200038ec <HAL_DMAEx_MultiBufferStart_IT+0x590>)
200036d2:	4293      	cmp	r3, r2
200036d4:	d042      	beq.n	2000375c <HAL_DMAEx_MultiBufferStart_IT+0x400>
200036d6:	68fb      	ldr	r3, [r7, #12]
200036d8:	681b      	ldr	r3, [r3, #0]
200036da:	4a85      	ldr	r2, [pc, #532]	; (200038f0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
200036dc:	4293      	cmp	r3, r2
200036de:	d03a      	beq.n	20003756 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
200036e0:	68fb      	ldr	r3, [r7, #12]
200036e2:	681b      	ldr	r3, [r3, #0]
200036e4:	4a83      	ldr	r2, [pc, #524]	; (200038f4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
200036e6:	4293      	cmp	r3, r2
200036e8:	d032      	beq.n	20003750 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
200036ea:	68fb      	ldr	r3, [r7, #12]
200036ec:	681b      	ldr	r3, [r3, #0]
200036ee:	4a82      	ldr	r2, [pc, #520]	; (200038f8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
200036f0:	4293      	cmp	r3, r2
200036f2:	d02a      	beq.n	2000374a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
200036f4:	68fb      	ldr	r3, [r7, #12]
200036f6:	681b      	ldr	r3, [r3, #0]
200036f8:	4a80      	ldr	r2, [pc, #512]	; (200038fc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
200036fa:	4293      	cmp	r3, r2
200036fc:	d022      	beq.n	20003744 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
200036fe:	68fb      	ldr	r3, [r7, #12]
20003700:	681b      	ldr	r3, [r3, #0]
20003702:	4a7f      	ldr	r2, [pc, #508]	; (20003900 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
20003704:	4293      	cmp	r3, r2
20003706:	d01a      	beq.n	2000373e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
20003708:	68fb      	ldr	r3, [r7, #12]
2000370a:	681b      	ldr	r3, [r3, #0]
2000370c:	4a7d      	ldr	r2, [pc, #500]	; (20003904 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
2000370e:	4293      	cmp	r3, r2
20003710:	d012      	beq.n	20003738 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
20003712:	68fb      	ldr	r3, [r7, #12]
20003714:	681b      	ldr	r3, [r3, #0]
20003716:	4a7c      	ldr	r2, [pc, #496]	; (20003908 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003718:	4293      	cmp	r3, r2
2000371a:	d00a      	beq.n	20003732 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
2000371c:	68fb      	ldr	r3, [r7, #12]
2000371e:	681b      	ldr	r3, [r3, #0]
20003720:	4a7a      	ldr	r2, [pc, #488]	; (2000390c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
20003722:	4293      	cmp	r3, r2
20003724:	d102      	bne.n	2000372c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
20003726:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000372a:	e01e      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000372c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003730:	e01b      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003732:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003736:	e018      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000373c:	e015      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000373e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003742:	e012      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003744:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003748:	e00f      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000374a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000374e:	e00c      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003750:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003754:	e009      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003756:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000375a:	e006      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000375c:	2320      	movs	r3, #32
2000375e:	e004      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003760:	2320      	movs	r3, #32
20003762:	e002      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003764:	2320      	movs	r3, #32
20003766:	e000      	b.n	2000376a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003768:	2320      	movs	r3, #32
2000376a:	4a5c      	ldr	r2, [pc, #368]	; (200038dc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
2000376c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000376e:	68fb      	ldr	r3, [r7, #12]
20003770:	681b      	ldr	r3, [r3, #0]
20003772:	461a      	mov	r2, r3
20003774:	4b66      	ldr	r3, [pc, #408]	; (20003910 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
20003776:	429a      	cmp	r2, r3
20003778:	d960      	bls.n	2000383c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
2000377a:	68fb      	ldr	r3, [r7, #12]
2000377c:	681b      	ldr	r3, [r3, #0]
2000377e:	4a58      	ldr	r2, [pc, #352]	; (200038e0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
20003780:	4293      	cmp	r3, r2
20003782:	d057      	beq.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
20003784:	68fb      	ldr	r3, [r7, #12]
20003786:	681b      	ldr	r3, [r3, #0]
20003788:	4a56      	ldr	r2, [pc, #344]	; (200038e4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
2000378a:	4293      	cmp	r3, r2
2000378c:	d050      	beq.n	20003830 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
2000378e:	68fb      	ldr	r3, [r7, #12]
20003790:	681b      	ldr	r3, [r3, #0]
20003792:	4a55      	ldr	r2, [pc, #340]	; (200038e8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
20003794:	4293      	cmp	r3, r2
20003796:	d049      	beq.n	2000382c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
20003798:	68fb      	ldr	r3, [r7, #12]
2000379a:	681b      	ldr	r3, [r3, #0]
2000379c:	4a53      	ldr	r2, [pc, #332]	; (200038ec <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000379e:	4293      	cmp	r3, r2
200037a0:	d042      	beq.n	20003828 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
200037a2:	68fb      	ldr	r3, [r7, #12]
200037a4:	681b      	ldr	r3, [r3, #0]
200037a6:	4a52      	ldr	r2, [pc, #328]	; (200038f0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
200037a8:	4293      	cmp	r3, r2
200037aa:	d03a      	beq.n	20003822 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
200037ac:	68fb      	ldr	r3, [r7, #12]
200037ae:	681b      	ldr	r3, [r3, #0]
200037b0:	4a50      	ldr	r2, [pc, #320]	; (200038f4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
200037b2:	4293      	cmp	r3, r2
200037b4:	d032      	beq.n	2000381c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
200037b6:	68fb      	ldr	r3, [r7, #12]
200037b8:	681b      	ldr	r3, [r3, #0]
200037ba:	4a4f      	ldr	r2, [pc, #316]	; (200038f8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
200037bc:	4293      	cmp	r3, r2
200037be:	d02a      	beq.n	20003816 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
200037c0:	68fb      	ldr	r3, [r7, #12]
200037c2:	681b      	ldr	r3, [r3, #0]
200037c4:	4a4d      	ldr	r2, [pc, #308]	; (200038fc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
200037c6:	4293      	cmp	r3, r2
200037c8:	d022      	beq.n	20003810 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
200037ca:	68fb      	ldr	r3, [r7, #12]
200037cc:	681b      	ldr	r3, [r3, #0]
200037ce:	4a4c      	ldr	r2, [pc, #304]	; (20003900 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
200037d0:	4293      	cmp	r3, r2
200037d2:	d01a      	beq.n	2000380a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
200037d4:	68fb      	ldr	r3, [r7, #12]
200037d6:	681b      	ldr	r3, [r3, #0]
200037d8:	4a4a      	ldr	r2, [pc, #296]	; (20003904 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
200037da:	4293      	cmp	r3, r2
200037dc:	d012      	beq.n	20003804 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
200037de:	68fb      	ldr	r3, [r7, #12]
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	4a49      	ldr	r2, [pc, #292]	; (20003908 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
200037e4:	4293      	cmp	r3, r2
200037e6:	d00a      	beq.n	200037fe <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
200037e8:	68fb      	ldr	r3, [r7, #12]
200037ea:	681b      	ldr	r3, [r3, #0]
200037ec:	4a47      	ldr	r2, [pc, #284]	; (2000390c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
200037ee:	4293      	cmp	r3, r2
200037f0:	d102      	bne.n	200037f8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
200037f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200037f6:	e01e      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
200037f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200037fc:	e01b      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
200037fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003802:	e018      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003804:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003808:	e015      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000380a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000380e:	e012      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003810:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003814:	e00f      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003816:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000381a:	e00c      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000381c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003820:	e009      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003822:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003826:	e006      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003828:	2310      	movs	r3, #16
2000382a:	e004      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000382c:	2310      	movs	r3, #16
2000382e:	e002      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003830:	2310      	movs	r3, #16
20003832:	e000      	b.n	20003836 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003834:	2310      	movs	r3, #16
20003836:	4a37      	ldr	r2, [pc, #220]	; (20003914 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
20003838:	60d3      	str	r3, [r2, #12]
2000383a:	e14f      	b.n	20003adc <HAL_DMAEx_MultiBufferStart_IT+0x780>
2000383c:	68fb      	ldr	r3, [r7, #12]
2000383e:	681b      	ldr	r3, [r3, #0]
20003840:	461a      	mov	r2, r3
20003842:	4b35      	ldr	r3, [pc, #212]	; (20003918 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20003844:	429a      	cmp	r2, r3
20003846:	f240 8082 	bls.w	2000394e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
2000384a:	68fb      	ldr	r3, [r7, #12]
2000384c:	681b      	ldr	r3, [r3, #0]
2000384e:	4a24      	ldr	r2, [pc, #144]	; (200038e0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
20003850:	4293      	cmp	r3, r2
20003852:	d078      	beq.n	20003946 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
20003854:	68fb      	ldr	r3, [r7, #12]
20003856:	681b      	ldr	r3, [r3, #0]
20003858:	4a22      	ldr	r2, [pc, #136]	; (200038e4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
2000385a:	4293      	cmp	r3, r2
2000385c:	d071      	beq.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
2000385e:	68fb      	ldr	r3, [r7, #12]
20003860:	681b      	ldr	r3, [r3, #0]
20003862:	4a21      	ldr	r2, [pc, #132]	; (200038e8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
20003864:	4293      	cmp	r3, r2
20003866:	d06a      	beq.n	2000393e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
20003868:	68fb      	ldr	r3, [r7, #12]
2000386a:	681b      	ldr	r3, [r3, #0]
2000386c:	4a1f      	ldr	r2, [pc, #124]	; (200038ec <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000386e:	4293      	cmp	r3, r2
20003870:	d063      	beq.n	2000393a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
20003872:	68fb      	ldr	r3, [r7, #12]
20003874:	681b      	ldr	r3, [r3, #0]
20003876:	4a1e      	ldr	r2, [pc, #120]	; (200038f0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003878:	4293      	cmp	r3, r2
2000387a:	d05b      	beq.n	20003934 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
2000387c:	68fb      	ldr	r3, [r7, #12]
2000387e:	681b      	ldr	r3, [r3, #0]
20003880:	4a1c      	ldr	r2, [pc, #112]	; (200038f4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
20003882:	4293      	cmp	r3, r2
20003884:	d053      	beq.n	2000392e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
20003886:	68fb      	ldr	r3, [r7, #12]
20003888:	681b      	ldr	r3, [r3, #0]
2000388a:	4a1b      	ldr	r2, [pc, #108]	; (200038f8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
2000388c:	4293      	cmp	r3, r2
2000388e:	d04b      	beq.n	20003928 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
20003890:	68fb      	ldr	r3, [r7, #12]
20003892:	681b      	ldr	r3, [r3, #0]
20003894:	4a19      	ldr	r2, [pc, #100]	; (200038fc <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
20003896:	4293      	cmp	r3, r2
20003898:	d043      	beq.n	20003922 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
2000389a:	68fb      	ldr	r3, [r7, #12]
2000389c:	681b      	ldr	r3, [r3, #0]
2000389e:	4a18      	ldr	r2, [pc, #96]	; (20003900 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
200038a0:	4293      	cmp	r3, r2
200038a2:	d03b      	beq.n	2000391c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
200038a4:	68fb      	ldr	r3, [r7, #12]
200038a6:	681b      	ldr	r3, [r3, #0]
200038a8:	4a16      	ldr	r2, [pc, #88]	; (20003904 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
200038aa:	4293      	cmp	r3, r2
200038ac:	d012      	beq.n	200038d4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
200038ae:	68fb      	ldr	r3, [r7, #12]
200038b0:	681b      	ldr	r3, [r3, #0]
200038b2:	4a15      	ldr	r2, [pc, #84]	; (20003908 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
200038b4:	4293      	cmp	r3, r2
200038b6:	d00a      	beq.n	200038ce <HAL_DMAEx_MultiBufferStart_IT+0x572>
200038b8:	68fb      	ldr	r3, [r7, #12]
200038ba:	681b      	ldr	r3, [r3, #0]
200038bc:	4a13      	ldr	r2, [pc, #76]	; (2000390c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
200038be:	4293      	cmp	r3, r2
200038c0:	d102      	bne.n	200038c8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
200038c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038c6:	e03f      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200038c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200038cc:	e03c      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200038ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038d2:	e039      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200038d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038d8:	e036      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200038da:	bf00      	nop
200038dc:	40026000 	.word	0x40026000
200038e0:	40026010 	.word	0x40026010
200038e4:	40026410 	.word	0x40026410
200038e8:	40026070 	.word	0x40026070
200038ec:	40026470 	.word	0x40026470
200038f0:	40026028 	.word	0x40026028
200038f4:	40026428 	.word	0x40026428
200038f8:	40026088 	.word	0x40026088
200038fc:	40026488 	.word	0x40026488
20003900:	40026040 	.word	0x40026040
20003904:	40026440 	.word	0x40026440
20003908:	400260a0 	.word	0x400260a0
2000390c:	400264a0 	.word	0x400264a0
20003910:	40026458 	.word	0x40026458
20003914:	40026400 	.word	0x40026400
20003918:	400260b8 	.word	0x400260b8
2000391c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003920:	e012      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003922:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003926:	e00f      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003928:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000392c:	e00c      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000392e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003932:	e009      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003934:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003938:	e006      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000393a:	2310      	movs	r3, #16
2000393c:	e004      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000393e:	2310      	movs	r3, #16
20003940:	e002      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003942:	2310      	movs	r3, #16
20003944:	e000      	b.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003946:	2310      	movs	r3, #16
20003948:	4a8c      	ldr	r2, [pc, #560]	; (20003b7c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
2000394a:	6093      	str	r3, [r2, #8]
2000394c:	e0c6      	b.n	20003adc <HAL_DMAEx_MultiBufferStart_IT+0x780>
2000394e:	68fb      	ldr	r3, [r7, #12]
20003950:	681b      	ldr	r3, [r3, #0]
20003952:	461a      	mov	r2, r3
20003954:	4b8a      	ldr	r3, [pc, #552]	; (20003b80 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
20003956:	429a      	cmp	r2, r3
20003958:	d960      	bls.n	20003a1c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
2000395a:	68fb      	ldr	r3, [r7, #12]
2000395c:	681b      	ldr	r3, [r3, #0]
2000395e:	4a89      	ldr	r2, [pc, #548]	; (20003b84 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003960:	4293      	cmp	r3, r2
20003962:	d057      	beq.n	20003a14 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
20003964:	68fb      	ldr	r3, [r7, #12]
20003966:	681b      	ldr	r3, [r3, #0]
20003968:	4a87      	ldr	r2, [pc, #540]	; (20003b88 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
2000396a:	4293      	cmp	r3, r2
2000396c:	d050      	beq.n	20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
2000396e:	68fb      	ldr	r3, [r7, #12]
20003970:	681b      	ldr	r3, [r3, #0]
20003972:	4a86      	ldr	r2, [pc, #536]	; (20003b8c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003974:	4293      	cmp	r3, r2
20003976:	d049      	beq.n	20003a0c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
20003978:	68fb      	ldr	r3, [r7, #12]
2000397a:	681b      	ldr	r3, [r3, #0]
2000397c:	4a84      	ldr	r2, [pc, #528]	; (20003b90 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
2000397e:	4293      	cmp	r3, r2
20003980:	d042      	beq.n	20003a08 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
20003982:	68fb      	ldr	r3, [r7, #12]
20003984:	681b      	ldr	r3, [r3, #0]
20003986:	4a83      	ldr	r2, [pc, #524]	; (20003b94 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003988:	4293      	cmp	r3, r2
2000398a:	d03a      	beq.n	20003a02 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
2000398c:	68fb      	ldr	r3, [r7, #12]
2000398e:	681b      	ldr	r3, [r3, #0]
20003990:	4a81      	ldr	r2, [pc, #516]	; (20003b98 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003992:	4293      	cmp	r3, r2
20003994:	d032      	beq.n	200039fc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
20003996:	68fb      	ldr	r3, [r7, #12]
20003998:	681b      	ldr	r3, [r3, #0]
2000399a:	4a80      	ldr	r2, [pc, #512]	; (20003b9c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
2000399c:	4293      	cmp	r3, r2
2000399e:	d02a      	beq.n	200039f6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
200039a0:	68fb      	ldr	r3, [r7, #12]
200039a2:	681b      	ldr	r3, [r3, #0]
200039a4:	4a7e      	ldr	r2, [pc, #504]	; (20003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
200039a6:	4293      	cmp	r3, r2
200039a8:	d022      	beq.n	200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
200039aa:	68fb      	ldr	r3, [r7, #12]
200039ac:	681b      	ldr	r3, [r3, #0]
200039ae:	4a7d      	ldr	r2, [pc, #500]	; (20003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
200039b0:	4293      	cmp	r3, r2
200039b2:	d01a      	beq.n	200039ea <HAL_DMAEx_MultiBufferStart_IT+0x68e>
200039b4:	68fb      	ldr	r3, [r7, #12]
200039b6:	681b      	ldr	r3, [r3, #0]
200039b8:	4a7b      	ldr	r2, [pc, #492]	; (20003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
200039ba:	4293      	cmp	r3, r2
200039bc:	d012      	beq.n	200039e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
200039be:	68fb      	ldr	r3, [r7, #12]
200039c0:	681b      	ldr	r3, [r3, #0]
200039c2:	4a7a      	ldr	r2, [pc, #488]	; (20003bac <HAL_DMAEx_MultiBufferStart_IT+0x850>)
200039c4:	4293      	cmp	r3, r2
200039c6:	d00a      	beq.n	200039de <HAL_DMAEx_MultiBufferStart_IT+0x682>
200039c8:	68fb      	ldr	r3, [r7, #12]
200039ca:	681b      	ldr	r3, [r3, #0]
200039cc:	4a78      	ldr	r2, [pc, #480]	; (20003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
200039ce:	4293      	cmp	r3, r2
200039d0:	d102      	bne.n	200039d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
200039d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039d6:	e01e      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200039dc:	e01b      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039e2:	e018      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039e8:	e015      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039ee:	e012      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039f4:	e00f      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039fa:	e00c      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a00:	e009      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a06:	e006      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a08:	2310      	movs	r3, #16
20003a0a:	e004      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a0c:	2310      	movs	r3, #16
20003a0e:	e002      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a10:	2310      	movs	r3, #16
20003a12:	e000      	b.n	20003a16 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a14:	2310      	movs	r3, #16
20003a16:	4a67      	ldr	r2, [pc, #412]	; (20003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003a18:	60d3      	str	r3, [r2, #12]
20003a1a:	e05f      	b.n	20003adc <HAL_DMAEx_MultiBufferStart_IT+0x780>
20003a1c:	68fb      	ldr	r3, [r7, #12]
20003a1e:	681b      	ldr	r3, [r3, #0]
20003a20:	4a58      	ldr	r2, [pc, #352]	; (20003b84 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003a22:	4293      	cmp	r3, r2
20003a24:	d057      	beq.n	20003ad6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
20003a26:	68fb      	ldr	r3, [r7, #12]
20003a28:	681b      	ldr	r3, [r3, #0]
20003a2a:	4a57      	ldr	r2, [pc, #348]	; (20003b88 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003a2c:	4293      	cmp	r3, r2
20003a2e:	d050      	beq.n	20003ad2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
20003a30:	68fb      	ldr	r3, [r7, #12]
20003a32:	681b      	ldr	r3, [r3, #0]
20003a34:	4a55      	ldr	r2, [pc, #340]	; (20003b8c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003a36:	4293      	cmp	r3, r2
20003a38:	d049      	beq.n	20003ace <HAL_DMAEx_MultiBufferStart_IT+0x772>
20003a3a:	68fb      	ldr	r3, [r7, #12]
20003a3c:	681b      	ldr	r3, [r3, #0]
20003a3e:	4a54      	ldr	r2, [pc, #336]	; (20003b90 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003a40:	4293      	cmp	r3, r2
20003a42:	d042      	beq.n	20003aca <HAL_DMAEx_MultiBufferStart_IT+0x76e>
20003a44:	68fb      	ldr	r3, [r7, #12]
20003a46:	681b      	ldr	r3, [r3, #0]
20003a48:	4a52      	ldr	r2, [pc, #328]	; (20003b94 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003a4a:	4293      	cmp	r3, r2
20003a4c:	d03a      	beq.n	20003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
20003a4e:	68fb      	ldr	r3, [r7, #12]
20003a50:	681b      	ldr	r3, [r3, #0]
20003a52:	4a51      	ldr	r2, [pc, #324]	; (20003b98 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003a54:	4293      	cmp	r3, r2
20003a56:	d032      	beq.n	20003abe <HAL_DMAEx_MultiBufferStart_IT+0x762>
20003a58:	68fb      	ldr	r3, [r7, #12]
20003a5a:	681b      	ldr	r3, [r3, #0]
20003a5c:	4a4f      	ldr	r2, [pc, #316]	; (20003b9c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003a5e:	4293      	cmp	r3, r2
20003a60:	d02a      	beq.n	20003ab8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
20003a62:	68fb      	ldr	r3, [r7, #12]
20003a64:	681b      	ldr	r3, [r3, #0]
20003a66:	4a4e      	ldr	r2, [pc, #312]	; (20003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003a68:	4293      	cmp	r3, r2
20003a6a:	d022      	beq.n	20003ab2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
20003a6c:	68fb      	ldr	r3, [r7, #12]
20003a6e:	681b      	ldr	r3, [r3, #0]
20003a70:	4a4c      	ldr	r2, [pc, #304]	; (20003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003a72:	4293      	cmp	r3, r2
20003a74:	d01a      	beq.n	20003aac <HAL_DMAEx_MultiBufferStart_IT+0x750>
20003a76:	68fb      	ldr	r3, [r7, #12]
20003a78:	681b      	ldr	r3, [r3, #0]
20003a7a:	4a4b      	ldr	r2, [pc, #300]	; (20003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003a7c:	4293      	cmp	r3, r2
20003a7e:	d012      	beq.n	20003aa6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
20003a80:	68fb      	ldr	r3, [r7, #12]
20003a82:	681b      	ldr	r3, [r3, #0]
20003a84:	4a49      	ldr	r2, [pc, #292]	; (20003bac <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003a86:	4293      	cmp	r3, r2
20003a88:	d00a      	beq.n	20003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
20003a8a:	68fb      	ldr	r3, [r7, #12]
20003a8c:	681b      	ldr	r3, [r3, #0]
20003a8e:	4a48      	ldr	r2, [pc, #288]	; (20003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003a90:	4293      	cmp	r3, r2
20003a92:	d102      	bne.n	20003a9a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
20003a94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003a98:	e01e      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003a9e:	e01b      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003aa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003aa4:	e018      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003aa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003aaa:	e015      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003aac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003ab0:	e012      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003ab6:	e00f      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003abc:	e00c      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003ac2:	e009      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003ac8:	e006      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003aca:	2310      	movs	r3, #16
20003acc:	e004      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ace:	2310      	movs	r3, #16
20003ad0:	e002      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ad2:	2310      	movs	r3, #16
20003ad4:	e000      	b.n	20003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ad6:	2310      	movs	r3, #16
20003ad8:	4a36      	ldr	r2, [pc, #216]	; (20003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003ada:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20003adc:	68fb      	ldr	r3, [r7, #12]
20003ade:	681b      	ldr	r3, [r3, #0]
20003ae0:	461a      	mov	r2, r3
20003ae2:	4b35      	ldr	r3, [pc, #212]	; (20003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003ae4:	429a      	cmp	r2, r3
20003ae6:	f240 8082 	bls.w	20003bee <HAL_DMAEx_MultiBufferStart_IT+0x892>
20003aea:	68fb      	ldr	r3, [r7, #12]
20003aec:	681b      	ldr	r3, [r3, #0]
20003aee:	4a25      	ldr	r2, [pc, #148]	; (20003b84 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003af0:	4293      	cmp	r3, r2
20003af2:	d078      	beq.n	20003be6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
20003af4:	68fb      	ldr	r3, [r7, #12]
20003af6:	681b      	ldr	r3, [r3, #0]
20003af8:	4a23      	ldr	r2, [pc, #140]	; (20003b88 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003afa:	4293      	cmp	r3, r2
20003afc:	d071      	beq.n	20003be2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
20003afe:	68fb      	ldr	r3, [r7, #12]
20003b00:	681b      	ldr	r3, [r3, #0]
20003b02:	4a22      	ldr	r2, [pc, #136]	; (20003b8c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003b04:	4293      	cmp	r3, r2
20003b06:	d06a      	beq.n	20003bde <HAL_DMAEx_MultiBufferStart_IT+0x882>
20003b08:	68fb      	ldr	r3, [r7, #12]
20003b0a:	681b      	ldr	r3, [r3, #0]
20003b0c:	4a20      	ldr	r2, [pc, #128]	; (20003b90 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003b0e:	4293      	cmp	r3, r2
20003b10:	d063      	beq.n	20003bda <HAL_DMAEx_MultiBufferStart_IT+0x87e>
20003b12:	68fb      	ldr	r3, [r7, #12]
20003b14:	681b      	ldr	r3, [r3, #0]
20003b16:	4a1f      	ldr	r2, [pc, #124]	; (20003b94 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003b18:	4293      	cmp	r3, r2
20003b1a:	d05b      	beq.n	20003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
20003b1c:	68fb      	ldr	r3, [r7, #12]
20003b1e:	681b      	ldr	r3, [r3, #0]
20003b20:	4a1d      	ldr	r2, [pc, #116]	; (20003b98 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003b22:	4293      	cmp	r3, r2
20003b24:	d053      	beq.n	20003bce <HAL_DMAEx_MultiBufferStart_IT+0x872>
20003b26:	68fb      	ldr	r3, [r7, #12]
20003b28:	681b      	ldr	r3, [r3, #0]
20003b2a:	4a1c      	ldr	r2, [pc, #112]	; (20003b9c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003b2c:	4293      	cmp	r3, r2
20003b2e:	d04b      	beq.n	20003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
20003b30:	68fb      	ldr	r3, [r7, #12]
20003b32:	681b      	ldr	r3, [r3, #0]
20003b34:	4a1a      	ldr	r2, [pc, #104]	; (20003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003b36:	4293      	cmp	r3, r2
20003b38:	d043      	beq.n	20003bc2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
20003b3a:	68fb      	ldr	r3, [r7, #12]
20003b3c:	681b      	ldr	r3, [r3, #0]
20003b3e:	4a19      	ldr	r2, [pc, #100]	; (20003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003b40:	4293      	cmp	r3, r2
20003b42:	d03b      	beq.n	20003bbc <HAL_DMAEx_MultiBufferStart_IT+0x860>
20003b44:	68fb      	ldr	r3, [r7, #12]
20003b46:	681b      	ldr	r3, [r3, #0]
20003b48:	4a17      	ldr	r2, [pc, #92]	; (20003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003b4a:	4293      	cmp	r3, r2
20003b4c:	d012      	beq.n	20003b74 <HAL_DMAEx_MultiBufferStart_IT+0x818>
20003b4e:	68fb      	ldr	r3, [r7, #12]
20003b50:	681b      	ldr	r3, [r3, #0]
20003b52:	4a16      	ldr	r2, [pc, #88]	; (20003bac <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003b54:	4293      	cmp	r3, r2
20003b56:	d00a      	beq.n	20003b6e <HAL_DMAEx_MultiBufferStart_IT+0x812>
20003b58:	68fb      	ldr	r3, [r7, #12]
20003b5a:	681b      	ldr	r3, [r3, #0]
20003b5c:	4a14      	ldr	r2, [pc, #80]	; (20003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003b5e:	4293      	cmp	r3, r2
20003b60:	d102      	bne.n	20003b68 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
20003b62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003b66:	e03f      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003b6c:	e03c      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003b6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003b72:	e039      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003b78:	e036      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003b7a:	bf00      	nop
20003b7c:	40026400 	.word	0x40026400
20003b80:	40026058 	.word	0x40026058
20003b84:	40026010 	.word	0x40026010
20003b88:	40026410 	.word	0x40026410
20003b8c:	40026070 	.word	0x40026070
20003b90:	40026470 	.word	0x40026470
20003b94:	40026028 	.word	0x40026028
20003b98:	40026428 	.word	0x40026428
20003b9c:	40026088 	.word	0x40026088
20003ba0:	40026488 	.word	0x40026488
20003ba4:	40026040 	.word	0x40026040
20003ba8:	40026440 	.word	0x40026440
20003bac:	400260a0 	.word	0x400260a0
20003bb0:	400264a0 	.word	0x400264a0
20003bb4:	40026000 	.word	0x40026000
20003bb8:	40026458 	.word	0x40026458
20003bbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003bc0:	e012      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
20003bc6:	e00f      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
20003bcc:	e00c      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bce:	f44f 7300 	mov.w	r3, #512	; 0x200
20003bd2:	e009      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
20003bd8:	e006      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bda:	2308      	movs	r3, #8
20003bdc:	e004      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bde:	2308      	movs	r3, #8
20003be0:	e002      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003be2:	2308      	movs	r3, #8
20003be4:	e000      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003be6:	2308      	movs	r3, #8
20003be8:	4a8c      	ldr	r2, [pc, #560]	; (20003e1c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003bea:	60d3      	str	r3, [r2, #12]
20003bec:	e14e      	b.n	20003e8c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003bee:	68fb      	ldr	r3, [r7, #12]
20003bf0:	681b      	ldr	r3, [r3, #0]
20003bf2:	461a      	mov	r2, r3
20003bf4:	4b8a      	ldr	r3, [pc, #552]	; (20003e20 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
20003bf6:	429a      	cmp	r2, r3
20003bf8:	d960      	bls.n	20003cbc <HAL_DMAEx_MultiBufferStart_IT+0x960>
20003bfa:	68fb      	ldr	r3, [r7, #12]
20003bfc:	681b      	ldr	r3, [r3, #0]
20003bfe:	4a89      	ldr	r2, [pc, #548]	; (20003e24 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003c00:	4293      	cmp	r3, r2
20003c02:	d057      	beq.n	20003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
20003c04:	68fb      	ldr	r3, [r7, #12]
20003c06:	681b      	ldr	r3, [r3, #0]
20003c08:	4a87      	ldr	r2, [pc, #540]	; (20003e28 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003c0a:	4293      	cmp	r3, r2
20003c0c:	d050      	beq.n	20003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
20003c0e:	68fb      	ldr	r3, [r7, #12]
20003c10:	681b      	ldr	r3, [r3, #0]
20003c12:	4a86      	ldr	r2, [pc, #536]	; (20003e2c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003c14:	4293      	cmp	r3, r2
20003c16:	d049      	beq.n	20003cac <HAL_DMAEx_MultiBufferStart_IT+0x950>
20003c18:	68fb      	ldr	r3, [r7, #12]
20003c1a:	681b      	ldr	r3, [r3, #0]
20003c1c:	4a84      	ldr	r2, [pc, #528]	; (20003e30 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003c1e:	4293      	cmp	r3, r2
20003c20:	d042      	beq.n	20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
20003c22:	68fb      	ldr	r3, [r7, #12]
20003c24:	681b      	ldr	r3, [r3, #0]
20003c26:	4a83      	ldr	r2, [pc, #524]	; (20003e34 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003c28:	4293      	cmp	r3, r2
20003c2a:	d03a      	beq.n	20003ca2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
20003c2c:	68fb      	ldr	r3, [r7, #12]
20003c2e:	681b      	ldr	r3, [r3, #0]
20003c30:	4a81      	ldr	r2, [pc, #516]	; (20003e38 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003c32:	4293      	cmp	r3, r2
20003c34:	d032      	beq.n	20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x940>
20003c36:	68fb      	ldr	r3, [r7, #12]
20003c38:	681b      	ldr	r3, [r3, #0]
20003c3a:	4a80      	ldr	r2, [pc, #512]	; (20003e3c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003c3c:	4293      	cmp	r3, r2
20003c3e:	d02a      	beq.n	20003c96 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
20003c40:	68fb      	ldr	r3, [r7, #12]
20003c42:	681b      	ldr	r3, [r3, #0]
20003c44:	4a7e      	ldr	r2, [pc, #504]	; (20003e40 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003c46:	4293      	cmp	r3, r2
20003c48:	d022      	beq.n	20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x934>
20003c4a:	68fb      	ldr	r3, [r7, #12]
20003c4c:	681b      	ldr	r3, [r3, #0]
20003c4e:	4a7d      	ldr	r2, [pc, #500]	; (20003e44 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003c50:	4293      	cmp	r3, r2
20003c52:	d01a      	beq.n	20003c8a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20003c54:	68fb      	ldr	r3, [r7, #12]
20003c56:	681b      	ldr	r3, [r3, #0]
20003c58:	4a7b      	ldr	r2, [pc, #492]	; (20003e48 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003c5a:	4293      	cmp	r3, r2
20003c5c:	d012      	beq.n	20003c84 <HAL_DMAEx_MultiBufferStart_IT+0x928>
20003c5e:	68fb      	ldr	r3, [r7, #12]
20003c60:	681b      	ldr	r3, [r3, #0]
20003c62:	4a7a      	ldr	r2, [pc, #488]	; (20003e4c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003c64:	4293      	cmp	r3, r2
20003c66:	d00a      	beq.n	20003c7e <HAL_DMAEx_MultiBufferStart_IT+0x922>
20003c68:	68fb      	ldr	r3, [r7, #12]
20003c6a:	681b      	ldr	r3, [r3, #0]
20003c6c:	4a78      	ldr	r2, [pc, #480]	; (20003e50 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003c6e:	4293      	cmp	r3, r2
20003c70:	d102      	bne.n	20003c78 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
20003c72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c76:	e01e      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003c7c:	e01b      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c82:	e018      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c88:	e015      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c8e:	e012      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c94:	e00f      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c96:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c9a:	e00c      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ca0:	e009      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ca6:	e006      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003ca8:	2308      	movs	r3, #8
20003caa:	e004      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cac:	2308      	movs	r3, #8
20003cae:	e002      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cb0:	2308      	movs	r3, #8
20003cb2:	e000      	b.n	20003cb6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cb4:	2308      	movs	r3, #8
20003cb6:	4a59      	ldr	r2, [pc, #356]	; (20003e1c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003cb8:	6093      	str	r3, [r2, #8]
20003cba:	e0e7      	b.n	20003e8c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003cbc:	68fb      	ldr	r3, [r7, #12]
20003cbe:	681b      	ldr	r3, [r3, #0]
20003cc0:	461a      	mov	r2, r3
20003cc2:	4b64      	ldr	r3, [pc, #400]	; (20003e54 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003cc4:	429a      	cmp	r2, r3
20003cc6:	d960      	bls.n	20003d8a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
20003cc8:	68fb      	ldr	r3, [r7, #12]
20003cca:	681b      	ldr	r3, [r3, #0]
20003ccc:	4a55      	ldr	r2, [pc, #340]	; (20003e24 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003cce:	4293      	cmp	r3, r2
20003cd0:	d057      	beq.n	20003d82 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
20003cd2:	68fb      	ldr	r3, [r7, #12]
20003cd4:	681b      	ldr	r3, [r3, #0]
20003cd6:	4a54      	ldr	r2, [pc, #336]	; (20003e28 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003cd8:	4293      	cmp	r3, r2
20003cda:	d050      	beq.n	20003d7e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
20003cdc:	68fb      	ldr	r3, [r7, #12]
20003cde:	681b      	ldr	r3, [r3, #0]
20003ce0:	4a52      	ldr	r2, [pc, #328]	; (20003e2c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003ce2:	4293      	cmp	r3, r2
20003ce4:	d049      	beq.n	20003d7a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
20003ce6:	68fb      	ldr	r3, [r7, #12]
20003ce8:	681b      	ldr	r3, [r3, #0]
20003cea:	4a51      	ldr	r2, [pc, #324]	; (20003e30 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003cec:	4293      	cmp	r3, r2
20003cee:	d042      	beq.n	20003d76 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
20003cf0:	68fb      	ldr	r3, [r7, #12]
20003cf2:	681b      	ldr	r3, [r3, #0]
20003cf4:	4a4f      	ldr	r2, [pc, #316]	; (20003e34 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003cf6:	4293      	cmp	r3, r2
20003cf8:	d03a      	beq.n	20003d70 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
20003cfa:	68fb      	ldr	r3, [r7, #12]
20003cfc:	681b      	ldr	r3, [r3, #0]
20003cfe:	4a4e      	ldr	r2, [pc, #312]	; (20003e38 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003d00:	4293      	cmp	r3, r2
20003d02:	d032      	beq.n	20003d6a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
20003d04:	68fb      	ldr	r3, [r7, #12]
20003d06:	681b      	ldr	r3, [r3, #0]
20003d08:	4a4c      	ldr	r2, [pc, #304]	; (20003e3c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003d0a:	4293      	cmp	r3, r2
20003d0c:	d02a      	beq.n	20003d64 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
20003d0e:	68fb      	ldr	r3, [r7, #12]
20003d10:	681b      	ldr	r3, [r3, #0]
20003d12:	4a4b      	ldr	r2, [pc, #300]	; (20003e40 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003d14:	4293      	cmp	r3, r2
20003d16:	d022      	beq.n	20003d5e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
20003d18:	68fb      	ldr	r3, [r7, #12]
20003d1a:	681b      	ldr	r3, [r3, #0]
20003d1c:	4a49      	ldr	r2, [pc, #292]	; (20003e44 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003d1e:	4293      	cmp	r3, r2
20003d20:	d01a      	beq.n	20003d58 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
20003d22:	68fb      	ldr	r3, [r7, #12]
20003d24:	681b      	ldr	r3, [r3, #0]
20003d26:	4a48      	ldr	r2, [pc, #288]	; (20003e48 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003d28:	4293      	cmp	r3, r2
20003d2a:	d012      	beq.n	20003d52 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
20003d2c:	68fb      	ldr	r3, [r7, #12]
20003d2e:	681b      	ldr	r3, [r3, #0]
20003d30:	4a46      	ldr	r2, [pc, #280]	; (20003e4c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003d32:	4293      	cmp	r3, r2
20003d34:	d00a      	beq.n	20003d4c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
20003d36:	68fb      	ldr	r3, [r7, #12]
20003d38:	681b      	ldr	r3, [r3, #0]
20003d3a:	4a45      	ldr	r2, [pc, #276]	; (20003e50 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003d3c:	4293      	cmp	r3, r2
20003d3e:	d102      	bne.n	20003d46 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
20003d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d44:	e01e      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003d4a:	e01b      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d50:	e018      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d56:	e015      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d5c:	e012      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d62:	e00f      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d64:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d68:	e00c      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d6e:	e009      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d70:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d74:	e006      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d76:	2308      	movs	r3, #8
20003d78:	e004      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d7a:	2308      	movs	r3, #8
20003d7c:	e002      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d7e:	2308      	movs	r3, #8
20003d80:	e000      	b.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003d82:	2308      	movs	r3, #8
20003d84:	4a34      	ldr	r2, [pc, #208]	; (20003e58 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20003d86:	60d3      	str	r3, [r2, #12]
20003d88:	e080      	b.n	20003e8c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003d8a:	68fb      	ldr	r3, [r7, #12]
20003d8c:	681b      	ldr	r3, [r3, #0]
20003d8e:	4a25      	ldr	r2, [pc, #148]	; (20003e24 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003d90:	4293      	cmp	r3, r2
20003d92:	d078      	beq.n	20003e86 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
20003d94:	68fb      	ldr	r3, [r7, #12]
20003d96:	681b      	ldr	r3, [r3, #0]
20003d98:	4a23      	ldr	r2, [pc, #140]	; (20003e28 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003d9a:	4293      	cmp	r3, r2
20003d9c:	d071      	beq.n	20003e82 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
20003d9e:	68fb      	ldr	r3, [r7, #12]
20003da0:	681b      	ldr	r3, [r3, #0]
20003da2:	4a22      	ldr	r2, [pc, #136]	; (20003e2c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003da4:	4293      	cmp	r3, r2
20003da6:	d06a      	beq.n	20003e7e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
20003da8:	68fb      	ldr	r3, [r7, #12]
20003daa:	681b      	ldr	r3, [r3, #0]
20003dac:	4a20      	ldr	r2, [pc, #128]	; (20003e30 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003dae:	4293      	cmp	r3, r2
20003db0:	d063      	beq.n	20003e7a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
20003db2:	68fb      	ldr	r3, [r7, #12]
20003db4:	681b      	ldr	r3, [r3, #0]
20003db6:	4a1f      	ldr	r2, [pc, #124]	; (20003e34 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003db8:	4293      	cmp	r3, r2
20003dba:	d05b      	beq.n	20003e74 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
20003dbc:	68fb      	ldr	r3, [r7, #12]
20003dbe:	681b      	ldr	r3, [r3, #0]
20003dc0:	4a1d      	ldr	r2, [pc, #116]	; (20003e38 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003dc2:	4293      	cmp	r3, r2
20003dc4:	d053      	beq.n	20003e6e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
20003dc6:	68fb      	ldr	r3, [r7, #12]
20003dc8:	681b      	ldr	r3, [r3, #0]
20003dca:	4a1c      	ldr	r2, [pc, #112]	; (20003e3c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003dcc:	4293      	cmp	r3, r2
20003dce:	d04b      	beq.n	20003e68 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
20003dd0:	68fb      	ldr	r3, [r7, #12]
20003dd2:	681b      	ldr	r3, [r3, #0]
20003dd4:	4a1a      	ldr	r2, [pc, #104]	; (20003e40 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003dd6:	4293      	cmp	r3, r2
20003dd8:	d043      	beq.n	20003e62 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
20003dda:	68fb      	ldr	r3, [r7, #12]
20003ddc:	681b      	ldr	r3, [r3, #0]
20003dde:	4a19      	ldr	r2, [pc, #100]	; (20003e44 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003de0:	4293      	cmp	r3, r2
20003de2:	d03b      	beq.n	20003e5c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
20003de4:	68fb      	ldr	r3, [r7, #12]
20003de6:	681b      	ldr	r3, [r3, #0]
20003de8:	4a17      	ldr	r2, [pc, #92]	; (20003e48 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003dea:	4293      	cmp	r3, r2
20003dec:	d012      	beq.n	20003e14 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
20003dee:	68fb      	ldr	r3, [r7, #12]
20003df0:	681b      	ldr	r3, [r3, #0]
20003df2:	4a16      	ldr	r2, [pc, #88]	; (20003e4c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003df4:	4293      	cmp	r3, r2
20003df6:	d00a      	beq.n	20003e0e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
20003df8:	68fb      	ldr	r3, [r7, #12]
20003dfa:	681b      	ldr	r3, [r3, #0]
20003dfc:	4a14      	ldr	r2, [pc, #80]	; (20003e50 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003dfe:	4293      	cmp	r3, r2
20003e00:	d102      	bne.n	20003e08 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
20003e02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e06:	e03f      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003e0c:	e03c      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e12:	e039      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e18:	e036      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e1a:	bf00      	nop
20003e1c:	40026400 	.word	0x40026400
20003e20:	400260b8 	.word	0x400260b8
20003e24:	40026010 	.word	0x40026010
20003e28:	40026410 	.word	0x40026410
20003e2c:	40026070 	.word	0x40026070
20003e30:	40026470 	.word	0x40026470
20003e34:	40026028 	.word	0x40026028
20003e38:	40026428 	.word	0x40026428
20003e3c:	40026088 	.word	0x40026088
20003e40:	40026488 	.word	0x40026488
20003e44:	40026040 	.word	0x40026040
20003e48:	40026440 	.word	0x40026440
20003e4c:	400260a0 	.word	0x400260a0
20003e50:	400264a0 	.word	0x400264a0
20003e54:	40026058 	.word	0x40026058
20003e58:	40026000 	.word	0x40026000
20003e5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e60:	e012      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e62:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e66:	e00f      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e68:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e6c:	e00c      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e72:	e009      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e74:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e78:	e006      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e7a:	2308      	movs	r3, #8
20003e7c:	e004      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e7e:	2308      	movs	r3, #8
20003e80:	e002      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e82:	2308      	movs	r3, #8
20003e84:	e000      	b.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e86:	2308      	movs	r3, #8
20003e88:	4a8a      	ldr	r2, [pc, #552]	; (200040b4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
20003e8a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20003e8c:	68fb      	ldr	r3, [r7, #12]
20003e8e:	681b      	ldr	r3, [r3, #0]
20003e90:	461a      	mov	r2, r3
20003e92:	4b89      	ldr	r3, [pc, #548]	; (200040b8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
20003e94:	429a      	cmp	r2, r3
20003e96:	d960      	bls.n	20003f5a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
20003e98:	68fb      	ldr	r3, [r7, #12]
20003e9a:	681b      	ldr	r3, [r3, #0]
20003e9c:	4a87      	ldr	r2, [pc, #540]	; (200040bc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20003e9e:	4293      	cmp	r3, r2
20003ea0:	d057      	beq.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
20003ea2:	68fb      	ldr	r3, [r7, #12]
20003ea4:	681b      	ldr	r3, [r3, #0]
20003ea6:	4a86      	ldr	r2, [pc, #536]	; (200040c0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20003ea8:	4293      	cmp	r3, r2
20003eaa:	d050      	beq.n	20003f4e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
20003eac:	68fb      	ldr	r3, [r7, #12]
20003eae:	681b      	ldr	r3, [r3, #0]
20003eb0:	4a84      	ldr	r2, [pc, #528]	; (200040c4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20003eb2:	4293      	cmp	r3, r2
20003eb4:	d049      	beq.n	20003f4a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
20003eb6:	68fb      	ldr	r3, [r7, #12]
20003eb8:	681b      	ldr	r3, [r3, #0]
20003eba:	4a83      	ldr	r2, [pc, #524]	; (200040c8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20003ebc:	4293      	cmp	r3, r2
20003ebe:	d042      	beq.n	20003f46 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
20003ec0:	68fb      	ldr	r3, [r7, #12]
20003ec2:	681b      	ldr	r3, [r3, #0]
20003ec4:	4a81      	ldr	r2, [pc, #516]	; (200040cc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20003ec6:	4293      	cmp	r3, r2
20003ec8:	d03a      	beq.n	20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
20003eca:	68fb      	ldr	r3, [r7, #12]
20003ecc:	681b      	ldr	r3, [r3, #0]
20003ece:	4a80      	ldr	r2, [pc, #512]	; (200040d0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20003ed0:	4293      	cmp	r3, r2
20003ed2:	d032      	beq.n	20003f3a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
20003ed4:	68fb      	ldr	r3, [r7, #12]
20003ed6:	681b      	ldr	r3, [r3, #0]
20003ed8:	4a7e      	ldr	r2, [pc, #504]	; (200040d4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20003eda:	4293      	cmp	r3, r2
20003edc:	d02a      	beq.n	20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
20003ede:	68fb      	ldr	r3, [r7, #12]
20003ee0:	681b      	ldr	r3, [r3, #0]
20003ee2:	4a7d      	ldr	r2, [pc, #500]	; (200040d8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20003ee4:	4293      	cmp	r3, r2
20003ee6:	d022      	beq.n	20003f2e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
20003ee8:	68fb      	ldr	r3, [r7, #12]
20003eea:	681b      	ldr	r3, [r3, #0]
20003eec:	4a7b      	ldr	r2, [pc, #492]	; (200040dc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20003eee:	4293      	cmp	r3, r2
20003ef0:	d01a      	beq.n	20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
20003ef2:	68fb      	ldr	r3, [r7, #12]
20003ef4:	681b      	ldr	r3, [r3, #0]
20003ef6:	4a7a      	ldr	r2, [pc, #488]	; (200040e0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20003ef8:	4293      	cmp	r3, r2
20003efa:	d012      	beq.n	20003f22 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
20003efc:	68fb      	ldr	r3, [r7, #12]
20003efe:	681b      	ldr	r3, [r3, #0]
20003f00:	4a78      	ldr	r2, [pc, #480]	; (200040e4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20003f02:	4293      	cmp	r3, r2
20003f04:	d00a      	beq.n	20003f1c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
20003f06:	68fb      	ldr	r3, [r7, #12]
20003f08:	681b      	ldr	r3, [r3, #0]
20003f0a:	4a77      	ldr	r2, [pc, #476]	; (200040e8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
20003f0c:	4293      	cmp	r3, r2
20003f0e:	d102      	bne.n	20003f16 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
20003f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f14:	e01e      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003f1a:	e01b      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f20:	e018      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f26:	e015      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f2c:	e012      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
20003f32:	e00f      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f34:	f44f 7380 	mov.w	r3, #256	; 0x100
20003f38:	e00c      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
20003f3e:	e009      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f40:	f44f 7380 	mov.w	r3, #256	; 0x100
20003f44:	e006      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f46:	2304      	movs	r3, #4
20003f48:	e004      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f4a:	2304      	movs	r3, #4
20003f4c:	e002      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f4e:	2304      	movs	r3, #4
20003f50:	e000      	b.n	20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f52:	2304      	movs	r3, #4
20003f54:	4a65      	ldr	r2, [pc, #404]	; (200040ec <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20003f56:	60d3      	str	r3, [r2, #12]
20003f58:	e150      	b.n	200041fc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003f5a:	68fb      	ldr	r3, [r7, #12]
20003f5c:	681b      	ldr	r3, [r3, #0]
20003f5e:	461a      	mov	r2, r3
20003f60:	4b63      	ldr	r3, [pc, #396]	; (200040f0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
20003f62:	429a      	cmp	r2, r3
20003f64:	d960      	bls.n	20004028 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
20003f66:	68fb      	ldr	r3, [r7, #12]
20003f68:	681b      	ldr	r3, [r3, #0]
20003f6a:	4a54      	ldr	r2, [pc, #336]	; (200040bc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20003f6c:	4293      	cmp	r3, r2
20003f6e:	d057      	beq.n	20004020 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
20003f70:	68fb      	ldr	r3, [r7, #12]
20003f72:	681b      	ldr	r3, [r3, #0]
20003f74:	4a52      	ldr	r2, [pc, #328]	; (200040c0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20003f76:	4293      	cmp	r3, r2
20003f78:	d050      	beq.n	2000401c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
20003f7a:	68fb      	ldr	r3, [r7, #12]
20003f7c:	681b      	ldr	r3, [r3, #0]
20003f7e:	4a51      	ldr	r2, [pc, #324]	; (200040c4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20003f80:	4293      	cmp	r3, r2
20003f82:	d049      	beq.n	20004018 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
20003f84:	68fb      	ldr	r3, [r7, #12]
20003f86:	681b      	ldr	r3, [r3, #0]
20003f88:	4a4f      	ldr	r2, [pc, #316]	; (200040c8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20003f8a:	4293      	cmp	r3, r2
20003f8c:	d042      	beq.n	20004014 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
20003f8e:	68fb      	ldr	r3, [r7, #12]
20003f90:	681b      	ldr	r3, [r3, #0]
20003f92:	4a4e      	ldr	r2, [pc, #312]	; (200040cc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20003f94:	4293      	cmp	r3, r2
20003f96:	d03a      	beq.n	2000400e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
20003f98:	68fb      	ldr	r3, [r7, #12]
20003f9a:	681b      	ldr	r3, [r3, #0]
20003f9c:	4a4c      	ldr	r2, [pc, #304]	; (200040d0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20003f9e:	4293      	cmp	r3, r2
20003fa0:	d032      	beq.n	20004008 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
20003fa2:	68fb      	ldr	r3, [r7, #12]
20003fa4:	681b      	ldr	r3, [r3, #0]
20003fa6:	4a4b      	ldr	r2, [pc, #300]	; (200040d4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20003fa8:	4293      	cmp	r3, r2
20003faa:	d02a      	beq.n	20004002 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
20003fac:	68fb      	ldr	r3, [r7, #12]
20003fae:	681b      	ldr	r3, [r3, #0]
20003fb0:	4a49      	ldr	r2, [pc, #292]	; (200040d8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20003fb2:	4293      	cmp	r3, r2
20003fb4:	d022      	beq.n	20003ffc <HAL_DMAEx_MultiBufferStart_IT+0xca0>
20003fb6:	68fb      	ldr	r3, [r7, #12]
20003fb8:	681b      	ldr	r3, [r3, #0]
20003fba:	4a48      	ldr	r2, [pc, #288]	; (200040dc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20003fbc:	4293      	cmp	r3, r2
20003fbe:	d01a      	beq.n	20003ff6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
20003fc0:	68fb      	ldr	r3, [r7, #12]
20003fc2:	681b      	ldr	r3, [r3, #0]
20003fc4:	4a46      	ldr	r2, [pc, #280]	; (200040e0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20003fc6:	4293      	cmp	r3, r2
20003fc8:	d012      	beq.n	20003ff0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
20003fca:	68fb      	ldr	r3, [r7, #12]
20003fcc:	681b      	ldr	r3, [r3, #0]
20003fce:	4a45      	ldr	r2, [pc, #276]	; (200040e4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20003fd0:	4293      	cmp	r3, r2
20003fd2:	d00a      	beq.n	20003fea <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
20003fd4:	68fb      	ldr	r3, [r7, #12]
20003fd6:	681b      	ldr	r3, [r3, #0]
20003fd8:	4a43      	ldr	r2, [pc, #268]	; (200040e8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
20003fda:	4293      	cmp	r3, r2
20003fdc:	d102      	bne.n	20003fe4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
20003fde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003fe2:	e01e      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003fe8:	e01b      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003fea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003fee:	e018      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003ff4:	e015      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003ff6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003ffa:	e012      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
20004000:	e00f      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004002:	f44f 7380 	mov.w	r3, #256	; 0x100
20004006:	e00c      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004008:	f44f 7380 	mov.w	r3, #256	; 0x100
2000400c:	e009      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000400e:	f44f 7380 	mov.w	r3, #256	; 0x100
20004012:	e006      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004014:	2304      	movs	r3, #4
20004016:	e004      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004018:	2304      	movs	r3, #4
2000401a:	e002      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000401c:	2304      	movs	r3, #4
2000401e:	e000      	b.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004020:	2304      	movs	r3, #4
20004022:	4a32      	ldr	r2, [pc, #200]	; (200040ec <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004024:	6093      	str	r3, [r2, #8]
20004026:	e0e9      	b.n	200041fc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20004028:	68fb      	ldr	r3, [r7, #12]
2000402a:	681b      	ldr	r3, [r3, #0]
2000402c:	461a      	mov	r2, r3
2000402e:	4b31      	ldr	r3, [pc, #196]	; (200040f4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
20004030:	429a      	cmp	r2, r3
20004032:	f240 8083 	bls.w	2000413c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
20004036:	68fb      	ldr	r3, [r7, #12]
20004038:	681b      	ldr	r3, [r3, #0]
2000403a:	4a20      	ldr	r2, [pc, #128]	; (200040bc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
2000403c:	4293      	cmp	r3, r2
2000403e:	d079      	beq.n	20004134 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
20004040:	68fb      	ldr	r3, [r7, #12]
20004042:	681b      	ldr	r3, [r3, #0]
20004044:	4a1e      	ldr	r2, [pc, #120]	; (200040c0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20004046:	4293      	cmp	r3, r2
20004048:	d072      	beq.n	20004130 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
2000404a:	68fb      	ldr	r3, [r7, #12]
2000404c:	681b      	ldr	r3, [r3, #0]
2000404e:	4a1d      	ldr	r2, [pc, #116]	; (200040c4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20004050:	4293      	cmp	r3, r2
20004052:	d06b      	beq.n	2000412c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
20004054:	68fb      	ldr	r3, [r7, #12]
20004056:	681b      	ldr	r3, [r3, #0]
20004058:	4a1b      	ldr	r2, [pc, #108]	; (200040c8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
2000405a:	4293      	cmp	r3, r2
2000405c:	d064      	beq.n	20004128 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
2000405e:	68fb      	ldr	r3, [r7, #12]
20004060:	681b      	ldr	r3, [r3, #0]
20004062:	4a1a      	ldr	r2, [pc, #104]	; (200040cc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20004064:	4293      	cmp	r3, r2
20004066:	d05c      	beq.n	20004122 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
20004068:	68fb      	ldr	r3, [r7, #12]
2000406a:	681b      	ldr	r3, [r3, #0]
2000406c:	4a18      	ldr	r2, [pc, #96]	; (200040d0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
2000406e:	4293      	cmp	r3, r2
20004070:	d054      	beq.n	2000411c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
20004072:	68fb      	ldr	r3, [r7, #12]
20004074:	681b      	ldr	r3, [r3, #0]
20004076:	4a17      	ldr	r2, [pc, #92]	; (200040d4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20004078:	4293      	cmp	r3, r2
2000407a:	d04c      	beq.n	20004116 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
2000407c:	68fb      	ldr	r3, [r7, #12]
2000407e:	681b      	ldr	r3, [r3, #0]
20004080:	4a15      	ldr	r2, [pc, #84]	; (200040d8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20004082:	4293      	cmp	r3, r2
20004084:	d044      	beq.n	20004110 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
20004086:	68fb      	ldr	r3, [r7, #12]
20004088:	681b      	ldr	r3, [r3, #0]
2000408a:	4a14      	ldr	r2, [pc, #80]	; (200040dc <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
2000408c:	4293      	cmp	r3, r2
2000408e:	d03c      	beq.n	2000410a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
20004090:	68fb      	ldr	r3, [r7, #12]
20004092:	681b      	ldr	r3, [r3, #0]
20004094:	4a12      	ldr	r2, [pc, #72]	; (200040e0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20004096:	4293      	cmp	r3, r2
20004098:	d034      	beq.n	20004104 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
2000409a:	68fb      	ldr	r3, [r7, #12]
2000409c:	681b      	ldr	r3, [r3, #0]
2000409e:	4a11      	ldr	r2, [pc, #68]	; (200040e4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
200040a0:	4293      	cmp	r3, r2
200040a2:	d02c      	beq.n	200040fe <HAL_DMAEx_MultiBufferStart_IT+0xda2>
200040a4:	68fb      	ldr	r3, [r7, #12]
200040a6:	681b      	ldr	r3, [r3, #0]
200040a8:	4a0f      	ldr	r2, [pc, #60]	; (200040e8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
200040aa:	4293      	cmp	r3, r2
200040ac:	d124      	bne.n	200040f8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
200040ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200040b2:	e040      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200040b4:	40026000 	.word	0x40026000
200040b8:	40026458 	.word	0x40026458
200040bc:	40026010 	.word	0x40026010
200040c0:	40026410 	.word	0x40026410
200040c4:	40026070 	.word	0x40026070
200040c8:	40026470 	.word	0x40026470
200040cc:	40026028 	.word	0x40026028
200040d0:	40026428 	.word	0x40026428
200040d4:	40026088 	.word	0x40026088
200040d8:	40026488 	.word	0x40026488
200040dc:	40026040 	.word	0x40026040
200040e0:	40026440 	.word	0x40026440
200040e4:	400260a0 	.word	0x400260a0
200040e8:	400264a0 	.word	0x400264a0
200040ec:	40026400 	.word	0x40026400
200040f0:	400260b8 	.word	0x400260b8
200040f4:	40026058 	.word	0x40026058
200040f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200040fc:	e01b      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200040fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004102:	e018      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004108:	e015      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000410a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000410e:	e012      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004110:	f44f 7380 	mov.w	r3, #256	; 0x100
20004114:	e00f      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004116:	f44f 7380 	mov.w	r3, #256	; 0x100
2000411a:	e00c      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000411c:	f44f 7380 	mov.w	r3, #256	; 0x100
20004120:	e009      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004122:	f44f 7380 	mov.w	r3, #256	; 0x100
20004126:	e006      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004128:	2304      	movs	r3, #4
2000412a:	e004      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000412c:	2304      	movs	r3, #4
2000412e:	e002      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004130:	2304      	movs	r3, #4
20004132:	e000      	b.n	20004136 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004134:	2304      	movs	r3, #4
20004136:	4a8b      	ldr	r2, [pc, #556]	; (20004364 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
20004138:	60d3      	str	r3, [r2, #12]
2000413a:	e05f      	b.n	200041fc <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2000413c:	68fb      	ldr	r3, [r7, #12]
2000413e:	681b      	ldr	r3, [r3, #0]
20004140:	4a89      	ldr	r2, [pc, #548]	; (20004368 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
20004142:	4293      	cmp	r3, r2
20004144:	d057      	beq.n	200041f6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
20004146:	68fb      	ldr	r3, [r7, #12]
20004148:	681b      	ldr	r3, [r3, #0]
2000414a:	4a88      	ldr	r2, [pc, #544]	; (2000436c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
2000414c:	4293      	cmp	r3, r2
2000414e:	d050      	beq.n	200041f2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
20004150:	68fb      	ldr	r3, [r7, #12]
20004152:	681b      	ldr	r3, [r3, #0]
20004154:	4a86      	ldr	r2, [pc, #536]	; (20004370 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
20004156:	4293      	cmp	r3, r2
20004158:	d049      	beq.n	200041ee <HAL_DMAEx_MultiBufferStart_IT+0xe92>
2000415a:	68fb      	ldr	r3, [r7, #12]
2000415c:	681b      	ldr	r3, [r3, #0]
2000415e:	4a85      	ldr	r2, [pc, #532]	; (20004374 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
20004160:	4293      	cmp	r3, r2
20004162:	d042      	beq.n	200041ea <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
20004164:	68fb      	ldr	r3, [r7, #12]
20004166:	681b      	ldr	r3, [r3, #0]
20004168:	4a83      	ldr	r2, [pc, #524]	; (20004378 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
2000416a:	4293      	cmp	r3, r2
2000416c:	d03a      	beq.n	200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
2000416e:	68fb      	ldr	r3, [r7, #12]
20004170:	681b      	ldr	r3, [r3, #0]
20004172:	4a82      	ldr	r2, [pc, #520]	; (2000437c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004174:	4293      	cmp	r3, r2
20004176:	d032      	beq.n	200041de <HAL_DMAEx_MultiBufferStart_IT+0xe82>
20004178:	68fb      	ldr	r3, [r7, #12]
2000417a:	681b      	ldr	r3, [r3, #0]
2000417c:	4a80      	ldr	r2, [pc, #512]	; (20004380 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
2000417e:	4293      	cmp	r3, r2
20004180:	d02a      	beq.n	200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
20004182:	68fb      	ldr	r3, [r7, #12]
20004184:	681b      	ldr	r3, [r3, #0]
20004186:	4a7f      	ldr	r2, [pc, #508]	; (20004384 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004188:	4293      	cmp	r3, r2
2000418a:	d022      	beq.n	200041d2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
2000418c:	68fb      	ldr	r3, [r7, #12]
2000418e:	681b      	ldr	r3, [r3, #0]
20004190:	4a7d      	ldr	r2, [pc, #500]	; (20004388 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004192:	4293      	cmp	r3, r2
20004194:	d01a      	beq.n	200041cc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
20004196:	68fb      	ldr	r3, [r7, #12]
20004198:	681b      	ldr	r3, [r3, #0]
2000419a:	4a7c      	ldr	r2, [pc, #496]	; (2000438c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2000419c:	4293      	cmp	r3, r2
2000419e:	d012      	beq.n	200041c6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
200041a0:	68fb      	ldr	r3, [r7, #12]
200041a2:	681b      	ldr	r3, [r3, #0]
200041a4:	4a7a      	ldr	r2, [pc, #488]	; (20004390 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
200041a6:	4293      	cmp	r3, r2
200041a8:	d00a      	beq.n	200041c0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
200041aa:	68fb      	ldr	r3, [r7, #12]
200041ac:	681b      	ldr	r3, [r3, #0]
200041ae:	4a79      	ldr	r2, [pc, #484]	; (20004394 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
200041b0:	4293      	cmp	r3, r2
200041b2:	d102      	bne.n	200041ba <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
200041b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200041b8:	e01e      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200041be:	e01b      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200041c4:	e018      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200041ca:	e015      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200041d0:	e012      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041d2:	f44f 7380 	mov.w	r3, #256	; 0x100
200041d6:	e00f      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041d8:	f44f 7380 	mov.w	r3, #256	; 0x100
200041dc:	e00c      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041de:	f44f 7380 	mov.w	r3, #256	; 0x100
200041e2:	e009      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200041e8:	e006      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041ea:	2304      	movs	r3, #4
200041ec:	e004      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041ee:	2304      	movs	r3, #4
200041f0:	e002      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041f2:	2304      	movs	r3, #4
200041f4:	e000      	b.n	200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200041f6:	2304      	movs	r3, #4
200041f8:	4a5a      	ldr	r2, [pc, #360]	; (20004364 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
200041fa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200041fc:	68fb      	ldr	r3, [r7, #12]
200041fe:	681b      	ldr	r3, [r3, #0]
20004200:	461a      	mov	r2, r3
20004202:	4b65      	ldr	r3, [pc, #404]	; (20004398 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20004204:	429a      	cmp	r2, r3
20004206:	d95c      	bls.n	200042c2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
20004208:	68fb      	ldr	r3, [r7, #12]
2000420a:	681b      	ldr	r3, [r3, #0]
2000420c:	4a56      	ldr	r2, [pc, #344]	; (20004368 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
2000420e:	4293      	cmp	r3, r2
20004210:	d053      	beq.n	200042ba <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
20004212:	68fb      	ldr	r3, [r7, #12]
20004214:	681b      	ldr	r3, [r3, #0]
20004216:	4a55      	ldr	r2, [pc, #340]	; (2000436c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
20004218:	4293      	cmp	r3, r2
2000421a:	d04c      	beq.n	200042b6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
2000421c:	68fb      	ldr	r3, [r7, #12]
2000421e:	681b      	ldr	r3, [r3, #0]
20004220:	4a53      	ldr	r2, [pc, #332]	; (20004370 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
20004222:	4293      	cmp	r3, r2
20004224:	d045      	beq.n	200042b2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
20004226:	68fb      	ldr	r3, [r7, #12]
20004228:	681b      	ldr	r3, [r3, #0]
2000422a:	4a52      	ldr	r2, [pc, #328]	; (20004374 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
2000422c:	4293      	cmp	r3, r2
2000422e:	d03e      	beq.n	200042ae <HAL_DMAEx_MultiBufferStart_IT+0xf52>
20004230:	68fb      	ldr	r3, [r7, #12]
20004232:	681b      	ldr	r3, [r3, #0]
20004234:	4a50      	ldr	r2, [pc, #320]	; (20004378 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
20004236:	4293      	cmp	r3, r2
20004238:	d037      	beq.n	200042aa <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
2000423a:	68fb      	ldr	r3, [r7, #12]
2000423c:	681b      	ldr	r3, [r3, #0]
2000423e:	4a4f      	ldr	r2, [pc, #316]	; (2000437c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004240:	4293      	cmp	r3, r2
20004242:	d030      	beq.n	200042a6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
20004244:	68fb      	ldr	r3, [r7, #12]
20004246:	681b      	ldr	r3, [r3, #0]
20004248:	4a4d      	ldr	r2, [pc, #308]	; (20004380 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
2000424a:	4293      	cmp	r3, r2
2000424c:	d029      	beq.n	200042a2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
2000424e:	68fb      	ldr	r3, [r7, #12]
20004250:	681b      	ldr	r3, [r3, #0]
20004252:	4a4c      	ldr	r2, [pc, #304]	; (20004384 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004254:	4293      	cmp	r3, r2
20004256:	d022      	beq.n	2000429e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
20004258:	68fb      	ldr	r3, [r7, #12]
2000425a:	681b      	ldr	r3, [r3, #0]
2000425c:	4a4a      	ldr	r2, [pc, #296]	; (20004388 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
2000425e:	4293      	cmp	r3, r2
20004260:	d01a      	beq.n	20004298 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
20004262:	68fb      	ldr	r3, [r7, #12]
20004264:	681b      	ldr	r3, [r3, #0]
20004266:	4a49      	ldr	r2, [pc, #292]	; (2000438c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20004268:	4293      	cmp	r3, r2
2000426a:	d012      	beq.n	20004292 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
2000426c:	68fb      	ldr	r3, [r7, #12]
2000426e:	681b      	ldr	r3, [r3, #0]
20004270:	4a47      	ldr	r2, [pc, #284]	; (20004390 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20004272:	4293      	cmp	r3, r2
20004274:	d00a      	beq.n	2000428c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
20004276:	68fb      	ldr	r3, [r7, #12]
20004278:	681b      	ldr	r3, [r3, #0]
2000427a:	4a46      	ldr	r2, [pc, #280]	; (20004394 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
2000427c:	4293      	cmp	r3, r2
2000427e:	d102      	bne.n	20004286 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
20004280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004284:	e01a      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000428a:	e017      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000428c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004290:	e014      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004296:	e011      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000429c:	e00e      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000429e:	2340      	movs	r3, #64	; 0x40
200042a0:	e00c      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042a2:	2340      	movs	r3, #64	; 0x40
200042a4:	e00a      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042a6:	2340      	movs	r3, #64	; 0x40
200042a8:	e008      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042aa:	2340      	movs	r3, #64	; 0x40
200042ac:	e006      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042ae:	2301      	movs	r3, #1
200042b0:	e004      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042b2:	2301      	movs	r3, #1
200042b4:	e002      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042b6:	2301      	movs	r3, #1
200042b8:	e000      	b.n	200042bc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042ba:	2301      	movs	r3, #1
200042bc:	4a37      	ldr	r2, [pc, #220]	; (2000439c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
200042be:	60d3      	str	r3, [r2, #12]
200042c0:	e141      	b.n	20004546 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200042c2:	68fb      	ldr	r3, [r7, #12]
200042c4:	681b      	ldr	r3, [r3, #0]
200042c6:	461a      	mov	r2, r3
200042c8:	4b35      	ldr	r3, [pc, #212]	; (200043a0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
200042ca:	429a      	cmp	r2, r3
200042cc:	d97c      	bls.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
200042ce:	68fb      	ldr	r3, [r7, #12]
200042d0:	681b      	ldr	r3, [r3, #0]
200042d2:	4a25      	ldr	r2, [pc, #148]	; (20004368 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
200042d4:	4293      	cmp	r3, r2
200042d6:	d073      	beq.n	200043c0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
200042d8:	68fb      	ldr	r3, [r7, #12]
200042da:	681b      	ldr	r3, [r3, #0]
200042dc:	4a23      	ldr	r2, [pc, #140]	; (2000436c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
200042de:	4293      	cmp	r3, r2
200042e0:	d06c      	beq.n	200043bc <HAL_DMAEx_MultiBufferStart_IT+0x1060>
200042e2:	68fb      	ldr	r3, [r7, #12]
200042e4:	681b      	ldr	r3, [r3, #0]
200042e6:	4a22      	ldr	r2, [pc, #136]	; (20004370 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
200042e8:	4293      	cmp	r3, r2
200042ea:	d065      	beq.n	200043b8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
200042ec:	68fb      	ldr	r3, [r7, #12]
200042ee:	681b      	ldr	r3, [r3, #0]
200042f0:	4a20      	ldr	r2, [pc, #128]	; (20004374 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200042f2:	4293      	cmp	r3, r2
200042f4:	d05e      	beq.n	200043b4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
200042f6:	68fb      	ldr	r3, [r7, #12]
200042f8:	681b      	ldr	r3, [r3, #0]
200042fa:	4a1f      	ldr	r2, [pc, #124]	; (20004378 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
200042fc:	4293      	cmp	r3, r2
200042fe:	d057      	beq.n	200043b0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
20004300:	68fb      	ldr	r3, [r7, #12]
20004302:	681b      	ldr	r3, [r3, #0]
20004304:	4a1d      	ldr	r2, [pc, #116]	; (2000437c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004306:	4293      	cmp	r3, r2
20004308:	d050      	beq.n	200043ac <HAL_DMAEx_MultiBufferStart_IT+0x1050>
2000430a:	68fb      	ldr	r3, [r7, #12]
2000430c:	681b      	ldr	r3, [r3, #0]
2000430e:	4a1c      	ldr	r2, [pc, #112]	; (20004380 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
20004310:	4293      	cmp	r3, r2
20004312:	d049      	beq.n	200043a8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
20004314:	68fb      	ldr	r3, [r7, #12]
20004316:	681b      	ldr	r3, [r3, #0]
20004318:	4a1a      	ldr	r2, [pc, #104]	; (20004384 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
2000431a:	4293      	cmp	r3, r2
2000431c:	d042      	beq.n	200043a4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
2000431e:	68fb      	ldr	r3, [r7, #12]
20004320:	681b      	ldr	r3, [r3, #0]
20004322:	4a19      	ldr	r2, [pc, #100]	; (20004388 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004324:	4293      	cmp	r3, r2
20004326:	d01a      	beq.n	2000435e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
20004328:	68fb      	ldr	r3, [r7, #12]
2000432a:	681b      	ldr	r3, [r3, #0]
2000432c:	4a17      	ldr	r2, [pc, #92]	; (2000438c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2000432e:	4293      	cmp	r3, r2
20004330:	d012      	beq.n	20004358 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
20004332:	68fb      	ldr	r3, [r7, #12]
20004334:	681b      	ldr	r3, [r3, #0]
20004336:	4a16      	ldr	r2, [pc, #88]	; (20004390 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20004338:	4293      	cmp	r3, r2
2000433a:	d00a      	beq.n	20004352 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
2000433c:	68fb      	ldr	r3, [r7, #12]
2000433e:	681b      	ldr	r3, [r3, #0]
20004340:	4a14      	ldr	r2, [pc, #80]	; (20004394 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20004342:	4293      	cmp	r3, r2
20004344:	d102      	bne.n	2000434c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
20004346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000434a:	e03a      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000434c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004350:	e037      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004356:	e034      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000435c:	e031      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000435e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004362:	e02e      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004364:	40026000 	.word	0x40026000
20004368:	40026010 	.word	0x40026010
2000436c:	40026410 	.word	0x40026410
20004370:	40026070 	.word	0x40026070
20004374:	40026470 	.word	0x40026470
20004378:	40026028 	.word	0x40026028
2000437c:	40026428 	.word	0x40026428
20004380:	40026088 	.word	0x40026088
20004384:	40026488 	.word	0x40026488
20004388:	40026040 	.word	0x40026040
2000438c:	40026440 	.word	0x40026440
20004390:	400260a0 	.word	0x400260a0
20004394:	400264a0 	.word	0x400264a0
20004398:	40026458 	.word	0x40026458
2000439c:	40026400 	.word	0x40026400
200043a0:	400260b8 	.word	0x400260b8
200043a4:	2340      	movs	r3, #64	; 0x40
200043a6:	e00c      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043a8:	2340      	movs	r3, #64	; 0x40
200043aa:	e00a      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043ac:	2340      	movs	r3, #64	; 0x40
200043ae:	e008      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043b0:	2340      	movs	r3, #64	; 0x40
200043b2:	e006      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043b4:	2301      	movs	r3, #1
200043b6:	e004      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043b8:	2301      	movs	r3, #1
200043ba:	e002      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043bc:	2301      	movs	r3, #1
200043be:	e000      	b.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043c0:	2301      	movs	r3, #1
200043c2:	4a7b      	ldr	r2, [pc, #492]	; (200045b0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
200043c4:	6093      	str	r3, [r2, #8]
200043c6:	e0be      	b.n	20004546 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200043c8:	68fb      	ldr	r3, [r7, #12]
200043ca:	681b      	ldr	r3, [r3, #0]
200043cc:	461a      	mov	r2, r3
200043ce:	4b79      	ldr	r3, [pc, #484]	; (200045b4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
200043d0:	429a      	cmp	r2, r3
200043d2:	d95c      	bls.n	2000448e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
200043d4:	68fb      	ldr	r3, [r7, #12]
200043d6:	681b      	ldr	r3, [r3, #0]
200043d8:	4a77      	ldr	r2, [pc, #476]	; (200045b8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
200043da:	4293      	cmp	r3, r2
200043dc:	d053      	beq.n	20004486 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
200043de:	68fb      	ldr	r3, [r7, #12]
200043e0:	681b      	ldr	r3, [r3, #0]
200043e2:	4a76      	ldr	r2, [pc, #472]	; (200045bc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
200043e4:	4293      	cmp	r3, r2
200043e6:	d04c      	beq.n	20004482 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
200043e8:	68fb      	ldr	r3, [r7, #12]
200043ea:	681b      	ldr	r3, [r3, #0]
200043ec:	4a74      	ldr	r2, [pc, #464]	; (200045c0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200043ee:	4293      	cmp	r3, r2
200043f0:	d045      	beq.n	2000447e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
200043f2:	68fb      	ldr	r3, [r7, #12]
200043f4:	681b      	ldr	r3, [r3, #0]
200043f6:	4a73      	ldr	r2, [pc, #460]	; (200045c4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
200043f8:	4293      	cmp	r3, r2
200043fa:	d03e      	beq.n	2000447a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
200043fc:	68fb      	ldr	r3, [r7, #12]
200043fe:	681b      	ldr	r3, [r3, #0]
20004400:	4a71      	ldr	r2, [pc, #452]	; (200045c8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20004402:	4293      	cmp	r3, r2
20004404:	d037      	beq.n	20004476 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
20004406:	68fb      	ldr	r3, [r7, #12]
20004408:	681b      	ldr	r3, [r3, #0]
2000440a:	4a70      	ldr	r2, [pc, #448]	; (200045cc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
2000440c:	4293      	cmp	r3, r2
2000440e:	d030      	beq.n	20004472 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
20004410:	68fb      	ldr	r3, [r7, #12]
20004412:	681b      	ldr	r3, [r3, #0]
20004414:	4a6e      	ldr	r2, [pc, #440]	; (200045d0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
20004416:	4293      	cmp	r3, r2
20004418:	d029      	beq.n	2000446e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
2000441a:	68fb      	ldr	r3, [r7, #12]
2000441c:	681b      	ldr	r3, [r3, #0]
2000441e:	4a6d      	ldr	r2, [pc, #436]	; (200045d4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
20004420:	4293      	cmp	r3, r2
20004422:	d022      	beq.n	2000446a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
20004424:	68fb      	ldr	r3, [r7, #12]
20004426:	681b      	ldr	r3, [r3, #0]
20004428:	4a6b      	ldr	r2, [pc, #428]	; (200045d8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
2000442a:	4293      	cmp	r3, r2
2000442c:	d01a      	beq.n	20004464 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
2000442e:	68fb      	ldr	r3, [r7, #12]
20004430:	681b      	ldr	r3, [r3, #0]
20004432:	4a6a      	ldr	r2, [pc, #424]	; (200045dc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
20004434:	4293      	cmp	r3, r2
20004436:	d012      	beq.n	2000445e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
20004438:	68fb      	ldr	r3, [r7, #12]
2000443a:	681b      	ldr	r3, [r3, #0]
2000443c:	4a68      	ldr	r2, [pc, #416]	; (200045e0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
2000443e:	4293      	cmp	r3, r2
20004440:	d00a      	beq.n	20004458 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
20004442:	68fb      	ldr	r3, [r7, #12]
20004444:	681b      	ldr	r3, [r3, #0]
20004446:	4a67      	ldr	r2, [pc, #412]	; (200045e4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004448:	4293      	cmp	r3, r2
2000444a:	d102      	bne.n	20004452 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
2000444c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004450:	e01a      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004456:	e017      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000445c:	e014      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000445e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004462:	e011      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004468:	e00e      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000446a:	2340      	movs	r3, #64	; 0x40
2000446c:	e00c      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000446e:	2340      	movs	r3, #64	; 0x40
20004470:	e00a      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004472:	2340      	movs	r3, #64	; 0x40
20004474:	e008      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004476:	2340      	movs	r3, #64	; 0x40
20004478:	e006      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000447a:	2301      	movs	r3, #1
2000447c:	e004      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000447e:	2301      	movs	r3, #1
20004480:	e002      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004482:	2301      	movs	r3, #1
20004484:	e000      	b.n	20004488 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004486:	2301      	movs	r3, #1
20004488:	4a57      	ldr	r2, [pc, #348]	; (200045e8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
2000448a:	60d3      	str	r3, [r2, #12]
2000448c:	e05b      	b.n	20004546 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000448e:	68fb      	ldr	r3, [r7, #12]
20004490:	681b      	ldr	r3, [r3, #0]
20004492:	4a49      	ldr	r2, [pc, #292]	; (200045b8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20004494:	4293      	cmp	r3, r2
20004496:	d053      	beq.n	20004540 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
20004498:	68fb      	ldr	r3, [r7, #12]
2000449a:	681b      	ldr	r3, [r3, #0]
2000449c:	4a47      	ldr	r2, [pc, #284]	; (200045bc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
2000449e:	4293      	cmp	r3, r2
200044a0:	d04c      	beq.n	2000453c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
200044a2:	68fb      	ldr	r3, [r7, #12]
200044a4:	681b      	ldr	r3, [r3, #0]
200044a6:	4a46      	ldr	r2, [pc, #280]	; (200045c0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200044a8:	4293      	cmp	r3, r2
200044aa:	d045      	beq.n	20004538 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
200044ac:	68fb      	ldr	r3, [r7, #12]
200044ae:	681b      	ldr	r3, [r3, #0]
200044b0:	4a44      	ldr	r2, [pc, #272]	; (200045c4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
200044b2:	4293      	cmp	r3, r2
200044b4:	d03e      	beq.n	20004534 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
200044b6:	68fb      	ldr	r3, [r7, #12]
200044b8:	681b      	ldr	r3, [r3, #0]
200044ba:	4a43      	ldr	r2, [pc, #268]	; (200045c8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
200044bc:	4293      	cmp	r3, r2
200044be:	d037      	beq.n	20004530 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
200044c0:	68fb      	ldr	r3, [r7, #12]
200044c2:	681b      	ldr	r3, [r3, #0]
200044c4:	4a41      	ldr	r2, [pc, #260]	; (200045cc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
200044c6:	4293      	cmp	r3, r2
200044c8:	d030      	beq.n	2000452c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
200044ca:	68fb      	ldr	r3, [r7, #12]
200044cc:	681b      	ldr	r3, [r3, #0]
200044ce:	4a40      	ldr	r2, [pc, #256]	; (200045d0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
200044d0:	4293      	cmp	r3, r2
200044d2:	d029      	beq.n	20004528 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
200044d4:	68fb      	ldr	r3, [r7, #12]
200044d6:	681b      	ldr	r3, [r3, #0]
200044d8:	4a3e      	ldr	r2, [pc, #248]	; (200045d4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
200044da:	4293      	cmp	r3, r2
200044dc:	d022      	beq.n	20004524 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
200044de:	68fb      	ldr	r3, [r7, #12]
200044e0:	681b      	ldr	r3, [r3, #0]
200044e2:	4a3d      	ldr	r2, [pc, #244]	; (200045d8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
200044e4:	4293      	cmp	r3, r2
200044e6:	d01a      	beq.n	2000451e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
200044e8:	68fb      	ldr	r3, [r7, #12]
200044ea:	681b      	ldr	r3, [r3, #0]
200044ec:	4a3b      	ldr	r2, [pc, #236]	; (200045dc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
200044ee:	4293      	cmp	r3, r2
200044f0:	d012      	beq.n	20004518 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
200044f2:	68fb      	ldr	r3, [r7, #12]
200044f4:	681b      	ldr	r3, [r3, #0]
200044f6:	4a3a      	ldr	r2, [pc, #232]	; (200045e0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
200044f8:	4293      	cmp	r3, r2
200044fa:	d00a      	beq.n	20004512 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
200044fc:	68fb      	ldr	r3, [r7, #12]
200044fe:	681b      	ldr	r3, [r3, #0]
20004500:	4a38      	ldr	r2, [pc, #224]	; (200045e4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004502:	4293      	cmp	r3, r2
20004504:	d102      	bne.n	2000450c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
20004506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000450a:	e01a      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000450c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004510:	e017      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004516:	e014      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000451c:	e011      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000451e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004522:	e00e      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004524:	2340      	movs	r3, #64	; 0x40
20004526:	e00c      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004528:	2340      	movs	r3, #64	; 0x40
2000452a:	e00a      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000452c:	2340      	movs	r3, #64	; 0x40
2000452e:	e008      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004530:	2340      	movs	r3, #64	; 0x40
20004532:	e006      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004534:	2301      	movs	r3, #1
20004536:	e004      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004538:	2301      	movs	r3, #1
2000453a:	e002      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000453c:	2301      	movs	r3, #1
2000453e:	e000      	b.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004540:	2301      	movs	r3, #1
20004542:	4a29      	ldr	r2, [pc, #164]	; (200045e8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
20004544:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20004546:	68fb      	ldr	r3, [r7, #12]
20004548:	681b      	ldr	r3, [r3, #0]
2000454a:	681a      	ldr	r2, [r3, #0]
2000454c:	68fb      	ldr	r3, [r7, #12]
2000454e:	681b      	ldr	r3, [r3, #0]
20004550:	f042 0216 	orr.w	r2, r2, #22
20004554:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
20004556:	68fb      	ldr	r3, [r7, #12]
20004558:	681b      	ldr	r3, [r3, #0]
2000455a:	695a      	ldr	r2, [r3, #20]
2000455c:	68fb      	ldr	r3, [r7, #12]
2000455e:	681b      	ldr	r3, [r3, #0]
20004560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20004564:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20004566:	68fb      	ldr	r3, [r7, #12]
20004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000456a:	2b00      	cmp	r3, #0
2000456c:	d103      	bne.n	20004576 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
2000456e:	68fb      	ldr	r3, [r7, #12]
20004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20004572:	2b00      	cmp	r3, #0
20004574:	d007      	beq.n	20004586 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20004576:	68fb      	ldr	r3, [r7, #12]
20004578:	681b      	ldr	r3, [r3, #0]
2000457a:	681a      	ldr	r2, [r3, #0]
2000457c:	68fb      	ldr	r3, [r7, #12]
2000457e:	681b      	ldr	r3, [r3, #0]
20004580:	f042 0208 	orr.w	r2, r2, #8
20004584:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
20004586:	68fb      	ldr	r3, [r7, #12]
20004588:	681b      	ldr	r3, [r3, #0]
2000458a:	681a      	ldr	r2, [r3, #0]
2000458c:	68fb      	ldr	r3, [r7, #12]
2000458e:	681b      	ldr	r3, [r3, #0]
20004590:	f042 0201 	orr.w	r2, r2, #1
20004594:	601a      	str	r2, [r3, #0]
20004596:	e005      	b.n	200045a4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20004598:	68fb      	ldr	r3, [r7, #12]
2000459a:	2200      	movs	r2, #0
2000459c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200045a0:	2302      	movs	r3, #2
200045a2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
200045a4:	7dfb      	ldrb	r3, [r7, #23]
}
200045a6:	4618      	mov	r0, r3
200045a8:	3718      	adds	r7, #24
200045aa:	46bd      	mov	sp, r7
200045ac:	bd80      	pop	{r7, pc}
200045ae:	bf00      	nop
200045b0:	40026400 	.word	0x40026400
200045b4:	40026058 	.word	0x40026058
200045b8:	40026010 	.word	0x40026010
200045bc:	40026410 	.word	0x40026410
200045c0:	40026070 	.word	0x40026070
200045c4:	40026470 	.word	0x40026470
200045c8:	40026028 	.word	0x40026028
200045cc:	40026428 	.word	0x40026428
200045d0:	40026088 	.word	0x40026088
200045d4:	40026488 	.word	0x40026488
200045d8:	40026040 	.word	0x40026040
200045dc:	40026440 	.word	0x40026440
200045e0:	400260a0 	.word	0x400260a0
200045e4:	400264a0 	.word	0x400264a0
200045e8:	40026000 	.word	0x40026000

200045ec <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
200045ec:	b480      	push	{r7}
200045ee:	b085      	sub	sp, #20
200045f0:	af00      	add	r7, sp, #0
200045f2:	60f8      	str	r0, [r7, #12]
200045f4:	60b9      	str	r1, [r7, #8]
200045f6:	4613      	mov	r3, r2
200045f8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
200045fa:	79fb      	ldrb	r3, [r7, #7]
200045fc:	2b00      	cmp	r3, #0
200045fe:	d104      	bne.n	2000460a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
20004600:	68fb      	ldr	r3, [r7, #12]
20004602:	681b      	ldr	r3, [r3, #0]
20004604:	68ba      	ldr	r2, [r7, #8]
20004606:	60da      	str	r2, [r3, #12]
20004608:	e003      	b.n	20004612 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
2000460a:	68fb      	ldr	r3, [r7, #12]
2000460c:	681b      	ldr	r3, [r3, #0]
2000460e:	68ba      	ldr	r2, [r7, #8]
20004610:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
20004612:	2300      	movs	r3, #0
}
20004614:	4618      	mov	r0, r3
20004616:	3714      	adds	r7, #20
20004618:	46bd      	mov	sp, r7
2000461a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000461e:	4770      	bx	lr

20004620 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
20004620:	b480      	push	{r7}
20004622:	b085      	sub	sp, #20
20004624:	af00      	add	r7, sp, #0
20004626:	60f8      	str	r0, [r7, #12]
20004628:	60b9      	str	r1, [r7, #8]
2000462a:	607a      	str	r2, [r7, #4]
2000462c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000462e:	68fb      	ldr	r3, [r7, #12]
20004630:	681b      	ldr	r3, [r3, #0]
20004632:	683a      	ldr	r2, [r7, #0]
20004634:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20004636:	68fb      	ldr	r3, [r7, #12]
20004638:	689b      	ldr	r3, [r3, #8]
2000463a:	2b40      	cmp	r3, #64	; 0x40
2000463c:	d108      	bne.n	20004650 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000463e:	68fb      	ldr	r3, [r7, #12]
20004640:	681b      	ldr	r3, [r3, #0]
20004642:	687a      	ldr	r2, [r7, #4]
20004644:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20004646:	68fb      	ldr	r3, [r7, #12]
20004648:	681b      	ldr	r3, [r3, #0]
2000464a:	68ba      	ldr	r2, [r7, #8]
2000464c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000464e:	e007      	b.n	20004660 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
20004650:	68fb      	ldr	r3, [r7, #12]
20004652:	681b      	ldr	r3, [r3, #0]
20004654:	68ba      	ldr	r2, [r7, #8]
20004656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20004658:	68fb      	ldr	r3, [r7, #12]
2000465a:	681b      	ldr	r3, [r3, #0]
2000465c:	687a      	ldr	r2, [r7, #4]
2000465e:	60da      	str	r2, [r3, #12]
}
20004660:	bf00      	nop
20004662:	3714      	adds	r7, #20
20004664:	46bd      	mov	sp, r7
20004666:	f85d 7b04 	ldr.w	r7, [sp], #4
2000466a:	4770      	bx	lr

2000466c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
2000466c:	b480      	push	{r7}
2000466e:	b087      	sub	sp, #28
20004670:	af00      	add	r7, sp, #0
20004672:	6078      	str	r0, [r7, #4]
20004674:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20004676:	687b      	ldr	r3, [r7, #4]
20004678:	2b00      	cmp	r3, #0
2000467a:	d002      	beq.n	20004682 <HAL_EXTI_SetConfigLine+0x16>
2000467c:	683b      	ldr	r3, [r7, #0]
2000467e:	2b00      	cmp	r3, #0
20004680:	d101      	bne.n	20004686 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
20004682:	2301      	movs	r3, #1
20004684:	e08f      	b.n	200047a6 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20004686:	683b      	ldr	r3, [r7, #0]
20004688:	681a      	ldr	r2, [r3, #0]
2000468a:	687b      	ldr	r3, [r7, #4]
2000468c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2000468e:	683b      	ldr	r3, [r7, #0]
20004690:	681b      	ldr	r3, [r3, #0]
20004692:	f003 031f 	and.w	r3, r3, #31
20004696:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004698:	2201      	movs	r2, #1
2000469a:	697b      	ldr	r3, [r7, #20]
2000469c:	fa02 f303 	lsl.w	r3, r2, r3
200046a0:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
200046a2:	683b      	ldr	r3, [r7, #0]
200046a4:	681b      	ldr	r3, [r3, #0]
200046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200046aa:	2b00      	cmp	r3, #0
200046ac:	d052      	beq.n	20004754 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
200046ae:	683b      	ldr	r3, [r7, #0]
200046b0:	689b      	ldr	r3, [r3, #8]
200046b2:	f003 0301 	and.w	r3, r3, #1
200046b6:	2b00      	cmp	r3, #0
200046b8:	d006      	beq.n	200046c8 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
200046ba:	4b3e      	ldr	r3, [pc, #248]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046bc:	689a      	ldr	r2, [r3, #8]
200046be:	493d      	ldr	r1, [pc, #244]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046c0:	693b      	ldr	r3, [r7, #16]
200046c2:	4313      	orrs	r3, r2
200046c4:	608b      	str	r3, [r1, #8]
200046c6:	e006      	b.n	200046d6 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
200046c8:	4b3a      	ldr	r3, [pc, #232]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046ca:	689a      	ldr	r2, [r3, #8]
200046cc:	693b      	ldr	r3, [r7, #16]
200046ce:	43db      	mvns	r3, r3
200046d0:	4938      	ldr	r1, [pc, #224]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046d2:	4013      	ands	r3, r2
200046d4:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
200046d6:	683b      	ldr	r3, [r7, #0]
200046d8:	689b      	ldr	r3, [r3, #8]
200046da:	f003 0302 	and.w	r3, r3, #2
200046de:	2b00      	cmp	r3, #0
200046e0:	d006      	beq.n	200046f0 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
200046e2:	4b34      	ldr	r3, [pc, #208]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046e4:	68da      	ldr	r2, [r3, #12]
200046e6:	4933      	ldr	r1, [pc, #204]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046e8:	693b      	ldr	r3, [r7, #16]
200046ea:	4313      	orrs	r3, r2
200046ec:	60cb      	str	r3, [r1, #12]
200046ee:	e006      	b.n	200046fe <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
200046f0:	4b30      	ldr	r3, [pc, #192]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046f2:	68da      	ldr	r2, [r3, #12]
200046f4:	693b      	ldr	r3, [r7, #16]
200046f6:	43db      	mvns	r3, r3
200046f8:	492e      	ldr	r1, [pc, #184]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200046fa:	4013      	ands	r3, r2
200046fc:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200046fe:	683b      	ldr	r3, [r7, #0]
20004700:	681b      	ldr	r3, [r3, #0]
20004702:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004706:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2000470a:	d123      	bne.n	20004754 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
2000470c:	4a2a      	ldr	r2, [pc, #168]	; (200047b8 <HAL_EXTI_SetConfigLine+0x14c>)
2000470e:	697b      	ldr	r3, [r7, #20]
20004710:	089b      	lsrs	r3, r3, #2
20004712:	3302      	adds	r3, #2
20004714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004718:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
2000471a:	697b      	ldr	r3, [r7, #20]
2000471c:	f003 0303 	and.w	r3, r3, #3
20004720:	009b      	lsls	r3, r3, #2
20004722:	220f      	movs	r2, #15
20004724:	fa02 f303 	lsl.w	r3, r2, r3
20004728:	43db      	mvns	r3, r3
2000472a:	68fa      	ldr	r2, [r7, #12]
2000472c:	4013      	ands	r3, r2
2000472e:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004730:	683b      	ldr	r3, [r7, #0]
20004732:	68da      	ldr	r2, [r3, #12]
20004734:	697b      	ldr	r3, [r7, #20]
20004736:	f003 0303 	and.w	r3, r3, #3
2000473a:	009b      	lsls	r3, r3, #2
2000473c:	fa02 f303 	lsl.w	r3, r2, r3
20004740:	68fa      	ldr	r2, [r7, #12]
20004742:	4313      	orrs	r3, r2
20004744:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004746:	491c      	ldr	r1, [pc, #112]	; (200047b8 <HAL_EXTI_SetConfigLine+0x14c>)
20004748:	697b      	ldr	r3, [r7, #20]
2000474a:	089b      	lsrs	r3, r3, #2
2000474c:	3302      	adds	r3, #2
2000474e:	68fa      	ldr	r2, [r7, #12]
20004750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
20004754:	683b      	ldr	r3, [r7, #0]
20004756:	685b      	ldr	r3, [r3, #4]
20004758:	f003 0301 	and.w	r3, r3, #1
2000475c:	2b00      	cmp	r3, #0
2000475e:	d006      	beq.n	2000476e <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
20004760:	4b14      	ldr	r3, [pc, #80]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
20004762:	681a      	ldr	r2, [r3, #0]
20004764:	4913      	ldr	r1, [pc, #76]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
20004766:	693b      	ldr	r3, [r7, #16]
20004768:	4313      	orrs	r3, r2
2000476a:	600b      	str	r3, [r1, #0]
2000476c:	e006      	b.n	2000477c <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
2000476e:	4b11      	ldr	r3, [pc, #68]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
20004770:	681a      	ldr	r2, [r3, #0]
20004772:	693b      	ldr	r3, [r7, #16]
20004774:	43db      	mvns	r3, r3
20004776:	490f      	ldr	r1, [pc, #60]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
20004778:	4013      	ands	r3, r2
2000477a:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
2000477c:	683b      	ldr	r3, [r7, #0]
2000477e:	685b      	ldr	r3, [r3, #4]
20004780:	f003 0302 	and.w	r3, r3, #2
20004784:	2b00      	cmp	r3, #0
20004786:	d006      	beq.n	20004796 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
20004788:	4b0a      	ldr	r3, [pc, #40]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
2000478a:	685a      	ldr	r2, [r3, #4]
2000478c:	4909      	ldr	r1, [pc, #36]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
2000478e:	693b      	ldr	r3, [r7, #16]
20004790:	4313      	orrs	r3, r2
20004792:	604b      	str	r3, [r1, #4]
20004794:	e006      	b.n	200047a4 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
20004796:	4b07      	ldr	r3, [pc, #28]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
20004798:	685a      	ldr	r2, [r3, #4]
2000479a:	693b      	ldr	r3, [r7, #16]
2000479c:	43db      	mvns	r3, r3
2000479e:	4905      	ldr	r1, [pc, #20]	; (200047b4 <HAL_EXTI_SetConfigLine+0x148>)
200047a0:	4013      	ands	r3, r2
200047a2:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
200047a4:	2300      	movs	r3, #0
}
200047a6:	4618      	mov	r0, r3
200047a8:	371c      	adds	r7, #28
200047aa:	46bd      	mov	sp, r7
200047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200047b0:	4770      	bx	lr
200047b2:	bf00      	nop
200047b4:	40013c00 	.word	0x40013c00
200047b8:	40013800 	.word	0x40013800

200047bc <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200047bc:	b480      	push	{r7}
200047be:	b087      	sub	sp, #28
200047c0:	af00      	add	r7, sp, #0
200047c2:	6078      	str	r0, [r7, #4]
200047c4:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200047c6:	687b      	ldr	r3, [r7, #4]
200047c8:	2b00      	cmp	r3, #0
200047ca:	d002      	beq.n	200047d2 <HAL_EXTI_GetConfigLine+0x16>
200047cc:	683b      	ldr	r3, [r7, #0]
200047ce:	2b00      	cmp	r3, #0
200047d0:	d101      	bne.n	200047d6 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
200047d2:	2301      	movs	r3, #1
200047d4:	e062      	b.n	2000489c <HAL_EXTI_GetConfigLine+0xe0>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
200047d6:	687b      	ldr	r3, [r7, #4]
200047d8:	681a      	ldr	r2, [r3, #0]
200047da:	683b      	ldr	r3, [r7, #0]
200047dc:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
200047de:	683b      	ldr	r3, [r7, #0]
200047e0:	681b      	ldr	r3, [r3, #0]
200047e2:	f003 031f 	and.w	r3, r3, #31
200047e6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200047e8:	2201      	movs	r2, #1
200047ea:	697b      	ldr	r3, [r7, #20]
200047ec:	fa02 f303 	lsl.w	r3, r2, r3
200047f0:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
200047f2:	4b2d      	ldr	r3, [pc, #180]	; (200048a8 <HAL_EXTI_GetConfigLine+0xec>)
200047f4:	681a      	ldr	r2, [r3, #0]
200047f6:	693b      	ldr	r3, [r7, #16]
200047f8:	4013      	ands	r3, r2
200047fa:	2b00      	cmp	r3, #0
200047fc:	d003      	beq.n	20004806 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
200047fe:	683b      	ldr	r3, [r7, #0]
20004800:	2201      	movs	r2, #1
20004802:	605a      	str	r2, [r3, #4]
20004804:	e002      	b.n	2000480c <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
20004806:	683b      	ldr	r3, [r7, #0]
20004808:	2200      	movs	r2, #0
2000480a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
2000480c:	4b26      	ldr	r3, [pc, #152]	; (200048a8 <HAL_EXTI_GetConfigLine+0xec>)
2000480e:	685a      	ldr	r2, [r3, #4]
20004810:	693b      	ldr	r3, [r7, #16]
20004812:	4013      	ands	r3, r2
20004814:	2b00      	cmp	r3, #0
20004816:	d005      	beq.n	20004824 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20004818:	683b      	ldr	r3, [r7, #0]
2000481a:	685b      	ldr	r3, [r3, #4]
2000481c:	f043 0202 	orr.w	r2, r3, #2
20004820:	683b      	ldr	r3, [r7, #0]
20004822:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20004824:	683b      	ldr	r3, [r7, #0]
20004826:	2200      	movs	r2, #0
20004828:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
2000482a:	683b      	ldr	r3, [r7, #0]
2000482c:	2200      	movs	r2, #0
2000482e:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20004830:	683b      	ldr	r3, [r7, #0]
20004832:	681b      	ldr	r3, [r3, #0]
20004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004838:	2b00      	cmp	r3, #0
2000483a:	d02e      	beq.n	2000489a <HAL_EXTI_GetConfigLine+0xde>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
2000483c:	4b1a      	ldr	r3, [pc, #104]	; (200048a8 <HAL_EXTI_GetConfigLine+0xec>)
2000483e:	689a      	ldr	r2, [r3, #8]
20004840:	693b      	ldr	r3, [r7, #16]
20004842:	4013      	ands	r3, r2
20004844:	2b00      	cmp	r3, #0
20004846:	d002      	beq.n	2000484e <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
20004848:	683b      	ldr	r3, [r7, #0]
2000484a:	2201      	movs	r2, #1
2000484c:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
2000484e:	4b16      	ldr	r3, [pc, #88]	; (200048a8 <HAL_EXTI_GetConfigLine+0xec>)
20004850:	68da      	ldr	r2, [r3, #12]
20004852:	693b      	ldr	r3, [r7, #16]
20004854:	4013      	ands	r3, r2
20004856:	2b00      	cmp	r3, #0
20004858:	d005      	beq.n	20004866 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
2000485a:	683b      	ldr	r3, [r7, #0]
2000485c:	689b      	ldr	r3, [r3, #8]
2000485e:	f043 0202 	orr.w	r2, r3, #2
20004862:	683b      	ldr	r3, [r7, #0]
20004864:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20004866:	683b      	ldr	r3, [r7, #0]
20004868:	681b      	ldr	r3, [r3, #0]
2000486a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
2000486e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20004872:	d112      	bne.n	2000489a <HAL_EXTI_GetConfigLine+0xde>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = (SYSCFG->EXTICR[linepos >> 2u] << 16u );
20004874:	4a0d      	ldr	r2, [pc, #52]	; (200048ac <HAL_EXTI_GetConfigLine+0xf0>)
20004876:	697b      	ldr	r3, [r7, #20]
20004878:	089b      	lsrs	r3, r3, #2
2000487a:	3302      	adds	r3, #2
2000487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004880:	041b      	lsls	r3, r3, #16
20004882:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 28u);
20004884:	697b      	ldr	r3, [r7, #20]
20004886:	43db      	mvns	r3, r3
20004888:	f003 0303 	and.w	r3, r3, #3
2000488c:	009b      	lsls	r3, r3, #2
2000488e:	68fa      	ldr	r2, [r7, #12]
20004890:	fa02 f303 	lsl.w	r3, r2, r3
20004894:	0f1a      	lsrs	r2, r3, #28
20004896:	683b      	ldr	r3, [r7, #0]
20004898:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
2000489a:	2300      	movs	r3, #0
}
2000489c:	4618      	mov	r0, r3
2000489e:	371c      	adds	r7, #28
200048a0:	46bd      	mov	sp, r7
200048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200048a6:	4770      	bx	lr
200048a8:	40013c00 	.word	0x40013c00
200048ac:	40013800 	.word	0x40013800

200048b0 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
200048b0:	b480      	push	{r7}
200048b2:	b087      	sub	sp, #28
200048b4:	af00      	add	r7, sp, #0
200048b6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
200048b8:	687b      	ldr	r3, [r7, #4]
200048ba:	2b00      	cmp	r3, #0
200048bc:	d101      	bne.n	200048c2 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
200048be:	2301      	movs	r3, #1
200048c0:	e04c      	b.n	2000495c <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
200048c2:	687b      	ldr	r3, [r7, #4]
200048c4:	681b      	ldr	r3, [r3, #0]
200048c6:	f003 031f 	and.w	r3, r3, #31
200048ca:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200048cc:	2201      	movs	r2, #1
200048ce:	697b      	ldr	r3, [r7, #20]
200048d0:	fa02 f303 	lsl.w	r3, r2, r3
200048d4:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
200048d6:	4b24      	ldr	r3, [pc, #144]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
200048d8:	681a      	ldr	r2, [r3, #0]
200048da:	693b      	ldr	r3, [r7, #16]
200048dc:	43db      	mvns	r3, r3
200048de:	4922      	ldr	r1, [pc, #136]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
200048e0:	4013      	ands	r3, r2
200048e2:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
200048e4:	4b20      	ldr	r3, [pc, #128]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
200048e6:	685a      	ldr	r2, [r3, #4]
200048e8:	693b      	ldr	r3, [r7, #16]
200048ea:	43db      	mvns	r3, r3
200048ec:	491e      	ldr	r1, [pc, #120]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
200048ee:	4013      	ands	r3, r2
200048f0:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
200048f2:	687b      	ldr	r3, [r7, #4]
200048f4:	681b      	ldr	r3, [r3, #0]
200048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200048fa:	2b00      	cmp	r3, #0
200048fc:	d02d      	beq.n	2000495a <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
200048fe:	4b1a      	ldr	r3, [pc, #104]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
20004900:	689a      	ldr	r2, [r3, #8]
20004902:	693b      	ldr	r3, [r7, #16]
20004904:	43db      	mvns	r3, r3
20004906:	4918      	ldr	r1, [pc, #96]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
20004908:	4013      	ands	r3, r2
2000490a:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
2000490c:	4b16      	ldr	r3, [pc, #88]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
2000490e:	68da      	ldr	r2, [r3, #12]
20004910:	693b      	ldr	r3, [r7, #16]
20004912:	43db      	mvns	r3, r3
20004914:	4914      	ldr	r1, [pc, #80]	; (20004968 <HAL_EXTI_ClearConfigLine+0xb8>)
20004916:	4013      	ands	r3, r2
20004918:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
2000491a:	687b      	ldr	r3, [r7, #4]
2000491c:	681b      	ldr	r3, [r3, #0]
2000491e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004922:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20004926:	d118      	bne.n	2000495a <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004928:	4a10      	ldr	r2, [pc, #64]	; (2000496c <HAL_EXTI_ClearConfigLine+0xbc>)
2000492a:	697b      	ldr	r3, [r7, #20]
2000492c:	089b      	lsrs	r3, r3, #2
2000492e:	3302      	adds	r3, #2
20004930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004934:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004936:	697b      	ldr	r3, [r7, #20]
20004938:	f003 0303 	and.w	r3, r3, #3
2000493c:	009b      	lsls	r3, r3, #2
2000493e:	220f      	movs	r2, #15
20004940:	fa02 f303 	lsl.w	r3, r2, r3
20004944:	43db      	mvns	r3, r3
20004946:	68fa      	ldr	r2, [r7, #12]
20004948:	4013      	ands	r3, r2
2000494a:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
2000494c:	4907      	ldr	r1, [pc, #28]	; (2000496c <HAL_EXTI_ClearConfigLine+0xbc>)
2000494e:	697b      	ldr	r3, [r7, #20]
20004950:	089b      	lsrs	r3, r3, #2
20004952:	3302      	adds	r3, #2
20004954:	68fa      	ldr	r2, [r7, #12]
20004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
2000495a:	2300      	movs	r3, #0
}
2000495c:	4618      	mov	r0, r3
2000495e:	371c      	adds	r7, #28
20004960:	46bd      	mov	sp, r7
20004962:	f85d 7b04 	ldr.w	r7, [sp], #4
20004966:	4770      	bx	lr
20004968:	40013c00 	.word	0x40013c00
2000496c:	40013800 	.word	0x40013800

20004970 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
20004970:	b480      	push	{r7}
20004972:	b087      	sub	sp, #28
20004974:	af00      	add	r7, sp, #0
20004976:	60f8      	str	r0, [r7, #12]
20004978:	460b      	mov	r3, r1
2000497a:	607a      	str	r2, [r7, #4]
2000497c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2000497e:	2300      	movs	r3, #0
20004980:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
20004982:	7afb      	ldrb	r3, [r7, #11]
20004984:	2b00      	cmp	r3, #0
20004986:	d103      	bne.n	20004990 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20004988:	68fb      	ldr	r3, [r7, #12]
2000498a:	687a      	ldr	r2, [r7, #4]
2000498c:	605a      	str	r2, [r3, #4]
      break;
2000498e:	e002      	b.n	20004996 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
20004990:	2301      	movs	r3, #1
20004992:	75fb      	strb	r3, [r7, #23]
      break;
20004994:	bf00      	nop
  }

  return status;
20004996:	7dfb      	ldrb	r3, [r7, #23]
}
20004998:	4618      	mov	r0, r3
2000499a:	371c      	adds	r7, #28
2000499c:	46bd      	mov	sp, r7
2000499e:	f85d 7b04 	ldr.w	r7, [sp], #4
200049a2:	4770      	bx	lr

200049a4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
200049a4:	b480      	push	{r7}
200049a6:	b083      	sub	sp, #12
200049a8:	af00      	add	r7, sp, #0
200049aa:	6078      	str	r0, [r7, #4]
200049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
200049ae:	687b      	ldr	r3, [r7, #4]
200049b0:	2b00      	cmp	r3, #0
200049b2:	d101      	bne.n	200049b8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
200049b4:	2301      	movs	r3, #1
200049b6:	e003      	b.n	200049c0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
200049b8:	687b      	ldr	r3, [r7, #4]
200049ba:	683a      	ldr	r2, [r7, #0]
200049bc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
200049be:	2300      	movs	r3, #0
  }
}
200049c0:	4618      	mov	r0, r3
200049c2:	370c      	adds	r7, #12
200049c4:	46bd      	mov	sp, r7
200049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200049ca:	4770      	bx	lr

200049cc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
200049cc:	b580      	push	{r7, lr}
200049ce:	b084      	sub	sp, #16
200049d0:	af00      	add	r7, sp, #0
200049d2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
200049d4:	687b      	ldr	r3, [r7, #4]
200049d6:	681b      	ldr	r3, [r3, #0]
200049d8:	f003 031f 	and.w	r3, r3, #31
200049dc:	2201      	movs	r2, #1
200049de:	fa02 f303 	lsl.w	r3, r2, r3
200049e2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
200049e4:	4b0a      	ldr	r3, [pc, #40]	; (20004a10 <HAL_EXTI_IRQHandler+0x44>)
200049e6:	695b      	ldr	r3, [r3, #20]
200049e8:	68fa      	ldr	r2, [r7, #12]
200049ea:	4013      	ands	r3, r2
200049ec:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
200049ee:	68bb      	ldr	r3, [r7, #8]
200049f0:	2b00      	cmp	r3, #0
200049f2:	d009      	beq.n	20004a08 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
200049f4:	4a06      	ldr	r2, [pc, #24]	; (20004a10 <HAL_EXTI_IRQHandler+0x44>)
200049f6:	68fb      	ldr	r3, [r7, #12]
200049f8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
200049fa:	687b      	ldr	r3, [r7, #4]
200049fc:	685b      	ldr	r3, [r3, #4]
200049fe:	2b00      	cmp	r3, #0
20004a00:	d002      	beq.n	20004a08 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
20004a02:	687b      	ldr	r3, [r7, #4]
20004a04:	685b      	ldr	r3, [r3, #4]
20004a06:	4798      	blx	r3
    }
  }
}
20004a08:	bf00      	nop
20004a0a:	3710      	adds	r7, #16
20004a0c:	46bd      	mov	sp, r7
20004a0e:	bd80      	pop	{r7, pc}
20004a10:	40013c00 	.word	0x40013c00

20004a14 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004a14:	b480      	push	{r7}
20004a16:	b087      	sub	sp, #28
20004a18:	af00      	add	r7, sp, #0
20004a1a:	6078      	str	r0, [r7, #4]
20004a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20004a1e:	687b      	ldr	r3, [r7, #4]
20004a20:	681b      	ldr	r3, [r3, #0]
20004a22:	f003 031f 	and.w	r3, r3, #31
20004a26:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004a28:	2201      	movs	r2, #1
20004a2a:	697b      	ldr	r3, [r7, #20]
20004a2c:	fa02 f303 	lsl.w	r3, r2, r3
20004a30:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
20004a32:	4b07      	ldr	r3, [pc, #28]	; (20004a50 <HAL_EXTI_GetPending+0x3c>)
20004a34:	695a      	ldr	r2, [r3, #20]
20004a36:	693b      	ldr	r3, [r7, #16]
20004a38:	401a      	ands	r2, r3
20004a3a:	697b      	ldr	r3, [r7, #20]
20004a3c:	fa22 f303 	lsr.w	r3, r2, r3
20004a40:	60fb      	str	r3, [r7, #12]
  return regval;
20004a42:	68fb      	ldr	r3, [r7, #12]
}
20004a44:	4618      	mov	r0, r3
20004a46:	371c      	adds	r7, #28
20004a48:	46bd      	mov	sp, r7
20004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a4e:	4770      	bx	lr
20004a50:	40013c00 	.word	0x40013c00

20004a54 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004a54:	b480      	push	{r7}
20004a56:	b085      	sub	sp, #20
20004a58:	af00      	add	r7, sp, #0
20004a5a:	6078      	str	r0, [r7, #4]
20004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004a5e:	687b      	ldr	r3, [r7, #4]
20004a60:	681b      	ldr	r3, [r3, #0]
20004a62:	f003 031f 	and.w	r3, r3, #31
20004a66:	2201      	movs	r2, #1
20004a68:	fa02 f303 	lsl.w	r3, r2, r3
20004a6c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
20004a6e:	4a04      	ldr	r2, [pc, #16]	; (20004a80 <HAL_EXTI_ClearPending+0x2c>)
20004a70:	68fb      	ldr	r3, [r7, #12]
20004a72:	6153      	str	r3, [r2, #20]
}
20004a74:	bf00      	nop
20004a76:	3714      	adds	r7, #20
20004a78:	46bd      	mov	sp, r7
20004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a7e:	4770      	bx	lr
20004a80:	40013c00 	.word	0x40013c00

20004a84 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20004a84:	b480      	push	{r7}
20004a86:	b085      	sub	sp, #20
20004a88:	af00      	add	r7, sp, #0
20004a8a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004a8c:	687b      	ldr	r3, [r7, #4]
20004a8e:	681b      	ldr	r3, [r3, #0]
20004a90:	f003 031f 	and.w	r3, r3, #31
20004a94:	2201      	movs	r2, #1
20004a96:	fa02 f303 	lsl.w	r3, r2, r3
20004a9a:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
20004a9c:	4a04      	ldr	r2, [pc, #16]	; (20004ab0 <HAL_EXTI_GenerateSWI+0x2c>)
20004a9e:	68fb      	ldr	r3, [r7, #12]
20004aa0:	6113      	str	r3, [r2, #16]
}
20004aa2:	bf00      	nop
20004aa4:	3714      	adds	r7, #20
20004aa6:	46bd      	mov	sp, r7
20004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004aac:	4770      	bx	lr
20004aae:	bf00      	nop
20004ab0:	40013c00 	.word	0x40013c00

20004ab4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004ab4:	b580      	push	{r7, lr}
20004ab6:	b086      	sub	sp, #24
20004ab8:	af00      	add	r7, sp, #0
20004aba:	60f8      	str	r0, [r7, #12]
20004abc:	60b9      	str	r1, [r7, #8]
20004abe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20004ac2:	2301      	movs	r3, #1
20004ac4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004ac6:	4b23      	ldr	r3, [pc, #140]	; (20004b54 <HAL_FLASH_Program+0xa0>)
20004ac8:	7e1b      	ldrb	r3, [r3, #24]
20004aca:	2b01      	cmp	r3, #1
20004acc:	d101      	bne.n	20004ad2 <HAL_FLASH_Program+0x1e>
20004ace:	2302      	movs	r3, #2
20004ad0:	e03b      	b.n	20004b4a <HAL_FLASH_Program+0x96>
20004ad2:	4b20      	ldr	r3, [pc, #128]	; (20004b54 <HAL_FLASH_Program+0xa0>)
20004ad4:	2201      	movs	r2, #1
20004ad6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004ad8:	f24c 3050 	movw	r0, #50000	; 0xc350
20004adc:	f000 f9be 	bl	20004e5c <FLASH_WaitForLastOperation>
20004ae0:	4603      	mov	r3, r0
20004ae2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20004ae4:	7dfb      	ldrb	r3, [r7, #23]
20004ae6:	2b00      	cmp	r3, #0
20004ae8:	d12b      	bne.n	20004b42 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004aea:	68fb      	ldr	r3, [r7, #12]
20004aec:	2b00      	cmp	r3, #0
20004aee:	d105      	bne.n	20004afc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004af0:	783b      	ldrb	r3, [r7, #0]
20004af2:	4619      	mov	r1, r3
20004af4:	68b8      	ldr	r0, [r7, #8]
20004af6:	f000 fa69 	bl	20004fcc <FLASH_Program_Byte>
20004afa:	e016      	b.n	20004b2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004afc:	68fb      	ldr	r3, [r7, #12]
20004afe:	2b01      	cmp	r3, #1
20004b00:	d105      	bne.n	20004b0e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004b02:	883b      	ldrh	r3, [r7, #0]
20004b04:	4619      	mov	r1, r3
20004b06:	68b8      	ldr	r0, [r7, #8]
20004b08:	f000 fa3c 	bl	20004f84 <FLASH_Program_HalfWord>
20004b0c:	e00d      	b.n	20004b2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004b0e:	68fb      	ldr	r3, [r7, #12]
20004b10:	2b02      	cmp	r3, #2
20004b12:	d105      	bne.n	20004b20 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004b14:	683b      	ldr	r3, [r7, #0]
20004b16:	4619      	mov	r1, r3
20004b18:	68b8      	ldr	r0, [r7, #8]
20004b1a:	f000 fa11 	bl	20004f40 <FLASH_Program_Word>
20004b1e:	e004      	b.n	20004b2a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20004b20:	e9d7 2300 	ldrd	r2, r3, [r7]
20004b24:	68b8      	ldr	r0, [r7, #8]
20004b26:	f000 f9d9 	bl	20004edc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004b2a:	f24c 3050 	movw	r0, #50000	; 0xc350
20004b2e:	f000 f995 	bl	20004e5c <FLASH_WaitForLastOperation>
20004b32:	4603      	mov	r3, r0
20004b34:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20004b36:	4b08      	ldr	r3, [pc, #32]	; (20004b58 <HAL_FLASH_Program+0xa4>)
20004b38:	691b      	ldr	r3, [r3, #16]
20004b3a:	4a07      	ldr	r2, [pc, #28]	; (20004b58 <HAL_FLASH_Program+0xa4>)
20004b3c:	f023 0301 	bic.w	r3, r3, #1
20004b40:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004b42:	4b04      	ldr	r3, [pc, #16]	; (20004b54 <HAL_FLASH_Program+0xa0>)
20004b44:	2200      	movs	r2, #0
20004b46:	761a      	strb	r2, [r3, #24]
  
  return status;
20004b48:	7dfb      	ldrb	r3, [r7, #23]
}
20004b4a:	4618      	mov	r0, r3
20004b4c:	3718      	adds	r7, #24
20004b4e:	46bd      	mov	sp, r7
20004b50:	bd80      	pop	{r7, pc}
20004b52:	bf00      	nop
20004b54:	200004cc 	.word	0x200004cc
20004b58:	40023c00 	.word	0x40023c00

20004b5c <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004b5c:	b580      	push	{r7, lr}
20004b5e:	b086      	sub	sp, #24
20004b60:	af00      	add	r7, sp, #0
20004b62:	60f8      	str	r0, [r7, #12]
20004b64:	60b9      	str	r1, [r7, #8]
20004b66:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
20004b6a:	2300      	movs	r3, #0
20004b6c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004b6e:	4b20      	ldr	r3, [pc, #128]	; (20004bf0 <HAL_FLASH_Program_IT+0x94>)
20004b70:	7e1b      	ldrb	r3, [r3, #24]
20004b72:	2b01      	cmp	r3, #1
20004b74:	d101      	bne.n	20004b7a <HAL_FLASH_Program_IT+0x1e>
20004b76:	2302      	movs	r3, #2
20004b78:	e035      	b.n	20004be6 <HAL_FLASH_Program_IT+0x8a>
20004b7a:	4b1d      	ldr	r3, [pc, #116]	; (20004bf0 <HAL_FLASH_Program_IT+0x94>)
20004b7c:	2201      	movs	r2, #1
20004b7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20004b80:	4b1c      	ldr	r3, [pc, #112]	; (20004bf4 <HAL_FLASH_Program_IT+0x98>)
20004b82:	691b      	ldr	r3, [r3, #16]
20004b84:	4a1b      	ldr	r2, [pc, #108]	; (20004bf4 <HAL_FLASH_Program_IT+0x98>)
20004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004b8a:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004b8c:	4b19      	ldr	r3, [pc, #100]	; (20004bf4 <HAL_FLASH_Program_IT+0x98>)
20004b8e:	691b      	ldr	r3, [r3, #16]
20004b90:	4a18      	ldr	r2, [pc, #96]	; (20004bf4 <HAL_FLASH_Program_IT+0x98>)
20004b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004b96:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
20004b98:	4b15      	ldr	r3, [pc, #84]	; (20004bf0 <HAL_FLASH_Program_IT+0x94>)
20004b9a:	2203      	movs	r2, #3
20004b9c:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
20004b9e:	4a14      	ldr	r2, [pc, #80]	; (20004bf0 <HAL_FLASH_Program_IT+0x94>)
20004ba0:	68bb      	ldr	r3, [r7, #8]
20004ba2:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004ba4:	68fb      	ldr	r3, [r7, #12]
20004ba6:	2b00      	cmp	r3, #0
20004ba8:	d105      	bne.n	20004bb6 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004baa:	783b      	ldrb	r3, [r7, #0]
20004bac:	4619      	mov	r1, r3
20004bae:	68b8      	ldr	r0, [r7, #8]
20004bb0:	f000 fa0c 	bl	20004fcc <FLASH_Program_Byte>
20004bb4:	e016      	b.n	20004be4 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004bb6:	68fb      	ldr	r3, [r7, #12]
20004bb8:	2b01      	cmp	r3, #1
20004bba:	d105      	bne.n	20004bc8 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004bbc:	883b      	ldrh	r3, [r7, #0]
20004bbe:	4619      	mov	r1, r3
20004bc0:	68b8      	ldr	r0, [r7, #8]
20004bc2:	f000 f9df 	bl	20004f84 <FLASH_Program_HalfWord>
20004bc6:	e00d      	b.n	20004be4 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004bc8:	68fb      	ldr	r3, [r7, #12]
20004bca:	2b02      	cmp	r3, #2
20004bcc:	d105      	bne.n	20004bda <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
20004bce:	683b      	ldr	r3, [r7, #0]
20004bd0:	4619      	mov	r1, r3
20004bd2:	68b8      	ldr	r0, [r7, #8]
20004bd4:	f000 f9b4 	bl	20004f40 <FLASH_Program_Word>
20004bd8:	e004      	b.n	20004be4 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
20004bda:	e9d7 2300 	ldrd	r2, r3, [r7]
20004bde:	68b8      	ldr	r0, [r7, #8]
20004be0:	f000 f97c 	bl	20004edc <FLASH_Program_DoubleWord>
  }

  return status;
20004be4:	7dfb      	ldrb	r3, [r7, #23]
}
20004be6:	4618      	mov	r0, r3
20004be8:	3718      	adds	r7, #24
20004bea:	46bd      	mov	sp, r7
20004bec:	bd80      	pop	{r7, pc}
20004bee:	bf00      	nop
20004bf0:	200004cc 	.word	0x200004cc
20004bf4:	40023c00 	.word	0x40023c00

20004bf8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20004bf8:	b580      	push	{r7, lr}
20004bfa:	b082      	sub	sp, #8
20004bfc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
20004bfe:	2300      	movs	r3, #0
20004c00:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004c02:	4b4b      	ldr	r3, [pc, #300]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004c04:	68db      	ldr	r3, [r3, #12]
20004c06:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004c0a:	2b00      	cmp	r3, #0
20004c0c:	d020      	beq.n	20004c50 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004c0e:	4b49      	ldr	r3, [pc, #292]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c10:	781b      	ldrb	r3, [r3, #0]
20004c12:	b2db      	uxtb	r3, r3
20004c14:	2b01      	cmp	r3, #1
20004c16:	d107      	bne.n	20004c28 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
20004c18:	4b46      	ldr	r3, [pc, #280]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c1a:	68db      	ldr	r3, [r3, #12]
20004c1c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
20004c1e:	4b45      	ldr	r3, [pc, #276]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20004c24:	60da      	str	r2, [r3, #12]
20004c26:	e00b      	b.n	20004c40 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20004c28:	4b42      	ldr	r3, [pc, #264]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c2a:	781b      	ldrb	r3, [r3, #0]
20004c2c:	b2db      	uxtb	r3, r3
20004c2e:	2b02      	cmp	r3, #2
20004c30:	d103      	bne.n	20004c3a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
20004c32:	4b40      	ldr	r3, [pc, #256]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c34:	691b      	ldr	r3, [r3, #16]
20004c36:	607b      	str	r3, [r7, #4]
20004c38:	e002      	b.n	20004c40 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
20004c3a:	4b3e      	ldr	r3, [pc, #248]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c3c:	695b      	ldr	r3, [r3, #20]
20004c3e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
20004c40:	f000 f9e6 	bl	20005010 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
20004c44:	6878      	ldr	r0, [r7, #4]
20004c46:	f000 f881 	bl	20004d4c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004c4a:	4b3a      	ldr	r3, [pc, #232]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c4c:	2200      	movs	r2, #0
20004c4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004c50:	4b37      	ldr	r3, [pc, #220]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004c52:	68db      	ldr	r3, [r3, #12]
20004c54:	f003 0301 	and.w	r3, r3, #1
20004c58:	2b00      	cmp	r3, #0
20004c5a:	d04a      	beq.n	20004cf2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004c5c:	4b34      	ldr	r3, [pc, #208]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004c5e:	2201      	movs	r2, #1
20004c60:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004c62:	4b34      	ldr	r3, [pc, #208]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c64:	781b      	ldrb	r3, [r3, #0]
20004c66:	b2db      	uxtb	r3, r3
20004c68:	2b01      	cmp	r3, #1
20004c6a:	d12d      	bne.n	20004cc8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
20004c6c:	4b31      	ldr	r3, [pc, #196]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c6e:	685b      	ldr	r3, [r3, #4]
20004c70:	3b01      	subs	r3, #1
20004c72:	4a30      	ldr	r2, [pc, #192]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c74:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
20004c76:	4b2f      	ldr	r3, [pc, #188]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c78:	685b      	ldr	r3, [r3, #4]
20004c7a:	2b00      	cmp	r3, #0
20004c7c:	d015      	beq.n	20004caa <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
20004c7e:	4b2d      	ldr	r3, [pc, #180]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c80:	68db      	ldr	r3, [r3, #12]
20004c82:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004c84:	6878      	ldr	r0, [r7, #4]
20004c86:	f000 f857 	bl	20004d38 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
20004c8a:	4b2a      	ldr	r3, [pc, #168]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c8c:	68db      	ldr	r3, [r3, #12]
20004c8e:	3301      	adds	r3, #1
20004c90:	4a28      	ldr	r2, [pc, #160]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c92:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
20004c94:	4b27      	ldr	r3, [pc, #156]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c96:	68db      	ldr	r3, [r3, #12]
20004c98:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
20004c9a:	4b26      	ldr	r3, [pc, #152]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004c9c:	7a1b      	ldrb	r3, [r3, #8]
20004c9e:	b2db      	uxtb	r3, r3
20004ca0:	4619      	mov	r1, r3
20004ca2:	6878      	ldr	r0, [r7, #4]
20004ca4:	f000 fbfe 	bl	200054a4 <FLASH_Erase_Sector>
20004ca8:	e023      	b.n	20004cf2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
20004caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20004cae:	607b      	str	r3, [r7, #4]
20004cb0:	4a20      	ldr	r2, [pc, #128]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cb2:	687b      	ldr	r3, [r7, #4]
20004cb4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004cb6:	4b1f      	ldr	r3, [pc, #124]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cb8:	2200      	movs	r2, #0
20004cba:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20004cbc:	f000 fd72 	bl	200057a4 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004cc0:	6878      	ldr	r0, [r7, #4]
20004cc2:	f000 f839 	bl	20004d38 <HAL_FLASH_EndOfOperationCallback>
20004cc6:	e014      	b.n	20004cf2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
20004cc8:	4b1a      	ldr	r3, [pc, #104]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cca:	781b      	ldrb	r3, [r3, #0]
20004ccc:	b2db      	uxtb	r3, r3
20004cce:	2b02      	cmp	r3, #2
20004cd0:	d107      	bne.n	20004ce2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20004cd2:	f000 fd67 	bl	200057a4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
20004cd6:	4b17      	ldr	r3, [pc, #92]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cd8:	691b      	ldr	r3, [r3, #16]
20004cda:	4618      	mov	r0, r3
20004cdc:	f000 f82c 	bl	20004d38 <HAL_FLASH_EndOfOperationCallback>
20004ce0:	e004      	b.n	20004cec <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20004ce2:	4b14      	ldr	r3, [pc, #80]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004ce4:	695b      	ldr	r3, [r3, #20]
20004ce6:	4618      	mov	r0, r3
20004ce8:	f000 f826 	bl	20004d38 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004cec:	4b11      	ldr	r3, [pc, #68]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cee:	2200      	movs	r2, #0
20004cf0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20004cf2:	4b10      	ldr	r3, [pc, #64]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004cf4:	781b      	ldrb	r3, [r3, #0]
20004cf6:	b2db      	uxtb	r3, r3
20004cf8:	2b00      	cmp	r3, #0
20004cfa:	d114      	bne.n	20004d26 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
20004cfc:	4b0c      	ldr	r3, [pc, #48]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004cfe:	691b      	ldr	r3, [r3, #16]
20004d00:	4a0b      	ldr	r2, [pc, #44]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
20004d06:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20004d08:	4b09      	ldr	r3, [pc, #36]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004d0a:	691b      	ldr	r3, [r3, #16]
20004d0c:	4a08      	ldr	r2, [pc, #32]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20004d12:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20004d14:	4b06      	ldr	r3, [pc, #24]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004d16:	691b      	ldr	r3, [r3, #16]
20004d18:	4a05      	ldr	r2, [pc, #20]	; (20004d30 <HAL_FLASH_IRQHandler+0x138>)
20004d1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
20004d1e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20004d20:	4b04      	ldr	r3, [pc, #16]	; (20004d34 <HAL_FLASH_IRQHandler+0x13c>)
20004d22:	2200      	movs	r2, #0
20004d24:	761a      	strb	r2, [r3, #24]
  }
}
20004d26:	bf00      	nop
20004d28:	3708      	adds	r7, #8
20004d2a:	46bd      	mov	sp, r7
20004d2c:	bd80      	pop	{r7, pc}
20004d2e:	bf00      	nop
20004d30:	40023c00 	.word	0x40023c00
20004d34:	200004cc 	.word	0x200004cc

20004d38 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20004d38:	b480      	push	{r7}
20004d3a:	b083      	sub	sp, #12
20004d3c:	af00      	add	r7, sp, #0
20004d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
20004d40:	bf00      	nop
20004d42:	370c      	adds	r7, #12
20004d44:	46bd      	mov	sp, r7
20004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d4a:	4770      	bx	lr

20004d4c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20004d4c:	b480      	push	{r7}
20004d4e:	b083      	sub	sp, #12
20004d50:	af00      	add	r7, sp, #0
20004d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
20004d54:	bf00      	nop
20004d56:	370c      	adds	r7, #12
20004d58:	46bd      	mov	sp, r7
20004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d5e:	4770      	bx	lr

20004d60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20004d60:	b480      	push	{r7}
20004d62:	b083      	sub	sp, #12
20004d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004d66:	2300      	movs	r3, #0
20004d68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004d6a:	4b0b      	ldr	r3, [pc, #44]	; (20004d98 <HAL_FLASH_Unlock+0x38>)
20004d6c:	691b      	ldr	r3, [r3, #16]
20004d6e:	2b00      	cmp	r3, #0
20004d70:	da0b      	bge.n	20004d8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20004d72:	4b09      	ldr	r3, [pc, #36]	; (20004d98 <HAL_FLASH_Unlock+0x38>)
20004d74:	4a09      	ldr	r2, [pc, #36]	; (20004d9c <HAL_FLASH_Unlock+0x3c>)
20004d76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004d78:	4b07      	ldr	r3, [pc, #28]	; (20004d98 <HAL_FLASH_Unlock+0x38>)
20004d7a:	4a09      	ldr	r2, [pc, #36]	; (20004da0 <HAL_FLASH_Unlock+0x40>)
20004d7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004d7e:	4b06      	ldr	r3, [pc, #24]	; (20004d98 <HAL_FLASH_Unlock+0x38>)
20004d80:	691b      	ldr	r3, [r3, #16]
20004d82:	2b00      	cmp	r3, #0
20004d84:	da01      	bge.n	20004d8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004d86:	2301      	movs	r3, #1
20004d88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004d8a:	79fb      	ldrb	r3, [r7, #7]
}
20004d8c:	4618      	mov	r0, r3
20004d8e:	370c      	adds	r7, #12
20004d90:	46bd      	mov	sp, r7
20004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d96:	4770      	bx	lr
20004d98:	40023c00 	.word	0x40023c00
20004d9c:	45670123 	.word	0x45670123
20004da0:	cdef89ab 	.word	0xcdef89ab

20004da4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20004da4:	b480      	push	{r7}
20004da6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20004da8:	4b05      	ldr	r3, [pc, #20]	; (20004dc0 <HAL_FLASH_Lock+0x1c>)
20004daa:	691b      	ldr	r3, [r3, #16]
20004dac:	4a04      	ldr	r2, [pc, #16]	; (20004dc0 <HAL_FLASH_Lock+0x1c>)
20004dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20004db2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20004db4:	2300      	movs	r3, #0
}
20004db6:	4618      	mov	r0, r3
20004db8:	46bd      	mov	sp, r7
20004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dbe:	4770      	bx	lr
20004dc0:	40023c00 	.word	0x40023c00

20004dc4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
20004dc4:	b480      	push	{r7}
20004dc6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
20004dc8:	4b09      	ldr	r3, [pc, #36]	; (20004df0 <HAL_FLASH_OB_Unlock+0x2c>)
20004dca:	695b      	ldr	r3, [r3, #20]
20004dcc:	f003 0301 	and.w	r3, r3, #1
20004dd0:	2b00      	cmp	r3, #0
20004dd2:	d007      	beq.n	20004de4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
20004dd4:	4b06      	ldr	r3, [pc, #24]	; (20004df0 <HAL_FLASH_OB_Unlock+0x2c>)
20004dd6:	4a07      	ldr	r2, [pc, #28]	; (20004df4 <HAL_FLASH_OB_Unlock+0x30>)
20004dd8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
20004dda:	4b05      	ldr	r3, [pc, #20]	; (20004df0 <HAL_FLASH_OB_Unlock+0x2c>)
20004ddc:	4a06      	ldr	r2, [pc, #24]	; (20004df8 <HAL_FLASH_OB_Unlock+0x34>)
20004dde:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
20004de0:	2300      	movs	r3, #0
20004de2:	e000      	b.n	20004de6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
20004de4:	2301      	movs	r3, #1
}
20004de6:	4618      	mov	r0, r3
20004de8:	46bd      	mov	sp, r7
20004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dee:	4770      	bx	lr
20004df0:	40023c00 	.word	0x40023c00
20004df4:	08192a3b 	.word	0x08192a3b
20004df8:	4c5d6e7f 	.word	0x4c5d6e7f

20004dfc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20004dfc:	b480      	push	{r7}
20004dfe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20004e00:	4b05      	ldr	r3, [pc, #20]	; (20004e18 <HAL_FLASH_OB_Lock+0x1c>)
20004e02:	695b      	ldr	r3, [r3, #20]
20004e04:	4a04      	ldr	r2, [pc, #16]	; (20004e18 <HAL_FLASH_OB_Lock+0x1c>)
20004e06:	f043 0301 	orr.w	r3, r3, #1
20004e0a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
20004e0c:	2300      	movs	r3, #0
}
20004e0e:	4618      	mov	r0, r3
20004e10:	46bd      	mov	sp, r7
20004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e16:	4770      	bx	lr
20004e18:	40023c00 	.word	0x40023c00

20004e1c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20004e1c:	b580      	push	{r7, lr}
20004e1e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
20004e20:	4b07      	ldr	r3, [pc, #28]	; (20004e40 <HAL_FLASH_OB_Launch+0x24>)
20004e22:	781b      	ldrb	r3, [r3, #0]
20004e24:	b2db      	uxtb	r3, r3
20004e26:	4a06      	ldr	r2, [pc, #24]	; (20004e40 <HAL_FLASH_OB_Launch+0x24>)
20004e28:	f043 0302 	orr.w	r3, r3, #2
20004e2c:	b2db      	uxtb	r3, r3
20004e2e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
20004e30:	f24c 3050 	movw	r0, #50000	; 0xc350
20004e34:	f000 f812 	bl	20004e5c <FLASH_WaitForLastOperation>
20004e38:	4603      	mov	r3, r0
}
20004e3a:	4618      	mov	r0, r3
20004e3c:	bd80      	pop	{r7, pc}
20004e3e:	bf00      	nop
20004e40:	40023c14 	.word	0x40023c14

20004e44 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
20004e44:	b480      	push	{r7}
20004e46:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20004e48:	4b03      	ldr	r3, [pc, #12]	; (20004e58 <HAL_FLASH_GetError+0x14>)
20004e4a:	69db      	ldr	r3, [r3, #28]
}  
20004e4c:	4618      	mov	r0, r3
20004e4e:	46bd      	mov	sp, r7
20004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e54:	4770      	bx	lr
20004e56:	bf00      	nop
20004e58:	200004cc 	.word	0x200004cc

20004e5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20004e5c:	b580      	push	{r7, lr}
20004e5e:	b084      	sub	sp, #16
20004e60:	af00      	add	r7, sp, #0
20004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20004e64:	2300      	movs	r3, #0
20004e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004e68:	4b1a      	ldr	r3, [pc, #104]	; (20004ed4 <FLASH_WaitForLastOperation+0x78>)
20004e6a:	2200      	movs	r2, #0
20004e6c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004e6e:	f7fb fd4e 	bl	2000090e <HAL_GetTick>
20004e72:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004e74:	e010      	b.n	20004e98 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20004e76:	687b      	ldr	r3, [r7, #4]
20004e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20004e7c:	d00c      	beq.n	20004e98 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20004e7e:	687b      	ldr	r3, [r7, #4]
20004e80:	2b00      	cmp	r3, #0
20004e82:	d007      	beq.n	20004e94 <FLASH_WaitForLastOperation+0x38>
20004e84:	f7fb fd43 	bl	2000090e <HAL_GetTick>
20004e88:	4602      	mov	r2, r0
20004e8a:	68fb      	ldr	r3, [r7, #12]
20004e8c:	1ad3      	subs	r3, r2, r3
20004e8e:	687a      	ldr	r2, [r7, #4]
20004e90:	429a      	cmp	r2, r3
20004e92:	d201      	bcs.n	20004e98 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004e94:	2303      	movs	r3, #3
20004e96:	e019      	b.n	20004ecc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004e98:	4b0f      	ldr	r3, [pc, #60]	; (20004ed8 <FLASH_WaitForLastOperation+0x7c>)
20004e9a:	68db      	ldr	r3, [r3, #12]
20004e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004ea0:	2b00      	cmp	r3, #0
20004ea2:	d1e8      	bne.n	20004e76 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004ea4:	4b0c      	ldr	r3, [pc, #48]	; (20004ed8 <FLASH_WaitForLastOperation+0x7c>)
20004ea6:	68db      	ldr	r3, [r3, #12]
20004ea8:	f003 0301 	and.w	r3, r3, #1
20004eac:	2b00      	cmp	r3, #0
20004eae:	d002      	beq.n	20004eb6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004eb0:	4b09      	ldr	r3, [pc, #36]	; (20004ed8 <FLASH_WaitForLastOperation+0x7c>)
20004eb2:	2201      	movs	r2, #1
20004eb4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004eb6:	4b08      	ldr	r3, [pc, #32]	; (20004ed8 <FLASH_WaitForLastOperation+0x7c>)
20004eb8:	68db      	ldr	r3, [r3, #12]
20004eba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004ebe:	2b00      	cmp	r3, #0
20004ec0:	d003      	beq.n	20004eca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004ec2:	f000 f8a5 	bl	20005010 <FLASH_SetErrorCode>
    return HAL_ERROR;
20004ec6:	2301      	movs	r3, #1
20004ec8:	e000      	b.n	20004ecc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004eca:	2300      	movs	r3, #0
  
}  
20004ecc:	4618      	mov	r0, r3
20004ece:	3710      	adds	r7, #16
20004ed0:	46bd      	mov	sp, r7
20004ed2:	bd80      	pop	{r7, pc}
20004ed4:	200004cc 	.word	0x200004cc
20004ed8:	40023c00 	.word	0x40023c00

20004edc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004edc:	b480      	push	{r7}
20004ede:	b085      	sub	sp, #20
20004ee0:	af00      	add	r7, sp, #0
20004ee2:	60f8      	str	r0, [r7, #12]
20004ee4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004ee8:	4b14      	ldr	r3, [pc, #80]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004eea:	691b      	ldr	r3, [r3, #16]
20004eec:	4a13      	ldr	r2, [pc, #76]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20004ef4:	4b11      	ldr	r3, [pc, #68]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004ef6:	691b      	ldr	r3, [r3, #16]
20004ef8:	4a10      	ldr	r2, [pc, #64]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004efa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20004efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004f00:	4b0e      	ldr	r3, [pc, #56]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004f02:	691b      	ldr	r3, [r3, #16]
20004f04:	4a0d      	ldr	r2, [pc, #52]	; (20004f3c <FLASH_Program_DoubleWord+0x60>)
20004f06:	f043 0301 	orr.w	r3, r3, #1
20004f0a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20004f0c:	68fb      	ldr	r3, [r7, #12]
20004f0e:	683a      	ldr	r2, [r7, #0]
20004f10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
20004f12:	f3bf 8f6f 	isb	sy
}
20004f16:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20004f18:	e9d7 0100 	ldrd	r0, r1, [r7]
20004f1c:	f04f 0200 	mov.w	r2, #0
20004f20:	f04f 0300 	mov.w	r3, #0
20004f24:	000a      	movs	r2, r1
20004f26:	2300      	movs	r3, #0
20004f28:	68f9      	ldr	r1, [r7, #12]
20004f2a:	3104      	adds	r1, #4
20004f2c:	4613      	mov	r3, r2
20004f2e:	600b      	str	r3, [r1, #0]
}
20004f30:	bf00      	nop
20004f32:	3714      	adds	r7, #20
20004f34:	46bd      	mov	sp, r7
20004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f3a:	4770      	bx	lr
20004f3c:	40023c00 	.word	0x40023c00

20004f40 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20004f40:	b480      	push	{r7}
20004f42:	b083      	sub	sp, #12
20004f44:	af00      	add	r7, sp, #0
20004f46:	6078      	str	r0, [r7, #4]
20004f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004f4a:	4b0d      	ldr	r3, [pc, #52]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f4c:	691b      	ldr	r3, [r3, #16]
20004f4e:	4a0c      	ldr	r2, [pc, #48]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004f54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20004f56:	4b0a      	ldr	r3, [pc, #40]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f58:	691b      	ldr	r3, [r3, #16]
20004f5a:	4a09      	ldr	r2, [pc, #36]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20004f60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004f62:	4b07      	ldr	r3, [pc, #28]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f64:	691b      	ldr	r3, [r3, #16]
20004f66:	4a06      	ldr	r2, [pc, #24]	; (20004f80 <FLASH_Program_Word+0x40>)
20004f68:	f043 0301 	orr.w	r3, r3, #1
20004f6c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20004f6e:	687b      	ldr	r3, [r7, #4]
20004f70:	683a      	ldr	r2, [r7, #0]
20004f72:	601a      	str	r2, [r3, #0]
}
20004f74:	bf00      	nop
20004f76:	370c      	adds	r7, #12
20004f78:	46bd      	mov	sp, r7
20004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f7e:	4770      	bx	lr
20004f80:	40023c00 	.word	0x40023c00

20004f84 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20004f84:	b480      	push	{r7}
20004f86:	b083      	sub	sp, #12
20004f88:	af00      	add	r7, sp, #0
20004f8a:	6078      	str	r0, [r7, #4]
20004f8c:	460b      	mov	r3, r1
20004f8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004f90:	4b0d      	ldr	r3, [pc, #52]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004f92:	691b      	ldr	r3, [r3, #16]
20004f94:	4a0c      	ldr	r2, [pc, #48]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20004f9c:	4b0a      	ldr	r3, [pc, #40]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004f9e:	691b      	ldr	r3, [r3, #16]
20004fa0:	4a09      	ldr	r2, [pc, #36]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20004fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004fa8:	4b07      	ldr	r3, [pc, #28]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004faa:	691b      	ldr	r3, [r3, #16]
20004fac:	4a06      	ldr	r2, [pc, #24]	; (20004fc8 <FLASH_Program_HalfWord+0x44>)
20004fae:	f043 0301 	orr.w	r3, r3, #1
20004fb2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20004fb4:	687b      	ldr	r3, [r7, #4]
20004fb6:	887a      	ldrh	r2, [r7, #2]
20004fb8:	801a      	strh	r2, [r3, #0]
}
20004fba:	bf00      	nop
20004fbc:	370c      	adds	r7, #12
20004fbe:	46bd      	mov	sp, r7
20004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fc4:	4770      	bx	lr
20004fc6:	bf00      	nop
20004fc8:	40023c00 	.word	0x40023c00

20004fcc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20004fcc:	b480      	push	{r7}
20004fce:	b083      	sub	sp, #12
20004fd0:	af00      	add	r7, sp, #0
20004fd2:	6078      	str	r0, [r7, #4]
20004fd4:	460b      	mov	r3, r1
20004fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004fd8:	4b0c      	ldr	r3, [pc, #48]	; (2000500c <FLASH_Program_Byte+0x40>)
20004fda:	691b      	ldr	r3, [r3, #16]
20004fdc:	4a0b      	ldr	r2, [pc, #44]	; (2000500c <FLASH_Program_Byte+0x40>)
20004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20004fe4:	4b09      	ldr	r3, [pc, #36]	; (2000500c <FLASH_Program_Byte+0x40>)
20004fe6:	4a09      	ldr	r2, [pc, #36]	; (2000500c <FLASH_Program_Byte+0x40>)
20004fe8:	691b      	ldr	r3, [r3, #16]
20004fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004fec:	4b07      	ldr	r3, [pc, #28]	; (2000500c <FLASH_Program_Byte+0x40>)
20004fee:	691b      	ldr	r3, [r3, #16]
20004ff0:	4a06      	ldr	r2, [pc, #24]	; (2000500c <FLASH_Program_Byte+0x40>)
20004ff2:	f043 0301 	orr.w	r3, r3, #1
20004ff6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20004ff8:	687b      	ldr	r3, [r7, #4]
20004ffa:	78fa      	ldrb	r2, [r7, #3]
20004ffc:	701a      	strb	r2, [r3, #0]
}
20004ffe:	bf00      	nop
20005000:	370c      	adds	r7, #12
20005002:	46bd      	mov	sp, r7
20005004:	f85d 7b04 	ldr.w	r7, [sp], #4
20005008:	4770      	bx	lr
2000500a:	bf00      	nop
2000500c:	40023c00 	.word	0x40023c00

20005010 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20005010:	b480      	push	{r7}
20005012:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20005014:	4b2f      	ldr	r3, [pc, #188]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
20005016:	68db      	ldr	r3, [r3, #12]
20005018:	f003 0310 	and.w	r3, r3, #16
2000501c:	2b00      	cmp	r3, #0
2000501e:	d008      	beq.n	20005032 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20005020:	4b2d      	ldr	r3, [pc, #180]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
20005022:	69db      	ldr	r3, [r3, #28]
20005024:	f043 0310 	orr.w	r3, r3, #16
20005028:	4a2b      	ldr	r2, [pc, #172]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
2000502a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
2000502c:	4b29      	ldr	r3, [pc, #164]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
2000502e:	2210      	movs	r2, #16
20005030:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20005032:	4b28      	ldr	r3, [pc, #160]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
20005034:	68db      	ldr	r3, [r3, #12]
20005036:	f003 0320 	and.w	r3, r3, #32
2000503a:	2b00      	cmp	r3, #0
2000503c:	d008      	beq.n	20005050 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
2000503e:	4b26      	ldr	r3, [pc, #152]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
20005040:	69db      	ldr	r3, [r3, #28]
20005042:	f043 0308 	orr.w	r3, r3, #8
20005046:	4a24      	ldr	r2, [pc, #144]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
20005048:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
2000504a:	4b22      	ldr	r3, [pc, #136]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
2000504c:	2220      	movs	r2, #32
2000504e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20005050:	4b20      	ldr	r3, [pc, #128]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
20005052:	68db      	ldr	r3, [r3, #12]
20005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005058:	2b00      	cmp	r3, #0
2000505a:	d008      	beq.n	2000506e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
2000505c:	4b1e      	ldr	r3, [pc, #120]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
2000505e:	69db      	ldr	r3, [r3, #28]
20005060:	f043 0304 	orr.w	r3, r3, #4
20005064:	4a1c      	ldr	r2, [pc, #112]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
20005066:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20005068:	4b1a      	ldr	r3, [pc, #104]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
2000506a:	2240      	movs	r2, #64	; 0x40
2000506c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
2000506e:	4b19      	ldr	r3, [pc, #100]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
20005070:	68db      	ldr	r3, [r3, #12]
20005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
20005076:	2b00      	cmp	r3, #0
20005078:	d008      	beq.n	2000508c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
2000507a:	4b17      	ldr	r3, [pc, #92]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
2000507c:	69db      	ldr	r3, [r3, #28]
2000507e:	f043 0302 	orr.w	r3, r3, #2
20005082:	4a15      	ldr	r2, [pc, #84]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
20005084:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20005086:	4b13      	ldr	r3, [pc, #76]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
20005088:	2280      	movs	r2, #128	; 0x80
2000508a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
2000508c:	4b11      	ldr	r3, [pc, #68]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
2000508e:	68db      	ldr	r3, [r3, #12]
20005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
20005094:	2b00      	cmp	r3, #0
20005096:	d009      	beq.n	200050ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20005098:	4b0f      	ldr	r3, [pc, #60]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
2000509a:	69db      	ldr	r3, [r3, #28]
2000509c:	f043 0301 	orr.w	r3, r3, #1
200050a0:	4a0d      	ldr	r2, [pc, #52]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
200050a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
200050a4:	4b0b      	ldr	r3, [pc, #44]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
200050a6:	f44f 7280 	mov.w	r2, #256	; 0x100
200050aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
200050ac:	4b09      	ldr	r3, [pc, #36]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
200050ae:	68db      	ldr	r3, [r3, #12]
200050b0:	f003 0302 	and.w	r3, r3, #2
200050b4:	2b00      	cmp	r3, #0
200050b6:	d008      	beq.n	200050ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
200050b8:	4b07      	ldr	r3, [pc, #28]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
200050ba:	69db      	ldr	r3, [r3, #28]
200050bc:	f043 0320 	orr.w	r3, r3, #32
200050c0:	4a05      	ldr	r2, [pc, #20]	; (200050d8 <FLASH_SetErrorCode+0xc8>)
200050c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
200050c4:	4b03      	ldr	r3, [pc, #12]	; (200050d4 <FLASH_SetErrorCode+0xc4>)
200050c6:	2202      	movs	r2, #2
200050c8:	60da      	str	r2, [r3, #12]
  }
}
200050ca:	bf00      	nop
200050cc:	46bd      	mov	sp, r7
200050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200050d2:	4770      	bx	lr
200050d4:	40023c00 	.word	0x40023c00
200050d8:	200004cc 	.word	0x200004cc

200050dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
200050dc:	b580      	push	{r7, lr}
200050de:	b084      	sub	sp, #16
200050e0:	af00      	add	r7, sp, #0
200050e2:	6078      	str	r0, [r7, #4]
200050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
200050e6:	2301      	movs	r3, #1
200050e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
200050ea:	2300      	movs	r3, #0
200050ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200050ee:	4b31      	ldr	r3, [pc, #196]	; (200051b4 <HAL_FLASHEx_Erase+0xd8>)
200050f0:	7e1b      	ldrb	r3, [r3, #24]
200050f2:	2b01      	cmp	r3, #1
200050f4:	d101      	bne.n	200050fa <HAL_FLASHEx_Erase+0x1e>
200050f6:	2302      	movs	r3, #2
200050f8:	e058      	b.n	200051ac <HAL_FLASHEx_Erase+0xd0>
200050fa:	4b2e      	ldr	r3, [pc, #184]	; (200051b4 <HAL_FLASHEx_Erase+0xd8>)
200050fc:	2201      	movs	r2, #1
200050fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005100:	f24c 3050 	movw	r0, #50000	; 0xc350
20005104:	f7ff feaa 	bl	20004e5c <FLASH_WaitForLastOperation>
20005108:	4603      	mov	r3, r0
2000510a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
2000510c:	7bfb      	ldrb	r3, [r7, #15]
2000510e:	2b00      	cmp	r3, #0
20005110:	d148      	bne.n	200051a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20005112:	683b      	ldr	r3, [r7, #0]
20005114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20005118:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000511a:	687b      	ldr	r3, [r7, #4]
2000511c:	681b      	ldr	r3, [r3, #0]
2000511e:	2b01      	cmp	r3, #1
20005120:	d115      	bne.n	2000514e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20005122:	687b      	ldr	r3, [r7, #4]
20005124:	691b      	ldr	r3, [r3, #16]
20005126:	b2da      	uxtb	r2, r3
20005128:	687b      	ldr	r3, [r7, #4]
2000512a:	685b      	ldr	r3, [r3, #4]
2000512c:	4619      	mov	r1, r3
2000512e:	4610      	mov	r0, r2
20005130:	f000 f994 	bl	2000545c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005134:	f24c 3050 	movw	r0, #50000	; 0xc350
20005138:	f7ff fe90 	bl	20004e5c <FLASH_WaitForLastOperation>
2000513c:	4603      	mov	r3, r0
2000513e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20005140:	4b1d      	ldr	r3, [pc, #116]	; (200051b8 <HAL_FLASHEx_Erase+0xdc>)
20005142:	691b      	ldr	r3, [r3, #16]
20005144:	4a1c      	ldr	r2, [pc, #112]	; (200051b8 <HAL_FLASHEx_Erase+0xdc>)
20005146:	f023 0304 	bic.w	r3, r3, #4
2000514a:	6113      	str	r3, [r2, #16]
2000514c:	e028      	b.n	200051a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
2000514e:	687b      	ldr	r3, [r7, #4]
20005150:	689b      	ldr	r3, [r3, #8]
20005152:	60bb      	str	r3, [r7, #8]
20005154:	e01c      	b.n	20005190 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20005156:	687b      	ldr	r3, [r7, #4]
20005158:	691b      	ldr	r3, [r3, #16]
2000515a:	b2db      	uxtb	r3, r3
2000515c:	4619      	mov	r1, r3
2000515e:	68b8      	ldr	r0, [r7, #8]
20005160:	f000 f9a0 	bl	200054a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005164:	f24c 3050 	movw	r0, #50000	; 0xc350
20005168:	f7ff fe78 	bl	20004e5c <FLASH_WaitForLastOperation>
2000516c:	4603      	mov	r3, r0
2000516e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20005170:	4b11      	ldr	r3, [pc, #68]	; (200051b8 <HAL_FLASHEx_Erase+0xdc>)
20005172:	691b      	ldr	r3, [r3, #16]
20005174:	4a10      	ldr	r2, [pc, #64]	; (200051b8 <HAL_FLASHEx_Erase+0xdc>)
20005176:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
2000517a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
2000517c:	7bfb      	ldrb	r3, [r7, #15]
2000517e:	2b00      	cmp	r3, #0
20005180:	d003      	beq.n	2000518a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
20005182:	683b      	ldr	r3, [r7, #0]
20005184:	68ba      	ldr	r2, [r7, #8]
20005186:	601a      	str	r2, [r3, #0]
          break;
20005188:	e00a      	b.n	200051a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
2000518a:	68bb      	ldr	r3, [r7, #8]
2000518c:	3301      	adds	r3, #1
2000518e:	60bb      	str	r3, [r7, #8]
20005190:	687b      	ldr	r3, [r7, #4]
20005192:	68da      	ldr	r2, [r3, #12]
20005194:	687b      	ldr	r3, [r7, #4]
20005196:	689b      	ldr	r3, [r3, #8]
20005198:	4413      	add	r3, r2
2000519a:	68ba      	ldr	r2, [r7, #8]
2000519c:	429a      	cmp	r2, r3
2000519e:	d3da      	bcc.n	20005156 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
200051a0:	f000 fb00 	bl	200057a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
200051a4:	4b03      	ldr	r3, [pc, #12]	; (200051b4 <HAL_FLASHEx_Erase+0xd8>)
200051a6:	2200      	movs	r2, #0
200051a8:	761a      	strb	r2, [r3, #24]

  return status;
200051aa:	7bfb      	ldrb	r3, [r7, #15]
}
200051ac:	4618      	mov	r0, r3
200051ae:	3710      	adds	r7, #16
200051b0:	46bd      	mov	sp, r7
200051b2:	bd80      	pop	{r7, pc}
200051b4:	200004cc 	.word	0x200004cc
200051b8:	40023c00 	.word	0x40023c00

200051bc <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
200051bc:	b580      	push	{r7, lr}
200051be:	b084      	sub	sp, #16
200051c0:	af00      	add	r7, sp, #0
200051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200051c4:	2300      	movs	r3, #0
200051c6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200051c8:	4b25      	ldr	r3, [pc, #148]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
200051ca:	7e1b      	ldrb	r3, [r3, #24]
200051cc:	2b01      	cmp	r3, #1
200051ce:	d101      	bne.n	200051d4 <HAL_FLASHEx_Erase_IT+0x18>
200051d0:	2302      	movs	r3, #2
200051d2:	e040      	b.n	20005256 <HAL_FLASHEx_Erase_IT+0x9a>
200051d4:	4b22      	ldr	r3, [pc, #136]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
200051d6:	2201      	movs	r2, #1
200051d8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
200051da:	4b22      	ldr	r3, [pc, #136]	; (20005264 <HAL_FLASHEx_Erase_IT+0xa8>)
200051dc:	691b      	ldr	r3, [r3, #16]
200051de:	4a21      	ldr	r2, [pc, #132]	; (20005264 <HAL_FLASHEx_Erase_IT+0xa8>)
200051e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
200051e4:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
200051e6:	4b1f      	ldr	r3, [pc, #124]	; (20005264 <HAL_FLASHEx_Erase_IT+0xa8>)
200051e8:	691b      	ldr	r3, [r3, #16]
200051ea:	4a1e      	ldr	r2, [pc, #120]	; (20005264 <HAL_FLASHEx_Erase_IT+0xa8>)
200051ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
200051f0:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
200051f2:	4b1c      	ldr	r3, [pc, #112]	; (20005264 <HAL_FLASHEx_Erase_IT+0xa8>)
200051f4:	22f3      	movs	r2, #243	; 0xf3
200051f6:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
200051f8:	687b      	ldr	r3, [r7, #4]
200051fa:	681b      	ldr	r3, [r3, #0]
200051fc:	2b01      	cmp	r3, #1
200051fe:	d110      	bne.n	20005222 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
20005200:	4b17      	ldr	r3, [pc, #92]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
20005202:	2202      	movs	r2, #2
20005204:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
20005206:	687b      	ldr	r3, [r7, #4]
20005208:	685b      	ldr	r3, [r3, #4]
2000520a:	4a15      	ldr	r2, [pc, #84]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
2000520c:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
2000520e:	687b      	ldr	r3, [r7, #4]
20005210:	691b      	ldr	r3, [r3, #16]
20005212:	b2da      	uxtb	r2, r3
20005214:	687b      	ldr	r3, [r7, #4]
20005216:	685b      	ldr	r3, [r3, #4]
20005218:	4619      	mov	r1, r3
2000521a:	4610      	mov	r0, r2
2000521c:	f000 f91e 	bl	2000545c <FLASH_MassErase>
20005220:	e018      	b.n	20005254 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20005222:	4b0f      	ldr	r3, [pc, #60]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
20005224:	2201      	movs	r2, #1
20005226:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
20005228:	687b      	ldr	r3, [r7, #4]
2000522a:	68db      	ldr	r3, [r3, #12]
2000522c:	4a0c      	ldr	r2, [pc, #48]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
2000522e:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
20005230:	687b      	ldr	r3, [r7, #4]
20005232:	689b      	ldr	r3, [r3, #8]
20005234:	4a0a      	ldr	r2, [pc, #40]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
20005236:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
20005238:	687b      	ldr	r3, [r7, #4]
2000523a:	691b      	ldr	r3, [r3, #16]
2000523c:	b2da      	uxtb	r2, r3
2000523e:	4b08      	ldr	r3, [pc, #32]	; (20005260 <HAL_FLASHEx_Erase_IT+0xa4>)
20005240:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
20005242:	687b      	ldr	r3, [r7, #4]
20005244:	689a      	ldr	r2, [r3, #8]
20005246:	687b      	ldr	r3, [r7, #4]
20005248:	691b      	ldr	r3, [r3, #16]
2000524a:	b2db      	uxtb	r3, r3
2000524c:	4619      	mov	r1, r3
2000524e:	4610      	mov	r0, r2
20005250:	f000 f928 	bl	200054a4 <FLASH_Erase_Sector>
  }

  return status;
20005254:	7bfb      	ldrb	r3, [r7, #15]
}
20005256:	4618      	mov	r0, r3
20005258:	3710      	adds	r7, #16
2000525a:	46bd      	mov	sp, r7
2000525c:	bd80      	pop	{r7, pc}
2000525e:	bf00      	nop
20005260:	200004cc 	.word	0x200004cc
20005264:	40023c00 	.word	0x40023c00

20005268 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005268:	b580      	push	{r7, lr}
2000526a:	b084      	sub	sp, #16
2000526c:	af00      	add	r7, sp, #0
2000526e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
20005270:	2301      	movs	r3, #1
20005272:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20005274:	4b32      	ldr	r3, [pc, #200]	; (20005340 <HAL_FLASHEx_OBProgram+0xd8>)
20005276:	7e1b      	ldrb	r3, [r3, #24]
20005278:	2b01      	cmp	r3, #1
2000527a:	d101      	bne.n	20005280 <HAL_FLASHEx_OBProgram+0x18>
2000527c:	2302      	movs	r3, #2
2000527e:	e05b      	b.n	20005338 <HAL_FLASHEx_OBProgram+0xd0>
20005280:	4b2f      	ldr	r3, [pc, #188]	; (20005340 <HAL_FLASHEx_OBProgram+0xd8>)
20005282:	2201      	movs	r2, #1
20005284:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20005286:	687b      	ldr	r3, [r7, #4]
20005288:	681b      	ldr	r3, [r3, #0]
2000528a:	f003 0301 	and.w	r3, r3, #1
2000528e:	2b00      	cmp	r3, #0
20005290:	d018      	beq.n	200052c4 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20005292:	687b      	ldr	r3, [r7, #4]
20005294:	685b      	ldr	r3, [r3, #4]
20005296:	2b01      	cmp	r3, #1
20005298:	d10a      	bne.n	200052b0 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
2000529a:	687b      	ldr	r3, [r7, #4]
2000529c:	689a      	ldr	r2, [r3, #8]
2000529e:	687b      	ldr	r3, [r7, #4]
200052a0:	68db      	ldr	r3, [r3, #12]
200052a2:	4619      	mov	r1, r3
200052a4:	4610      	mov	r0, r2
200052a6:	f000 f945 	bl	20005534 <FLASH_OB_EnableWRP>
200052aa:	4603      	mov	r3, r0
200052ac:	73fb      	strb	r3, [r7, #15]
200052ae:	e009      	b.n	200052c4 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
200052b0:	687b      	ldr	r3, [r7, #4]
200052b2:	689a      	ldr	r2, [r3, #8]
200052b4:	687b      	ldr	r3, [r7, #4]
200052b6:	68db      	ldr	r3, [r3, #12]
200052b8:	4619      	mov	r1, r3
200052ba:	4610      	mov	r0, r2
200052bc:	f000 f95c 	bl	20005578 <FLASH_OB_DisableWRP>
200052c0:	4603      	mov	r3, r0
200052c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
200052c4:	687b      	ldr	r3, [r7, #4]
200052c6:	681b      	ldr	r3, [r3, #0]
200052c8:	f003 0302 	and.w	r3, r3, #2
200052cc:	2b00      	cmp	r3, #0
200052ce:	d007      	beq.n	200052e0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
200052d0:	687b      	ldr	r3, [r7, #4]
200052d2:	691b      	ldr	r3, [r3, #16]
200052d4:	b2db      	uxtb	r3, r3
200052d6:	4618      	mov	r0, r3
200052d8:	f000 f9b0 	bl	2000563c <FLASH_OB_RDP_LevelConfig>
200052dc:	4603      	mov	r3, r0
200052de:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
200052e0:	687b      	ldr	r3, [r7, #4]
200052e2:	681b      	ldr	r3, [r3, #0]
200052e4:	f003 0304 	and.w	r3, r3, #4
200052e8:	2b00      	cmp	r3, #0
200052ea:	d013      	beq.n	20005314 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
200052ec:	687b      	ldr	r3, [r7, #4]
200052ee:	7e1b      	ldrb	r3, [r3, #24]
200052f0:	f003 0320 	and.w	r3, r3, #32
200052f4:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
200052f6:	687b      	ldr	r3, [r7, #4]
200052f8:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
200052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
200052fe:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
20005300:	687b      	ldr	r3, [r7, #4]
20005302:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
20005304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
20005308:	b2db      	uxtb	r3, r3
2000530a:	461a      	mov	r2, r3
2000530c:	f000 f9b0 	bl	20005670 <FLASH_OB_UserConfig>
20005310:	4603      	mov	r3, r0
20005312:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20005314:	687b      	ldr	r3, [r7, #4]
20005316:	681b      	ldr	r3, [r3, #0]
20005318:	f003 0308 	and.w	r3, r3, #8
2000531c:	2b00      	cmp	r3, #0
2000531e:	d007      	beq.n	20005330 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20005320:	687b      	ldr	r3, [r7, #4]
20005322:	695b      	ldr	r3, [r3, #20]
20005324:	b2db      	uxtb	r3, r3
20005326:	4618      	mov	r0, r3
20005328:	f000 f9d2 	bl	200056d0 <FLASH_OB_BOR_LevelConfig>
2000532c:	4603      	mov	r3, r0
2000532e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20005330:	4b03      	ldr	r3, [pc, #12]	; (20005340 <HAL_FLASHEx_OBProgram+0xd8>)
20005332:	2200      	movs	r2, #0
20005334:	761a      	strb	r2, [r3, #24]

  return status;
20005336:	7bfb      	ldrb	r3, [r7, #15]
}
20005338:	4618      	mov	r0, r3
2000533a:	3710      	adds	r7, #16
2000533c:	46bd      	mov	sp, r7
2000533e:	bd80      	pop	{r7, pc}
20005340:	200004cc 	.word	0x200004cc

20005344 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005344:	b580      	push	{r7, lr}
20005346:	b082      	sub	sp, #8
20005348:	af00      	add	r7, sp, #0
2000534a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
2000534c:	687b      	ldr	r3, [r7, #4]
2000534e:	220f      	movs	r2, #15
20005350:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
20005352:	f000 f9eb 	bl	2000572c <FLASH_OB_GetWRP>
20005356:	4603      	mov	r3, r0
20005358:	461a      	mov	r2, r3
2000535a:	687b      	ldr	r3, [r7, #4]
2000535c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
2000535e:	f000 f9f1 	bl	20005744 <FLASH_OB_GetRDP>
20005362:	4603      	mov	r3, r0
20005364:	461a      	mov	r2, r3
20005366:	687b      	ldr	r3, [r7, #4]
20005368:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
2000536a:	f000 f9cf 	bl	2000570c <FLASH_OB_GetUser>
2000536e:	4603      	mov	r3, r0
20005370:	461a      	mov	r2, r3
20005372:	687b      	ldr	r3, [r7, #4]
20005374:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
20005376:	f000 fa05 	bl	20005784 <FLASH_OB_GetBOR>
2000537a:	4603      	mov	r3, r0
2000537c:	461a      	mov	r2, r3
2000537e:	687b      	ldr	r3, [r7, #4]
20005380:	615a      	str	r2, [r3, #20]
}
20005382:	bf00      	nop
20005384:	3708      	adds	r7, #8
20005386:	46bd      	mov	sp, r7
20005388:	bd80      	pop	{r7, pc}

2000538a <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
2000538a:	b580      	push	{r7, lr}
2000538c:	b084      	sub	sp, #16
2000538e:	af00      	add	r7, sp, #0
20005390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
20005392:	2301      	movs	r3, #1
20005394:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
20005396:	687b      	ldr	r3, [r7, #4]
20005398:	681b      	ldr	r3, [r3, #0]
2000539a:	f003 0301 	and.w	r3, r3, #1
2000539e:	2b00      	cmp	r3, #0
200053a0:	d012      	beq.n	200053c8 <HAL_FLASHEx_AdvOBProgram+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
200053a2:	687b      	ldr	r3, [r7, #4]
200053a4:	685b      	ldr	r3, [r3, #4]
200053a6:	2b01      	cmp	r3, #1
200053a8:	d107      	bne.n	200053ba <HAL_FLASHEx_AdvOBProgram+0x30>
    {
      /*Enable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
200053aa:	687b      	ldr	r3, [r7, #4]
200053ac:	891b      	ldrh	r3, [r3, #8]
200053ae:	4618      	mov	r0, r3
200053b0:	f000 f902 	bl	200055b8 <FLASH_OB_EnablePCROP>
200053b4:	4603      	mov	r3, r0
200053b6:	73fb      	strb	r3, [r7, #15]
200053b8:	e006      	b.n	200053c8 <HAL_FLASHEx_AdvOBProgram+0x3e>
    {
      /*Disable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
200053ba:	687b      	ldr	r3, [r7, #4]
200053bc:	891b      	ldrh	r3, [r3, #8]
200053be:	4618      	mov	r0, r3
200053c0:	f000 f91a 	bl	200055f8 <FLASH_OB_DisablePCROP>
200053c4:	4603      	mov	r3, r0
200053c6:	73fb      	strb	r3, [r7, #15]
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
200053c8:	7bfb      	ldrb	r3, [r7, #15]
}
200053ca:	4618      	mov	r0, r3
200053cc:	3710      	adds	r7, #16
200053ce:	46bd      	mov	sp, r7
200053d0:	bd80      	pop	{r7, pc}
	...

200053d4 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
200053d4:	b480      	push	{r7}
200053d6:	b083      	sub	sp, #12
200053d8:	af00      	add	r7, sp, #0
200053da:	6078      	str	r0, [r7, #4]
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
200053dc:	4b05      	ldr	r3, [pc, #20]	; (200053f4 <HAL_FLASHEx_AdvOBGetConfig+0x20>)
200053de:	881b      	ldrh	r3, [r3, #0]
200053e0:	b29a      	uxth	r2, r3
200053e2:	687b      	ldr	r3, [r7, #4]
200053e4:	811a      	strh	r2, [r3, #8]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
200053e6:	bf00      	nop
200053e8:	370c      	adds	r7, #12
200053ea:	46bd      	mov	sp, r7
200053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200053f0:	4770      	bx	lr
200053f2:	bf00      	nop
200053f4:	40023c16 	.word	0x40023c16

200053f8 <HAL_FLASHEx_OB_SelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
{
200053f8:	b480      	push	{r7}
200053fa:	b083      	sub	sp, #12
200053fc:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
200053fe:	23ff      	movs	r3, #255	; 0xff
20005400:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
20005402:	4b09      	ldr	r3, [pc, #36]	; (20005428 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
20005404:	781b      	ldrb	r3, [r3, #0]
20005406:	b2db      	uxtb	r3, r3
20005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000540c:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp);
2000540e:	4a06      	ldr	r2, [pc, #24]	; (20005428 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
20005410:	79fb      	ldrb	r3, [r7, #7]
20005412:	f063 037f 	orn	r3, r3, #127	; 0x7f
20005416:	b2db      	uxtb	r3, r3
20005418:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
2000541a:	2300      	movs	r3, #0
}
2000541c:	4618      	mov	r0, r3
2000541e:	370c      	adds	r7, #12
20005420:	46bd      	mov	sp, r7
20005422:	f85d 7b04 	ldr.w	r7, [sp], #4
20005426:	4770      	bx	lr
20005428:	40023c17 	.word	0x40023c17

2000542c <HAL_FLASHEx_OB_DeSelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
{
2000542c:	b480      	push	{r7}
2000542e:	b083      	sub	sp, #12
20005430:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
20005432:	23ff      	movs	r3, #255	; 0xff
20005434:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
20005436:	4b08      	ldr	r3, [pc, #32]	; (20005458 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
20005438:	781b      	ldrb	r3, [r3, #0]
2000543a:	b2db      	uxtb	r3, r3
2000543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20005440:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);
20005442:	4a05      	ldr	r2, [pc, #20]	; (20005458 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
20005444:	79fb      	ldrb	r3, [r7, #7]
20005446:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
20005448:	2300      	movs	r3, #0
}
2000544a:	4618      	mov	r0, r3
2000544c:	370c      	adds	r7, #12
2000544e:	46bd      	mov	sp, r7
20005450:	f85d 7b04 	ldr.w	r7, [sp], #4
20005454:	4770      	bx	lr
20005456:	bf00      	nop
20005458:	40023c17 	.word	0x40023c17

2000545c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
2000545c:	b480      	push	{r7}
2000545e:	b083      	sub	sp, #12
20005460:	af00      	add	r7, sp, #0
20005462:	4603      	mov	r3, r0
20005464:	6039      	str	r1, [r7, #0]
20005466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005468:	4b0d      	ldr	r3, [pc, #52]	; (200054a0 <FLASH_MassErase+0x44>)
2000546a:	691b      	ldr	r3, [r3, #16]
2000546c:	4a0c      	ldr	r2, [pc, #48]	; (200054a0 <FLASH_MassErase+0x44>)
2000546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20005474:	4b0a      	ldr	r3, [pc, #40]	; (200054a0 <FLASH_MassErase+0x44>)
20005476:	691b      	ldr	r3, [r3, #16]
20005478:	4a09      	ldr	r2, [pc, #36]	; (200054a0 <FLASH_MassErase+0x44>)
2000547a:	f043 0304 	orr.w	r3, r3, #4
2000547e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
20005480:	4b07      	ldr	r3, [pc, #28]	; (200054a0 <FLASH_MassErase+0x44>)
20005482:	691a      	ldr	r2, [r3, #16]
20005484:	79fb      	ldrb	r3, [r7, #7]
20005486:	021b      	lsls	r3, r3, #8
20005488:	4313      	orrs	r3, r2
2000548a:	4a05      	ldr	r2, [pc, #20]	; (200054a0 <FLASH_MassErase+0x44>)
2000548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005490:	6113      	str	r3, [r2, #16]
}
20005492:	bf00      	nop
20005494:	370c      	adds	r7, #12
20005496:	46bd      	mov	sp, r7
20005498:	f85d 7b04 	ldr.w	r7, [sp], #4
2000549c:	4770      	bx	lr
2000549e:	bf00      	nop
200054a0:	40023c00 	.word	0x40023c00

200054a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
200054a4:	b480      	push	{r7}
200054a6:	b085      	sub	sp, #20
200054a8:	af00      	add	r7, sp, #0
200054aa:	6078      	str	r0, [r7, #4]
200054ac:	460b      	mov	r3, r1
200054ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
200054b0:	2300      	movs	r3, #0
200054b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
200054b4:	78fb      	ldrb	r3, [r7, #3]
200054b6:	2b00      	cmp	r3, #0
200054b8:	d102      	bne.n	200054c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
200054ba:	2300      	movs	r3, #0
200054bc:	60fb      	str	r3, [r7, #12]
200054be:	e010      	b.n	200054e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
200054c0:	78fb      	ldrb	r3, [r7, #3]
200054c2:	2b01      	cmp	r3, #1
200054c4:	d103      	bne.n	200054ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
200054c6:	f44f 7380 	mov.w	r3, #256	; 0x100
200054ca:	60fb      	str	r3, [r7, #12]
200054cc:	e009      	b.n	200054e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
200054ce:	78fb      	ldrb	r3, [r7, #3]
200054d0:	2b02      	cmp	r3, #2
200054d2:	d103      	bne.n	200054dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
200054d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200054d8:	60fb      	str	r3, [r7, #12]
200054da:	e002      	b.n	200054e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
200054dc:	f44f 7340 	mov.w	r3, #768	; 0x300
200054e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200054e2:	4b13      	ldr	r3, [pc, #76]	; (20005530 <FLASH_Erase_Sector+0x8c>)
200054e4:	691b      	ldr	r3, [r3, #16]
200054e6:	4a12      	ldr	r2, [pc, #72]	; (20005530 <FLASH_Erase_Sector+0x8c>)
200054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200054ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
200054ee:	4b10      	ldr	r3, [pc, #64]	; (20005530 <FLASH_Erase_Sector+0x8c>)
200054f0:	691a      	ldr	r2, [r3, #16]
200054f2:	490f      	ldr	r1, [pc, #60]	; (20005530 <FLASH_Erase_Sector+0x8c>)
200054f4:	68fb      	ldr	r3, [r7, #12]
200054f6:	4313      	orrs	r3, r2
200054f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
200054fa:	4b0d      	ldr	r3, [pc, #52]	; (20005530 <FLASH_Erase_Sector+0x8c>)
200054fc:	691b      	ldr	r3, [r3, #16]
200054fe:	4a0c      	ldr	r2, [pc, #48]	; (20005530 <FLASH_Erase_Sector+0x8c>)
20005500:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20005504:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20005506:	4b0a      	ldr	r3, [pc, #40]	; (20005530 <FLASH_Erase_Sector+0x8c>)
20005508:	691a      	ldr	r2, [r3, #16]
2000550a:	687b      	ldr	r3, [r7, #4]
2000550c:	00db      	lsls	r3, r3, #3
2000550e:	4313      	orrs	r3, r2
20005510:	4a07      	ldr	r2, [pc, #28]	; (20005530 <FLASH_Erase_Sector+0x8c>)
20005512:	f043 0302 	orr.w	r3, r3, #2
20005516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
20005518:	4b05      	ldr	r3, [pc, #20]	; (20005530 <FLASH_Erase_Sector+0x8c>)
2000551a:	691b      	ldr	r3, [r3, #16]
2000551c:	4a04      	ldr	r2, [pc, #16]	; (20005530 <FLASH_Erase_Sector+0x8c>)
2000551e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005522:	6113      	str	r3, [r2, #16]
}
20005524:	bf00      	nop
20005526:	3714      	adds	r7, #20
20005528:	46bd      	mov	sp, r7
2000552a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000552e:	4770      	bx	lr
20005530:	40023c00 	.word	0x40023c00

20005534 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005534:	b580      	push	{r7, lr}
20005536:	b084      	sub	sp, #16
20005538:	af00      	add	r7, sp, #0
2000553a:	6078      	str	r0, [r7, #4]
2000553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000553e:	2300      	movs	r3, #0
20005540:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005542:	f24c 3050 	movw	r0, #50000	; 0xc350
20005546:	f7ff fc89 	bl	20004e5c <FLASH_WaitForLastOperation>
2000554a:	4603      	mov	r3, r0
2000554c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
2000554e:	7bfb      	ldrb	r3, [r7, #15]
20005550:	2b00      	cmp	r3, #0
20005552:	d10a      	bne.n	2000556a <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
20005554:	4b07      	ldr	r3, [pc, #28]	; (20005574 <FLASH_OB_EnableWRP+0x40>)
20005556:	881b      	ldrh	r3, [r3, #0]
20005558:	b29a      	uxth	r2, r3
2000555a:	687b      	ldr	r3, [r7, #4]
2000555c:	b29b      	uxth	r3, r3
2000555e:	43db      	mvns	r3, r3
20005560:	b29b      	uxth	r3, r3
20005562:	4904      	ldr	r1, [pc, #16]	; (20005574 <FLASH_OB_EnableWRP+0x40>)
20005564:	4013      	ands	r3, r2
20005566:	b29b      	uxth	r3, r3
20005568:	800b      	strh	r3, [r1, #0]
  }

  return status;
2000556a:	7bfb      	ldrb	r3, [r7, #15]
}
2000556c:	4618      	mov	r0, r3
2000556e:	3710      	adds	r7, #16
20005570:	46bd      	mov	sp, r7
20005572:	bd80      	pop	{r7, pc}
20005574:	40023c16 	.word	0x40023c16

20005578 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005578:	b580      	push	{r7, lr}
2000557a:	b084      	sub	sp, #16
2000557c:	af00      	add	r7, sp, #0
2000557e:	6078      	str	r0, [r7, #4]
20005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20005582:	2300      	movs	r3, #0
20005584:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005586:	f24c 3050 	movw	r0, #50000	; 0xc350
2000558a:	f7ff fc67 	bl	20004e5c <FLASH_WaitForLastOperation>
2000558e:	4603      	mov	r3, r0
20005590:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005592:	7bfb      	ldrb	r3, [r7, #15]
20005594:	2b00      	cmp	r3, #0
20005596:	d108      	bne.n	200055aa <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
20005598:	4b06      	ldr	r3, [pc, #24]	; (200055b4 <FLASH_OB_DisableWRP+0x3c>)
2000559a:	881b      	ldrh	r3, [r3, #0]
2000559c:	b29a      	uxth	r2, r3
2000559e:	687b      	ldr	r3, [r7, #4]
200055a0:	b29b      	uxth	r3, r3
200055a2:	4904      	ldr	r1, [pc, #16]	; (200055b4 <FLASH_OB_DisableWRP+0x3c>)
200055a4:	4313      	orrs	r3, r2
200055a6:	b29b      	uxth	r3, r3
200055a8:	800b      	strh	r3, [r1, #0]
  }

  return status;
200055aa:	7bfb      	ldrb	r3, [r7, #15]
}
200055ac:	4618      	mov	r0, r3
200055ae:	3710      	adds	r7, #16
200055b0:	46bd      	mov	sp, r7
200055b2:	bd80      	pop	{r7, pc}
200055b4:	40023c16 	.word	0x40023c16

200055b8 <FLASH_OB_EnablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
{
200055b8:	b580      	push	{r7, lr}
200055ba:	b084      	sub	sp, #16
200055bc:	af00      	add	r7, sp, #0
200055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200055c0:	2300      	movs	r3, #0
200055c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200055c4:	f24c 3050 	movw	r0, #50000	; 0xc350
200055c8:	f7ff fc48 	bl	20004e5c <FLASH_WaitForLastOperation>
200055cc:	4603      	mov	r3, r0
200055ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200055d0:	7bfb      	ldrb	r3, [r7, #15]
200055d2:	2b00      	cmp	r3, #0
200055d4:	d108      	bne.n	200055e8 <FLASH_OB_EnablePCROP+0x30>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
200055d6:	4b07      	ldr	r3, [pc, #28]	; (200055f4 <FLASH_OB_EnablePCROP+0x3c>)
200055d8:	881b      	ldrh	r3, [r3, #0]
200055da:	b29a      	uxth	r2, r3
200055dc:	687b      	ldr	r3, [r7, #4]
200055de:	b29b      	uxth	r3, r3
200055e0:	4904      	ldr	r1, [pc, #16]	; (200055f4 <FLASH_OB_EnablePCROP+0x3c>)
200055e2:	4313      	orrs	r3, r2
200055e4:	b29b      	uxth	r3, r3
200055e6:	800b      	strh	r3, [r1, #0]
  }

  return status;
200055e8:	7bfb      	ldrb	r3, [r7, #15]
}
200055ea:	4618      	mov	r0, r3
200055ec:	3710      	adds	r7, #16
200055ee:	46bd      	mov	sp, r7
200055f0:	bd80      	pop	{r7, pc}
200055f2:	bf00      	nop
200055f4:	40023c16 	.word	0x40023c16

200055f8 <FLASH_OB_DisablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
{
200055f8:	b580      	push	{r7, lr}
200055fa:	b084      	sub	sp, #16
200055fc:	af00      	add	r7, sp, #0
200055fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20005600:	2300      	movs	r3, #0
20005602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005604:	f24c 3050 	movw	r0, #50000	; 0xc350
20005608:	f7ff fc28 	bl	20004e5c <FLASH_WaitForLastOperation>
2000560c:	4603      	mov	r3, r0
2000560e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005610:	7bfb      	ldrb	r3, [r7, #15]
20005612:	2b00      	cmp	r3, #0
20005614:	d10a      	bne.n	2000562c <FLASH_OB_DisablePCROP+0x34>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~Sector);
20005616:	4b08      	ldr	r3, [pc, #32]	; (20005638 <FLASH_OB_DisablePCROP+0x40>)
20005618:	881b      	ldrh	r3, [r3, #0]
2000561a:	b29a      	uxth	r2, r3
2000561c:	687b      	ldr	r3, [r7, #4]
2000561e:	b29b      	uxth	r3, r3
20005620:	43db      	mvns	r3, r3
20005622:	b29b      	uxth	r3, r3
20005624:	4904      	ldr	r1, [pc, #16]	; (20005638 <FLASH_OB_DisablePCROP+0x40>)
20005626:	4013      	ands	r3, r2
20005628:	b29b      	uxth	r3, r3
2000562a:	800b      	strh	r3, [r1, #0]
  }

  return status;
2000562c:	7bfb      	ldrb	r3, [r7, #15]

}
2000562e:	4618      	mov	r0, r3
20005630:	3710      	adds	r7, #16
20005632:	46bd      	mov	sp, r7
20005634:	bd80      	pop	{r7, pc}
20005636:	bf00      	nop
20005638:	40023c16 	.word	0x40023c16

2000563c <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
2000563c:	b580      	push	{r7, lr}
2000563e:	b084      	sub	sp, #16
20005640:	af00      	add	r7, sp, #0
20005642:	4603      	mov	r3, r0
20005644:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
20005646:	2300      	movs	r3, #0
20005648:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000564a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000564e:	f7ff fc05 	bl	20004e5c <FLASH_WaitForLastOperation>
20005652:	4603      	mov	r3, r0
20005654:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005656:	7bfb      	ldrb	r3, [r7, #15]
20005658:	2b00      	cmp	r3, #0
2000565a:	d102      	bne.n	20005662 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
2000565c:	4a03      	ldr	r2, [pc, #12]	; (2000566c <FLASH_OB_RDP_LevelConfig+0x30>)
2000565e:	79fb      	ldrb	r3, [r7, #7]
20005660:	7013      	strb	r3, [r2, #0]
  }

  return status;
20005662:	7bfb      	ldrb	r3, [r7, #15]
}
20005664:	4618      	mov	r0, r3
20005666:	3710      	adds	r7, #16
20005668:	46bd      	mov	sp, r7
2000566a:	bd80      	pop	{r7, pc}
2000566c:	40023c15 	.word	0x40023c15

20005670 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
20005670:	b580      	push	{r7, lr}
20005672:	b084      	sub	sp, #16
20005674:	af00      	add	r7, sp, #0
20005676:	4603      	mov	r3, r0
20005678:	71fb      	strb	r3, [r7, #7]
2000567a:	460b      	mov	r3, r1
2000567c:	71bb      	strb	r3, [r7, #6]
2000567e:	4613      	mov	r3, r2
20005680:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
20005682:	23ff      	movs	r3, #255	; 0xff
20005684:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
20005686:	2300      	movs	r3, #0
20005688:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000568a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000568e:	f7ff fbe5 	bl	20004e5c <FLASH_WaitForLastOperation>
20005692:	4603      	mov	r3, r0
20005694:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
20005696:	7bbb      	ldrb	r3, [r7, #14]
20005698:	2b00      	cmp	r3, #0
2000569a:	d111      	bne.n	200056c0 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
2000569c:	4b0b      	ldr	r3, [pc, #44]	; (200056cc <FLASH_OB_UserConfig+0x5c>)
2000569e:	781b      	ldrb	r3, [r3, #0]
200056a0:	b2db      	uxtb	r3, r3
200056a2:	f003 031f 	and.w	r3, r3, #31
200056a6:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
200056a8:	79ba      	ldrb	r2, [r7, #6]
200056aa:	7bfb      	ldrb	r3, [r7, #15]
200056ac:	4313      	orrs	r3, r2
200056ae:	b2da      	uxtb	r2, r3
200056b0:	797b      	ldrb	r3, [r7, #5]
200056b2:	4313      	orrs	r3, r2
200056b4:	b2da      	uxtb	r2, r3
200056b6:	4905      	ldr	r1, [pc, #20]	; (200056cc <FLASH_OB_UserConfig+0x5c>)
200056b8:	79fb      	ldrb	r3, [r7, #7]
200056ba:	4313      	orrs	r3, r2
200056bc:	b2db      	uxtb	r3, r3
200056be:	700b      	strb	r3, [r1, #0]
  }

  return status;
200056c0:	7bbb      	ldrb	r3, [r7, #14]
}
200056c2:	4618      	mov	r0, r3
200056c4:	3710      	adds	r7, #16
200056c6:	46bd      	mov	sp, r7
200056c8:	bd80      	pop	{r7, pc}
200056ca:	bf00      	nop
200056cc:	40023c14 	.word	0x40023c14

200056d0 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
200056d0:	b480      	push	{r7}
200056d2:	b083      	sub	sp, #12
200056d4:	af00      	add	r7, sp, #0
200056d6:	4603      	mov	r3, r0
200056d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
200056da:	4b0b      	ldr	r3, [pc, #44]	; (20005708 <FLASH_OB_BOR_LevelConfig+0x38>)
200056dc:	781b      	ldrb	r3, [r3, #0]
200056de:	b2db      	uxtb	r3, r3
200056e0:	4a09      	ldr	r2, [pc, #36]	; (20005708 <FLASH_OB_BOR_LevelConfig+0x38>)
200056e2:	f023 030c 	bic.w	r3, r3, #12
200056e6:	b2db      	uxtb	r3, r3
200056e8:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
200056ea:	4b07      	ldr	r3, [pc, #28]	; (20005708 <FLASH_OB_BOR_LevelConfig+0x38>)
200056ec:	781b      	ldrb	r3, [r3, #0]
200056ee:	b2da      	uxtb	r2, r3
200056f0:	4905      	ldr	r1, [pc, #20]	; (20005708 <FLASH_OB_BOR_LevelConfig+0x38>)
200056f2:	79fb      	ldrb	r3, [r7, #7]
200056f4:	4313      	orrs	r3, r2
200056f6:	b2db      	uxtb	r3, r3
200056f8:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
200056fa:	2300      	movs	r3, #0

}
200056fc:	4618      	mov	r0, r3
200056fe:	370c      	adds	r7, #12
20005700:	46bd      	mov	sp, r7
20005702:	f85d 7b04 	ldr.w	r7, [sp], #4
20005706:	4770      	bx	lr
20005708:	40023c14 	.word	0x40023c14

2000570c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
2000570c:	b480      	push	{r7}
2000570e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
20005710:	4b05      	ldr	r3, [pc, #20]	; (20005728 <FLASH_OB_GetUser+0x1c>)
20005712:	695b      	ldr	r3, [r3, #20]
20005714:	b2db      	uxtb	r3, r3
20005716:	f023 031f 	bic.w	r3, r3, #31
2000571a:	b2db      	uxtb	r3, r3
}
2000571c:	4618      	mov	r0, r3
2000571e:	46bd      	mov	sp, r7
20005720:	f85d 7b04 	ldr.w	r7, [sp], #4
20005724:	4770      	bx	lr
20005726:	bf00      	nop
20005728:	40023c00 	.word	0x40023c00

2000572c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
2000572c:	b480      	push	{r7}
2000572e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
20005730:	4b03      	ldr	r3, [pc, #12]	; (20005740 <FLASH_OB_GetWRP+0x14>)
20005732:	881b      	ldrh	r3, [r3, #0]
20005734:	b29b      	uxth	r3, r3
}
20005736:	4618      	mov	r0, r3
20005738:	46bd      	mov	sp, r7
2000573a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000573e:	4770      	bx	lr
20005740:	40023c16 	.word	0x40023c16

20005744 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
20005744:	b480      	push	{r7}
20005746:	b083      	sub	sp, #12
20005748:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
2000574a:	23aa      	movs	r3, #170	; 0xaa
2000574c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
2000574e:	4b0c      	ldr	r3, [pc, #48]	; (20005780 <FLASH_OB_GetRDP+0x3c>)
20005750:	781b      	ldrb	r3, [r3, #0]
20005752:	b2db      	uxtb	r3, r3
20005754:	2bcc      	cmp	r3, #204	; 0xcc
20005756:	d102      	bne.n	2000575e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
20005758:	23cc      	movs	r3, #204	; 0xcc
2000575a:	71fb      	strb	r3, [r7, #7]
2000575c:	e009      	b.n	20005772 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
2000575e:	4b08      	ldr	r3, [pc, #32]	; (20005780 <FLASH_OB_GetRDP+0x3c>)
20005760:	781b      	ldrb	r3, [r3, #0]
20005762:	b2db      	uxtb	r3, r3
20005764:	2baa      	cmp	r3, #170	; 0xaa
20005766:	d102      	bne.n	2000576e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
20005768:	23aa      	movs	r3, #170	; 0xaa
2000576a:	71fb      	strb	r3, [r7, #7]
2000576c:	e001      	b.n	20005772 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
2000576e:	2355      	movs	r3, #85	; 0x55
20005770:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
20005772:	79fb      	ldrb	r3, [r7, #7]
}
20005774:	4618      	mov	r0, r3
20005776:	370c      	adds	r7, #12
20005778:	46bd      	mov	sp, r7
2000577a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000577e:	4770      	bx	lr
20005780:	40023c15 	.word	0x40023c15

20005784 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
20005784:	b480      	push	{r7}
20005786:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
20005788:	4b05      	ldr	r3, [pc, #20]	; (200057a0 <FLASH_OB_GetBOR+0x1c>)
2000578a:	781b      	ldrb	r3, [r3, #0]
2000578c:	b2db      	uxtb	r3, r3
2000578e:	f003 030c 	and.w	r3, r3, #12
20005792:	b2db      	uxtb	r3, r3
}
20005794:	4618      	mov	r0, r3
20005796:	46bd      	mov	sp, r7
20005798:	f85d 7b04 	ldr.w	r7, [sp], #4
2000579c:	4770      	bx	lr
2000579e:	bf00      	nop
200057a0:	40023c14 	.word	0x40023c14

200057a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
200057a4:	b480      	push	{r7}
200057a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
200057a8:	4b20      	ldr	r3, [pc, #128]	; (2000582c <FLASH_FlushCaches+0x88>)
200057aa:	681b      	ldr	r3, [r3, #0]
200057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
200057b0:	2b00      	cmp	r3, #0
200057b2:	d017      	beq.n	200057e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
200057b4:	4b1d      	ldr	r3, [pc, #116]	; (2000582c <FLASH_FlushCaches+0x88>)
200057b6:	681b      	ldr	r3, [r3, #0]
200057b8:	4a1c      	ldr	r2, [pc, #112]	; (2000582c <FLASH_FlushCaches+0x88>)
200057ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
200057be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
200057c0:	4b1a      	ldr	r3, [pc, #104]	; (2000582c <FLASH_FlushCaches+0x88>)
200057c2:	681b      	ldr	r3, [r3, #0]
200057c4:	4a19      	ldr	r2, [pc, #100]	; (2000582c <FLASH_FlushCaches+0x88>)
200057c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
200057ca:	6013      	str	r3, [r2, #0]
200057cc:	4b17      	ldr	r3, [pc, #92]	; (2000582c <FLASH_FlushCaches+0x88>)
200057ce:	681b      	ldr	r3, [r3, #0]
200057d0:	4a16      	ldr	r2, [pc, #88]	; (2000582c <FLASH_FlushCaches+0x88>)
200057d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
200057d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
200057d8:	4b14      	ldr	r3, [pc, #80]	; (2000582c <FLASH_FlushCaches+0x88>)
200057da:	681b      	ldr	r3, [r3, #0]
200057dc:	4a13      	ldr	r2, [pc, #76]	; (2000582c <FLASH_FlushCaches+0x88>)
200057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200057e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
200057e4:	4b11      	ldr	r3, [pc, #68]	; (2000582c <FLASH_FlushCaches+0x88>)
200057e6:	681b      	ldr	r3, [r3, #0]
200057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200057ec:	2b00      	cmp	r3, #0
200057ee:	d017      	beq.n	20005820 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
200057f0:	4b0e      	ldr	r3, [pc, #56]	; (2000582c <FLASH_FlushCaches+0x88>)
200057f2:	681b      	ldr	r3, [r3, #0]
200057f4:	4a0d      	ldr	r2, [pc, #52]	; (2000582c <FLASH_FlushCaches+0x88>)
200057f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200057fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
200057fc:	4b0b      	ldr	r3, [pc, #44]	; (2000582c <FLASH_FlushCaches+0x88>)
200057fe:	681b      	ldr	r3, [r3, #0]
20005800:	4a0a      	ldr	r2, [pc, #40]	; (2000582c <FLASH_FlushCaches+0x88>)
20005802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20005806:	6013      	str	r3, [r2, #0]
20005808:	4b08      	ldr	r3, [pc, #32]	; (2000582c <FLASH_FlushCaches+0x88>)
2000580a:	681b      	ldr	r3, [r3, #0]
2000580c:	4a07      	ldr	r2, [pc, #28]	; (2000582c <FLASH_FlushCaches+0x88>)
2000580e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20005812:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20005814:	4b05      	ldr	r3, [pc, #20]	; (2000582c <FLASH_FlushCaches+0x88>)
20005816:	681b      	ldr	r3, [r3, #0]
20005818:	4a04      	ldr	r2, [pc, #16]	; (2000582c <FLASH_FlushCaches+0x88>)
2000581a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000581e:	6013      	str	r3, [r2, #0]
  }
}
20005820:	bf00      	nop
20005822:	46bd      	mov	sp, r7
20005824:	f85d 7b04 	ldr.w	r7, [sp], #4
20005828:	4770      	bx	lr
2000582a:	bf00      	nop
2000582c:	40023c00 	.word	0x40023c00

20005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
20005830:	b480      	push	{r7}
20005832:	b089      	sub	sp, #36	; 0x24
20005834:	af00      	add	r7, sp, #0
20005836:	6078      	str	r0, [r7, #4]
20005838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000583a:	2300      	movs	r3, #0
2000583c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000583e:	2300      	movs	r3, #0
20005840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
20005842:	2300      	movs	r3, #0
20005844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005846:	2300      	movs	r3, #0
20005848:	61fb      	str	r3, [r7, #28]
2000584a:	e165      	b.n	20005b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000584c:	2201      	movs	r2, #1
2000584e:	69fb      	ldr	r3, [r7, #28]
20005850:	fa02 f303 	lsl.w	r3, r2, r3
20005854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20005856:	683b      	ldr	r3, [r7, #0]
20005858:	681b      	ldr	r3, [r3, #0]
2000585a:	697a      	ldr	r2, [r7, #20]
2000585c:	4013      	ands	r3, r2
2000585e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
20005860:	693a      	ldr	r2, [r7, #16]
20005862:	697b      	ldr	r3, [r7, #20]
20005864:	429a      	cmp	r2, r3
20005866:	f040 8154 	bne.w	20005b12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000586a:	683b      	ldr	r3, [r7, #0]
2000586c:	685b      	ldr	r3, [r3, #4]
2000586e:	f003 0303 	and.w	r3, r3, #3
20005872:	2b01      	cmp	r3, #1
20005874:	d005      	beq.n	20005882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005876:	683b      	ldr	r3, [r7, #0]
20005878:	685b      	ldr	r3, [r3, #4]
2000587a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000587e:	2b02      	cmp	r3, #2
20005880:	d130      	bne.n	200058e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20005882:	687b      	ldr	r3, [r7, #4]
20005884:	689b      	ldr	r3, [r3, #8]
20005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005888:	69fb      	ldr	r3, [r7, #28]
2000588a:	005b      	lsls	r3, r3, #1
2000588c:	2203      	movs	r2, #3
2000588e:	fa02 f303 	lsl.w	r3, r2, r3
20005892:	43db      	mvns	r3, r3
20005894:	69ba      	ldr	r2, [r7, #24]
20005896:	4013      	ands	r3, r2
20005898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000589a:	683b      	ldr	r3, [r7, #0]
2000589c:	68da      	ldr	r2, [r3, #12]
2000589e:	69fb      	ldr	r3, [r7, #28]
200058a0:	005b      	lsls	r3, r3, #1
200058a2:	fa02 f303 	lsl.w	r3, r2, r3
200058a6:	69ba      	ldr	r2, [r7, #24]
200058a8:	4313      	orrs	r3, r2
200058aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200058ac:	687b      	ldr	r3, [r7, #4]
200058ae:	69ba      	ldr	r2, [r7, #24]
200058b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200058b2:	687b      	ldr	r3, [r7, #4]
200058b4:	685b      	ldr	r3, [r3, #4]
200058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
200058b8:	2201      	movs	r2, #1
200058ba:	69fb      	ldr	r3, [r7, #28]
200058bc:	fa02 f303 	lsl.w	r3, r2, r3
200058c0:	43db      	mvns	r3, r3
200058c2:	69ba      	ldr	r2, [r7, #24]
200058c4:	4013      	ands	r3, r2
200058c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200058c8:	683b      	ldr	r3, [r7, #0]
200058ca:	685b      	ldr	r3, [r3, #4]
200058cc:	091b      	lsrs	r3, r3, #4
200058ce:	f003 0201 	and.w	r2, r3, #1
200058d2:	69fb      	ldr	r3, [r7, #28]
200058d4:	fa02 f303 	lsl.w	r3, r2, r3
200058d8:	69ba      	ldr	r2, [r7, #24]
200058da:	4313      	orrs	r3, r2
200058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200058de:	687b      	ldr	r3, [r7, #4]
200058e0:	69ba      	ldr	r2, [r7, #24]
200058e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200058e4:	683b      	ldr	r3, [r7, #0]
200058e6:	685b      	ldr	r3, [r3, #4]
200058e8:	f003 0303 	and.w	r3, r3, #3
200058ec:	2b03      	cmp	r3, #3
200058ee:	d017      	beq.n	20005920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
200058f0:	687b      	ldr	r3, [r7, #4]
200058f2:	68db      	ldr	r3, [r3, #12]
200058f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
200058f6:	69fb      	ldr	r3, [r7, #28]
200058f8:	005b      	lsls	r3, r3, #1
200058fa:	2203      	movs	r2, #3
200058fc:	fa02 f303 	lsl.w	r3, r2, r3
20005900:	43db      	mvns	r3, r3
20005902:	69ba      	ldr	r2, [r7, #24]
20005904:	4013      	ands	r3, r2
20005906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20005908:	683b      	ldr	r3, [r7, #0]
2000590a:	689a      	ldr	r2, [r3, #8]
2000590c:	69fb      	ldr	r3, [r7, #28]
2000590e:	005b      	lsls	r3, r3, #1
20005910:	fa02 f303 	lsl.w	r3, r2, r3
20005914:	69ba      	ldr	r2, [r7, #24]
20005916:	4313      	orrs	r3, r2
20005918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000591a:	687b      	ldr	r3, [r7, #4]
2000591c:	69ba      	ldr	r2, [r7, #24]
2000591e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005920:	683b      	ldr	r3, [r7, #0]
20005922:	685b      	ldr	r3, [r3, #4]
20005924:	f003 0303 	and.w	r3, r3, #3
20005928:	2b02      	cmp	r3, #2
2000592a:	d123      	bne.n	20005974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000592c:	69fb      	ldr	r3, [r7, #28]
2000592e:	08da      	lsrs	r2, r3, #3
20005930:	687b      	ldr	r3, [r7, #4]
20005932:	3208      	adds	r2, #8
20005934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20005938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000593a:	69fb      	ldr	r3, [r7, #28]
2000593c:	f003 0307 	and.w	r3, r3, #7
20005940:	009b      	lsls	r3, r3, #2
20005942:	220f      	movs	r2, #15
20005944:	fa02 f303 	lsl.w	r3, r2, r3
20005948:	43db      	mvns	r3, r3
2000594a:	69ba      	ldr	r2, [r7, #24]
2000594c:	4013      	ands	r3, r2
2000594e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20005950:	683b      	ldr	r3, [r7, #0]
20005952:	691a      	ldr	r2, [r3, #16]
20005954:	69fb      	ldr	r3, [r7, #28]
20005956:	f003 0307 	and.w	r3, r3, #7
2000595a:	009b      	lsls	r3, r3, #2
2000595c:	fa02 f303 	lsl.w	r3, r2, r3
20005960:	69ba      	ldr	r2, [r7, #24]
20005962:	4313      	orrs	r3, r2
20005964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20005966:	69fb      	ldr	r3, [r7, #28]
20005968:	08da      	lsrs	r2, r3, #3
2000596a:	687b      	ldr	r3, [r7, #4]
2000596c:	3208      	adds	r2, #8
2000596e:	69b9      	ldr	r1, [r7, #24]
20005970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20005974:	687b      	ldr	r3, [r7, #4]
20005976:	681b      	ldr	r3, [r3, #0]
20005978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000597a:	69fb      	ldr	r3, [r7, #28]
2000597c:	005b      	lsls	r3, r3, #1
2000597e:	2203      	movs	r2, #3
20005980:	fa02 f303 	lsl.w	r3, r2, r3
20005984:	43db      	mvns	r3, r3
20005986:	69ba      	ldr	r2, [r7, #24]
20005988:	4013      	ands	r3, r2
2000598a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000598c:	683b      	ldr	r3, [r7, #0]
2000598e:	685b      	ldr	r3, [r3, #4]
20005990:	f003 0203 	and.w	r2, r3, #3
20005994:	69fb      	ldr	r3, [r7, #28]
20005996:	005b      	lsls	r3, r3, #1
20005998:	fa02 f303 	lsl.w	r3, r2, r3
2000599c:	69ba      	ldr	r2, [r7, #24]
2000599e:	4313      	orrs	r3, r2
200059a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200059a2:	687b      	ldr	r3, [r7, #4]
200059a4:	69ba      	ldr	r2, [r7, #24]
200059a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
200059a8:	683b      	ldr	r3, [r7, #0]
200059aa:	685b      	ldr	r3, [r3, #4]
200059ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200059b0:	2b00      	cmp	r3, #0
200059b2:	f000 80ae 	beq.w	20005b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200059b6:	2300      	movs	r3, #0
200059b8:	60fb      	str	r3, [r7, #12]
200059ba:	4b5d      	ldr	r3, [pc, #372]	; (20005b30 <HAL_GPIO_Init+0x300>)
200059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200059be:	4a5c      	ldr	r2, [pc, #368]	; (20005b30 <HAL_GPIO_Init+0x300>)
200059c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200059c4:	6453      	str	r3, [r2, #68]	; 0x44
200059c6:	4b5a      	ldr	r3, [pc, #360]	; (20005b30 <HAL_GPIO_Init+0x300>)
200059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200059ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200059ce:	60fb      	str	r3, [r7, #12]
200059d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
200059d2:	4a58      	ldr	r2, [pc, #352]	; (20005b34 <HAL_GPIO_Init+0x304>)
200059d4:	69fb      	ldr	r3, [r7, #28]
200059d6:	089b      	lsrs	r3, r3, #2
200059d8:	3302      	adds	r3, #2
200059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
200059e0:	69fb      	ldr	r3, [r7, #28]
200059e2:	f003 0303 	and.w	r3, r3, #3
200059e6:	009b      	lsls	r3, r3, #2
200059e8:	220f      	movs	r2, #15
200059ea:	fa02 f303 	lsl.w	r3, r2, r3
200059ee:	43db      	mvns	r3, r3
200059f0:	69ba      	ldr	r2, [r7, #24]
200059f2:	4013      	ands	r3, r2
200059f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
200059f6:	687b      	ldr	r3, [r7, #4]
200059f8:	4a4f      	ldr	r2, [pc, #316]	; (20005b38 <HAL_GPIO_Init+0x308>)
200059fa:	4293      	cmp	r3, r2
200059fc:	d025      	beq.n	20005a4a <HAL_GPIO_Init+0x21a>
200059fe:	687b      	ldr	r3, [r7, #4]
20005a00:	4a4e      	ldr	r2, [pc, #312]	; (20005b3c <HAL_GPIO_Init+0x30c>)
20005a02:	4293      	cmp	r3, r2
20005a04:	d01f      	beq.n	20005a46 <HAL_GPIO_Init+0x216>
20005a06:	687b      	ldr	r3, [r7, #4]
20005a08:	4a4d      	ldr	r2, [pc, #308]	; (20005b40 <HAL_GPIO_Init+0x310>)
20005a0a:	4293      	cmp	r3, r2
20005a0c:	d019      	beq.n	20005a42 <HAL_GPIO_Init+0x212>
20005a0e:	687b      	ldr	r3, [r7, #4]
20005a10:	4a4c      	ldr	r2, [pc, #304]	; (20005b44 <HAL_GPIO_Init+0x314>)
20005a12:	4293      	cmp	r3, r2
20005a14:	d013      	beq.n	20005a3e <HAL_GPIO_Init+0x20e>
20005a16:	687b      	ldr	r3, [r7, #4]
20005a18:	4a4b      	ldr	r2, [pc, #300]	; (20005b48 <HAL_GPIO_Init+0x318>)
20005a1a:	4293      	cmp	r3, r2
20005a1c:	d00d      	beq.n	20005a3a <HAL_GPIO_Init+0x20a>
20005a1e:	687b      	ldr	r3, [r7, #4]
20005a20:	4a4a      	ldr	r2, [pc, #296]	; (20005b4c <HAL_GPIO_Init+0x31c>)
20005a22:	4293      	cmp	r3, r2
20005a24:	d007      	beq.n	20005a36 <HAL_GPIO_Init+0x206>
20005a26:	687b      	ldr	r3, [r7, #4]
20005a28:	4a49      	ldr	r2, [pc, #292]	; (20005b50 <HAL_GPIO_Init+0x320>)
20005a2a:	4293      	cmp	r3, r2
20005a2c:	d101      	bne.n	20005a32 <HAL_GPIO_Init+0x202>
20005a2e:	2306      	movs	r3, #6
20005a30:	e00c      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a32:	2307      	movs	r3, #7
20005a34:	e00a      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a36:	2305      	movs	r3, #5
20005a38:	e008      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a3a:	2304      	movs	r3, #4
20005a3c:	e006      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a3e:	2303      	movs	r3, #3
20005a40:	e004      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a42:	2302      	movs	r3, #2
20005a44:	e002      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a46:	2301      	movs	r3, #1
20005a48:	e000      	b.n	20005a4c <HAL_GPIO_Init+0x21c>
20005a4a:	2300      	movs	r3, #0
20005a4c:	69fa      	ldr	r2, [r7, #28]
20005a4e:	f002 0203 	and.w	r2, r2, #3
20005a52:	0092      	lsls	r2, r2, #2
20005a54:	4093      	lsls	r3, r2
20005a56:	69ba      	ldr	r2, [r7, #24]
20005a58:	4313      	orrs	r3, r2
20005a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20005a5c:	4935      	ldr	r1, [pc, #212]	; (20005b34 <HAL_GPIO_Init+0x304>)
20005a5e:	69fb      	ldr	r3, [r7, #28]
20005a60:	089b      	lsrs	r3, r3, #2
20005a62:	3302      	adds	r3, #2
20005a64:	69ba      	ldr	r2, [r7, #24]
20005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20005a6a:	4b3a      	ldr	r3, [pc, #232]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005a6c:	689b      	ldr	r3, [r3, #8]
20005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005a70:	693b      	ldr	r3, [r7, #16]
20005a72:	43db      	mvns	r3, r3
20005a74:	69ba      	ldr	r2, [r7, #24]
20005a76:	4013      	ands	r3, r2
20005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20005a7a:	683b      	ldr	r3, [r7, #0]
20005a7c:	685b      	ldr	r3, [r3, #4]
20005a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20005a82:	2b00      	cmp	r3, #0
20005a84:	d003      	beq.n	20005a8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
20005a86:	69ba      	ldr	r2, [r7, #24]
20005a88:	693b      	ldr	r3, [r7, #16]
20005a8a:	4313      	orrs	r3, r2
20005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005a8e:	4a31      	ldr	r2, [pc, #196]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005a90:	69bb      	ldr	r3, [r7, #24]
20005a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20005a94:	4b2f      	ldr	r3, [pc, #188]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005a96:	68db      	ldr	r3, [r3, #12]
20005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005a9a:	693b      	ldr	r3, [r7, #16]
20005a9c:	43db      	mvns	r3, r3
20005a9e:	69ba      	ldr	r2, [r7, #24]
20005aa0:	4013      	ands	r3, r2
20005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20005aa4:	683b      	ldr	r3, [r7, #0]
20005aa6:	685b      	ldr	r3, [r3, #4]
20005aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20005aac:	2b00      	cmp	r3, #0
20005aae:	d003      	beq.n	20005ab8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
20005ab0:	69ba      	ldr	r2, [r7, #24]
20005ab2:	693b      	ldr	r3, [r7, #16]
20005ab4:	4313      	orrs	r3, r2
20005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20005ab8:	4a26      	ldr	r2, [pc, #152]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005aba:	69bb      	ldr	r3, [r7, #24]
20005abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20005abe:	4b25      	ldr	r3, [pc, #148]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005ac0:	685b      	ldr	r3, [r3, #4]
20005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005ac4:	693b      	ldr	r3, [r7, #16]
20005ac6:	43db      	mvns	r3, r3
20005ac8:	69ba      	ldr	r2, [r7, #24]
20005aca:	4013      	ands	r3, r2
20005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20005ace:	683b      	ldr	r3, [r7, #0]
20005ad0:	685b      	ldr	r3, [r3, #4]
20005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005ad6:	2b00      	cmp	r3, #0
20005ad8:	d003      	beq.n	20005ae2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20005ada:	69ba      	ldr	r2, [r7, #24]
20005adc:	693b      	ldr	r3, [r7, #16]
20005ade:	4313      	orrs	r3, r2
20005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20005ae2:	4a1c      	ldr	r2, [pc, #112]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005ae4:	69bb      	ldr	r3, [r7, #24]
20005ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20005ae8:	4b1a      	ldr	r3, [pc, #104]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005aea:	681b      	ldr	r3, [r3, #0]
20005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005aee:	693b      	ldr	r3, [r7, #16]
20005af0:	43db      	mvns	r3, r3
20005af2:	69ba      	ldr	r2, [r7, #24]
20005af4:	4013      	ands	r3, r2
20005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20005af8:	683b      	ldr	r3, [r7, #0]
20005afa:	685b      	ldr	r3, [r3, #4]
20005afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005b00:	2b00      	cmp	r3, #0
20005b02:	d003      	beq.n	20005b0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20005b04:	69ba      	ldr	r2, [r7, #24]
20005b06:	693b      	ldr	r3, [r7, #16]
20005b08:	4313      	orrs	r3, r2
20005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005b0c:	4a11      	ldr	r2, [pc, #68]	; (20005b54 <HAL_GPIO_Init+0x324>)
20005b0e:	69bb      	ldr	r3, [r7, #24]
20005b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005b12:	69fb      	ldr	r3, [r7, #28]
20005b14:	3301      	adds	r3, #1
20005b16:	61fb      	str	r3, [r7, #28]
20005b18:	69fb      	ldr	r3, [r7, #28]
20005b1a:	2b0f      	cmp	r3, #15
20005b1c:	f67f ae96 	bls.w	2000584c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20005b20:	bf00      	nop
20005b22:	bf00      	nop
20005b24:	3724      	adds	r7, #36	; 0x24
20005b26:	46bd      	mov	sp, r7
20005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b2c:	4770      	bx	lr
20005b2e:	bf00      	nop
20005b30:	40023800 	.word	0x40023800
20005b34:	40013800 	.word	0x40013800
20005b38:	40020000 	.word	0x40020000
20005b3c:	40020400 	.word	0x40020400
20005b40:	40020800 	.word	0x40020800
20005b44:	40020c00 	.word	0x40020c00
20005b48:	40021000 	.word	0x40021000
20005b4c:	40021400 	.word	0x40021400
20005b50:	40021800 	.word	0x40021800
20005b54:	40013c00 	.word	0x40013c00

20005b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20005b58:	b480      	push	{r7}
20005b5a:	b087      	sub	sp, #28
20005b5c:	af00      	add	r7, sp, #0
20005b5e:	6078      	str	r0, [r7, #4]
20005b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20005b62:	2300      	movs	r3, #0
20005b64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
20005b66:	2300      	movs	r3, #0
20005b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
20005b6a:	2300      	movs	r3, #0
20005b6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005b6e:	2300      	movs	r3, #0
20005b70:	617b      	str	r3, [r7, #20]
20005b72:	e0c7      	b.n	20005d04 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20005b74:	2201      	movs	r2, #1
20005b76:	697b      	ldr	r3, [r7, #20]
20005b78:	fa02 f303 	lsl.w	r3, r2, r3
20005b7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20005b7e:	683a      	ldr	r2, [r7, #0]
20005b80:	693b      	ldr	r3, [r7, #16]
20005b82:	4013      	ands	r3, r2
20005b84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
20005b86:	68fa      	ldr	r2, [r7, #12]
20005b88:	693b      	ldr	r3, [r7, #16]
20005b8a:	429a      	cmp	r2, r3
20005b8c:	f040 80b7 	bne.w	20005cfe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
20005b90:	4a62      	ldr	r2, [pc, #392]	; (20005d1c <HAL_GPIO_DeInit+0x1c4>)
20005b92:	697b      	ldr	r3, [r7, #20]
20005b94:	089b      	lsrs	r3, r3, #2
20005b96:	3302      	adds	r3, #2
20005b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005b9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
20005b9e:	697b      	ldr	r3, [r7, #20]
20005ba0:	f003 0303 	and.w	r3, r3, #3
20005ba4:	009b      	lsls	r3, r3, #2
20005ba6:	220f      	movs	r2, #15
20005ba8:	fa02 f303 	lsl.w	r3, r2, r3
20005bac:	68ba      	ldr	r2, [r7, #8]
20005bae:	4013      	ands	r3, r2
20005bb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
20005bb2:	687b      	ldr	r3, [r7, #4]
20005bb4:	4a5a      	ldr	r2, [pc, #360]	; (20005d20 <HAL_GPIO_DeInit+0x1c8>)
20005bb6:	4293      	cmp	r3, r2
20005bb8:	d025      	beq.n	20005c06 <HAL_GPIO_DeInit+0xae>
20005bba:	687b      	ldr	r3, [r7, #4]
20005bbc:	4a59      	ldr	r2, [pc, #356]	; (20005d24 <HAL_GPIO_DeInit+0x1cc>)
20005bbe:	4293      	cmp	r3, r2
20005bc0:	d01f      	beq.n	20005c02 <HAL_GPIO_DeInit+0xaa>
20005bc2:	687b      	ldr	r3, [r7, #4]
20005bc4:	4a58      	ldr	r2, [pc, #352]	; (20005d28 <HAL_GPIO_DeInit+0x1d0>)
20005bc6:	4293      	cmp	r3, r2
20005bc8:	d019      	beq.n	20005bfe <HAL_GPIO_DeInit+0xa6>
20005bca:	687b      	ldr	r3, [r7, #4]
20005bcc:	4a57      	ldr	r2, [pc, #348]	; (20005d2c <HAL_GPIO_DeInit+0x1d4>)
20005bce:	4293      	cmp	r3, r2
20005bd0:	d013      	beq.n	20005bfa <HAL_GPIO_DeInit+0xa2>
20005bd2:	687b      	ldr	r3, [r7, #4]
20005bd4:	4a56      	ldr	r2, [pc, #344]	; (20005d30 <HAL_GPIO_DeInit+0x1d8>)
20005bd6:	4293      	cmp	r3, r2
20005bd8:	d00d      	beq.n	20005bf6 <HAL_GPIO_DeInit+0x9e>
20005bda:	687b      	ldr	r3, [r7, #4]
20005bdc:	4a55      	ldr	r2, [pc, #340]	; (20005d34 <HAL_GPIO_DeInit+0x1dc>)
20005bde:	4293      	cmp	r3, r2
20005be0:	d007      	beq.n	20005bf2 <HAL_GPIO_DeInit+0x9a>
20005be2:	687b      	ldr	r3, [r7, #4]
20005be4:	4a54      	ldr	r2, [pc, #336]	; (20005d38 <HAL_GPIO_DeInit+0x1e0>)
20005be6:	4293      	cmp	r3, r2
20005be8:	d101      	bne.n	20005bee <HAL_GPIO_DeInit+0x96>
20005bea:	2306      	movs	r3, #6
20005bec:	e00c      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005bee:	2307      	movs	r3, #7
20005bf0:	e00a      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005bf2:	2305      	movs	r3, #5
20005bf4:	e008      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005bf6:	2304      	movs	r3, #4
20005bf8:	e006      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005bfa:	2303      	movs	r3, #3
20005bfc:	e004      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005bfe:	2302      	movs	r3, #2
20005c00:	e002      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005c02:	2301      	movs	r3, #1
20005c04:	e000      	b.n	20005c08 <HAL_GPIO_DeInit+0xb0>
20005c06:	2300      	movs	r3, #0
20005c08:	697a      	ldr	r2, [r7, #20]
20005c0a:	f002 0203 	and.w	r2, r2, #3
20005c0e:	0092      	lsls	r2, r2, #2
20005c10:	4093      	lsls	r3, r2
20005c12:	68ba      	ldr	r2, [r7, #8]
20005c14:	429a      	cmp	r2, r3
20005c16:	d132      	bne.n	20005c7e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20005c18:	4b48      	ldr	r3, [pc, #288]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c1a:	681a      	ldr	r2, [r3, #0]
20005c1c:	68fb      	ldr	r3, [r7, #12]
20005c1e:	43db      	mvns	r3, r3
20005c20:	4946      	ldr	r1, [pc, #280]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c22:	4013      	ands	r3, r2
20005c24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20005c26:	4b45      	ldr	r3, [pc, #276]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c28:	685a      	ldr	r2, [r3, #4]
20005c2a:	68fb      	ldr	r3, [r7, #12]
20005c2c:	43db      	mvns	r3, r3
20005c2e:	4943      	ldr	r1, [pc, #268]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c30:	4013      	ands	r3, r2
20005c32:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20005c34:	4b41      	ldr	r3, [pc, #260]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c36:	68da      	ldr	r2, [r3, #12]
20005c38:	68fb      	ldr	r3, [r7, #12]
20005c3a:	43db      	mvns	r3, r3
20005c3c:	493f      	ldr	r1, [pc, #252]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c3e:	4013      	ands	r3, r2
20005c40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20005c42:	4b3e      	ldr	r3, [pc, #248]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c44:	689a      	ldr	r2, [r3, #8]
20005c46:	68fb      	ldr	r3, [r7, #12]
20005c48:	43db      	mvns	r3, r3
20005c4a:	493c      	ldr	r1, [pc, #240]	; (20005d3c <HAL_GPIO_DeInit+0x1e4>)
20005c4c:	4013      	ands	r3, r2
20005c4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
20005c50:	697b      	ldr	r3, [r7, #20]
20005c52:	f003 0303 	and.w	r3, r3, #3
20005c56:	009b      	lsls	r3, r3, #2
20005c58:	220f      	movs	r2, #15
20005c5a:	fa02 f303 	lsl.w	r3, r2, r3
20005c5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20005c60:	4a2e      	ldr	r2, [pc, #184]	; (20005d1c <HAL_GPIO_DeInit+0x1c4>)
20005c62:	697b      	ldr	r3, [r7, #20]
20005c64:	089b      	lsrs	r3, r3, #2
20005c66:	3302      	adds	r3, #2
20005c68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20005c6c:	68bb      	ldr	r3, [r7, #8]
20005c6e:	43da      	mvns	r2, r3
20005c70:	482a      	ldr	r0, [pc, #168]	; (20005d1c <HAL_GPIO_DeInit+0x1c4>)
20005c72:	697b      	ldr	r3, [r7, #20]
20005c74:	089b      	lsrs	r3, r3, #2
20005c76:	400a      	ands	r2, r1
20005c78:	3302      	adds	r3, #2
20005c7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005c7e:	687b      	ldr	r3, [r7, #4]
20005c80:	681a      	ldr	r2, [r3, #0]
20005c82:	697b      	ldr	r3, [r7, #20]
20005c84:	005b      	lsls	r3, r3, #1
20005c86:	2103      	movs	r1, #3
20005c88:	fa01 f303 	lsl.w	r3, r1, r3
20005c8c:	43db      	mvns	r3, r3
20005c8e:	401a      	ands	r2, r3
20005c90:	687b      	ldr	r3, [r7, #4]
20005c92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005c94:	697b      	ldr	r3, [r7, #20]
20005c96:	08da      	lsrs	r2, r3, #3
20005c98:	687b      	ldr	r3, [r7, #4]
20005c9a:	3208      	adds	r2, #8
20005c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20005ca0:	697b      	ldr	r3, [r7, #20]
20005ca2:	f003 0307 	and.w	r3, r3, #7
20005ca6:	009b      	lsls	r3, r3, #2
20005ca8:	220f      	movs	r2, #15
20005caa:	fa02 f303 	lsl.w	r3, r2, r3
20005cae:	43db      	mvns	r3, r3
20005cb0:	697a      	ldr	r2, [r7, #20]
20005cb2:	08d2      	lsrs	r2, r2, #3
20005cb4:	4019      	ands	r1, r3
20005cb6:	687b      	ldr	r3, [r7, #4]
20005cb8:	3208      	adds	r2, #8
20005cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20005cbe:	687b      	ldr	r3, [r7, #4]
20005cc0:	68da      	ldr	r2, [r3, #12]
20005cc2:	697b      	ldr	r3, [r7, #20]
20005cc4:	005b      	lsls	r3, r3, #1
20005cc6:	2103      	movs	r1, #3
20005cc8:	fa01 f303 	lsl.w	r3, r1, r3
20005ccc:	43db      	mvns	r3, r3
20005cce:	401a      	ands	r2, r3
20005cd0:	687b      	ldr	r3, [r7, #4]
20005cd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20005cd4:	687b      	ldr	r3, [r7, #4]
20005cd6:	685a      	ldr	r2, [r3, #4]
20005cd8:	2101      	movs	r1, #1
20005cda:	697b      	ldr	r3, [r7, #20]
20005cdc:	fa01 f303 	lsl.w	r3, r1, r3
20005ce0:	43db      	mvns	r3, r3
20005ce2:	401a      	ands	r2, r3
20005ce4:	687b      	ldr	r3, [r7, #4]
20005ce6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005ce8:	687b      	ldr	r3, [r7, #4]
20005cea:	689a      	ldr	r2, [r3, #8]
20005cec:	697b      	ldr	r3, [r7, #20]
20005cee:	005b      	lsls	r3, r3, #1
20005cf0:	2103      	movs	r1, #3
20005cf2:	fa01 f303 	lsl.w	r3, r1, r3
20005cf6:	43db      	mvns	r3, r3
20005cf8:	401a      	ands	r2, r3
20005cfa:	687b      	ldr	r3, [r7, #4]
20005cfc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005cfe:	697b      	ldr	r3, [r7, #20]
20005d00:	3301      	adds	r3, #1
20005d02:	617b      	str	r3, [r7, #20]
20005d04:	697b      	ldr	r3, [r7, #20]
20005d06:	2b0f      	cmp	r3, #15
20005d08:	f67f af34 	bls.w	20005b74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
20005d0c:	bf00      	nop
20005d0e:	bf00      	nop
20005d10:	371c      	adds	r7, #28
20005d12:	46bd      	mov	sp, r7
20005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d18:	4770      	bx	lr
20005d1a:	bf00      	nop
20005d1c:	40013800 	.word	0x40013800
20005d20:	40020000 	.word	0x40020000
20005d24:	40020400 	.word	0x40020400
20005d28:	40020800 	.word	0x40020800
20005d2c:	40020c00 	.word	0x40020c00
20005d30:	40021000 	.word	0x40021000
20005d34:	40021400 	.word	0x40021400
20005d38:	40021800 	.word	0x40021800
20005d3c:	40013c00 	.word	0x40013c00

20005d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005d40:	b480      	push	{r7}
20005d42:	b085      	sub	sp, #20
20005d44:	af00      	add	r7, sp, #0
20005d46:	6078      	str	r0, [r7, #4]
20005d48:	460b      	mov	r3, r1
20005d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005d4c:	687b      	ldr	r3, [r7, #4]
20005d4e:	691a      	ldr	r2, [r3, #16]
20005d50:	887b      	ldrh	r3, [r7, #2]
20005d52:	4013      	ands	r3, r2
20005d54:	2b00      	cmp	r3, #0
20005d56:	d002      	beq.n	20005d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20005d58:	2301      	movs	r3, #1
20005d5a:	73fb      	strb	r3, [r7, #15]
20005d5c:	e001      	b.n	20005d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005d5e:	2300      	movs	r3, #0
20005d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20005d62:	7bfb      	ldrb	r3, [r7, #15]
}
20005d64:	4618      	mov	r0, r3
20005d66:	3714      	adds	r7, #20
20005d68:	46bd      	mov	sp, r7
20005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d6e:	4770      	bx	lr

20005d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005d70:	b480      	push	{r7}
20005d72:	b083      	sub	sp, #12
20005d74:	af00      	add	r7, sp, #0
20005d76:	6078      	str	r0, [r7, #4]
20005d78:	460b      	mov	r3, r1
20005d7a:	807b      	strh	r3, [r7, #2]
20005d7c:	4613      	mov	r3, r2
20005d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005d80:	787b      	ldrb	r3, [r7, #1]
20005d82:	2b00      	cmp	r3, #0
20005d84:	d003      	beq.n	20005d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20005d86:	887a      	ldrh	r2, [r7, #2]
20005d88:	687b      	ldr	r3, [r7, #4]
20005d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20005d8c:	e003      	b.n	20005d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20005d8e:	887b      	ldrh	r3, [r7, #2]
20005d90:	041a      	lsls	r2, r3, #16
20005d92:	687b      	ldr	r3, [r7, #4]
20005d94:	619a      	str	r2, [r3, #24]
}
20005d96:	bf00      	nop
20005d98:	370c      	adds	r7, #12
20005d9a:	46bd      	mov	sp, r7
20005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005da0:	4770      	bx	lr

20005da2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005da2:	b480      	push	{r7}
20005da4:	b085      	sub	sp, #20
20005da6:	af00      	add	r7, sp, #0
20005da8:	6078      	str	r0, [r7, #4]
20005daa:	460b      	mov	r3, r1
20005dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20005dae:	687b      	ldr	r3, [r7, #4]
20005db0:	695b      	ldr	r3, [r3, #20]
20005db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20005db4:	887a      	ldrh	r2, [r7, #2]
20005db6:	68fb      	ldr	r3, [r7, #12]
20005db8:	4013      	ands	r3, r2
20005dba:	041a      	lsls	r2, r3, #16
20005dbc:	68fb      	ldr	r3, [r7, #12]
20005dbe:	43d9      	mvns	r1, r3
20005dc0:	887b      	ldrh	r3, [r7, #2]
20005dc2:	400b      	ands	r3, r1
20005dc4:	431a      	orrs	r2, r3
20005dc6:	687b      	ldr	r3, [r7, #4]
20005dc8:	619a      	str	r2, [r3, #24]
}
20005dca:	bf00      	nop
20005dcc:	3714      	adds	r7, #20
20005dce:	46bd      	mov	sp, r7
20005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dd4:	4770      	bx	lr

20005dd6 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005dd6:	b480      	push	{r7}
20005dd8:	b085      	sub	sp, #20
20005dda:	af00      	add	r7, sp, #0
20005ddc:	6078      	str	r0, [r7, #4]
20005dde:	460b      	mov	r3, r1
20005de0:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20005de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20005de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20005de8:	887a      	ldrh	r2, [r7, #2]
20005dea:	68fb      	ldr	r3, [r7, #12]
20005dec:	4313      	orrs	r3, r2
20005dee:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005df0:	68fa      	ldr	r2, [r7, #12]
20005df2:	687b      	ldr	r3, [r7, #4]
20005df4:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20005df6:	887a      	ldrh	r2, [r7, #2]
20005df8:	687b      	ldr	r3, [r7, #4]
20005dfa:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005dfc:	68fa      	ldr	r2, [r7, #12]
20005dfe:	687b      	ldr	r3, [r7, #4]
20005e00:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20005e02:	687b      	ldr	r3, [r7, #4]
20005e04:	69db      	ldr	r3, [r3, #28]
20005e06:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20005e08:	687b      	ldr	r3, [r7, #4]
20005e0a:	69db      	ldr	r3, [r3, #28]
20005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005e10:	2b00      	cmp	r3, #0
20005e12:	d001      	beq.n	20005e18 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20005e14:	2300      	movs	r3, #0
20005e16:	e000      	b.n	20005e1a <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20005e18:	2301      	movs	r3, #1
  }
}
20005e1a:	4618      	mov	r0, r3
20005e1c:	3714      	adds	r7, #20
20005e1e:	46bd      	mov	sp, r7
20005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e24:	4770      	bx	lr
	...

20005e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20005e28:	b580      	push	{r7, lr}
20005e2a:	b082      	sub	sp, #8
20005e2c:	af00      	add	r7, sp, #0
20005e2e:	4603      	mov	r3, r0
20005e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20005e32:	4b08      	ldr	r3, [pc, #32]	; (20005e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005e34:	695a      	ldr	r2, [r3, #20]
20005e36:	88fb      	ldrh	r3, [r7, #6]
20005e38:	4013      	ands	r3, r2
20005e3a:	2b00      	cmp	r3, #0
20005e3c:	d006      	beq.n	20005e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20005e3e:	4a05      	ldr	r2, [pc, #20]	; (20005e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005e40:	88fb      	ldrh	r3, [r7, #6]
20005e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20005e44:	88fb      	ldrh	r3, [r7, #6]
20005e46:	4618      	mov	r0, r3
20005e48:	f000 f806 	bl	20005e58 <HAL_GPIO_EXTI_Callback>
  }
}
20005e4c:	bf00      	nop
20005e4e:	3708      	adds	r7, #8
20005e50:	46bd      	mov	sp, r7
20005e52:	bd80      	pop	{r7, pc}
20005e54:	40013c00 	.word	0x40013c00

20005e58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20005e58:	b480      	push	{r7}
20005e5a:	b083      	sub	sp, #12
20005e5c:	af00      	add	r7, sp, #0
20005e5e:	4603      	mov	r3, r0
20005e60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20005e62:	bf00      	nop
20005e64:	370c      	adds	r7, #12
20005e66:	46bd      	mov	sp, r7
20005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e6c:	4770      	bx	lr
	...

20005e70 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
20005e70:	b480      	push	{r7}
20005e72:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
20005e74:	4b08      	ldr	r3, [pc, #32]	; (20005e98 <HAL_PWR_DeInit+0x28>)
20005e76:	6a1b      	ldr	r3, [r3, #32]
20005e78:	4a07      	ldr	r2, [pc, #28]	; (20005e98 <HAL_PWR_DeInit+0x28>)
20005e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20005e7e:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20005e80:	4b05      	ldr	r3, [pc, #20]	; (20005e98 <HAL_PWR_DeInit+0x28>)
20005e82:	6a1b      	ldr	r3, [r3, #32]
20005e84:	4a04      	ldr	r2, [pc, #16]	; (20005e98 <HAL_PWR_DeInit+0x28>)
20005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20005e8a:	6213      	str	r3, [r2, #32]
}
20005e8c:	bf00      	nop
20005e8e:	46bd      	mov	sp, r7
20005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e94:	4770      	bx	lr
20005e96:	bf00      	nop
20005e98:	40023800 	.word	0x40023800

20005e9c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20005e9c:	b480      	push	{r7}
20005e9e:	b083      	sub	sp, #12
20005ea0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
20005ea2:	4b06      	ldr	r3, [pc, #24]	; (20005ebc <HAL_PWR_EnableBkUpAccess+0x20>)
20005ea4:	2201      	movs	r2, #1
20005ea6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005ea8:	4b05      	ldr	r3, [pc, #20]	; (20005ec0 <HAL_PWR_EnableBkUpAccess+0x24>)
20005eaa:	681b      	ldr	r3, [r3, #0]
20005eac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005eae:	687b      	ldr	r3, [r7, #4]
}
20005eb0:	bf00      	nop
20005eb2:	370c      	adds	r7, #12
20005eb4:	46bd      	mov	sp, r7
20005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005eba:	4770      	bx	lr
20005ebc:	420e0020 	.word	0x420e0020
20005ec0:	40007000 	.word	0x40007000

20005ec4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
20005ec4:	b480      	push	{r7}
20005ec6:	b083      	sub	sp, #12
20005ec8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
20005eca:	4b06      	ldr	r3, [pc, #24]	; (20005ee4 <HAL_PWR_DisableBkUpAccess+0x20>)
20005ecc:	2200      	movs	r2, #0
20005ece:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005ed0:	4b05      	ldr	r3, [pc, #20]	; (20005ee8 <HAL_PWR_DisableBkUpAccess+0x24>)
20005ed2:	681b      	ldr	r3, [r3, #0]
20005ed4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005ed6:	687b      	ldr	r3, [r7, #4]
}
20005ed8:	bf00      	nop
20005eda:	370c      	adds	r7, #12
20005edc:	46bd      	mov	sp, r7
20005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ee2:	4770      	bx	lr
20005ee4:	420e0020 	.word	0x420e0020
20005ee8:	40007000 	.word	0x40007000

20005eec <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
20005eec:	b480      	push	{r7}
20005eee:	b083      	sub	sp, #12
20005ef0:	af00      	add	r7, sp, #0
20005ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
20005ef4:	4b2b      	ldr	r3, [pc, #172]	; (20005fa4 <HAL_PWR_ConfigPVD+0xb8>)
20005ef6:	681b      	ldr	r3, [r3, #0]
20005ef8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
20005efc:	687b      	ldr	r3, [r7, #4]
20005efe:	681b      	ldr	r3, [r3, #0]
20005f00:	4928      	ldr	r1, [pc, #160]	; (20005fa4 <HAL_PWR_ConfigPVD+0xb8>)
20005f02:	4313      	orrs	r3, r2
20005f04:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20005f06:	4b28      	ldr	r3, [pc, #160]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f08:	685b      	ldr	r3, [r3, #4]
20005f0a:	4a27      	ldr	r2, [pc, #156]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f10:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
20005f12:	4b25      	ldr	r3, [pc, #148]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f14:	681b      	ldr	r3, [r3, #0]
20005f16:	4a24      	ldr	r2, [pc, #144]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f1c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
20005f1e:	4b22      	ldr	r3, [pc, #136]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f20:	689b      	ldr	r3, [r3, #8]
20005f22:	4a21      	ldr	r2, [pc, #132]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f28:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
20005f2a:	4b1f      	ldr	r3, [pc, #124]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f2c:	68db      	ldr	r3, [r3, #12]
20005f2e:	4a1e      	ldr	r2, [pc, #120]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f34:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
20005f36:	687b      	ldr	r3, [r7, #4]
20005f38:	685b      	ldr	r3, [r3, #4]
20005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005f3e:	2b00      	cmp	r3, #0
20005f40:	d005      	beq.n	20005f4e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
20005f42:	4b19      	ldr	r3, [pc, #100]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f44:	681b      	ldr	r3, [r3, #0]
20005f46:	4a18      	ldr	r2, [pc, #96]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f4c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
20005f4e:	687b      	ldr	r3, [r7, #4]
20005f50:	685b      	ldr	r3, [r3, #4]
20005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005f56:	2b00      	cmp	r3, #0
20005f58:	d005      	beq.n	20005f66 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
20005f5a:	4b13      	ldr	r3, [pc, #76]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f5c:	685b      	ldr	r3, [r3, #4]
20005f5e:	4a12      	ldr	r2, [pc, #72]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f64:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
20005f66:	687b      	ldr	r3, [r7, #4]
20005f68:	685b      	ldr	r3, [r3, #4]
20005f6a:	f003 0301 	and.w	r3, r3, #1
20005f6e:	2b00      	cmp	r3, #0
20005f70:	d005      	beq.n	20005f7e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
20005f72:	4b0d      	ldr	r3, [pc, #52]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f74:	689b      	ldr	r3, [r3, #8]
20005f76:	4a0c      	ldr	r2, [pc, #48]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f7c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
20005f7e:	687b      	ldr	r3, [r7, #4]
20005f80:	685b      	ldr	r3, [r3, #4]
20005f82:	f003 0302 	and.w	r3, r3, #2
20005f86:	2b00      	cmp	r3, #0
20005f88:	d005      	beq.n	20005f96 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
20005f8a:	4b07      	ldr	r3, [pc, #28]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f8c:	68db      	ldr	r3, [r3, #12]
20005f8e:	4a06      	ldr	r2, [pc, #24]	; (20005fa8 <HAL_PWR_ConfigPVD+0xbc>)
20005f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f94:	60d3      	str	r3, [r2, #12]
  }
}
20005f96:	bf00      	nop
20005f98:	370c      	adds	r7, #12
20005f9a:	46bd      	mov	sp, r7
20005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fa0:	4770      	bx	lr
20005fa2:	bf00      	nop
20005fa4:	40007000 	.word	0x40007000
20005fa8:	40013c00 	.word	0x40013c00

20005fac <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
20005fac:	b480      	push	{r7}
20005fae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
20005fb0:	4b03      	ldr	r3, [pc, #12]	; (20005fc0 <HAL_PWR_EnablePVD+0x14>)
20005fb2:	2201      	movs	r2, #1
20005fb4:	601a      	str	r2, [r3, #0]
}
20005fb6:	bf00      	nop
20005fb8:	46bd      	mov	sp, r7
20005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fbe:	4770      	bx	lr
20005fc0:	420e0010 	.word	0x420e0010

20005fc4 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
20005fc4:	b480      	push	{r7}
20005fc6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
20005fc8:	4b03      	ldr	r3, [pc, #12]	; (20005fd8 <HAL_PWR_DisablePVD+0x14>)
20005fca:	2200      	movs	r2, #0
20005fcc:	601a      	str	r2, [r3, #0]
}
20005fce:	bf00      	nop
20005fd0:	46bd      	mov	sp, r7
20005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fd6:	4770      	bx	lr
20005fd8:	420e0010 	.word	0x420e0010

20005fdc <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
20005fdc:	b480      	push	{r7}
20005fde:	b083      	sub	sp, #12
20005fe0:	af00      	add	r7, sp, #0
20005fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
20005fe4:	4b05      	ldr	r3, [pc, #20]	; (20005ffc <HAL_PWR_EnableWakeUpPin+0x20>)
20005fe6:	685a      	ldr	r2, [r3, #4]
20005fe8:	4904      	ldr	r1, [pc, #16]	; (20005ffc <HAL_PWR_EnableWakeUpPin+0x20>)
20005fea:	687b      	ldr	r3, [r7, #4]
20005fec:	4313      	orrs	r3, r2
20005fee:	604b      	str	r3, [r1, #4]
}
20005ff0:	bf00      	nop
20005ff2:	370c      	adds	r7, #12
20005ff4:	46bd      	mov	sp, r7
20005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ffa:	4770      	bx	lr
20005ffc:	40007000 	.word	0x40007000

20006000 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
20006000:	b480      	push	{r7}
20006002:	b083      	sub	sp, #12
20006004:	af00      	add	r7, sp, #0
20006006:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
20006008:	4b06      	ldr	r3, [pc, #24]	; (20006024 <HAL_PWR_DisableWakeUpPin+0x24>)
2000600a:	685a      	ldr	r2, [r3, #4]
2000600c:	687b      	ldr	r3, [r7, #4]
2000600e:	43db      	mvns	r3, r3
20006010:	4904      	ldr	r1, [pc, #16]	; (20006024 <HAL_PWR_DisableWakeUpPin+0x24>)
20006012:	4013      	ands	r3, r2
20006014:	604b      	str	r3, [r1, #4]
}
20006016:	bf00      	nop
20006018:	370c      	adds	r7, #12
2000601a:	46bd      	mov	sp, r7
2000601c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006020:	4770      	bx	lr
20006022:	bf00      	nop
20006024:	40007000 	.word	0x40007000

20006028 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
20006028:	b480      	push	{r7}
2000602a:	b083      	sub	sp, #12
2000602c:	af00      	add	r7, sp, #0
2000602e:	6078      	str	r0, [r7, #4]
20006030:	460b      	mov	r3, r1
20006032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20006034:	4b09      	ldr	r3, [pc, #36]	; (2000605c <HAL_PWR_EnterSLEEPMode+0x34>)
20006036:	691b      	ldr	r3, [r3, #16]
20006038:	4a08      	ldr	r2, [pc, #32]	; (2000605c <HAL_PWR_EnterSLEEPMode+0x34>)
2000603a:	f023 0304 	bic.w	r3, r3, #4
2000603e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
20006040:	78fb      	ldrb	r3, [r7, #3]
20006042:	2b01      	cmp	r3, #1
20006044:	d101      	bne.n	2000604a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20006046:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
20006048:	e002      	b.n	20006050 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
2000604a:	bf40      	sev
    __WFE();
2000604c:	bf20      	wfe
    __WFE();
2000604e:	bf20      	wfe
}
20006050:	bf00      	nop
20006052:	370c      	adds	r7, #12
20006054:	46bd      	mov	sp, r7
20006056:	f85d 7b04 	ldr.w	r7, [sp], #4
2000605a:	4770      	bx	lr
2000605c:	e000ed00 	.word	0xe000ed00

20006060 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20006060:	b480      	push	{r7}
20006062:	b083      	sub	sp, #12
20006064:	af00      	add	r7, sp, #0
20006066:	6078      	str	r0, [r7, #4]
20006068:	460b      	mov	r3, r1
2000606a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
2000606c:	4b10      	ldr	r3, [pc, #64]	; (200060b0 <HAL_PWR_EnterSTOPMode+0x50>)
2000606e:	681b      	ldr	r3, [r3, #0]
20006070:	f023 0203 	bic.w	r2, r3, #3
20006074:	490e      	ldr	r1, [pc, #56]	; (200060b0 <HAL_PWR_EnterSTOPMode+0x50>)
20006076:	687b      	ldr	r3, [r7, #4]
20006078:	4313      	orrs	r3, r2
2000607a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
2000607c:	4b0d      	ldr	r3, [pc, #52]	; (200060b4 <HAL_PWR_EnterSTOPMode+0x54>)
2000607e:	691b      	ldr	r3, [r3, #16]
20006080:	4a0c      	ldr	r2, [pc, #48]	; (200060b4 <HAL_PWR_EnterSTOPMode+0x54>)
20006082:	f043 0304 	orr.w	r3, r3, #4
20006086:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
20006088:	78fb      	ldrb	r3, [r7, #3]
2000608a:	2b01      	cmp	r3, #1
2000608c:	d101      	bne.n	20006092 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000608e:	bf30      	wfi
20006090:	e002      	b.n	20006098 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
20006092:	bf40      	sev
    __WFE();
20006094:	bf20      	wfe
    __WFE();
20006096:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
20006098:	4b06      	ldr	r3, [pc, #24]	; (200060b4 <HAL_PWR_EnterSTOPMode+0x54>)
2000609a:	691b      	ldr	r3, [r3, #16]
2000609c:	4a05      	ldr	r2, [pc, #20]	; (200060b4 <HAL_PWR_EnterSTOPMode+0x54>)
2000609e:	f023 0304 	bic.w	r3, r3, #4
200060a2:	6113      	str	r3, [r2, #16]
}
200060a4:	bf00      	nop
200060a6:	370c      	adds	r7, #12
200060a8:	46bd      	mov	sp, r7
200060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200060ae:	4770      	bx	lr
200060b0:	40007000 	.word	0x40007000
200060b4:	e000ed00 	.word	0xe000ed00

200060b8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
200060b8:	b480      	push	{r7}
200060ba:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
200060bc:	4b08      	ldr	r3, [pc, #32]	; (200060e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
200060be:	681b      	ldr	r3, [r3, #0]
200060c0:	4a07      	ldr	r2, [pc, #28]	; (200060e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
200060c2:	f043 0302 	orr.w	r3, r3, #2
200060c6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
200060c8:	4b06      	ldr	r3, [pc, #24]	; (200060e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
200060ca:	691b      	ldr	r3, [r3, #16]
200060cc:	4a05      	ldr	r2, [pc, #20]	; (200060e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
200060ce:	f043 0304 	orr.w	r3, r3, #4
200060d2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
200060d4:	bf30      	wfi
}
200060d6:	bf00      	nop
200060d8:	46bd      	mov	sp, r7
200060da:	f85d 7b04 	ldr.w	r7, [sp], #4
200060de:	4770      	bx	lr
200060e0:	40007000 	.word	0x40007000
200060e4:	e000ed00 	.word	0xe000ed00

200060e8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
200060e8:	b580      	push	{r7, lr}
200060ea:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
200060ec:	4b06      	ldr	r3, [pc, #24]	; (20006108 <HAL_PWR_PVD_IRQHandler+0x20>)
200060ee:	695b      	ldr	r3, [r3, #20]
200060f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200060f4:	2b00      	cmp	r3, #0
200060f6:	d005      	beq.n	20006104 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
200060f8:	f000 f808 	bl	2000610c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
200060fc:	4b02      	ldr	r3, [pc, #8]	; (20006108 <HAL_PWR_PVD_IRQHandler+0x20>)
200060fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20006102:	615a      	str	r2, [r3, #20]
  }
}
20006104:	bf00      	nop
20006106:	bd80      	pop	{r7, pc}
20006108:	40013c00 	.word	0x40013c00

2000610c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
2000610c:	b480      	push	{r7}
2000610e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
20006110:	bf00      	nop
20006112:	46bd      	mov	sp, r7
20006114:	f85d 7b04 	ldr.w	r7, [sp], #4
20006118:	4770      	bx	lr
	...

2000611c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
2000611c:	b480      	push	{r7}
2000611e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20006120:	4b05      	ldr	r3, [pc, #20]	; (20006138 <HAL_PWR_EnableSleepOnExit+0x1c>)
20006122:	691b      	ldr	r3, [r3, #16]
20006124:	4a04      	ldr	r2, [pc, #16]	; (20006138 <HAL_PWR_EnableSleepOnExit+0x1c>)
20006126:	f043 0302 	orr.w	r3, r3, #2
2000612a:	6113      	str	r3, [r2, #16]
}
2000612c:	bf00      	nop
2000612e:	46bd      	mov	sp, r7
20006130:	f85d 7b04 	ldr.w	r7, [sp], #4
20006134:	4770      	bx	lr
20006136:	bf00      	nop
20006138:	e000ed00 	.word	0xe000ed00

2000613c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
2000613c:	b480      	push	{r7}
2000613e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20006140:	4b05      	ldr	r3, [pc, #20]	; (20006158 <HAL_PWR_DisableSleepOnExit+0x1c>)
20006142:	691b      	ldr	r3, [r3, #16]
20006144:	4a04      	ldr	r2, [pc, #16]	; (20006158 <HAL_PWR_DisableSleepOnExit+0x1c>)
20006146:	f023 0302 	bic.w	r3, r3, #2
2000614a:	6113      	str	r3, [r2, #16]
}
2000614c:	bf00      	nop
2000614e:	46bd      	mov	sp, r7
20006150:	f85d 7b04 	ldr.w	r7, [sp], #4
20006154:	4770      	bx	lr
20006156:	bf00      	nop
20006158:	e000ed00 	.word	0xe000ed00

2000615c <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
2000615c:	b480      	push	{r7}
2000615e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20006160:	4b05      	ldr	r3, [pc, #20]	; (20006178 <HAL_PWR_EnableSEVOnPend+0x1c>)
20006162:	691b      	ldr	r3, [r3, #16]
20006164:	4a04      	ldr	r2, [pc, #16]	; (20006178 <HAL_PWR_EnableSEVOnPend+0x1c>)
20006166:	f043 0310 	orr.w	r3, r3, #16
2000616a:	6113      	str	r3, [r2, #16]
}
2000616c:	bf00      	nop
2000616e:	46bd      	mov	sp, r7
20006170:	f85d 7b04 	ldr.w	r7, [sp], #4
20006174:	4770      	bx	lr
20006176:	bf00      	nop
20006178:	e000ed00 	.word	0xe000ed00

2000617c <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
2000617c:	b480      	push	{r7}
2000617e:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20006180:	4b05      	ldr	r3, [pc, #20]	; (20006198 <HAL_PWR_DisableSEVOnPend+0x1c>)
20006182:	691b      	ldr	r3, [r3, #16]
20006184:	4a04      	ldr	r2, [pc, #16]	; (20006198 <HAL_PWR_DisableSEVOnPend+0x1c>)
20006186:	f023 0310 	bic.w	r3, r3, #16
2000618a:	6113      	str	r3, [r2, #16]
}
2000618c:	bf00      	nop
2000618e:	46bd      	mov	sp, r7
20006190:	f85d 7b04 	ldr.w	r7, [sp], #4
20006194:	4770      	bx	lr
20006196:	bf00      	nop
20006198:	e000ed00 	.word	0xe000ed00

2000619c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
2000619c:	b580      	push	{r7, lr}
2000619e:	b082      	sub	sp, #8
200061a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
200061a2:	2300      	movs	r3, #0
200061a4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
200061a6:	4b0e      	ldr	r3, [pc, #56]	; (200061e0 <HAL_PWREx_EnableBkUpReg+0x44>)
200061a8:	2201      	movs	r2, #1
200061aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200061ac:	f7fa fbaf 	bl	2000090e <HAL_GetTick>
200061b0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
200061b2:	e009      	b.n	200061c8 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
200061b4:	f7fa fbab 	bl	2000090e <HAL_GetTick>
200061b8:	4602      	mov	r2, r0
200061ba:	687b      	ldr	r3, [r7, #4]
200061bc:	1ad3      	subs	r3, r2, r3
200061be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200061c2:	d901      	bls.n	200061c8 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
200061c4:	2303      	movs	r3, #3
200061c6:	e006      	b.n	200061d6 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
200061c8:	4b06      	ldr	r3, [pc, #24]	; (200061e4 <HAL_PWREx_EnableBkUpReg+0x48>)
200061ca:	685b      	ldr	r3, [r3, #4]
200061cc:	f003 0308 	and.w	r3, r3, #8
200061d0:	2b08      	cmp	r3, #8
200061d2:	d1ef      	bne.n	200061b4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
200061d4:	2300      	movs	r3, #0
}
200061d6:	4618      	mov	r0, r3
200061d8:	3708      	adds	r7, #8
200061da:	46bd      	mov	sp, r7
200061dc:	bd80      	pop	{r7, pc}
200061de:	bf00      	nop
200061e0:	420e00a4 	.word	0x420e00a4
200061e4:	40007000 	.word	0x40007000

200061e8 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
200061e8:	b580      	push	{r7, lr}
200061ea:	b082      	sub	sp, #8
200061ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
200061ee:	2300      	movs	r3, #0
200061f0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
200061f2:	4b0e      	ldr	r3, [pc, #56]	; (2000622c <HAL_PWREx_DisableBkUpReg+0x44>)
200061f4:	2200      	movs	r2, #0
200061f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200061f8:	f7fa fb89 	bl	2000090e <HAL_GetTick>
200061fc:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
200061fe:	e009      	b.n	20006214 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20006200:	f7fa fb85 	bl	2000090e <HAL_GetTick>
20006204:	4602      	mov	r2, r0
20006206:	687b      	ldr	r3, [r7, #4]
20006208:	1ad3      	subs	r3, r2, r3
2000620a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000620e:	d901      	bls.n	20006214 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20006210:	2303      	movs	r3, #3
20006212:	e006      	b.n	20006222 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20006214:	4b06      	ldr	r3, [pc, #24]	; (20006230 <HAL_PWREx_DisableBkUpReg+0x48>)
20006216:	685b      	ldr	r3, [r3, #4]
20006218:	f003 0308 	and.w	r3, r3, #8
2000621c:	2b08      	cmp	r3, #8
2000621e:	d0ef      	beq.n	20006200 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20006220:	2300      	movs	r3, #0
}
20006222:	4618      	mov	r0, r3
20006224:	3708      	adds	r7, #8
20006226:	46bd      	mov	sp, r7
20006228:	bd80      	pop	{r7, pc}
2000622a:	bf00      	nop
2000622c:	420e00a4 	.word	0x420e00a4
20006230:	40007000 	.word	0x40007000

20006234 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
20006234:	b480      	push	{r7}
20006236:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
20006238:	4b03      	ldr	r3, [pc, #12]	; (20006248 <HAL_PWREx_EnableFlashPowerDown+0x14>)
2000623a:	2201      	movs	r2, #1
2000623c:	601a      	str	r2, [r3, #0]
}
2000623e:	bf00      	nop
20006240:	46bd      	mov	sp, r7
20006242:	f85d 7b04 	ldr.w	r7, [sp], #4
20006246:	4770      	bx	lr
20006248:	420e0024 	.word	0x420e0024

2000624c <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
2000624c:	b480      	push	{r7}
2000624e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
20006250:	4b03      	ldr	r3, [pc, #12]	; (20006260 <HAL_PWREx_DisableFlashPowerDown+0x14>)
20006252:	2200      	movs	r2, #0
20006254:	601a      	str	r2, [r3, #0]
}
20006256:	bf00      	nop
20006258:	46bd      	mov	sp, r7
2000625a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000625e:	4770      	bx	lr
20006260:	420e0024 	.word	0x420e0024

20006264 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
20006264:	b480      	push	{r7}
20006266:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
20006268:	4b04      	ldr	r3, [pc, #16]	; (2000627c <HAL_PWREx_GetVoltageRange+0x18>)
2000626a:	681b      	ldr	r3, [r3, #0]
2000626c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
20006270:	4618      	mov	r0, r3
20006272:	46bd      	mov	sp, r7
20006274:	f85d 7b04 	ldr.w	r7, [sp], #4
20006278:	4770      	bx	lr
2000627a:	bf00      	nop
2000627c:	40007000 	.word	0x40007000

20006280 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
20006280:	b580      	push	{r7, lr}
20006282:	b086      	sub	sp, #24
20006284:	af00      	add	r7, sp, #0
20006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20006288:	2300      	movs	r3, #0
2000628a:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
2000628c:	2300      	movs	r3, #0
2000628e:	613b      	str	r3, [r7, #16]
20006290:	4b35      	ldr	r3, [pc, #212]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006294:	4a34      	ldr	r2, [pc, #208]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000629a:	6413      	str	r3, [r2, #64]	; 0x40
2000629c:	4b32      	ldr	r3, [pc, #200]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
2000629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200062a4:	613b      	str	r3, [r7, #16]
200062a6:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
200062a8:	4b2f      	ldr	r3, [pc, #188]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062aa:	689b      	ldr	r3, [r3, #8]
200062ac:	f003 030c 	and.w	r3, r3, #12
200062b0:	2b08      	cmp	r3, #8
200062b2:	d051      	beq.n	20006358 <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
200062b4:	4b2d      	ldr	r3, [pc, #180]	; (2000636c <HAL_PWREx_ControlVoltageScaling+0xec>)
200062b6:	2200      	movs	r2, #0
200062b8:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
200062ba:	f7fa fb28 	bl	2000090e <HAL_GetTick>
200062be:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200062c0:	e008      	b.n	200062d4 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200062c2:	f7fa fb24 	bl	2000090e <HAL_GetTick>
200062c6:	4602      	mov	r2, r0
200062c8:	697b      	ldr	r3, [r7, #20]
200062ca:	1ad3      	subs	r3, r2, r3
200062cc:	2b02      	cmp	r3, #2
200062ce:	d901      	bls.n	200062d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
200062d0:	2303      	movs	r3, #3
200062d2:	e044      	b.n	2000635e <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200062d4:	4b24      	ldr	r3, [pc, #144]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062d6:	681b      	ldr	r3, [r3, #0]
200062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200062dc:	2b00      	cmp	r3, #0
200062de:	d1f0      	bne.n	200062c2 <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
200062e0:	2300      	movs	r3, #0
200062e2:	60fb      	str	r3, [r7, #12]
200062e4:	4b22      	ldr	r3, [pc, #136]	; (20006370 <HAL_PWREx_ControlVoltageScaling+0xf0>)
200062e6:	681b      	ldr	r3, [r3, #0]
200062e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
200062ec:	4920      	ldr	r1, [pc, #128]	; (20006370 <HAL_PWREx_ControlVoltageScaling+0xf0>)
200062ee:	687b      	ldr	r3, [r7, #4]
200062f0:	4313      	orrs	r3, r2
200062f2:	600b      	str	r3, [r1, #0]
200062f4:	4b1e      	ldr	r3, [pc, #120]	; (20006370 <HAL_PWREx_ControlVoltageScaling+0xf0>)
200062f6:	681b      	ldr	r3, [r3, #0]
200062f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
200062fc:	60fb      	str	r3, [r7, #12]
200062fe:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
20006300:	4b1a      	ldr	r3, [pc, #104]	; (2000636c <HAL_PWREx_ControlVoltageScaling+0xec>)
20006302:	2201      	movs	r2, #1
20006304:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
20006306:	f7fa fb02 	bl	2000090e <HAL_GetTick>
2000630a:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000630c:	e008      	b.n	20006320 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000630e:	f7fa fafe 	bl	2000090e <HAL_GetTick>
20006312:	4602      	mov	r2, r0
20006314:	697b      	ldr	r3, [r7, #20]
20006316:	1ad3      	subs	r3, r2, r3
20006318:	2b02      	cmp	r3, #2
2000631a:	d901      	bls.n	20006320 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
2000631c:	2303      	movs	r3, #3
2000631e:	e01e      	b.n	2000635e <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006320:	4b11      	ldr	r3, [pc, #68]	; (20006368 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006322:	681b      	ldr	r3, [r3, #0]
20006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006328:	2b00      	cmp	r3, #0
2000632a:	d0f0      	beq.n	2000630e <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000632c:	f7fa faef 	bl	2000090e <HAL_GetTick>
20006330:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20006332:	e009      	b.n	20006348 <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
20006334:	f7fa faeb 	bl	2000090e <HAL_GetTick>
20006338:	4602      	mov	r2, r0
2000633a:	697b      	ldr	r3, [r7, #20]
2000633c:	1ad3      	subs	r3, r2, r3
2000633e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006342:	d901      	bls.n	20006348 <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
20006344:	2303      	movs	r3, #3
20006346:	e00a      	b.n	2000635e <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20006348:	4b09      	ldr	r3, [pc, #36]	; (20006370 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000634a:	685b      	ldr	r3, [r3, #4]
2000634c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20006350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
20006354:	d1ee      	bne.n	20006334 <HAL_PWREx_ControlVoltageScaling+0xb4>
20006356:	e001      	b.n	2000635c <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
20006358:	2301      	movs	r3, #1
2000635a:	e000      	b.n	2000635e <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
2000635c:	2300      	movs	r3, #0
}
2000635e:	4618      	mov	r0, r3
20006360:	3718      	adds	r7, #24
20006362:	46bd      	mov	sp, r7
20006364:	bd80      	pop	{r7, pc}
20006366:	bf00      	nop
20006368:	40023800 	.word	0x40023800
2000636c:	42470060 	.word	0x42470060
20006370:	40007000 	.word	0x40007000

20006374 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
20006374:	b580      	push	{r7, lr}
20006376:	b082      	sub	sp, #8
20006378:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
2000637a:	2300      	movs	r3, #0
2000637c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
2000637e:	2300      	movs	r3, #0
20006380:	603b      	str	r3, [r7, #0]
20006382:	4b20      	ldr	r3, [pc, #128]	; (20006404 <HAL_PWREx_EnableOverDrive+0x90>)
20006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006386:	4a1f      	ldr	r2, [pc, #124]	; (20006404 <HAL_PWREx_EnableOverDrive+0x90>)
20006388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000638c:	6413      	str	r3, [r2, #64]	; 0x40
2000638e:	4b1d      	ldr	r3, [pc, #116]	; (20006404 <HAL_PWREx_EnableOverDrive+0x90>)
20006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20006396:	603b      	str	r3, [r7, #0]
20006398:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
2000639a:	4b1b      	ldr	r3, [pc, #108]	; (20006408 <HAL_PWREx_EnableOverDrive+0x94>)
2000639c:	2201      	movs	r2, #1
2000639e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200063a0:	f7fa fab5 	bl	2000090e <HAL_GetTick>
200063a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200063a6:	e009      	b.n	200063bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200063a8:	f7fa fab1 	bl	2000090e <HAL_GetTick>
200063ac:	4602      	mov	r2, r0
200063ae:	687b      	ldr	r3, [r7, #4]
200063b0:	1ad3      	subs	r3, r2, r3
200063b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200063b6:	d901      	bls.n	200063bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
200063b8:	2303      	movs	r3, #3
200063ba:	e01f      	b.n	200063fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200063bc:	4b13      	ldr	r3, [pc, #76]	; (2000640c <HAL_PWREx_EnableOverDrive+0x98>)
200063be:	685b      	ldr	r3, [r3, #4]
200063c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200063c8:	d1ee      	bne.n	200063a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
200063ca:	4b11      	ldr	r3, [pc, #68]	; (20006410 <HAL_PWREx_EnableOverDrive+0x9c>)
200063cc:	2201      	movs	r2, #1
200063ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200063d0:	f7fa fa9d 	bl	2000090e <HAL_GetTick>
200063d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200063d6:	e009      	b.n	200063ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200063d8:	f7fa fa99 	bl	2000090e <HAL_GetTick>
200063dc:	4602      	mov	r2, r0
200063de:	687b      	ldr	r3, [r7, #4]
200063e0:	1ad3      	subs	r3, r2, r3
200063e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200063e6:	d901      	bls.n	200063ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
200063e8:	2303      	movs	r3, #3
200063ea:	e007      	b.n	200063fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200063ec:	4b07      	ldr	r3, [pc, #28]	; (2000640c <HAL_PWREx_EnableOverDrive+0x98>)
200063ee:	685b      	ldr	r3, [r3, #4]
200063f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200063f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
200063f8:	d1ee      	bne.n	200063d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
200063fa:	2300      	movs	r3, #0
}
200063fc:	4618      	mov	r0, r3
200063fe:	3708      	adds	r7, #8
20006400:	46bd      	mov	sp, r7
20006402:	bd80      	pop	{r7, pc}
20006404:	40023800 	.word	0x40023800
20006408:	420e0040 	.word	0x420e0040
2000640c:	40007000 	.word	0x40007000
20006410:	420e0044 	.word	0x420e0044

20006414 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
20006414:	b580      	push	{r7, lr}
20006416:	b082      	sub	sp, #8
20006418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
2000641a:	2300      	movs	r3, #0
2000641c:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
2000641e:	2300      	movs	r3, #0
20006420:	603b      	str	r3, [r7, #0]
20006422:	4b20      	ldr	r3, [pc, #128]	; (200064a4 <HAL_PWREx_DisableOverDrive+0x90>)
20006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006426:	4a1f      	ldr	r2, [pc, #124]	; (200064a4 <HAL_PWREx_DisableOverDrive+0x90>)
20006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000642c:	6413      	str	r3, [r2, #64]	; 0x40
2000642e:	4b1d      	ldr	r3, [pc, #116]	; (200064a4 <HAL_PWREx_DisableOverDrive+0x90>)
20006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20006436:	603b      	str	r3, [r7, #0]
20006438:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
2000643a:	4b1b      	ldr	r3, [pc, #108]	; (200064a8 <HAL_PWREx_DisableOverDrive+0x94>)
2000643c:	2200      	movs	r2, #0
2000643e:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
20006440:	f7fa fa65 	bl	2000090e <HAL_GetTick>
20006444:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20006446:	e009      	b.n	2000645c <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20006448:	f7fa fa61 	bl	2000090e <HAL_GetTick>
2000644c:	4602      	mov	r2, r0
2000644e:	687b      	ldr	r3, [r7, #4]
20006450:	1ad3      	subs	r3, r2, r3
20006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006456:	d901      	bls.n	2000645c <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
20006458:	2303      	movs	r3, #3
2000645a:	e01f      	b.n	2000649c <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000645c:	4b13      	ldr	r3, [pc, #76]	; (200064ac <HAL_PWREx_DisableOverDrive+0x98>)
2000645e:	685b      	ldr	r3, [r3, #4]
20006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20006468:	d0ee      	beq.n	20006448 <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
2000646a:	4b11      	ldr	r3, [pc, #68]	; (200064b0 <HAL_PWREx_DisableOverDrive+0x9c>)
2000646c:	2200      	movs	r2, #0
2000646e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20006470:	f7fa fa4d 	bl	2000090e <HAL_GetTick>
20006474:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20006476:	e009      	b.n	2000648c <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
20006478:	f7fa fa49 	bl	2000090e <HAL_GetTick>
2000647c:	4602      	mov	r2, r0
2000647e:	687b      	ldr	r3, [r7, #4]
20006480:	1ad3      	subs	r3, r2, r3
20006482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006486:	d901      	bls.n	2000648c <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
20006488:	2303      	movs	r3, #3
2000648a:	e007      	b.n	2000649c <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000648c:	4b07      	ldr	r3, [pc, #28]	; (200064ac <HAL_PWREx_DisableOverDrive+0x98>)
2000648e:	685b      	ldr	r3, [r3, #4]
20006490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20006498:	d0ee      	beq.n	20006478 <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
2000649a:	2300      	movs	r3, #0
}
2000649c:	4618      	mov	r0, r3
2000649e:	3708      	adds	r7, #8
200064a0:	46bd      	mov	sp, r7
200064a2:	bd80      	pop	{r7, pc}
200064a4:	40023800 	.word	0x40023800
200064a8:	420e0044 	.word	0x420e0044
200064ac:	40007000 	.word	0x40007000
200064b0:	420e0040 	.word	0x420e0040

200064b4 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
200064b4:	b480      	push	{r7}
200064b6:	b085      	sub	sp, #20
200064b8:	af00      	add	r7, sp, #0
200064ba:	6078      	str	r0, [r7, #4]
200064bc:	460b      	mov	r3, r1
200064be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0U;
200064c0:	2300      	movs	r3, #0
200064c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
200064c4:	2300      	movs	r3, #0
200064c6:	60bb      	str	r3, [r7, #8]
200064c8:	4b20      	ldr	r3, [pc, #128]	; (2000654c <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
200064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200064cc:	4a1f      	ldr	r2, [pc, #124]	; (2000654c <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
200064ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200064d2:	6413      	str	r3, [r2, #64]	; 0x40
200064d4:	4b1d      	ldr	r3, [pc, #116]	; (2000654c <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
200064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200064dc:	60bb      	str	r3, [r7, #8]
200064de:	68bb      	ldr	r3, [r7, #8]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
200064e0:	4b1b      	ldr	r3, [pc, #108]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
200064e2:	685b      	ldr	r3, [r3, #4]
200064e4:	4a1a      	ldr	r2, [pc, #104]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
200064e6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
200064ea:	6053      	str	r3, [r2, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
200064ec:	4b18      	ldr	r3, [pc, #96]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
200064ee:	681b      	ldr	r3, [r3, #0]
200064f0:	4a17      	ldr	r2, [pc, #92]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
200064f2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
200064f6:	6013      	str	r3, [r2, #0]

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
200064f8:	4b15      	ldr	r3, [pc, #84]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
200064fa:	681b      	ldr	r3, [r3, #0]
200064fc:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
200064fe:	68fb      	ldr	r3, [r7, #12]
20006500:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
20006504:	f023 0303 	bic.w	r3, r3, #3
20006508:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg1 |= Regulator;
2000650a:	68fa      	ldr	r2, [r7, #12]
2000650c:	687b      	ldr	r3, [r7, #4]
2000650e:	4313      	orrs	r3, r2
20006510:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg1;
20006512:	4a0f      	ldr	r2, [pc, #60]	; (20006550 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
20006514:	68fb      	ldr	r3, [r7, #12]
20006516:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
20006518:	4b0e      	ldr	r3, [pc, #56]	; (20006554 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
2000651a:	691b      	ldr	r3, [r3, #16]
2000651c:	4a0d      	ldr	r2, [pc, #52]	; (20006554 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
2000651e:	f043 0304 	orr.w	r3, r3, #4
20006522:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
20006524:	78fb      	ldrb	r3, [r7, #3]
20006526:	2b01      	cmp	r3, #1
20006528:	d101      	bne.n	2000652e <HAL_PWREx_EnterUnderDriveSTOPMode+0x7a>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000652a:	bf30      	wfi
2000652c:	e000      	b.n	20006530 <HAL_PWREx_EnterUnderDriveSTOPMode+0x7c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
2000652e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
20006530:	4b08      	ldr	r3, [pc, #32]	; (20006554 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
20006532:	691b      	ldr	r3, [r3, #16]
20006534:	4a07      	ldr	r2, [pc, #28]	; (20006554 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
20006536:	f023 0304 	bic.w	r3, r3, #4
2000653a:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
2000653c:	2300      	movs	r3, #0
}
2000653e:	4618      	mov	r0, r3
20006540:	3714      	adds	r7, #20
20006542:	46bd      	mov	sp, r7
20006544:	f85d 7b04 	ldr.w	r7, [sp], #4
20006548:	4770      	bx	lr
2000654a:	bf00      	nop
2000654c:	40023800 	.word	0x40023800
20006550:	40007000 	.word	0x40007000
20006554:	e000ed00 	.word	0xe000ed00
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20006558:	b480      	push	{r7}
2000655a:	af00      	add	r7, sp, #0
  return HAL_OK;
2000655c:	2300      	movs	r3, #0
}
2000655e:	4618      	mov	r0, r3
20006560:	46bd      	mov	sp, r7
20006562:	f85d 7b04 	ldr.w	r7, [sp], #4
20006566:	4770      	bx	lr
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006568:	b580      	push	{r7, lr}
2000656a:	b086      	sub	sp, #24
2000656c:	af00      	add	r7, sp, #0
2000656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20006570:	687b      	ldr	r3, [r7, #4]
20006572:	2b00      	cmp	r3, #0
20006574:	d101      	bne.n	2000657a <HAL_PWREx_EnterUnderDriveSTOPMode+0xc6>
  {
    return HAL_ERROR;
20006576:	2301      	movs	r3, #1
20006578:	e26f      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000657a:	687b      	ldr	r3, [r7, #4]
2000657c:	681b      	ldr	r3, [r3, #0]
2000657e:	f003 0301 	and.w	r3, r3, #1
20006582:	2b00      	cmp	r3, #0
20006584:	d075      	beq.n	20006672 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20006586:	4b88      	ldr	r3, [pc, #544]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006588:	689b      	ldr	r3, [r3, #8]
2000658a:	f003 030c 	and.w	r3, r3, #12
2000658e:	2b04      	cmp	r3, #4
20006590:	d00c      	beq.n	200065ac <HAL_PWREx_EnterUnderDriveSTOPMode+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20006592:	4b85      	ldr	r3, [pc, #532]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006594:	689b      	ldr	r3, [r3, #8]
20006596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000659a:	2b08      	cmp	r3, #8
2000659c:	d112      	bne.n	200065c4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x110>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000659e:	4b82      	ldr	r3, [pc, #520]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065a0:	685b      	ldr	r3, [r3, #4]
200065a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200065a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200065aa:	d10b      	bne.n	200065c4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x110>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200065ac:	4b7e      	ldr	r3, [pc, #504]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065ae:	681b      	ldr	r3, [r3, #0]
200065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200065b4:	2b00      	cmp	r3, #0
200065b6:	d05b      	beq.n	20006670 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1bc>
200065b8:	687b      	ldr	r3, [r7, #4]
200065ba:	685b      	ldr	r3, [r3, #4]
200065bc:	2b00      	cmp	r3, #0
200065be:	d157      	bne.n	20006670 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1bc>
      {
        return HAL_ERROR;
200065c0:	2301      	movs	r3, #1
200065c2:	e24a      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200065c4:	687b      	ldr	r3, [r7, #4]
200065c6:	685b      	ldr	r3, [r3, #4]
200065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200065cc:	d106      	bne.n	200065dc <HAL_PWREx_EnterUnderDriveSTOPMode+0x128>
200065ce:	4b76      	ldr	r3, [pc, #472]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065d0:	681b      	ldr	r3, [r3, #0]
200065d2:	4a75      	ldr	r2, [pc, #468]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200065d8:	6013      	str	r3, [r2, #0]
200065da:	e01d      	b.n	20006618 <HAL_PWREx_EnterUnderDriveSTOPMode+0x164>
200065dc:	687b      	ldr	r3, [r7, #4]
200065de:	685b      	ldr	r3, [r3, #4]
200065e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
200065e4:	d10c      	bne.n	20006600 <HAL_PWREx_EnterUnderDriveSTOPMode+0x14c>
200065e6:	4b70      	ldr	r3, [pc, #448]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065e8:	681b      	ldr	r3, [r3, #0]
200065ea:	4a6f      	ldr	r2, [pc, #444]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200065f0:	6013      	str	r3, [r2, #0]
200065f2:	4b6d      	ldr	r3, [pc, #436]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065f4:	681b      	ldr	r3, [r3, #0]
200065f6:	4a6c      	ldr	r2, [pc, #432]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200065fc:	6013      	str	r3, [r2, #0]
200065fe:	e00b      	b.n	20006618 <HAL_PWREx_EnterUnderDriveSTOPMode+0x164>
20006600:	4b69      	ldr	r3, [pc, #420]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006602:	681b      	ldr	r3, [r3, #0]
20006604:	4a68      	ldr	r2, [pc, #416]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000660a:	6013      	str	r3, [r2, #0]
2000660c:	4b66      	ldr	r3, [pc, #408]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
2000660e:	681b      	ldr	r3, [r3, #0]
20006610:	4a65      	ldr	r2, [pc, #404]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20006616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20006618:	687b      	ldr	r3, [r7, #4]
2000661a:	685b      	ldr	r3, [r3, #4]
2000661c:	2b00      	cmp	r3, #0
2000661e:	d013      	beq.n	20006648 <HAL_PWREx_EnterUnderDriveSTOPMode+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006620:	f7fa f975 	bl	2000090e <HAL_GetTick>
20006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20006626:	e008      	b.n	2000663a <HAL_PWREx_EnterUnderDriveSTOPMode+0x186>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20006628:	f7fa f971 	bl	2000090e <HAL_GetTick>
2000662c:	4602      	mov	r2, r0
2000662e:	693b      	ldr	r3, [r7, #16]
20006630:	1ad3      	subs	r3, r2, r3
20006632:	2b64      	cmp	r3, #100	; 0x64
20006634:	d901      	bls.n	2000663a <HAL_PWREx_EnterUnderDriveSTOPMode+0x186>
          {
            return HAL_TIMEOUT;
20006636:	2303      	movs	r3, #3
20006638:	e20f      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000663a:	4b5b      	ldr	r3, [pc, #364]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
2000663c:	681b      	ldr	r3, [r3, #0]
2000663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006642:	2b00      	cmp	r3, #0
20006644:	d0f0      	beq.n	20006628 <HAL_PWREx_EnterUnderDriveSTOPMode+0x174>
20006646:	e014      	b.n	20006672 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006648:	f7fa f961 	bl	2000090e <HAL_GetTick>
2000664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000664e:	e008      	b.n	20006662 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20006650:	f7fa f95d 	bl	2000090e <HAL_GetTick>
20006654:	4602      	mov	r2, r0
20006656:	693b      	ldr	r3, [r7, #16]
20006658:	1ad3      	subs	r3, r2, r3
2000665a:	2b64      	cmp	r3, #100	; 0x64
2000665c:	d901      	bls.n	20006662 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ae>
          {
            return HAL_TIMEOUT;
2000665e:	2303      	movs	r3, #3
20006660:	e1fb      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20006662:	4b51      	ldr	r3, [pc, #324]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006664:	681b      	ldr	r3, [r3, #0]
20006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000666a:	2b00      	cmp	r3, #0
2000666c:	d1f0      	bne.n	20006650 <HAL_PWREx_EnterUnderDriveSTOPMode+0x19c>
2000666e:	e000      	b.n	20006672 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20006670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20006672:	687b      	ldr	r3, [r7, #4]
20006674:	681b      	ldr	r3, [r3, #0]
20006676:	f003 0302 	and.w	r3, r3, #2
2000667a:	2b00      	cmp	r3, #0
2000667c:	d063      	beq.n	20006746 <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000667e:	4b4a      	ldr	r3, [pc, #296]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006680:	689b      	ldr	r3, [r3, #8]
20006682:	f003 030c 	and.w	r3, r3, #12
20006686:	2b00      	cmp	r3, #0
20006688:	d00b      	beq.n	200066a2 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000668a:	4b47      	ldr	r3, [pc, #284]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
2000668c:	689b      	ldr	r3, [r3, #8]
2000668e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20006692:	2b08      	cmp	r3, #8
20006694:	d11c      	bne.n	200066d0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x21c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20006696:	4b44      	ldr	r3, [pc, #272]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006698:	685b      	ldr	r3, [r3, #4]
2000669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000669e:	2b00      	cmp	r3, #0
200066a0:	d116      	bne.n	200066d0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x21c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200066a2:	4b41      	ldr	r3, [pc, #260]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200066a4:	681b      	ldr	r3, [r3, #0]
200066a6:	f003 0302 	and.w	r3, r3, #2
200066aa:	2b00      	cmp	r3, #0
200066ac:	d005      	beq.n	200066ba <HAL_PWREx_EnterUnderDriveSTOPMode+0x206>
200066ae:	687b      	ldr	r3, [r7, #4]
200066b0:	68db      	ldr	r3, [r3, #12]
200066b2:	2b01      	cmp	r3, #1
200066b4:	d001      	beq.n	200066ba <HAL_PWREx_EnterUnderDriveSTOPMode+0x206>
      {
        return HAL_ERROR;
200066b6:	2301      	movs	r3, #1
200066b8:	e1cf      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200066ba:	4b3b      	ldr	r3, [pc, #236]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200066bc:	681b      	ldr	r3, [r3, #0]
200066be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
200066c2:	687b      	ldr	r3, [r7, #4]
200066c4:	691b      	ldr	r3, [r3, #16]
200066c6:	00db      	lsls	r3, r3, #3
200066c8:	4937      	ldr	r1, [pc, #220]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200066ca:	4313      	orrs	r3, r2
200066cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200066ce:	e03a      	b.n	20006746 <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
200066d0:	687b      	ldr	r3, [r7, #4]
200066d2:	68db      	ldr	r3, [r3, #12]
200066d4:	2b00      	cmp	r3, #0
200066d6:	d020      	beq.n	2000671a <HAL_PWREx_EnterUnderDriveSTOPMode+0x266>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
200066d8:	4b34      	ldr	r3, [pc, #208]	; (200067ac <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f8>)
200066da:	2201      	movs	r2, #1
200066dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200066de:	f7fa f916 	bl	2000090e <HAL_GetTick>
200066e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200066e4:	e008      	b.n	200066f8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200066e6:	f7fa f912 	bl	2000090e <HAL_GetTick>
200066ea:	4602      	mov	r2, r0
200066ec:	693b      	ldr	r3, [r7, #16]
200066ee:	1ad3      	subs	r3, r2, r3
200066f0:	2b02      	cmp	r3, #2
200066f2:	d901      	bls.n	200066f8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x244>
          {
            return HAL_TIMEOUT;
200066f4:	2303      	movs	r3, #3
200066f6:	e1b0      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200066f8:	4b2b      	ldr	r3, [pc, #172]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
200066fa:	681b      	ldr	r3, [r3, #0]
200066fc:	f003 0302 	and.w	r3, r3, #2
20006700:	2b00      	cmp	r3, #0
20006702:	d0f0      	beq.n	200066e6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x232>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20006704:	4b28      	ldr	r3, [pc, #160]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006706:	681b      	ldr	r3, [r3, #0]
20006708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000670c:	687b      	ldr	r3, [r7, #4]
2000670e:	691b      	ldr	r3, [r3, #16]
20006710:	00db      	lsls	r3, r3, #3
20006712:	4925      	ldr	r1, [pc, #148]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
20006714:	4313      	orrs	r3, r2
20006716:	600b      	str	r3, [r1, #0]
20006718:	e015      	b.n	20006746 <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000671a:	4b24      	ldr	r3, [pc, #144]	; (200067ac <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f8>)
2000671c:	2200      	movs	r2, #0
2000671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006720:	f7fa f8f5 	bl	2000090e <HAL_GetTick>
20006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20006726:	e008      	b.n	2000673a <HAL_PWREx_EnterUnderDriveSTOPMode+0x286>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20006728:	f7fa f8f1 	bl	2000090e <HAL_GetTick>
2000672c:	4602      	mov	r2, r0
2000672e:	693b      	ldr	r3, [r7, #16]
20006730:	1ad3      	subs	r3, r2, r3
20006732:	2b02      	cmp	r3, #2
20006734:	d901      	bls.n	2000673a <HAL_PWREx_EnterUnderDriveSTOPMode+0x286>
          {
            return HAL_TIMEOUT;
20006736:	2303      	movs	r3, #3
20006738:	e18f      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000673a:	4b1b      	ldr	r3, [pc, #108]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
2000673c:	681b      	ldr	r3, [r3, #0]
2000673e:	f003 0302 	and.w	r3, r3, #2
20006742:	2b00      	cmp	r3, #0
20006744:	d1f0      	bne.n	20006728 <HAL_PWREx_EnterUnderDriveSTOPMode+0x274>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20006746:	687b      	ldr	r3, [r7, #4]
20006748:	681b      	ldr	r3, [r3, #0]
2000674a:	f003 0308 	and.w	r3, r3, #8
2000674e:	2b00      	cmp	r3, #0
20006750:	d036      	beq.n	200067c0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20006752:	687b      	ldr	r3, [r7, #4]
20006754:	695b      	ldr	r3, [r3, #20]
20006756:	2b00      	cmp	r3, #0
20006758:	d016      	beq.n	20006788 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000675a:	4b15      	ldr	r3, [pc, #84]	; (200067b0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2fc>)
2000675c:	2201      	movs	r2, #1
2000675e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006760:	f7fa f8d5 	bl	2000090e <HAL_GetTick>
20006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20006766:	e008      	b.n	2000677a <HAL_PWREx_EnterUnderDriveSTOPMode+0x2c6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20006768:	f7fa f8d1 	bl	2000090e <HAL_GetTick>
2000676c:	4602      	mov	r2, r0
2000676e:	693b      	ldr	r3, [r7, #16]
20006770:	1ad3      	subs	r3, r2, r3
20006772:	2b02      	cmp	r3, #2
20006774:	d901      	bls.n	2000677a <HAL_PWREx_EnterUnderDriveSTOPMode+0x2c6>
        {
          return HAL_TIMEOUT;
20006776:	2303      	movs	r3, #3
20006778:	e16f      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000677a:	4b0b      	ldr	r3, [pc, #44]	; (200067a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>)
2000677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000677e:	f003 0302 	and.w	r3, r3, #2
20006782:	2b00      	cmp	r3, #0
20006784:	d0f0      	beq.n	20006768 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2b4>
20006786:	e01b      	b.n	200067c0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20006788:	4b09      	ldr	r3, [pc, #36]	; (200067b0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2fc>)
2000678a:	2200      	movs	r2, #0
2000678c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000678e:	f7fa f8be 	bl	2000090e <HAL_GetTick>
20006792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006794:	e00e      	b.n	200067b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20006796:	f7fa f8ba 	bl	2000090e <HAL_GetTick>
2000679a:	4602      	mov	r2, r0
2000679c:	693b      	ldr	r3, [r7, #16]
2000679e:	1ad3      	subs	r3, r2, r3
200067a0:	2b02      	cmp	r3, #2
200067a2:	d907      	bls.n	200067b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x300>
        {
          return HAL_TIMEOUT;
200067a4:	2303      	movs	r3, #3
200067a6:	e158      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
200067a8:	40023800 	.word	0x40023800
200067ac:	42470000 	.word	0x42470000
200067b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200067b4:	4b88      	ldr	r3, [pc, #544]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200067b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200067b8:	f003 0302 	and.w	r3, r3, #2
200067bc:	2b00      	cmp	r3, #0
200067be:	d1ea      	bne.n	20006796 <HAL_PWREx_EnterUnderDriveSTOPMode+0x2e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200067c0:	687b      	ldr	r3, [r7, #4]
200067c2:	681b      	ldr	r3, [r3, #0]
200067c4:	f003 0304 	and.w	r3, r3, #4
200067c8:	2b00      	cmp	r3, #0
200067ca:	f000 8097 	beq.w	200068fc <HAL_PWREx_EnterUnderDriveSTOPMode+0x448>
  {
    FlagStatus       pwrclkchanged = RESET;
200067ce:	2300      	movs	r3, #0
200067d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
200067d2:	4b81      	ldr	r3, [pc, #516]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200067d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200067da:	2b00      	cmp	r3, #0
200067dc:	d10f      	bne.n	200067fe <HAL_PWREx_EnterUnderDriveSTOPMode+0x34a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
200067de:	2300      	movs	r3, #0
200067e0:	60bb      	str	r3, [r7, #8]
200067e2:	4b7d      	ldr	r3, [pc, #500]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200067e6:	4a7c      	ldr	r2, [pc, #496]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200067e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200067ec:	6413      	str	r3, [r2, #64]	; 0x40
200067ee:	4b7a      	ldr	r3, [pc, #488]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200067f6:	60bb      	str	r3, [r7, #8]
200067f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
200067fa:	2301      	movs	r3, #1
200067fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200067fe:	4b77      	ldr	r3, [pc, #476]	; (200069dc <HAL_PWREx_EnterUnderDriveSTOPMode+0x528>)
20006800:	681b      	ldr	r3, [r3, #0]
20006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
20006806:	2b00      	cmp	r3, #0
20006808:	d118      	bne.n	2000683c <HAL_PWREx_EnterUnderDriveSTOPMode+0x388>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000680a:	4b74      	ldr	r3, [pc, #464]	; (200069dc <HAL_PWREx_EnterUnderDriveSTOPMode+0x528>)
2000680c:	681b      	ldr	r3, [r3, #0]
2000680e:	4a73      	ldr	r2, [pc, #460]	; (200069dc <HAL_PWREx_EnterUnderDriveSTOPMode+0x528>)
20006810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20006814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20006816:	f7fa f87a 	bl	2000090e <HAL_GetTick>
2000681a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000681c:	e008      	b.n	20006830 <HAL_PWREx_EnterUnderDriveSTOPMode+0x37c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000681e:	f7fa f876 	bl	2000090e <HAL_GetTick>
20006822:	4602      	mov	r2, r0
20006824:	693b      	ldr	r3, [r7, #16]
20006826:	1ad3      	subs	r3, r2, r3
20006828:	2b02      	cmp	r3, #2
2000682a:	d901      	bls.n	20006830 <HAL_PWREx_EnterUnderDriveSTOPMode+0x37c>
        {
          return HAL_TIMEOUT;
2000682c:	2303      	movs	r3, #3
2000682e:	e114      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006830:	4b6a      	ldr	r3, [pc, #424]	; (200069dc <HAL_PWREx_EnterUnderDriveSTOPMode+0x528>)
20006832:	681b      	ldr	r3, [r3, #0]
20006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
20006838:	2b00      	cmp	r3, #0
2000683a:	d0f0      	beq.n	2000681e <HAL_PWREx_EnterUnderDriveSTOPMode+0x36a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000683c:	687b      	ldr	r3, [r7, #4]
2000683e:	689b      	ldr	r3, [r3, #8]
20006840:	2b01      	cmp	r3, #1
20006842:	d106      	bne.n	20006852 <HAL_PWREx_EnterUnderDriveSTOPMode+0x39e>
20006844:	4b64      	ldr	r3, [pc, #400]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006848:	4a63      	ldr	r2, [pc, #396]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000684a:	f043 0301 	orr.w	r3, r3, #1
2000684e:	6713      	str	r3, [r2, #112]	; 0x70
20006850:	e01c      	b.n	2000688c <HAL_PWREx_EnterUnderDriveSTOPMode+0x3d8>
20006852:	687b      	ldr	r3, [r7, #4]
20006854:	689b      	ldr	r3, [r3, #8]
20006856:	2b05      	cmp	r3, #5
20006858:	d10c      	bne.n	20006874 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3c0>
2000685a:	4b5f      	ldr	r3, [pc, #380]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000685e:	4a5e      	ldr	r2, [pc, #376]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006860:	f043 0304 	orr.w	r3, r3, #4
20006864:	6713      	str	r3, [r2, #112]	; 0x70
20006866:	4b5c      	ldr	r3, [pc, #368]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000686a:	4a5b      	ldr	r2, [pc, #364]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000686c:	f043 0301 	orr.w	r3, r3, #1
20006870:	6713      	str	r3, [r2, #112]	; 0x70
20006872:	e00b      	b.n	2000688c <HAL_PWREx_EnterUnderDriveSTOPMode+0x3d8>
20006874:	4b58      	ldr	r3, [pc, #352]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006878:	4a57      	ldr	r2, [pc, #348]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000687a:	f023 0301 	bic.w	r3, r3, #1
2000687e:	6713      	str	r3, [r2, #112]	; 0x70
20006880:	4b55      	ldr	r3, [pc, #340]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006884:	4a54      	ldr	r2, [pc, #336]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006886:	f023 0304 	bic.w	r3, r3, #4
2000688a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000688c:	687b      	ldr	r3, [r7, #4]
2000688e:	689b      	ldr	r3, [r3, #8]
20006890:	2b00      	cmp	r3, #0
20006892:	d015      	beq.n	200068c0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x40c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006894:	f7fa f83b 	bl	2000090e <HAL_GetTick>
20006898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000689a:	e00a      	b.n	200068b2 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000689c:	f7fa f837 	bl	2000090e <HAL_GetTick>
200068a0:	4602      	mov	r2, r0
200068a2:	693b      	ldr	r3, [r7, #16]
200068a4:	1ad3      	subs	r3, r2, r3
200068a6:	f241 3288 	movw	r2, #5000	; 0x1388
200068aa:	4293      	cmp	r3, r2
200068ac:	d901      	bls.n	200068b2 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3fe>
        {
          return HAL_TIMEOUT;
200068ae:	2303      	movs	r3, #3
200068b0:	e0d3      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200068b2:	4b49      	ldr	r3, [pc, #292]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200068b6:	f003 0302 	and.w	r3, r3, #2
200068ba:	2b00      	cmp	r3, #0
200068bc:	d0ee      	beq.n	2000689c <HAL_PWREx_EnterUnderDriveSTOPMode+0x3e8>
200068be:	e014      	b.n	200068ea <HAL_PWREx_EnterUnderDriveSTOPMode+0x436>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
200068c0:	f7fa f825 	bl	2000090e <HAL_GetTick>
200068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200068c6:	e00a      	b.n	200068de <HAL_PWREx_EnterUnderDriveSTOPMode+0x42a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200068c8:	f7fa f821 	bl	2000090e <HAL_GetTick>
200068cc:	4602      	mov	r2, r0
200068ce:	693b      	ldr	r3, [r7, #16]
200068d0:	1ad3      	subs	r3, r2, r3
200068d2:	f241 3288 	movw	r2, #5000	; 0x1388
200068d6:	4293      	cmp	r3, r2
200068d8:	d901      	bls.n	200068de <HAL_PWREx_EnterUnderDriveSTOPMode+0x42a>
        {
          return HAL_TIMEOUT;
200068da:	2303      	movs	r3, #3
200068dc:	e0bd      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200068de:	4b3e      	ldr	r3, [pc, #248]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200068e2:	f003 0302 	and.w	r3, r3, #2
200068e6:	2b00      	cmp	r3, #0
200068e8:	d1ee      	bne.n	200068c8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x414>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200068ea:	7dfb      	ldrb	r3, [r7, #23]
200068ec:	2b01      	cmp	r3, #1
200068ee:	d105      	bne.n	200068fc <HAL_PWREx_EnterUnderDriveSTOPMode+0x448>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200068f0:	4b39      	ldr	r3, [pc, #228]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200068f4:	4a38      	ldr	r2, [pc, #224]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200068f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200068fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200068fc:	687b      	ldr	r3, [r7, #4]
200068fe:	699b      	ldr	r3, [r3, #24]
20006900:	2b00      	cmp	r3, #0
20006902:	f000 80a9 	beq.w	20006a58 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20006906:	4b34      	ldr	r3, [pc, #208]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006908:	689b      	ldr	r3, [r3, #8]
2000690a:	f003 030c 	and.w	r3, r3, #12
2000690e:	2b08      	cmp	r3, #8
20006910:	d05c      	beq.n	200069cc <HAL_PWREx_EnterUnderDriveSTOPMode+0x518>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20006912:	687b      	ldr	r3, [r7, #4]
20006914:	699b      	ldr	r3, [r3, #24]
20006916:	2b02      	cmp	r3, #2
20006918:	d141      	bne.n	2000699e <HAL_PWREx_EnterUnderDriveSTOPMode+0x4ea>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000691a:	4b31      	ldr	r3, [pc, #196]	; (200069e0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x52c>)
2000691c:	2200      	movs	r2, #0
2000691e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006920:	f7f9 fff5 	bl	2000090e <HAL_GetTick>
20006924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006926:	e008      	b.n	2000693a <HAL_PWREx_EnterUnderDriveSTOPMode+0x486>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20006928:	f7f9 fff1 	bl	2000090e <HAL_GetTick>
2000692c:	4602      	mov	r2, r0
2000692e:	693b      	ldr	r3, [r7, #16]
20006930:	1ad3      	subs	r3, r2, r3
20006932:	2b02      	cmp	r3, #2
20006934:	d901      	bls.n	2000693a <HAL_PWREx_EnterUnderDriveSTOPMode+0x486>
          {
            return HAL_TIMEOUT;
20006936:	2303      	movs	r3, #3
20006938:	e08f      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000693a:	4b27      	ldr	r3, [pc, #156]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000693c:	681b      	ldr	r3, [r3, #0]
2000693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006942:	2b00      	cmp	r3, #0
20006944:	d1f0      	bne.n	20006928 <HAL_PWREx_EnterUnderDriveSTOPMode+0x474>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20006946:	687b      	ldr	r3, [r7, #4]
20006948:	69da      	ldr	r2, [r3, #28]
2000694a:	687b      	ldr	r3, [r7, #4]
2000694c:	6a1b      	ldr	r3, [r3, #32]
2000694e:	431a      	orrs	r2, r3
20006950:	687b      	ldr	r3, [r7, #4]
20006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006954:	019b      	lsls	r3, r3, #6
20006956:	431a      	orrs	r2, r3
20006958:	687b      	ldr	r3, [r7, #4]
2000695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000695c:	085b      	lsrs	r3, r3, #1
2000695e:	3b01      	subs	r3, #1
20006960:	041b      	lsls	r3, r3, #16
20006962:	431a      	orrs	r2, r3
20006964:	687b      	ldr	r3, [r7, #4]
20006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006968:	061b      	lsls	r3, r3, #24
2000696a:	491b      	ldr	r1, [pc, #108]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
2000696c:	4313      	orrs	r3, r2
2000696e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20006970:	4b1b      	ldr	r3, [pc, #108]	; (200069e0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x52c>)
20006972:	2201      	movs	r2, #1
20006974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006976:	f7f9 ffca 	bl	2000090e <HAL_GetTick>
2000697a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000697c:	e008      	b.n	20006990 <HAL_PWREx_EnterUnderDriveSTOPMode+0x4dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000697e:	f7f9 ffc6 	bl	2000090e <HAL_GetTick>
20006982:	4602      	mov	r2, r0
20006984:	693b      	ldr	r3, [r7, #16]
20006986:	1ad3      	subs	r3, r2, r3
20006988:	2b02      	cmp	r3, #2
2000698a:	d901      	bls.n	20006990 <HAL_PWREx_EnterUnderDriveSTOPMode+0x4dc>
          {
            return HAL_TIMEOUT;
2000698c:	2303      	movs	r3, #3
2000698e:	e064      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006990:	4b11      	ldr	r3, [pc, #68]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
20006992:	681b      	ldr	r3, [r3, #0]
20006994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006998:	2b00      	cmp	r3, #0
2000699a:	d0f0      	beq.n	2000697e <HAL_PWREx_EnterUnderDriveSTOPMode+0x4ca>
2000699c:	e05c      	b.n	20006a58 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000699e:	4b10      	ldr	r3, [pc, #64]	; (200069e0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x52c>)
200069a0:	2200      	movs	r2, #0
200069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200069a4:	f7f9 ffb3 	bl	2000090e <HAL_GetTick>
200069a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200069aa:	e008      	b.n	200069be <HAL_PWREx_EnterUnderDriveSTOPMode+0x50a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200069ac:	f7f9 ffaf 	bl	2000090e <HAL_GetTick>
200069b0:	4602      	mov	r2, r0
200069b2:	693b      	ldr	r3, [r7, #16]
200069b4:	1ad3      	subs	r3, r2, r3
200069b6:	2b02      	cmp	r3, #2
200069b8:	d901      	bls.n	200069be <HAL_PWREx_EnterUnderDriveSTOPMode+0x50a>
          {
            return HAL_TIMEOUT;
200069ba:	2303      	movs	r3, #3
200069bc:	e04d      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200069be:	4b06      	ldr	r3, [pc, #24]	; (200069d8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x524>)
200069c0:	681b      	ldr	r3, [r3, #0]
200069c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200069c6:	2b00      	cmp	r3, #0
200069c8:	d1f0      	bne.n	200069ac <HAL_PWREx_EnterUnderDriveSTOPMode+0x4f8>
200069ca:	e045      	b.n	20006a58 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
200069cc:	687b      	ldr	r3, [r7, #4]
200069ce:	699b      	ldr	r3, [r3, #24]
200069d0:	2b01      	cmp	r3, #1
200069d2:	d107      	bne.n	200069e4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x530>
      {
        return HAL_ERROR;
200069d4:	2301      	movs	r3, #1
200069d6:	e040      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
200069d8:	40023800 	.word	0x40023800
200069dc:	40007000 	.word	0x40007000
200069e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200069e4:	4b1f      	ldr	r3, [pc, #124]	; (20006a64 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5b0>)
200069e6:	685b      	ldr	r3, [r3, #4]
200069e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200069ea:	687b      	ldr	r3, [r7, #4]
200069ec:	699b      	ldr	r3, [r3, #24]
200069ee:	2b01      	cmp	r3, #1
200069f0:	d030      	beq.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200069f2:	68fb      	ldr	r3, [r7, #12]
200069f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
200069f8:	687b      	ldr	r3, [r7, #4]
200069fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200069fc:	429a      	cmp	r2, r3
200069fe:	d129      	bne.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20006a00:	68fb      	ldr	r3, [r7, #12]
20006a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20006a06:	687b      	ldr	r3, [r7, #4]
20006a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006a0a:	429a      	cmp	r2, r3
20006a0c:	d122      	bne.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20006a0e:	68fa      	ldr	r2, [r7, #12]
20006a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20006a14:	4013      	ands	r3, r2
20006a16:	687a      	ldr	r2, [r7, #4]
20006a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
20006a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20006a1c:	4293      	cmp	r3, r2
20006a1e:	d119      	bne.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20006a20:	68fb      	ldr	r3, [r7, #12]
20006a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20006a26:	687b      	ldr	r3, [r7, #4]
20006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006a2a:	085b      	lsrs	r3, r3, #1
20006a2c:	3b01      	subs	r3, #1
20006a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20006a30:	429a      	cmp	r2, r3
20006a32:	d10f      	bne.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20006a34:	68fb      	ldr	r3, [r7, #12]
20006a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20006a3a:	687b      	ldr	r3, [r7, #4]
20006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20006a40:	429a      	cmp	r2, r3
20006a42:	d107      	bne.n	20006a54 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20006a44:	68fb      	ldr	r3, [r7, #12]
20006a46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
20006a4a:	687b      	ldr	r3, [r7, #4]
20006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006a4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20006a50:	429a      	cmp	r2, r3
20006a52:	d001      	beq.n	20006a58 <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
20006a54:	2301      	movs	r3, #1
20006a56:	e000      	b.n	20006a5a <HAL_PWREx_EnterUnderDriveSTOPMode+0x5a6>
        }
      }
    }
  }
  return HAL_OK;
20006a58:	2300      	movs	r3, #0
}
20006a5a:	4618      	mov	r0, r3
20006a5c:	3718      	adds	r7, #24
20006a5e:	46bd      	mov	sp, r7
20006a60:	bd80      	pop	{r7, pc}
20006a62:	bf00      	nop
20006a64:	40023800 	.word	0x40023800

20006a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20006a68:	b580      	push	{r7, lr}
20006a6a:	b084      	sub	sp, #16
20006a6c:	af00      	add	r7, sp, #0
20006a6e:	6078      	str	r0, [r7, #4]
20006a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
20006a72:	687b      	ldr	r3, [r7, #4]
20006a74:	2b00      	cmp	r3, #0
20006a76:	d101      	bne.n	20006a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20006a78:	2301      	movs	r3, #1
20006a7a:	e0cc      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
20006a7c:	4b68      	ldr	r3, [pc, #416]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006a7e:	681b      	ldr	r3, [r3, #0]
20006a80:	f003 030f 	and.w	r3, r3, #15
20006a84:	683a      	ldr	r2, [r7, #0]
20006a86:	429a      	cmp	r2, r3
20006a88:	d90c      	bls.n	20006aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006a8a:	4b65      	ldr	r3, [pc, #404]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006a8c:	683a      	ldr	r2, [r7, #0]
20006a8e:	b2d2      	uxtb	r2, r2
20006a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20006a92:	4b63      	ldr	r3, [pc, #396]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006a94:	681b      	ldr	r3, [r3, #0]
20006a96:	f003 030f 	and.w	r3, r3, #15
20006a9a:	683a      	ldr	r2, [r7, #0]
20006a9c:	429a      	cmp	r2, r3
20006a9e:	d001      	beq.n	20006aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20006aa0:	2301      	movs	r3, #1
20006aa2:	e0b8      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20006aa4:	687b      	ldr	r3, [r7, #4]
20006aa6:	681b      	ldr	r3, [r3, #0]
20006aa8:	f003 0302 	and.w	r3, r3, #2
20006aac:	2b00      	cmp	r3, #0
20006aae:	d020      	beq.n	20006af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006ab0:	687b      	ldr	r3, [r7, #4]
20006ab2:	681b      	ldr	r3, [r3, #0]
20006ab4:	f003 0304 	and.w	r3, r3, #4
20006ab8:	2b00      	cmp	r3, #0
20006aba:	d005      	beq.n	20006ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20006abc:	4b59      	ldr	r3, [pc, #356]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006abe:	689b      	ldr	r3, [r3, #8]
20006ac0:	4a58      	ldr	r2, [pc, #352]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
20006ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006ac8:	687b      	ldr	r3, [r7, #4]
20006aca:	681b      	ldr	r3, [r3, #0]
20006acc:	f003 0308 	and.w	r3, r3, #8
20006ad0:	2b00      	cmp	r3, #0
20006ad2:	d005      	beq.n	20006ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20006ad4:	4b53      	ldr	r3, [pc, #332]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006ad6:	689b      	ldr	r3, [r3, #8]
20006ad8:	4a52      	ldr	r2, [pc, #328]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20006ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20006ae0:	4b50      	ldr	r3, [pc, #320]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006ae2:	689b      	ldr	r3, [r3, #8]
20006ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20006ae8:	687b      	ldr	r3, [r7, #4]
20006aea:	689b      	ldr	r3, [r3, #8]
20006aec:	494d      	ldr	r1, [pc, #308]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006aee:	4313      	orrs	r3, r2
20006af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20006af2:	687b      	ldr	r3, [r7, #4]
20006af4:	681b      	ldr	r3, [r3, #0]
20006af6:	f003 0301 	and.w	r3, r3, #1
20006afa:	2b00      	cmp	r3, #0
20006afc:	d044      	beq.n	20006b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20006afe:	687b      	ldr	r3, [r7, #4]
20006b00:	685b      	ldr	r3, [r3, #4]
20006b02:	2b01      	cmp	r3, #1
20006b04:	d107      	bne.n	20006b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20006b06:	4b47      	ldr	r3, [pc, #284]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b08:	681b      	ldr	r3, [r3, #0]
20006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006b0e:	2b00      	cmp	r3, #0
20006b10:	d119      	bne.n	20006b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006b12:	2301      	movs	r3, #1
20006b14:	e07f      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20006b16:	687b      	ldr	r3, [r7, #4]
20006b18:	685b      	ldr	r3, [r3, #4]
20006b1a:	2b02      	cmp	r3, #2
20006b1c:	d003      	beq.n	20006b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20006b1e:	687b      	ldr	r3, [r7, #4]
20006b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20006b22:	2b03      	cmp	r3, #3
20006b24:	d107      	bne.n	20006b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006b26:	4b3f      	ldr	r3, [pc, #252]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b28:	681b      	ldr	r3, [r3, #0]
20006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006b2e:	2b00      	cmp	r3, #0
20006b30:	d109      	bne.n	20006b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006b32:	2301      	movs	r3, #1
20006b34:	e06f      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20006b36:	4b3b      	ldr	r3, [pc, #236]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b38:	681b      	ldr	r3, [r3, #0]
20006b3a:	f003 0302 	and.w	r3, r3, #2
20006b3e:	2b00      	cmp	r3, #0
20006b40:	d101      	bne.n	20006b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006b42:	2301      	movs	r3, #1
20006b44:	e067      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20006b46:	4b37      	ldr	r3, [pc, #220]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b48:	689b      	ldr	r3, [r3, #8]
20006b4a:	f023 0203 	bic.w	r2, r3, #3
20006b4e:	687b      	ldr	r3, [r7, #4]
20006b50:	685b      	ldr	r3, [r3, #4]
20006b52:	4934      	ldr	r1, [pc, #208]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b54:	4313      	orrs	r3, r2
20006b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20006b58:	f7f9 fed9 	bl	2000090e <HAL_GetTick>
20006b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006b5e:	e00a      	b.n	20006b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006b60:	f7f9 fed5 	bl	2000090e <HAL_GetTick>
20006b64:	4602      	mov	r2, r0
20006b66:	68fb      	ldr	r3, [r7, #12]
20006b68:	1ad3      	subs	r3, r2, r3
20006b6a:	f241 3288 	movw	r2, #5000	; 0x1388
20006b6e:	4293      	cmp	r3, r2
20006b70:	d901      	bls.n	20006b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20006b72:	2303      	movs	r3, #3
20006b74:	e04f      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006b76:	4b2b      	ldr	r3, [pc, #172]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006b78:	689b      	ldr	r3, [r3, #8]
20006b7a:	f003 020c 	and.w	r2, r3, #12
20006b7e:	687b      	ldr	r3, [r7, #4]
20006b80:	685b      	ldr	r3, [r3, #4]
20006b82:	009b      	lsls	r3, r3, #2
20006b84:	429a      	cmp	r2, r3
20006b86:	d1eb      	bne.n	20006b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20006b88:	4b25      	ldr	r3, [pc, #148]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006b8a:	681b      	ldr	r3, [r3, #0]
20006b8c:	f003 030f 	and.w	r3, r3, #15
20006b90:	683a      	ldr	r2, [r7, #0]
20006b92:	429a      	cmp	r2, r3
20006b94:	d20c      	bcs.n	20006bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006b96:	4b22      	ldr	r3, [pc, #136]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006b98:	683a      	ldr	r2, [r7, #0]
20006b9a:	b2d2      	uxtb	r2, r2
20006b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20006b9e:	4b20      	ldr	r3, [pc, #128]	; (20006c20 <HAL_RCC_ClockConfig+0x1b8>)
20006ba0:	681b      	ldr	r3, [r3, #0]
20006ba2:	f003 030f 	and.w	r3, r3, #15
20006ba6:	683a      	ldr	r2, [r7, #0]
20006ba8:	429a      	cmp	r2, r3
20006baa:	d001      	beq.n	20006bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20006bac:	2301      	movs	r3, #1
20006bae:	e032      	b.n	20006c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006bb0:	687b      	ldr	r3, [r7, #4]
20006bb2:	681b      	ldr	r3, [r3, #0]
20006bb4:	f003 0304 	and.w	r3, r3, #4
20006bb8:	2b00      	cmp	r3, #0
20006bba:	d008      	beq.n	20006bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20006bbc:	4b19      	ldr	r3, [pc, #100]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006bbe:	689b      	ldr	r3, [r3, #8]
20006bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20006bc4:	687b      	ldr	r3, [r7, #4]
20006bc6:	68db      	ldr	r3, [r3, #12]
20006bc8:	4916      	ldr	r1, [pc, #88]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006bca:	4313      	orrs	r3, r2
20006bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006bce:	687b      	ldr	r3, [r7, #4]
20006bd0:	681b      	ldr	r3, [r3, #0]
20006bd2:	f003 0308 	and.w	r3, r3, #8
20006bd6:	2b00      	cmp	r3, #0
20006bd8:	d009      	beq.n	20006bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20006bda:	4b12      	ldr	r3, [pc, #72]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006bdc:	689b      	ldr	r3, [r3, #8]
20006bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20006be2:	687b      	ldr	r3, [r7, #4]
20006be4:	691b      	ldr	r3, [r3, #16]
20006be6:	00db      	lsls	r3, r3, #3
20006be8:	490e      	ldr	r1, [pc, #56]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006bea:	4313      	orrs	r3, r2
20006bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20006bee:	f001 f9f7 	bl	20007fe0 <HAL_RCC_GetSysClockFreq>
20006bf2:	4602      	mov	r2, r0
20006bf4:	4b0b      	ldr	r3, [pc, #44]	; (20006c24 <HAL_RCC_ClockConfig+0x1bc>)
20006bf6:	689b      	ldr	r3, [r3, #8]
20006bf8:	091b      	lsrs	r3, r3, #4
20006bfa:	f003 030f 	and.w	r3, r3, #15
20006bfe:	490a      	ldr	r1, [pc, #40]	; (20006c28 <HAL_RCC_ClockConfig+0x1c0>)
20006c00:	5ccb      	ldrb	r3, [r1, r3]
20006c02:	fa22 f303 	lsr.w	r3, r2, r3
20006c06:	4a09      	ldr	r2, [pc, #36]	; (20006c2c <HAL_RCC_ClockConfig+0x1c4>)
20006c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20006c0a:	4b09      	ldr	r3, [pc, #36]	; (20006c30 <HAL_RCC_ClockConfig+0x1c8>)
20006c0c:	681b      	ldr	r3, [r3, #0]
20006c0e:	4618      	mov	r0, r3
20006c10:	f7f9 fe90 	bl	20000934 <HAL_InitTick>

  return HAL_OK;
20006c14:	2300      	movs	r3, #0
}
20006c16:	4618      	mov	r0, r3
20006c18:	3710      	adds	r7, #16
20006c1a:	46bd      	mov	sp, r7
20006c1c:	bd80      	pop	{r7, pc}
20006c1e:	bf00      	nop
20006c20:	40023c00 	.word	0x40023c00
20006c24:	40023800 	.word	0x40023800
20006c28:	2000b514 	.word	0x2000b514
20006c2c:	200003dc 	.word	0x200003dc
20006c30:	200003e0 	.word	0x200003e0

20006c34 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20006c34:	b580      	push	{r7, lr}
20006c36:	b08c      	sub	sp, #48	; 0x30
20006c38:	af00      	add	r7, sp, #0
20006c3a:	60f8      	str	r0, [r7, #12]
20006c3c:	60b9      	str	r1, [r7, #8]
20006c3e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
20006c40:	68fb      	ldr	r3, [r7, #12]
20006c42:	2b00      	cmp	r3, #0
20006c44:	d129      	bne.n	20006c9a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
20006c46:	2300      	movs	r3, #0
20006c48:	61bb      	str	r3, [r7, #24]
20006c4a:	4b2b      	ldr	r3, [pc, #172]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006c4e:	4a2a      	ldr	r2, [pc, #168]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006c50:	f043 0301 	orr.w	r3, r3, #1
20006c54:	6313      	str	r3, [r2, #48]	; 0x30
20006c56:	4b28      	ldr	r3, [pc, #160]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006c5a:	f003 0301 	and.w	r3, r3, #1
20006c5e:	61bb      	str	r3, [r7, #24]
20006c60:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
20006c62:	f44f 7380 	mov.w	r3, #256	; 0x100
20006c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006c68:	2302      	movs	r3, #2
20006c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006c6c:	2303      	movs	r3, #3
20006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006c70:	2300      	movs	r3, #0
20006c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006c74:	2300      	movs	r3, #0
20006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
20006c78:	f107 031c 	add.w	r3, r7, #28
20006c7c:	4619      	mov	r1, r3
20006c7e:	481f      	ldr	r0, [pc, #124]	; (20006cfc <HAL_RCC_MCOConfig+0xc8>)
20006c80:	f7fe fdd6 	bl	20005830 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
20006c84:	4b1c      	ldr	r3, [pc, #112]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006c86:	689b      	ldr	r3, [r3, #8]
20006c88:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
20006c8c:	68b9      	ldr	r1, [r7, #8]
20006c8e:	687b      	ldr	r3, [r7, #4]
20006c90:	430b      	orrs	r3, r1
20006c92:	4919      	ldr	r1, [pc, #100]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006c94:	4313      	orrs	r3, r2
20006c96:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
20006c98:	e029      	b.n	20006cee <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
20006c9a:	2300      	movs	r3, #0
20006c9c:	617b      	str	r3, [r7, #20]
20006c9e:	4b16      	ldr	r3, [pc, #88]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006ca2:	4a15      	ldr	r2, [pc, #84]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006ca4:	f043 0304 	orr.w	r3, r3, #4
20006ca8:	6313      	str	r3, [r2, #48]	; 0x30
20006caa:	4b13      	ldr	r3, [pc, #76]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006cae:	f003 0304 	and.w	r3, r3, #4
20006cb2:	617b      	str	r3, [r7, #20]
20006cb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
20006cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
20006cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006cbc:	2302      	movs	r3, #2
20006cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006cc0:	2303      	movs	r3, #3
20006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006cc4:	2300      	movs	r3, #0
20006cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006cc8:	2300      	movs	r3, #0
20006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20006ccc:	f107 031c 	add.w	r3, r7, #28
20006cd0:	4619      	mov	r1, r3
20006cd2:	480b      	ldr	r0, [pc, #44]	; (20006d00 <HAL_RCC_MCOConfig+0xcc>)
20006cd4:	f7fe fdac 	bl	20005830 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
20006cd8:	4b07      	ldr	r3, [pc, #28]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006cda:	689b      	ldr	r3, [r3, #8]
20006cdc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
20006ce0:	687b      	ldr	r3, [r7, #4]
20006ce2:	00d9      	lsls	r1, r3, #3
20006ce4:	68bb      	ldr	r3, [r7, #8]
20006ce6:	430b      	orrs	r3, r1
20006ce8:	4903      	ldr	r1, [pc, #12]	; (20006cf8 <HAL_RCC_MCOConfig+0xc4>)
20006cea:	4313      	orrs	r3, r2
20006cec:	608b      	str	r3, [r1, #8]
}
20006cee:	bf00      	nop
20006cf0:	3730      	adds	r7, #48	; 0x30
20006cf2:	46bd      	mov	sp, r7
20006cf4:	bd80      	pop	{r7, pc}
20006cf6:	bf00      	nop
20006cf8:	40023800 	.word	0x40023800
20006cfc:	40020000 	.word	0x40020000
20006d00:	40020800 	.word	0x40020800

20006d04 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
20006d04:	b480      	push	{r7}
20006d06:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
20006d08:	4b03      	ldr	r3, [pc, #12]	; (20006d18 <HAL_RCC_EnableCSS+0x14>)
20006d0a:	2201      	movs	r2, #1
20006d0c:	601a      	str	r2, [r3, #0]
}
20006d0e:	bf00      	nop
20006d10:	46bd      	mov	sp, r7
20006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
20006d16:	4770      	bx	lr
20006d18:	4247004c 	.word	0x4247004c

20006d1c <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
20006d1c:	b480      	push	{r7}
20006d1e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
20006d20:	4b03      	ldr	r3, [pc, #12]	; (20006d30 <HAL_RCC_DisableCSS+0x14>)
20006d22:	2200      	movs	r2, #0
20006d24:	601a      	str	r2, [r3, #0]
}
20006d26:	bf00      	nop
20006d28:	46bd      	mov	sp, r7
20006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20006d2e:	4770      	bx	lr
20006d30:	4247004c 	.word	0x4247004c
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20006d38:	b094      	sub	sp, #80	; 0x50
20006d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20006d3c:	2300      	movs	r3, #0
20006d3e:	647b      	str	r3, [r7, #68]	; 0x44
20006d40:	2300      	movs	r3, #0
20006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
20006d44:	2300      	movs	r3, #0
20006d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
20006d48:	2300      	movs	r3, #0
20006d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20006d4c:	4b79      	ldr	r3, [pc, #484]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006d4e:	689b      	ldr	r3, [r3, #8]
20006d50:	f003 030c 	and.w	r3, r3, #12
20006d54:	2b08      	cmp	r3, #8
20006d56:	d00d      	beq.n	20006d74 <HAL_RCC_DisableCSS+0x58>
20006d58:	2b08      	cmp	r3, #8
20006d5a:	f200 80e1 	bhi.w	20006f20 <HAL_RCC_DisableCSS+0x204>
20006d5e:	2b00      	cmp	r3, #0
20006d60:	d002      	beq.n	20006d68 <HAL_RCC_DisableCSS+0x4c>
20006d62:	2b04      	cmp	r3, #4
20006d64:	d003      	beq.n	20006d6e <HAL_RCC_DisableCSS+0x52>
20006d66:	e0db      	b.n	20006f20 <HAL_RCC_DisableCSS+0x204>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20006d68:	4b73      	ldr	r3, [pc, #460]	; (20006f38 <HAL_RCC_DisableCSS+0x21c>)
20006d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
20006d6c:	e0db      	b.n	20006f26 <HAL_RCC_DisableCSS+0x20a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20006d6e:	4b73      	ldr	r3, [pc, #460]	; (20006f3c <HAL_RCC_DisableCSS+0x220>)
20006d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20006d72:	e0d8      	b.n	20006f26 <HAL_RCC_DisableCSS+0x20a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20006d74:	4b6f      	ldr	r3, [pc, #444]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006d76:	685b      	ldr	r3, [r3, #4]
20006d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20006d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20006d7e:	4b6d      	ldr	r3, [pc, #436]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006d80:	685b      	ldr	r3, [r3, #4]
20006d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20006d86:	2b00      	cmp	r3, #0
20006d88:	d063      	beq.n	20006e52 <HAL_RCC_DisableCSS+0x136>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006d8a:	4b6a      	ldr	r3, [pc, #424]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006d8c:	685b      	ldr	r3, [r3, #4]
20006d8e:	099b      	lsrs	r3, r3, #6
20006d90:	2200      	movs	r2, #0
20006d92:	63bb      	str	r3, [r7, #56]	; 0x38
20006d94:	63fa      	str	r2, [r7, #60]	; 0x3c
20006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
20006d9c:	633b      	str	r3, [r7, #48]	; 0x30
20006d9e:	2300      	movs	r3, #0
20006da0:	637b      	str	r3, [r7, #52]	; 0x34
20006da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
20006da6:	4622      	mov	r2, r4
20006da8:	462b      	mov	r3, r5
20006daa:	f04f 0000 	mov.w	r0, #0
20006dae:	f04f 0100 	mov.w	r1, #0
20006db2:	0159      	lsls	r1, r3, #5
20006db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006db8:	0150      	lsls	r0, r2, #5
20006dba:	4602      	mov	r2, r0
20006dbc:	460b      	mov	r3, r1
20006dbe:	4621      	mov	r1, r4
20006dc0:	1a51      	subs	r1, r2, r1
20006dc2:	6139      	str	r1, [r7, #16]
20006dc4:	4629      	mov	r1, r5
20006dc6:	eb63 0301 	sbc.w	r3, r3, r1
20006dca:	617b      	str	r3, [r7, #20]
20006dcc:	f04f 0200 	mov.w	r2, #0
20006dd0:	f04f 0300 	mov.w	r3, #0
20006dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
20006dd8:	4659      	mov	r1, fp
20006dda:	018b      	lsls	r3, r1, #6
20006ddc:	4651      	mov	r1, sl
20006dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20006de2:	4651      	mov	r1, sl
20006de4:	018a      	lsls	r2, r1, #6
20006de6:	4651      	mov	r1, sl
20006de8:	ebb2 0801 	subs.w	r8, r2, r1
20006dec:	4659      	mov	r1, fp
20006dee:	eb63 0901 	sbc.w	r9, r3, r1
20006df2:	f04f 0200 	mov.w	r2, #0
20006df6:	f04f 0300 	mov.w	r3, #0
20006dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
20006dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
20006e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
20006e06:	4690      	mov	r8, r2
20006e08:	4699      	mov	r9, r3
20006e0a:	4623      	mov	r3, r4
20006e0c:	eb18 0303 	adds.w	r3, r8, r3
20006e10:	60bb      	str	r3, [r7, #8]
20006e12:	462b      	mov	r3, r5
20006e14:	eb49 0303 	adc.w	r3, r9, r3
20006e18:	60fb      	str	r3, [r7, #12]
20006e1a:	f04f 0200 	mov.w	r2, #0
20006e1e:	f04f 0300 	mov.w	r3, #0
20006e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
20006e26:	4629      	mov	r1, r5
20006e28:	024b      	lsls	r3, r1, #9
20006e2a:	4621      	mov	r1, r4
20006e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20006e30:	4621      	mov	r1, r4
20006e32:	024a      	lsls	r2, r1, #9
20006e34:	4610      	mov	r0, r2
20006e36:	4619      	mov	r1, r3
20006e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20006e3a:	2200      	movs	r2, #0
20006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
20006e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
20006e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20006e44:	f7f9 fbba 	bl	200005bc <__aeabi_uldivmod>
20006e48:	4602      	mov	r2, r0
20006e4a:	460b      	mov	r3, r1
20006e4c:	4613      	mov	r3, r2
20006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
20006e50:	e058      	b.n	20006f04 <HAL_RCC_DisableCSS+0x1e8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006e52:	4b38      	ldr	r3, [pc, #224]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006e54:	685b      	ldr	r3, [r3, #4]
20006e56:	099b      	lsrs	r3, r3, #6
20006e58:	2200      	movs	r2, #0
20006e5a:	4618      	mov	r0, r3
20006e5c:	4611      	mov	r1, r2
20006e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
20006e62:	623b      	str	r3, [r7, #32]
20006e64:	2300      	movs	r3, #0
20006e66:	627b      	str	r3, [r7, #36]	; 0x24
20006e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
20006e6c:	4642      	mov	r2, r8
20006e6e:	464b      	mov	r3, r9
20006e70:	f04f 0000 	mov.w	r0, #0
20006e74:	f04f 0100 	mov.w	r1, #0
20006e78:	0159      	lsls	r1, r3, #5
20006e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006e7e:	0150      	lsls	r0, r2, #5
20006e80:	4602      	mov	r2, r0
20006e82:	460b      	mov	r3, r1
20006e84:	4641      	mov	r1, r8
20006e86:	ebb2 0a01 	subs.w	sl, r2, r1
20006e8a:	4649      	mov	r1, r9
20006e8c:	eb63 0b01 	sbc.w	fp, r3, r1
20006e90:	f04f 0200 	mov.w	r2, #0
20006e94:	f04f 0300 	mov.w	r3, #0
20006e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
20006e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
20006ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
20006ea4:	ebb2 040a 	subs.w	r4, r2, sl
20006ea8:	eb63 050b 	sbc.w	r5, r3, fp
20006eac:	f04f 0200 	mov.w	r2, #0
20006eb0:	f04f 0300 	mov.w	r3, #0
20006eb4:	00eb      	lsls	r3, r5, #3
20006eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20006eba:	00e2      	lsls	r2, r4, #3
20006ebc:	4614      	mov	r4, r2
20006ebe:	461d      	mov	r5, r3
20006ec0:	4643      	mov	r3, r8
20006ec2:	18e3      	adds	r3, r4, r3
20006ec4:	603b      	str	r3, [r7, #0]
20006ec6:	464b      	mov	r3, r9
20006ec8:	eb45 0303 	adc.w	r3, r5, r3
20006ecc:	607b      	str	r3, [r7, #4]
20006ece:	f04f 0200 	mov.w	r2, #0
20006ed2:	f04f 0300 	mov.w	r3, #0
20006ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
20006eda:	4629      	mov	r1, r5
20006edc:	028b      	lsls	r3, r1, #10
20006ede:	4621      	mov	r1, r4
20006ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20006ee4:	4621      	mov	r1, r4
20006ee6:	028a      	lsls	r2, r1, #10
20006ee8:	4610      	mov	r0, r2
20006eea:	4619      	mov	r1, r3
20006eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20006eee:	2200      	movs	r2, #0
20006ef0:	61bb      	str	r3, [r7, #24]
20006ef2:	61fa      	str	r2, [r7, #28]
20006ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20006ef8:	f7f9 fb60 	bl	200005bc <__aeabi_uldivmod>
20006efc:	4602      	mov	r2, r0
20006efe:	460b      	mov	r3, r1
20006f00:	4613      	mov	r3, r2
20006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20006f04:	4b0b      	ldr	r3, [pc, #44]	; (20006f34 <HAL_RCC_DisableCSS+0x218>)
20006f06:	685b      	ldr	r3, [r3, #4]
20006f08:	0c1b      	lsrs	r3, r3, #16
20006f0a:	f003 0303 	and.w	r3, r3, #3
20006f0e:	3301      	adds	r3, #1
20006f10:	005b      	lsls	r3, r3, #1
20006f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
20006f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20006f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20006f18:	fbb2 f3f3 	udiv	r3, r2, r3
20006f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20006f1e:	e002      	b.n	20006f26 <HAL_RCC_DisableCSS+0x20a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20006f20:	4b05      	ldr	r3, [pc, #20]	; (20006f38 <HAL_RCC_DisableCSS+0x21c>)
20006f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
20006f24:	bf00      	nop
    }
  }
  return sysclockfreq;
20006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
20006f28:	4618      	mov	r0, r3
20006f2a:	3750      	adds	r7, #80	; 0x50
20006f2c:	46bd      	mov	sp, r7
20006f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20006f32:	bf00      	nop
20006f34:	40023800 	.word	0x40023800
20006f38:	00f42400 	.word	0x00f42400
20006f3c:	007a1200 	.word	0x007a1200

20006f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20006f40:	b480      	push	{r7}
20006f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006f44:	4b03      	ldr	r3, [pc, #12]	; (20006f54 <HAL_RCC_GetHCLKFreq+0x14>)
20006f46:	681b      	ldr	r3, [r3, #0]
}
20006f48:	4618      	mov	r0, r3
20006f4a:	46bd      	mov	sp, r7
20006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f50:	4770      	bx	lr
20006f52:	bf00      	nop
20006f54:	200003dc 	.word	0x200003dc

20006f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006f58:	b580      	push	{r7, lr}
20006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20006f5c:	f7ff fff0 	bl	20006f40 <HAL_RCC_GetHCLKFreq>
20006f60:	4602      	mov	r2, r0
20006f62:	4b05      	ldr	r3, [pc, #20]	; (20006f78 <HAL_RCC_GetPCLK1Freq+0x20>)
20006f64:	689b      	ldr	r3, [r3, #8]
20006f66:	0a9b      	lsrs	r3, r3, #10
20006f68:	f003 0307 	and.w	r3, r3, #7
20006f6c:	4903      	ldr	r1, [pc, #12]	; (20006f7c <HAL_RCC_GetPCLK1Freq+0x24>)
20006f6e:	5ccb      	ldrb	r3, [r1, r3]
20006f70:	fa22 f303 	lsr.w	r3, r2, r3
}
20006f74:	4618      	mov	r0, r3
20006f76:	bd80      	pop	{r7, pc}
20006f78:	40023800 	.word	0x40023800
20006f7c:	2000b524 	.word	0x2000b524

20006f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20006f80:	b580      	push	{r7, lr}
20006f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20006f84:	f7ff ffdc 	bl	20006f40 <HAL_RCC_GetHCLKFreq>
20006f88:	4602      	mov	r2, r0
20006f8a:	4b05      	ldr	r3, [pc, #20]	; (20006fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
20006f8c:	689b      	ldr	r3, [r3, #8]
20006f8e:	0b5b      	lsrs	r3, r3, #13
20006f90:	f003 0307 	and.w	r3, r3, #7
20006f94:	4903      	ldr	r1, [pc, #12]	; (20006fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
20006f96:	5ccb      	ldrb	r3, [r1, r3]
20006f98:	fa22 f303 	lsr.w	r3, r2, r3
}
20006f9c:	4618      	mov	r0, r3
20006f9e:	bd80      	pop	{r7, pc}
20006fa0:	40023800 	.word	0x40023800
20006fa4:	2000b524 	.word	0x2000b524
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006fa8:	b480      	push	{r7}
20006faa:	b083      	sub	sp, #12
20006fac:	af00      	add	r7, sp, #0
20006fae:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20006fb0:	687b      	ldr	r3, [r7, #4]
20006fb2:	220f      	movs	r2, #15
20006fb4:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20006fb6:	4b45      	ldr	r3, [pc, #276]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20006fb8:	681b      	ldr	r3, [r3, #0]
20006fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20006fbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
20006fc2:	d104      	bne.n	20006fce <HAL_RCC_GetPCLK2Freq+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20006fc4:	687b      	ldr	r3, [r7, #4]
20006fc6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
20006fca:	605a      	str	r2, [r3, #4]
20006fcc:	e00e      	b.n	20006fec <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
20006fce:	4b3f      	ldr	r3, [pc, #252]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20006fd0:	681b      	ldr	r3, [r3, #0]
20006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20006fda:	d104      	bne.n	20006fe6 <HAL_RCC_GetPCLK2Freq+0x66>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20006fdc:	687b      	ldr	r3, [r7, #4]
20006fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20006fe2:	605a      	str	r2, [r3, #4]
20006fe4:	e002      	b.n	20006fec <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20006fe6:	687b      	ldr	r3, [r7, #4]
20006fe8:	2200      	movs	r2, #0
20006fea:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
20006fec:	4b37      	ldr	r3, [pc, #220]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20006fee:	681b      	ldr	r3, [r3, #0]
20006ff0:	f003 0301 	and.w	r3, r3, #1
20006ff4:	2b01      	cmp	r3, #1
20006ff6:	d103      	bne.n	20007000 <HAL_RCC_GetPCLK2Freq+0x80>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20006ff8:	687b      	ldr	r3, [r7, #4]
20006ffa:	2201      	movs	r2, #1
20006ffc:	60da      	str	r2, [r3, #12]
20006ffe:	e002      	b.n	20007006 <HAL_RCC_GetPCLK2Freq+0x86>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20007000:	687b      	ldr	r3, [r7, #4]
20007002:	2200      	movs	r2, #0
20007004:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20007006:	4b31      	ldr	r3, [pc, #196]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20007008:	681b      	ldr	r3, [r3, #0]
2000700a:	08db      	lsrs	r3, r3, #3
2000700c:	f003 021f 	and.w	r2, r3, #31
20007010:	687b      	ldr	r3, [r7, #4]
20007012:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20007014:	4b2d      	ldr	r3, [pc, #180]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007018:	f003 0304 	and.w	r3, r3, #4
2000701c:	2b04      	cmp	r3, #4
2000701e:	d103      	bne.n	20007028 <HAL_RCC_GetPCLK2Freq+0xa8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20007020:	687b      	ldr	r3, [r7, #4]
20007022:	2205      	movs	r2, #5
20007024:	609a      	str	r2, [r3, #8]
20007026:	e00c      	b.n	20007042 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20007028:	4b28      	ldr	r3, [pc, #160]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
2000702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000702c:	f003 0301 	and.w	r3, r3, #1
20007030:	2b01      	cmp	r3, #1
20007032:	d103      	bne.n	2000703c <HAL_RCC_GetPCLK2Freq+0xbc>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20007034:	687b      	ldr	r3, [r7, #4]
20007036:	2201      	movs	r2, #1
20007038:	609a      	str	r2, [r3, #8]
2000703a:	e002      	b.n	20007042 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
2000703c:	687b      	ldr	r3, [r7, #4]
2000703e:	2200      	movs	r2, #0
20007040:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
20007042:	4b22      	ldr	r3, [pc, #136]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20007044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20007046:	f003 0301 	and.w	r3, r3, #1
2000704a:	2b01      	cmp	r3, #1
2000704c:	d103      	bne.n	20007056 <HAL_RCC_GetPCLK2Freq+0xd6>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
2000704e:	687b      	ldr	r3, [r7, #4]
20007050:	2201      	movs	r2, #1
20007052:	615a      	str	r2, [r3, #20]
20007054:	e002      	b.n	2000705c <HAL_RCC_GetPCLK2Freq+0xdc>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20007056:	687b      	ldr	r3, [r7, #4]
20007058:	2200      	movs	r2, #0
2000705a:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
2000705c:	4b1b      	ldr	r3, [pc, #108]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
2000705e:	681b      	ldr	r3, [r3, #0]
20007060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20007064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20007068:	d103      	bne.n	20007072 <HAL_RCC_GetPCLK2Freq+0xf2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
2000706a:	687b      	ldr	r3, [r7, #4]
2000706c:	2202      	movs	r2, #2
2000706e:	619a      	str	r2, [r3, #24]
20007070:	e002      	b.n	20007078 <HAL_RCC_GetPCLK2Freq+0xf8>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20007072:	687b      	ldr	r3, [r7, #4]
20007074:	2201      	movs	r2, #1
20007076:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20007078:	4b14      	ldr	r3, [pc, #80]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
2000707a:	685b      	ldr	r3, [r3, #4]
2000707c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20007080:	687b      	ldr	r3, [r7, #4]
20007082:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20007084:	4b11      	ldr	r3, [pc, #68]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20007086:	685b      	ldr	r3, [r3, #4]
20007088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000708c:	687b      	ldr	r3, [r7, #4]
2000708e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20007090:	4b0e      	ldr	r3, [pc, #56]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
20007092:	685b      	ldr	r3, [r3, #4]
20007094:	099b      	lsrs	r3, r3, #6
20007096:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000709a:	687b      	ldr	r3, [r7, #4]
2000709c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
2000709e:	4b0b      	ldr	r3, [pc, #44]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
200070a0:	685b      	ldr	r3, [r3, #4]
200070a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200070a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
200070aa:	005b      	lsls	r3, r3, #1
200070ac:	0c1a      	lsrs	r2, r3, #16
200070ae:	687b      	ldr	r3, [r7, #4]
200070b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
200070b2:	4b06      	ldr	r3, [pc, #24]	; (200070cc <HAL_RCC_GetPCLK2Freq+0x14c>)
200070b4:	685b      	ldr	r3, [r3, #4]
200070b6:	0e1b      	lsrs	r3, r3, #24
200070b8:	f003 020f 	and.w	r2, r3, #15
200070bc:	687b      	ldr	r3, [r7, #4]
200070be:	62da      	str	r2, [r3, #44]	; 0x2c
}
200070c0:	bf00      	nop
200070c2:	370c      	adds	r7, #12
200070c4:	46bd      	mov	sp, r7
200070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200070ca:	4770      	bx	lr
200070cc:	40023800 	.word	0x40023800

200070d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
200070d0:	b480      	push	{r7}
200070d2:	b083      	sub	sp, #12
200070d4:	af00      	add	r7, sp, #0
200070d6:	6078      	str	r0, [r7, #4]
200070d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
200070da:	687b      	ldr	r3, [r7, #4]
200070dc:	220f      	movs	r2, #15
200070de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
200070e0:	4b12      	ldr	r3, [pc, #72]	; (2000712c <HAL_RCC_GetClockConfig+0x5c>)
200070e2:	689b      	ldr	r3, [r3, #8]
200070e4:	f003 0203 	and.w	r2, r3, #3
200070e8:	687b      	ldr	r3, [r7, #4]
200070ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
200070ec:	4b0f      	ldr	r3, [pc, #60]	; (2000712c <HAL_RCC_GetClockConfig+0x5c>)
200070ee:	689b      	ldr	r3, [r3, #8]
200070f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
200070f4:	687b      	ldr	r3, [r7, #4]
200070f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
200070f8:	4b0c      	ldr	r3, [pc, #48]	; (2000712c <HAL_RCC_GetClockConfig+0x5c>)
200070fa:	689b      	ldr	r3, [r3, #8]
200070fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20007100:	687b      	ldr	r3, [r7, #4]
20007102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20007104:	4b09      	ldr	r3, [pc, #36]	; (2000712c <HAL_RCC_GetClockConfig+0x5c>)
20007106:	689b      	ldr	r3, [r3, #8]
20007108:	08db      	lsrs	r3, r3, #3
2000710a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000710e:	687b      	ldr	r3, [r7, #4]
20007110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
20007112:	4b07      	ldr	r3, [pc, #28]	; (20007130 <HAL_RCC_GetClockConfig+0x60>)
20007114:	681b      	ldr	r3, [r3, #0]
20007116:	f003 020f 	and.w	r2, r3, #15
2000711a:	683b      	ldr	r3, [r7, #0]
2000711c:	601a      	str	r2, [r3, #0]
}
2000711e:	bf00      	nop
20007120:	370c      	adds	r7, #12
20007122:	46bd      	mov	sp, r7
20007124:	f85d 7b04 	ldr.w	r7, [sp], #4
20007128:	4770      	bx	lr
2000712a:	bf00      	nop
2000712c:	40023800 	.word	0x40023800
20007130:	40023c00 	.word	0x40023c00

20007134 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20007134:	b580      	push	{r7, lr}
20007136:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
20007138:	4b06      	ldr	r3, [pc, #24]	; (20007154 <HAL_RCC_NMI_IRQHandler+0x20>)
2000713a:	68db      	ldr	r3, [r3, #12]
2000713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20007140:	2b80      	cmp	r3, #128	; 0x80
20007142:	d104      	bne.n	2000714e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20007144:	f000 f80a 	bl	2000715c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20007148:	4b03      	ldr	r3, [pc, #12]	; (20007158 <HAL_RCC_NMI_IRQHandler+0x24>)
2000714a:	2280      	movs	r2, #128	; 0x80
2000714c:	701a      	strb	r2, [r3, #0]
  }
}
2000714e:	bf00      	nop
20007150:	bd80      	pop	{r7, pc}
20007152:	bf00      	nop
20007154:	40023800 	.word	0x40023800
20007158:	4002380e 	.word	0x4002380e

2000715c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
2000715c:	b480      	push	{r7}
2000715e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
20007160:	bf00      	nop
20007162:	46bd      	mov	sp, r7
20007164:	f85d 7b04 	ldr.w	r7, [sp], #4
20007168:	4770      	bx	lr
	...

2000716c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2000716c:	b580      	push	{r7, lr}
2000716e:	b08c      	sub	sp, #48	; 0x30
20007170:	af00      	add	r7, sp, #0
20007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20007174:	2300      	movs	r3, #0
20007176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
20007178:	2300      	movs	r3, #0
2000717a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
2000717c:	2300      	movs	r3, #0
2000717e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
20007180:	2300      	movs	r3, #0
20007182:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
20007184:	2300      	movs	r3, #0
20007186:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
20007188:	2300      	movs	r3, #0
2000718a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
2000718c:	2300      	movs	r3, #0
2000718e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
20007190:	2300      	movs	r3, #0
20007192:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
20007194:	2300      	movs	r3, #0
20007196:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
20007198:	687b      	ldr	r3, [r7, #4]
2000719a:	681b      	ldr	r3, [r3, #0]
2000719c:	f003 0301 	and.w	r3, r3, #1
200071a0:	2b00      	cmp	r3, #0
200071a2:	d010      	beq.n	200071c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
200071a4:	4b6f      	ldr	r3, [pc, #444]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200071a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200071aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
200071ae:	687b      	ldr	r3, [r7, #4]
200071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200071b2:	496c      	ldr	r1, [pc, #432]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200071b4:	4313      	orrs	r3, r2
200071b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
200071ba:	687b      	ldr	r3, [r7, #4]
200071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200071be:	2b00      	cmp	r3, #0
200071c0:	d101      	bne.n	200071c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
200071c2:	2301      	movs	r3, #1
200071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
200071c6:	687b      	ldr	r3, [r7, #4]
200071c8:	681b      	ldr	r3, [r3, #0]
200071ca:	f003 0302 	and.w	r3, r3, #2
200071ce:	2b00      	cmp	r3, #0
200071d0:	d010      	beq.n	200071f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
200071d2:	4b64      	ldr	r3, [pc, #400]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200071d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200071d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
200071dc:	687b      	ldr	r3, [r7, #4]
200071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071e0:	4960      	ldr	r1, [pc, #384]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200071e2:	4313      	orrs	r3, r2
200071e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
200071e8:	687b      	ldr	r3, [r7, #4]
200071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071ec:	2b00      	cmp	r3, #0
200071ee:	d101      	bne.n	200071f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
200071f0:	2301      	movs	r3, #1
200071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
200071f4:	687b      	ldr	r3, [r7, #4]
200071f6:	681b      	ldr	r3, [r3, #0]
200071f8:	f003 0304 	and.w	r3, r3, #4
200071fc:	2b00      	cmp	r3, #0
200071fe:	d017      	beq.n	20007230 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20007200:	4b58      	ldr	r3, [pc, #352]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2000720a:	687b      	ldr	r3, [r7, #4]
2000720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000720e:	4955      	ldr	r1, [pc, #340]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007210:	4313      	orrs	r3, r2
20007212:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20007216:	687b      	ldr	r3, [r7, #4]
20007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000721a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000721e:	d101      	bne.n	20007224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
20007220:	2301      	movs	r3, #1
20007222:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
20007224:	687b      	ldr	r3, [r7, #4]
20007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007228:	2b00      	cmp	r3, #0
2000722a:	d101      	bne.n	20007230 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
2000722c:	2301      	movs	r3, #1
2000722e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20007230:	687b      	ldr	r3, [r7, #4]
20007232:	681b      	ldr	r3, [r3, #0]
20007234:	f003 0308 	and.w	r3, r3, #8
20007238:	2b00      	cmp	r3, #0
2000723a:	d017      	beq.n	2000726c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
2000723c:	4b49      	ldr	r3, [pc, #292]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2000723e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007242:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
20007246:	687b      	ldr	r3, [r7, #4]
20007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000724a:	4946      	ldr	r1, [pc, #280]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2000724c:	4313      	orrs	r3, r2
2000724e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
20007252:	687b      	ldr	r3, [r7, #4]
20007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20007256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000725a:	d101      	bne.n	20007260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
2000725c:	2301      	movs	r3, #1
2000725e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
20007260:	687b      	ldr	r3, [r7, #4]
20007262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20007264:	2b00      	cmp	r3, #0
20007266:	d101      	bne.n	2000726c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
20007268:	2301      	movs	r3, #1
2000726a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2000726c:	687b      	ldr	r3, [r7, #4]
2000726e:	681b      	ldr	r3, [r3, #0]
20007270:	f003 0320 	and.w	r3, r3, #32
20007274:	2b00      	cmp	r3, #0
20007276:	f000 808a 	beq.w	2000738e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
2000727a:	2300      	movs	r3, #0
2000727c:	60bb      	str	r3, [r7, #8]
2000727e:	4b39      	ldr	r3, [pc, #228]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007282:	4a38      	ldr	r2, [pc, #224]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20007288:	6413      	str	r3, [r2, #64]	; 0x40
2000728a:	4b36      	ldr	r3, [pc, #216]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2000728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000728e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20007292:	60bb      	str	r3, [r7, #8]
20007294:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
20007296:	4b34      	ldr	r3, [pc, #208]	; (20007368 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
20007298:	681b      	ldr	r3, [r3, #0]
2000729a:	4a33      	ldr	r2, [pc, #204]	; (20007368 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
2000729c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200072a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
200072a2:	f7f9 fb34 	bl	2000090e <HAL_GetTick>
200072a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
200072a8:	e008      	b.n	200072bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
200072aa:	f7f9 fb30 	bl	2000090e <HAL_GetTick>
200072ae:	4602      	mov	r2, r0
200072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200072b2:	1ad3      	subs	r3, r2, r3
200072b4:	2b02      	cmp	r3, #2
200072b6:	d901      	bls.n	200072bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
200072b8:	2303      	movs	r3, #3
200072ba:	e278      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
200072bc:	4b2a      	ldr	r3, [pc, #168]	; (20007368 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
200072be:	681b      	ldr	r3, [r3, #0]
200072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
200072c4:	2b00      	cmp	r3, #0
200072c6:	d0f0      	beq.n	200072aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
200072c8:	4b26      	ldr	r3, [pc, #152]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200072cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
200072d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
200072d2:	6a3b      	ldr	r3, [r7, #32]
200072d4:	2b00      	cmp	r3, #0
200072d6:	d02f      	beq.n	20007338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
200072d8:	687b      	ldr	r3, [r7, #4]
200072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200072dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
200072e0:	6a3a      	ldr	r2, [r7, #32]
200072e2:	429a      	cmp	r2, r3
200072e4:	d028      	beq.n	20007338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
200072e6:	4b1f      	ldr	r3, [pc, #124]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200072ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200072ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
200072f0:	4b1e      	ldr	r3, [pc, #120]	; (2000736c <HAL_RCCEx_PeriphCLKConfig+0x200>)
200072f2:	2201      	movs	r2, #1
200072f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
200072f6:	4b1d      	ldr	r3, [pc, #116]	; (2000736c <HAL_RCCEx_PeriphCLKConfig+0x200>)
200072f8:	2200      	movs	r2, #0
200072fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
200072fc:	4a19      	ldr	r2, [pc, #100]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200072fe:	6a3b      	ldr	r3, [r7, #32]
20007300:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20007302:	4b18      	ldr	r3, [pc, #96]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007306:	f003 0301 	and.w	r3, r3, #1
2000730a:	2b01      	cmp	r3, #1
2000730c:	d114      	bne.n	20007338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
2000730e:	f7f9 fafe 	bl	2000090e <HAL_GetTick>
20007312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007314:	e00a      	b.n	2000732c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20007316:	f7f9 fafa 	bl	2000090e <HAL_GetTick>
2000731a:	4602      	mov	r2, r0
2000731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000731e:	1ad3      	subs	r3, r2, r3
20007320:	f241 3288 	movw	r2, #5000	; 0x1388
20007324:	4293      	cmp	r3, r2
20007326:	d901      	bls.n	2000732c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
20007328:	2303      	movs	r3, #3
2000732a:	e240      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000732c:	4b0d      	ldr	r3, [pc, #52]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2000732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007330:	f003 0302 	and.w	r3, r3, #2
20007334:	2b00      	cmp	r3, #0
20007336:	d0ee      	beq.n	20007316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20007338:	687b      	ldr	r3, [r7, #4]
2000733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000733c:	f403 7340 	and.w	r3, r3, #768	; 0x300
20007340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
20007344:	d114      	bne.n	20007370 <HAL_RCCEx_PeriphCLKConfig+0x204>
20007346:	4b07      	ldr	r3, [pc, #28]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20007348:	689b      	ldr	r3, [r3, #8]
2000734a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
2000734e:	687b      	ldr	r3, [r7, #4]
20007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007352:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20007356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000735a:	4902      	ldr	r1, [pc, #8]	; (20007364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2000735c:	4313      	orrs	r3, r2
2000735e:	608b      	str	r3, [r1, #8]
20007360:	e00c      	b.n	2000737c <HAL_RCCEx_PeriphCLKConfig+0x210>
20007362:	bf00      	nop
20007364:	40023800 	.word	0x40023800
20007368:	40007000 	.word	0x40007000
2000736c:	42470e40 	.word	0x42470e40
20007370:	4b4a      	ldr	r3, [pc, #296]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007372:	689b      	ldr	r3, [r3, #8]
20007374:	4a49      	ldr	r2, [pc, #292]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007376:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
2000737a:	6093      	str	r3, [r2, #8]
2000737c:	4b47      	ldr	r3, [pc, #284]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
2000737e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20007380:	687b      	ldr	r3, [r7, #4]
20007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007384:	f3c3 030b 	ubfx	r3, r3, #0, #12
20007388:	4944      	ldr	r1, [pc, #272]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
2000738a:	4313      	orrs	r3, r2
2000738c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2000738e:	687b      	ldr	r3, [r7, #4]
20007390:	681b      	ldr	r3, [r3, #0]
20007392:	f003 0310 	and.w	r3, r3, #16
20007396:	2b00      	cmp	r3, #0
20007398:	d004      	beq.n	200073a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2000739a:	687b      	ldr	r3, [r7, #4]
2000739c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
200073a0:	4b3f      	ldr	r3, [pc, #252]	; (200074a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
200073a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
200073a4:	687b      	ldr	r3, [r7, #4]
200073a6:	681b      	ldr	r3, [r3, #0]
200073a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
200073ac:	2b00      	cmp	r3, #0
200073ae:	d00a      	beq.n	200073c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
200073b0:	4b3a      	ldr	r3, [pc, #232]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
200073b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200073b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
200073ba:	687b      	ldr	r3, [r7, #4]
200073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200073be:	4937      	ldr	r1, [pc, #220]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
200073c0:	4313      	orrs	r3, r2
200073c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200073c6:	687b      	ldr	r3, [r7, #4]
200073c8:	681b      	ldr	r3, [r3, #0]
200073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
200073ce:	2b00      	cmp	r3, #0
200073d0:	d00a      	beq.n	200073e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200073d2:	4b32      	ldr	r3, [pc, #200]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
200073d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200073d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
200073dc:	687b      	ldr	r3, [r7, #4]
200073de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200073e0:	492e      	ldr	r1, [pc, #184]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
200073e2:	4313      	orrs	r3, r2
200073e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200073e8:	687b      	ldr	r3, [r7, #4]
200073ea:	681b      	ldr	r3, [r3, #0]
200073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
200073f0:	2b00      	cmp	r3, #0
200073f2:	d011      	beq.n	20007418 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
200073f4:	4b29      	ldr	r3, [pc, #164]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
200073f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200073fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
200073fe:	687b      	ldr	r3, [r7, #4]
20007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007402:	4926      	ldr	r1, [pc, #152]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007404:	4313      	orrs	r3, r2
20007406:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
2000740a:	687b      	ldr	r3, [r7, #4]
2000740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000740e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20007412:	d101      	bne.n	20007418 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
20007414:	2301      	movs	r3, #1
20007416:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
20007418:	687b      	ldr	r3, [r7, #4]
2000741a:	681b      	ldr	r3, [r3, #0]
2000741c:	f403 7300 	and.w	r3, r3, #512	; 0x200
20007420:	2b00      	cmp	r3, #0
20007422:	d00a      	beq.n	2000743a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
20007424:	4b1d      	ldr	r3, [pc, #116]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2000742a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
2000742e:	687b      	ldr	r3, [r7, #4]
20007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007432:	491a      	ldr	r1, [pc, #104]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007434:	4313      	orrs	r3, r2
20007436:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2000743a:	687b      	ldr	r3, [r7, #4]
2000743c:	681b      	ldr	r3, [r3, #0]
2000743e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20007442:	2b00      	cmp	r3, #0
20007444:	d011      	beq.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
20007446:	4b15      	ldr	r3, [pc, #84]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2000744c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
20007450:	687b      	ldr	r3, [r7, #4]
20007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20007454:	4911      	ldr	r1, [pc, #68]	; (2000749c <HAL_RCCEx_PeriphCLKConfig+0x330>)
20007456:	4313      	orrs	r3, r2
20007458:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
2000745c:	687b      	ldr	r3, [r7, #4]
2000745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20007460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20007464:	d101      	bne.n	2000746a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
20007466:	2301      	movs	r3, #1
20007468:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
2000746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000746c:	2b01      	cmp	r3, #1
2000746e:	d005      	beq.n	2000747c <HAL_RCCEx_PeriphCLKConfig+0x310>
20007470:	687b      	ldr	r3, [r7, #4]
20007472:	681b      	ldr	r3, [r3, #0]
20007474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20007478:	f040 80ff 	bne.w	2000767a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
2000747c:	4b09      	ldr	r3, [pc, #36]	; (200074a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
2000747e:	2200      	movs	r2, #0
20007480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007482:	f7f9 fa44 	bl	2000090e <HAL_GetTick>
20007486:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20007488:	e00e      	b.n	200074a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000748a:	f7f9 fa40 	bl	2000090e <HAL_GetTick>
2000748e:	4602      	mov	r2, r0
20007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007492:	1ad3      	subs	r3, r2, r3
20007494:	2b02      	cmp	r3, #2
20007496:	d907      	bls.n	200074a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007498:	2303      	movs	r3, #3
2000749a:	e188      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
2000749c:	40023800 	.word	0x40023800
200074a0:	424711e0 	.word	0x424711e0
200074a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200074a8:	4b7e      	ldr	r3, [pc, #504]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200074aa:	681b      	ldr	r3, [r3, #0]
200074ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
200074b0:	2b00      	cmp	r3, #0
200074b2:	d1ea      	bne.n	2000748a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
200074b4:	687b      	ldr	r3, [r7, #4]
200074b6:	681b      	ldr	r3, [r3, #0]
200074b8:	f003 0301 	and.w	r3, r3, #1
200074bc:	2b00      	cmp	r3, #0
200074be:	d003      	beq.n	200074c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
200074c0:	687b      	ldr	r3, [r7, #4]
200074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200074c4:	2b00      	cmp	r3, #0
200074c6:	d009      	beq.n	200074dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
200074c8:	687b      	ldr	r3, [r7, #4]
200074ca:	681b      	ldr	r3, [r3, #0]
200074cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
200074d0:	2b00      	cmp	r3, #0
200074d2:	d028      	beq.n	20007526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
200074d4:	687b      	ldr	r3, [r7, #4]
200074d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200074d8:	2b00      	cmp	r3, #0
200074da:	d124      	bne.n	20007526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200074dc:	4b71      	ldr	r3, [pc, #452]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200074de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200074e2:	0c1b      	lsrs	r3, r3, #16
200074e4:	f003 0303 	and.w	r3, r3, #3
200074e8:	3301      	adds	r3, #1
200074ea:	005b      	lsls	r3, r3, #1
200074ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200074ee:	4b6d      	ldr	r3, [pc, #436]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200074f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200074f4:	0e1b      	lsrs	r3, r3, #24
200074f6:	f003 030f 	and.w	r3, r3, #15
200074fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
200074fc:	687b      	ldr	r3, [r7, #4]
200074fe:	685a      	ldr	r2, [r3, #4]
20007500:	687b      	ldr	r3, [r7, #4]
20007502:	689b      	ldr	r3, [r3, #8]
20007504:	019b      	lsls	r3, r3, #6
20007506:	431a      	orrs	r2, r3
20007508:	69fb      	ldr	r3, [r7, #28]
2000750a:	085b      	lsrs	r3, r3, #1
2000750c:	3b01      	subs	r3, #1
2000750e:	041b      	lsls	r3, r3, #16
20007510:	431a      	orrs	r2, r3
20007512:	69bb      	ldr	r3, [r7, #24]
20007514:	061b      	lsls	r3, r3, #24
20007516:	431a      	orrs	r2, r3
20007518:	687b      	ldr	r3, [r7, #4]
2000751a:	695b      	ldr	r3, [r3, #20]
2000751c:	071b      	lsls	r3, r3, #28
2000751e:	4961      	ldr	r1, [pc, #388]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007520:	4313      	orrs	r3, r2
20007522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20007526:	687b      	ldr	r3, [r7, #4]
20007528:	681b      	ldr	r3, [r3, #0]
2000752a:	f003 0304 	and.w	r3, r3, #4
2000752e:	2b00      	cmp	r3, #0
20007530:	d004      	beq.n	2000753c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
20007532:	687b      	ldr	r3, [r7, #4]
20007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000753a:	d00a      	beq.n	20007552 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000753c:	687b      	ldr	r3, [r7, #4]
2000753e:	681b      	ldr	r3, [r3, #0]
20007540:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
20007544:	2b00      	cmp	r3, #0
20007546:	d035      	beq.n	200075b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20007548:	687b      	ldr	r3, [r7, #4]
2000754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000754c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007550:	d130      	bne.n	200075b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
20007552:	4b54      	ldr	r3, [pc, #336]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007558:	0c1b      	lsrs	r3, r3, #16
2000755a:	f003 0303 	and.w	r3, r3, #3
2000755e:	3301      	adds	r3, #1
20007560:	005b      	lsls	r3, r3, #1
20007562:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20007564:	4b4f      	ldr	r3, [pc, #316]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000756a:	0f1b      	lsrs	r3, r3, #28
2000756c:	f003 0307 	and.w	r3, r3, #7
20007570:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
20007572:	687b      	ldr	r3, [r7, #4]
20007574:	685a      	ldr	r2, [r3, #4]
20007576:	687b      	ldr	r3, [r7, #4]
20007578:	689b      	ldr	r3, [r3, #8]
2000757a:	019b      	lsls	r3, r3, #6
2000757c:	431a      	orrs	r2, r3
2000757e:	69fb      	ldr	r3, [r7, #28]
20007580:	085b      	lsrs	r3, r3, #1
20007582:	3b01      	subs	r3, #1
20007584:	041b      	lsls	r3, r3, #16
20007586:	431a      	orrs	r2, r3
20007588:	687b      	ldr	r3, [r7, #4]
2000758a:	691b      	ldr	r3, [r3, #16]
2000758c:	061b      	lsls	r3, r3, #24
2000758e:	431a      	orrs	r2, r3
20007590:	697b      	ldr	r3, [r7, #20]
20007592:	071b      	lsls	r3, r3, #28
20007594:	4943      	ldr	r1, [pc, #268]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007596:	4313      	orrs	r3, r2
20007598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
2000759c:	4b41      	ldr	r3, [pc, #260]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
2000759e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200075a2:	f023 021f 	bic.w	r2, r3, #31
200075a6:	687b      	ldr	r3, [r7, #4]
200075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200075aa:	3b01      	subs	r3, #1
200075ac:	493d      	ldr	r1, [pc, #244]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200075ae:	4313      	orrs	r3, r2
200075b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
200075b4:	687b      	ldr	r3, [r7, #4]
200075b6:	681b      	ldr	r3, [r3, #0]
200075b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200075bc:	2b00      	cmp	r3, #0
200075be:	d029      	beq.n	20007614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
200075c0:	687b      	ldr	r3, [r7, #4]
200075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200075c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
200075c8:	d124      	bne.n	20007614 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200075ca:	4b36      	ldr	r3, [pc, #216]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200075cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200075d0:	0c1b      	lsrs	r3, r3, #16
200075d2:	f003 0303 	and.w	r3, r3, #3
200075d6:	3301      	adds	r3, #1
200075d8:	005b      	lsls	r3, r3, #1
200075da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200075dc:	4b31      	ldr	r3, [pc, #196]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
200075de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200075e2:	0f1b      	lsrs	r3, r3, #28
200075e4:	f003 0307 	and.w	r3, r3, #7
200075e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
200075ea:	687b      	ldr	r3, [r7, #4]
200075ec:	685a      	ldr	r2, [r3, #4]
200075ee:	687b      	ldr	r3, [r7, #4]
200075f0:	689b      	ldr	r3, [r3, #8]
200075f2:	019b      	lsls	r3, r3, #6
200075f4:	431a      	orrs	r2, r3
200075f6:	687b      	ldr	r3, [r7, #4]
200075f8:	68db      	ldr	r3, [r3, #12]
200075fa:	085b      	lsrs	r3, r3, #1
200075fc:	3b01      	subs	r3, #1
200075fe:	041b      	lsls	r3, r3, #16
20007600:	431a      	orrs	r2, r3
20007602:	69bb      	ldr	r3, [r7, #24]
20007604:	061b      	lsls	r3, r3, #24
20007606:	431a      	orrs	r2, r3
20007608:	697b      	ldr	r3, [r7, #20]
2000760a:	071b      	lsls	r3, r3, #28
2000760c:	4925      	ldr	r1, [pc, #148]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
2000760e:	4313      	orrs	r3, r2
20007610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
20007614:	687b      	ldr	r3, [r7, #4]
20007616:	681b      	ldr	r3, [r3, #0]
20007618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2000761c:	2b00      	cmp	r3, #0
2000761e:	d016      	beq.n	2000764e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20007620:	687b      	ldr	r3, [r7, #4]
20007622:	685a      	ldr	r2, [r3, #4]
20007624:	687b      	ldr	r3, [r7, #4]
20007626:	689b      	ldr	r3, [r3, #8]
20007628:	019b      	lsls	r3, r3, #6
2000762a:	431a      	orrs	r2, r3
2000762c:	687b      	ldr	r3, [r7, #4]
2000762e:	68db      	ldr	r3, [r3, #12]
20007630:	085b      	lsrs	r3, r3, #1
20007632:	3b01      	subs	r3, #1
20007634:	041b      	lsls	r3, r3, #16
20007636:	431a      	orrs	r2, r3
20007638:	687b      	ldr	r3, [r7, #4]
2000763a:	691b      	ldr	r3, [r3, #16]
2000763c:	061b      	lsls	r3, r3, #24
2000763e:	431a      	orrs	r2, r3
20007640:	687b      	ldr	r3, [r7, #4]
20007642:	695b      	ldr	r3, [r3, #20]
20007644:	071b      	lsls	r3, r3, #28
20007646:	4917      	ldr	r1, [pc, #92]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007648:	4313      	orrs	r3, r2
2000764a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
2000764e:	4b16      	ldr	r3, [pc, #88]	; (200076a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
20007650:	2201      	movs	r2, #1
20007652:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007654:	f7f9 f95b 	bl	2000090e <HAL_GetTick>
20007658:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000765a:	e008      	b.n	2000766e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000765c:	f7f9 f957 	bl	2000090e <HAL_GetTick>
20007660:	4602      	mov	r2, r0
20007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007664:	1ad3      	subs	r3, r2, r3
20007666:	2b02      	cmp	r3, #2
20007668:	d901      	bls.n	2000766e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000766a:	2303      	movs	r3, #3
2000766c:	e09f      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000766e:	4b0d      	ldr	r3, [pc, #52]	; (200076a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
20007670:	681b      	ldr	r3, [r3, #0]
20007672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007676:	2b00      	cmp	r3, #0
20007678:	d0f0      	beq.n	2000765c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
2000767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000767c:	2b01      	cmp	r3, #1
2000767e:	f040 8095 	bne.w	200077ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
20007682:	4b0a      	ldr	r3, [pc, #40]	; (200076ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
20007684:	2200      	movs	r2, #0
20007686:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007688:	f7f9 f941 	bl	2000090e <HAL_GetTick>
2000768c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000768e:	e00f      	b.n	200076b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20007690:	f7f9 f93d 	bl	2000090e <HAL_GetTick>
20007694:	4602      	mov	r2, r0
20007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007698:	1ad3      	subs	r3, r2, r3
2000769a:	2b02      	cmp	r3, #2
2000769c:	d908      	bls.n	200076b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000769e:	2303      	movs	r3, #3
200076a0:	e085      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
200076a2:	bf00      	nop
200076a4:	40023800 	.word	0x40023800
200076a8:	42470068 	.word	0x42470068
200076ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
200076b0:	4b41      	ldr	r3, [pc, #260]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
200076b2:	681b      	ldr	r3, [r3, #0]
200076b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
200076b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
200076bc:	d0e8      	beq.n	20007690 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
200076be:	687b      	ldr	r3, [r7, #4]
200076c0:	681b      	ldr	r3, [r3, #0]
200076c2:	f003 0304 	and.w	r3, r3, #4
200076c6:	2b00      	cmp	r3, #0
200076c8:	d003      	beq.n	200076d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
200076ca:	687b      	ldr	r3, [r7, #4]
200076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200076ce:	2b00      	cmp	r3, #0
200076d0:	d009      	beq.n	200076e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200076d2:	687b      	ldr	r3, [r7, #4]
200076d4:	681b      	ldr	r3, [r3, #0]
200076d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
200076da:	2b00      	cmp	r3, #0
200076dc:	d02b      	beq.n	20007736 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200076de:	687b      	ldr	r3, [r7, #4]
200076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200076e2:	2b00      	cmp	r3, #0
200076e4:	d127      	bne.n	20007736 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
200076e6:	4b34      	ldr	r3, [pc, #208]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
200076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200076ec:	0c1b      	lsrs	r3, r3, #16
200076ee:	f003 0303 	and.w	r3, r3, #3
200076f2:	3301      	adds	r3, #1
200076f4:	005b      	lsls	r3, r3, #1
200076f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
200076f8:	687b      	ldr	r3, [r7, #4]
200076fa:	699a      	ldr	r2, [r3, #24]
200076fc:	687b      	ldr	r3, [r7, #4]
200076fe:	69db      	ldr	r3, [r3, #28]
20007700:	019b      	lsls	r3, r3, #6
20007702:	431a      	orrs	r2, r3
20007704:	693b      	ldr	r3, [r7, #16]
20007706:	085b      	lsrs	r3, r3, #1
20007708:	3b01      	subs	r3, #1
2000770a:	041b      	lsls	r3, r3, #16
2000770c:	431a      	orrs	r2, r3
2000770e:	687b      	ldr	r3, [r7, #4]
20007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20007712:	061b      	lsls	r3, r3, #24
20007714:	4928      	ldr	r1, [pc, #160]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20007716:	4313      	orrs	r3, r2
20007718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2000771c:	4b26      	ldr	r3, [pc, #152]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
2000771e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007722:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
20007726:	687b      	ldr	r3, [r7, #4]
20007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000772a:	3b01      	subs	r3, #1
2000772c:	021b      	lsls	r3, r3, #8
2000772e:	4922      	ldr	r1, [pc, #136]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20007730:	4313      	orrs	r3, r2
20007732:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
20007736:	687b      	ldr	r3, [r7, #4]
20007738:	681b      	ldr	r3, [r3, #0]
2000773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000773e:	2b00      	cmp	r3, #0
20007740:	d01d      	beq.n	2000777e <HAL_RCCEx_PeriphCLKConfig+0x612>
20007742:	687b      	ldr	r3, [r7, #4]
20007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2000774a:	d118      	bne.n	2000777e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000774c:	4b1a      	ldr	r3, [pc, #104]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
2000774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007752:	0e1b      	lsrs	r3, r3, #24
20007754:	f003 030f 	and.w	r3, r3, #15
20007758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
2000775a:	687b      	ldr	r3, [r7, #4]
2000775c:	699a      	ldr	r2, [r3, #24]
2000775e:	687b      	ldr	r3, [r7, #4]
20007760:	69db      	ldr	r3, [r3, #28]
20007762:	019b      	lsls	r3, r3, #6
20007764:	431a      	orrs	r2, r3
20007766:	687b      	ldr	r3, [r7, #4]
20007768:	6a1b      	ldr	r3, [r3, #32]
2000776a:	085b      	lsrs	r3, r3, #1
2000776c:	3b01      	subs	r3, #1
2000776e:	041b      	lsls	r3, r3, #16
20007770:	431a      	orrs	r2, r3
20007772:	68fb      	ldr	r3, [r7, #12]
20007774:	061b      	lsls	r3, r3, #24
20007776:	4910      	ldr	r1, [pc, #64]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20007778:	4313      	orrs	r3, r2
2000777a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
2000777e:	4b0f      	ldr	r3, [pc, #60]	; (200077bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
20007780:	2201      	movs	r2, #1
20007782:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007784:	f7f9 f8c3 	bl	2000090e <HAL_GetTick>
20007788:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000778a:	e008      	b.n	2000779e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2000778c:	f7f9 f8bf 	bl	2000090e <HAL_GetTick>
20007790:	4602      	mov	r2, r0
20007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007794:	1ad3      	subs	r3, r2, r3
20007796:	2b02      	cmp	r3, #2
20007798:	d901      	bls.n	2000779e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000779a:	2303      	movs	r3, #3
2000779c:	e007      	b.n	200077ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000779e:	4b06      	ldr	r3, [pc, #24]	; (200077b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
200077a0:	681b      	ldr	r3, [r3, #0]
200077a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
200077a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
200077aa:	d1ef      	bne.n	2000778c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
200077ac:	2300      	movs	r3, #0
}
200077ae:	4618      	mov	r0, r3
200077b0:	3730      	adds	r7, #48	; 0x30
200077b2:	46bd      	mov	sp, r7
200077b4:	bd80      	pop	{r7, pc}
200077b6:	bf00      	nop
200077b8:	40023800 	.word	0x40023800
200077bc:	42470070 	.word	0x42470070

200077c0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
200077c0:	b480      	push	{r7}
200077c2:	b085      	sub	sp, #20
200077c4:	af00      	add	r7, sp, #0
200077c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
200077c8:	687b      	ldr	r3, [r7, #4]
200077ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
200077ce:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
200077d0:	4b5d      	ldr	r3, [pc, #372]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200077d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200077da:	687b      	ldr	r3, [r7, #4]
200077dc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
200077de:	4b5a      	ldr	r3, [pc, #360]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200077e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200077e4:	099b      	lsrs	r3, r3, #6
200077e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
200077ea:	687b      	ldr	r3, [r7, #4]
200077ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200077ee:	4b56      	ldr	r3, [pc, #344]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200077f4:	0c1b      	lsrs	r3, r3, #16
200077f6:	f003 0303 	and.w	r3, r3, #3
200077fa:	3301      	adds	r3, #1
200077fc:	005a      	lsls	r2, r3, #1
200077fe:	687b      	ldr	r3, [r7, #4]
20007800:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
20007802:	4b51      	ldr	r3, [pc, #324]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007808:	0e1b      	lsrs	r3, r3, #24
2000780a:	f003 020f 	and.w	r2, r3, #15
2000780e:	687b      	ldr	r3, [r7, #4]
20007810:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20007812:	4b4d      	ldr	r3, [pc, #308]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007818:	0f1b      	lsrs	r3, r3, #28
2000781a:	f003 0207 	and.w	r2, r3, #7
2000781e:	687b      	ldr	r3, [r7, #4]
20007820:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
20007822:	4b49      	ldr	r3, [pc, #292]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000782c:	687b      	ldr	r3, [r7, #4]
2000782e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
20007830:	4b45      	ldr	r3, [pc, #276]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007836:	099b      	lsrs	r3, r3, #6
20007838:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000783c:	687b      	ldr	r3, [r7, #4]
2000783e:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
20007840:	4b41      	ldr	r3, [pc, #260]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007846:	0c1b      	lsrs	r3, r3, #16
20007848:	f003 0303 	and.w	r3, r3, #3
2000784c:	3301      	adds	r3, #1
2000784e:	005a      	lsls	r2, r3, #1
20007850:	687b      	ldr	r3, [r7, #4]
20007852:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20007854:	4b3c      	ldr	r3, [pc, #240]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000785a:	0e1b      	lsrs	r3, r3, #24
2000785c:	f003 020f 	and.w	r2, r3, #15
20007860:	687b      	ldr	r3, [r7, #4]
20007862:	625a      	str	r2, [r3, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
20007864:	4b38      	ldr	r3, [pc, #224]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000786a:	f003 021f 	and.w	r2, r3, #31
2000786e:	687b      	ldr	r3, [r7, #4]
20007870:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
20007872:	4b35      	ldr	r3, [pc, #212]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007878:	0a1b      	lsrs	r3, r3, #8
2000787a:	f003 021f 	and.w	r2, r3, #31
2000787e:	687b      	ldr	r3, [r7, #4]
20007880:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
20007882:	4b31      	ldr	r3, [pc, #196]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007888:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
2000788c:	687b      	ldr	r3, [r7, #4]
2000788e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
20007890:	4b2d      	ldr	r3, [pc, #180]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007896:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2000789a:	687b      	ldr	r3, [r7, #4]
2000789c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
2000789e:	4b2a      	ldr	r3, [pc, #168]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200078a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
200078a8:	687b      	ldr	r3, [r7, #4]
200078aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
200078ac:	4b26      	ldr	r3, [pc, #152]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200078b2:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
200078b6:	687b      	ldr	r3, [r7, #4]
200078b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
200078ba:	4b23      	ldr	r3, [pc, #140]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078bc:	689b      	ldr	r3, [r3, #8]
200078be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
200078c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
200078c4:	4b20      	ldr	r3, [pc, #128]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200078c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
200078cc:	68fb      	ldr	r3, [r7, #12]
200078ce:	431a      	orrs	r2, r3
200078d0:	687b      	ldr	r3, [r7, #4]
200078d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
200078d4:	4b1c      	ldr	r3, [pc, #112]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200078da:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
200078de:	687b      	ldr	r3, [r7, #4]
200078e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
200078e2:	4b19      	ldr	r3, [pc, #100]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200078e8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
200078ec:	687b      	ldr	r3, [r7, #4]
200078ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
200078f0:	4b15      	ldr	r3, [pc, #84]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200078f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200078f6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
200078fa:	687b      	ldr	r3, [r7, #4]
200078fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
200078fe:	4b12      	ldr	r3, [pc, #72]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20007900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20007904:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
20007908:	687b      	ldr	r3, [r7, #4]
2000790a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
2000790c:	4b0e      	ldr	r3, [pc, #56]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2000790e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20007912:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
20007916:	687b      	ldr	r3, [r7, #4]
20007918:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2000791a:	4b0b      	ldr	r3, [pc, #44]	; (20007948 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2000791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20007924:	2b00      	cmp	r3, #0
20007926:	d104      	bne.n	20007932 <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
20007928:	687b      	ldr	r3, [r7, #4]
2000792a:	2200      	movs	r2, #0
2000792c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
20007930:	e003      	b.n	2000793a <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
20007932:	687b      	ldr	r3, [r7, #4]
20007934:	2201      	movs	r2, #1
20007936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
2000793a:	bf00      	nop
2000793c:	3714      	adds	r7, #20
2000793e:	46bd      	mov	sp, r7
20007940:	f85d 7b04 	ldr.w	r7, [sp], #4
20007944:	4770      	bx	lr
20007946:	bf00      	nop
20007948:	40023800 	.word	0x40023800

2000794c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
2000794c:	b480      	push	{r7}
2000794e:	b089      	sub	sp, #36	; 0x24
20007950:	af00      	add	r7, sp, #0
20007952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
20007954:	2300      	movs	r3, #0
20007956:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
20007958:	2300      	movs	r3, #0
2000795a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
2000795c:	2300      	movs	r3, #0
2000795e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
20007960:	2300      	movs	r3, #0
20007962:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
20007964:	2300      	movs	r3, #0
20007966:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
20007968:	2300      	movs	r3, #0
2000796a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
2000796c:	687b      	ldr	r3, [r7, #4]
2000796e:	3b01      	subs	r3, #1
20007970:	2b07      	cmp	r3, #7
20007972:	f200 8224 	bhi.w	20007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
20007976:	a201      	add	r2, pc, #4	; (adr r2, 2000797c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
20007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000797c:	20007b7f 	.word	0x20007b7f
20007980:	20007ca9 	.word	0x20007ca9
20007984:	20007dbf 	.word	0x20007dbf
20007988:	2000799d 	.word	0x2000799d
2000798c:	20007dbf 	.word	0x20007dbf
20007990:	20007dbf 	.word	0x20007dbf
20007994:	20007dbf 	.word	0x20007dbf
20007998:	2000799d 	.word	0x2000799d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
2000799c:	4ba8      	ldr	r3, [pc, #672]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
2000799e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200079a2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
200079a4:	693b      	ldr	r3, [r7, #16]
200079a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
200079aa:	613b      	str	r3, [r7, #16]
200079ac:	693b      	ldr	r3, [r7, #16]
200079ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
200079b2:	f000 80d6 	beq.w	20007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
200079b6:	693b      	ldr	r3, [r7, #16]
200079b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
200079bc:	f200 80dd 	bhi.w	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
200079c0:	693b      	ldr	r3, [r7, #16]
200079c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
200079c6:	f000 809f 	beq.w	20007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
200079ca:	693b      	ldr	r3, [r7, #16]
200079cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
200079d0:	f200 80d3 	bhi.w	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
200079d4:	693b      	ldr	r3, [r7, #16]
200079d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200079da:	d05b      	beq.n	20007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
200079dc:	693b      	ldr	r3, [r7, #16]
200079de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200079e2:	f200 80ca 	bhi.w	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
200079e6:	693b      	ldr	r3, [r7, #16]
200079e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
200079ec:	f000 80b6 	beq.w	20007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
200079f0:	693b      	ldr	r3, [r7, #16]
200079f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
200079f6:	f200 80c0 	bhi.w	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
200079fa:	693b      	ldr	r3, [r7, #16]
200079fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
20007a00:	f000 8082 	beq.w	20007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
20007a04:	693b      	ldr	r3, [r7, #16]
20007a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
20007a0a:	f200 80b6 	bhi.w	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
20007a0e:	693b      	ldr	r3, [r7, #16]
20007a10:	2b00      	cmp	r3, #0
20007a12:	d004      	beq.n	20007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
20007a14:	693b      	ldr	r3, [r7, #16]
20007a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
20007a1a:	d03b      	beq.n	20007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
20007a1c:	e0ad      	b.n	20007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20007a1e:	4b88      	ldr	r3, [pc, #544]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a20:	685b      	ldr	r3, [r3, #4]
20007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007a26:	2b00      	cmp	r3, #0
20007a28:	d109      	bne.n	20007a3e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
20007a2a:	4b85      	ldr	r3, [pc, #532]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007a34:	4a83      	ldr	r2, [pc, #524]	; (20007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
20007a36:	fbb2 f3f3 	udiv	r3, r2, r3
20007a3a:	61bb      	str	r3, [r7, #24]
20007a3c:	e008      	b.n	20007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
20007a3e:	4b80      	ldr	r3, [pc, #512]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007a48:	4a7f      	ldr	r2, [pc, #508]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
20007a4e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
20007a50:	4b7b      	ldr	r3, [pc, #492]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007a56:	0e1b      	lsrs	r3, r3, #24
20007a58:	f003 030f 	and.w	r3, r3, #15
20007a5c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
20007a5e:	4b78      	ldr	r3, [pc, #480]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20007a64:	099b      	lsrs	r3, r3, #6
20007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
20007a6a:	69ba      	ldr	r2, [r7, #24]
20007a6c:	fb03 f202 	mul.w	r2, r3, r2
20007a70:	697b      	ldr	r3, [r7, #20]
20007a72:	fbb2 f3f3 	udiv	r3, r2, r3
20007a76:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
20007a78:	4b71      	ldr	r3, [pc, #452]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007a7e:	0a1b      	lsrs	r3, r3, #8
20007a80:	f003 031f 	and.w	r3, r3, #31
20007a84:	3301      	adds	r3, #1
20007a86:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
20007a88:	69fa      	ldr	r2, [r7, #28]
20007a8a:	697b      	ldr	r3, [r7, #20]
20007a8c:	fbb2 f3f3 	udiv	r3, r2, r3
20007a90:	61fb      	str	r3, [r7, #28]
          break;
20007a92:	e073      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20007a94:	4b6a      	ldr	r3, [pc, #424]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007a96:	685b      	ldr	r3, [r3, #4]
20007a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007a9c:	2b00      	cmp	r3, #0
20007a9e:	d109      	bne.n	20007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20007aa0:	4b67      	ldr	r3, [pc, #412]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007aaa:	4a66      	ldr	r2, [pc, #408]	; (20007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
20007aac:	fbb2 f3f3 	udiv	r3, r2, r3
20007ab0:	61bb      	str	r3, [r7, #24]
20007ab2:	e008      	b.n	20007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
20007ab4:	4b62      	ldr	r3, [pc, #392]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007abe:	4a62      	ldr	r2, [pc, #392]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
20007ac4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
20007ac6:	4b5e      	ldr	r3, [pc, #376]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007acc:	0e1b      	lsrs	r3, r3, #24
20007ace:	f003 030f 	and.w	r3, r3, #15
20007ad2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
20007ad4:	4b5a      	ldr	r3, [pc, #360]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007ada:	099b      	lsrs	r3, r3, #6
20007adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
20007ae0:	69ba      	ldr	r2, [r7, #24]
20007ae2:	fb03 f202 	mul.w	r2, r3, r2
20007ae6:	697b      	ldr	r3, [r7, #20]
20007ae8:	fbb2 f3f3 	udiv	r3, r2, r3
20007aec:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
20007aee:	4b54      	ldr	r3, [pc, #336]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007af4:	f003 031f 	and.w	r3, r3, #31
20007af8:	3301      	adds	r3, #1
20007afa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
20007afc:	69fa      	ldr	r2, [r7, #28]
20007afe:	697b      	ldr	r3, [r7, #20]
20007b00:	fbb2 f3f3 	udiv	r3, r2, r3
20007b04:	61fb      	str	r3, [r7, #28]
          break;
20007b06:	e039      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20007b08:	4b4d      	ldr	r3, [pc, #308]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b0a:	685b      	ldr	r3, [r3, #4]
20007b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007b10:	2b00      	cmp	r3, #0
20007b12:	d108      	bne.n	20007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20007b14:	4b4a      	ldr	r3, [pc, #296]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b16:	685b      	ldr	r3, [r3, #4]
20007b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007b1c:	4a49      	ldr	r2, [pc, #292]	; (20007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
20007b1e:	fbb2 f3f3 	udiv	r3, r2, r3
20007b22:	61bb      	str	r3, [r7, #24]
20007b24:	e007      	b.n	20007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
20007b26:	4b46      	ldr	r3, [pc, #280]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b28:	685b      	ldr	r3, [r3, #4]
20007b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007b2e:	4a46      	ldr	r2, [pc, #280]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007b30:	fbb2 f3f3 	udiv	r3, r2, r3
20007b34:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
20007b36:	4b42      	ldr	r3, [pc, #264]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b38:	685b      	ldr	r3, [r3, #4]
20007b3a:	0f1b      	lsrs	r3, r3, #28
20007b3c:	f003 0307 	and.w	r3, r3, #7
20007b40:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
20007b42:	4b3f      	ldr	r3, [pc, #252]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b44:	685b      	ldr	r3, [r3, #4]
20007b46:	099b      	lsrs	r3, r3, #6
20007b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
20007b4c:	69ba      	ldr	r2, [r7, #24]
20007b4e:	fb03 f202 	mul.w	r2, r3, r2
20007b52:	697b      	ldr	r3, [r7, #20]
20007b54:	fbb2 f3f3 	udiv	r3, r2, r3
20007b58:	61fb      	str	r3, [r7, #28]
          break;
20007b5a:	e00f      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
20007b5c:	4b3b      	ldr	r3, [pc, #236]	; (20007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
20007b5e:	61fb      	str	r3, [r7, #28]
          break;
20007b60:	e00c      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20007b62:	4b37      	ldr	r3, [pc, #220]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b64:	685b      	ldr	r3, [r3, #4]
20007b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007b6a:	2b00      	cmp	r3, #0
20007b6c:	d102      	bne.n	20007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
20007b6e:	4b35      	ldr	r3, [pc, #212]	; (20007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
20007b70:	61fb      	str	r3, [r7, #28]
          break;
20007b72:	e003      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
20007b74:	4b34      	ldr	r3, [pc, #208]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007b76:	61fb      	str	r3, [r7, #28]
          break;
20007b78:	e000      	b.n	20007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
20007b7a:	bf00      	nop
        }
      }
      break;
20007b7c:	e11f      	b.n	20007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
20007b7e:	4b30      	ldr	r3, [pc, #192]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007b84:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20007b88:	60fb      	str	r3, [r7, #12]
20007b8a:	68fb      	ldr	r3, [r7, #12]
20007b8c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20007b90:	d079      	beq.n	20007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
20007b92:	68fb      	ldr	r3, [r7, #12]
20007b94:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20007b98:	f200 8082 	bhi.w	20007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
20007b9c:	68fb      	ldr	r3, [r7, #12]
20007b9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
20007ba2:	d03c      	beq.n	20007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
20007ba4:	68fb      	ldr	r3, [r7, #12]
20007ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
20007baa:	d879      	bhi.n	20007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
20007bac:	68fb      	ldr	r3, [r7, #12]
20007bae:	2b00      	cmp	r3, #0
20007bb0:	d006      	beq.n	20007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
20007bb2:	68fb      	ldr	r3, [r7, #12]
20007bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20007bb8:	d172      	bne.n	20007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
20007bba:	4b24      	ldr	r3, [pc, #144]	; (20007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
20007bbc:	61fb      	str	r3, [r7, #28]
          break;
20007bbe:	e072      	b.n	20007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007bc0:	4b1f      	ldr	r3, [pc, #124]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007bc2:	685b      	ldr	r3, [r3, #4]
20007bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007bcc:	d109      	bne.n	20007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20007bce:	4b1c      	ldr	r3, [pc, #112]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007bd8:	4a1b      	ldr	r2, [pc, #108]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007bda:	fbb2 f3f3 	udiv	r3, r2, r3
20007bde:	61bb      	str	r3, [r7, #24]
20007be0:	e008      	b.n	20007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20007be2:	4b17      	ldr	r3, [pc, #92]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007bec:	4a15      	ldr	r2, [pc, #84]	; (20007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
20007bee:	fbb2 f3f3 	udiv	r3, r2, r3
20007bf2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20007bf4:	4b12      	ldr	r3, [pc, #72]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007bfa:	099b      	lsrs	r3, r3, #6
20007bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
20007c00:	69bb      	ldr	r3, [r7, #24]
20007c02:	fb02 f303 	mul.w	r3, r2, r3
20007c06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
20007c08:	4b0d      	ldr	r3, [pc, #52]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007c0e:	0f1b      	lsrs	r3, r3, #28
20007c10:	f003 0307 	and.w	r3, r3, #7
20007c14:	68ba      	ldr	r2, [r7, #8]
20007c16:	fbb2 f3f3 	udiv	r3, r2, r3
20007c1a:	61fb      	str	r3, [r7, #28]
          break;
20007c1c:	e043      	b.n	20007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007c1e:	4b08      	ldr	r3, [pc, #32]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007c20:	685b      	ldr	r3, [r3, #4]
20007c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007c2a:	d111      	bne.n	20007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20007c2c:	4b04      	ldr	r3, [pc, #16]	; (20007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
20007c2e:	685b      	ldr	r3, [r3, #4]
20007c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007c34:	4a04      	ldr	r2, [pc, #16]	; (20007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
20007c36:	fbb2 f3f3 	udiv	r3, r2, r3
20007c3a:	61bb      	str	r3, [r7, #24]
20007c3c:	e010      	b.n	20007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
20007c3e:	bf00      	nop
20007c40:	40023800 	.word	0x40023800
20007c44:	00f42400 	.word	0x00f42400
20007c48:	007a1200 	.word	0x007a1200
20007c4c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20007c50:	4b5e      	ldr	r3, [pc, #376]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007c52:	685b      	ldr	r3, [r3, #4]
20007c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007c58:	4a5d      	ldr	r2, [pc, #372]	; (20007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
20007c5a:	fbb2 f3f3 	udiv	r3, r2, r3
20007c5e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
20007c60:	4b5a      	ldr	r3, [pc, #360]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007c62:	685b      	ldr	r3, [r3, #4]
20007c64:	099b      	lsrs	r3, r3, #6
20007c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
20007c6a:	69bb      	ldr	r3, [r7, #24]
20007c6c:	fb02 f303 	mul.w	r3, r2, r3
20007c70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
20007c72:	4b56      	ldr	r3, [pc, #344]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007c74:	685b      	ldr	r3, [r3, #4]
20007c76:	0f1b      	lsrs	r3, r3, #28
20007c78:	f003 0307 	and.w	r3, r3, #7
20007c7c:	68ba      	ldr	r2, [r7, #8]
20007c7e:	fbb2 f3f3 	udiv	r3, r2, r3
20007c82:	61fb      	str	r3, [r7, #28]
          break;
20007c84:	e00f      	b.n	20007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007c86:	4b51      	ldr	r3, [pc, #324]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007c88:	685b      	ldr	r3, [r3, #4]
20007c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007c92:	d102      	bne.n	20007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
20007c94:	4b4f      	ldr	r3, [pc, #316]	; (20007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
20007c96:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
20007c98:	e005      	b.n	20007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
20007c9a:	4b4d      	ldr	r3, [pc, #308]	; (20007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
20007c9c:	61fb      	str	r3, [r7, #28]
          break;
20007c9e:	e002      	b.n	20007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
20007ca0:	2300      	movs	r3, #0
20007ca2:	61fb      	str	r3, [r7, #28]
          break;
20007ca4:	bf00      	nop
        }
      }
      break;
20007ca6:	e08a      	b.n	20007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
20007ca8:	4b48      	ldr	r3, [pc, #288]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20007cae:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
20007cb2:	60fb      	str	r3, [r7, #12]
20007cb4:	68fb      	ldr	r3, [r7, #12]
20007cb6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
20007cba:	d06f      	beq.n	20007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
20007cbc:	68fb      	ldr	r3, [r7, #12]
20007cbe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
20007cc2:	d878      	bhi.n	20007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
20007cc4:	68fb      	ldr	r3, [r7, #12]
20007cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
20007cca:	d03c      	beq.n	20007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
20007ccc:	68fb      	ldr	r3, [r7, #12]
20007cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
20007cd2:	d870      	bhi.n	20007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
20007cd4:	68fb      	ldr	r3, [r7, #12]
20007cd6:	2b00      	cmp	r3, #0
20007cd8:	d006      	beq.n	20007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
20007cda:	68fb      	ldr	r3, [r7, #12]
20007cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20007ce0:	d169      	bne.n	20007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
20007ce2:	4b3d      	ldr	r3, [pc, #244]	; (20007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
20007ce4:	61fb      	str	r3, [r7, #28]
          break;
20007ce6:	e069      	b.n	20007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007ce8:	4b38      	ldr	r3, [pc, #224]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007cea:	685b      	ldr	r3, [r3, #4]
20007cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007cf4:	d109      	bne.n	20007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20007cf6:	4b35      	ldr	r3, [pc, #212]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007d00:	4a34      	ldr	r2, [pc, #208]	; (20007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
20007d02:	fbb2 f3f3 	udiv	r3, r2, r3
20007d06:	61bb      	str	r3, [r7, #24]
20007d08:	e008      	b.n	20007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20007d0a:	4b30      	ldr	r3, [pc, #192]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007d14:	4a2e      	ldr	r2, [pc, #184]	; (20007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
20007d16:	fbb2 f3f3 	udiv	r3, r2, r3
20007d1a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20007d1c:	4b2b      	ldr	r3, [pc, #172]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007d22:	099b      	lsrs	r3, r3, #6
20007d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
20007d28:	69bb      	ldr	r3, [r7, #24]
20007d2a:	fb02 f303 	mul.w	r3, r2, r3
20007d2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
20007d30:	4b26      	ldr	r3, [pc, #152]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007d36:	0f1b      	lsrs	r3, r3, #28
20007d38:	f003 0307 	and.w	r3, r3, #7
20007d3c:	68ba      	ldr	r2, [r7, #8]
20007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
20007d42:	61fb      	str	r3, [r7, #28]
          break;
20007d44:	e03a      	b.n	20007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007d46:	4b21      	ldr	r3, [pc, #132]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d48:	685b      	ldr	r3, [r3, #4]
20007d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007d52:	d108      	bne.n	20007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20007d54:	4b1d      	ldr	r3, [pc, #116]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d56:	685b      	ldr	r3, [r3, #4]
20007d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007d5c:	4a1d      	ldr	r2, [pc, #116]	; (20007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
20007d5e:	fbb2 f3f3 	udiv	r3, r2, r3
20007d62:	61bb      	str	r3, [r7, #24]
20007d64:	e007      	b.n	20007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20007d66:	4b19      	ldr	r3, [pc, #100]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d68:	685b      	ldr	r3, [r3, #4]
20007d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007d6e:	4a18      	ldr	r2, [pc, #96]	; (20007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
20007d70:	fbb2 f3f3 	udiv	r3, r2, r3
20007d74:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
20007d76:	4b15      	ldr	r3, [pc, #84]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d78:	685b      	ldr	r3, [r3, #4]
20007d7a:	099b      	lsrs	r3, r3, #6
20007d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
20007d80:	69bb      	ldr	r3, [r7, #24]
20007d82:	fb02 f303 	mul.w	r3, r2, r3
20007d86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
20007d88:	4b10      	ldr	r3, [pc, #64]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d8a:	685b      	ldr	r3, [r3, #4]
20007d8c:	0f1b      	lsrs	r3, r3, #28
20007d8e:	f003 0307 	and.w	r3, r3, #7
20007d92:	68ba      	ldr	r2, [r7, #8]
20007d94:	fbb2 f3f3 	udiv	r3, r2, r3
20007d98:	61fb      	str	r3, [r7, #28]
          break;
20007d9a:	e00f      	b.n	20007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20007d9c:	4b0b      	ldr	r3, [pc, #44]	; (20007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
20007d9e:	685b      	ldr	r3, [r3, #4]
20007da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007da8:	d102      	bne.n	20007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
20007daa:	4b0a      	ldr	r3, [pc, #40]	; (20007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
20007dac:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
20007dae:	e005      	b.n	20007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
20007db0:	4b07      	ldr	r3, [pc, #28]	; (20007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
20007db2:	61fb      	str	r3, [r7, #28]
          break;
20007db4:	e002      	b.n	20007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
20007db6:	2300      	movs	r3, #0
20007db8:	61fb      	str	r3, [r7, #28]
          break;
20007dba:	bf00      	nop
        }
      }
      break;
20007dbc:	bf00      	nop
    }
  }
  return frequency;
20007dbe:	69fb      	ldr	r3, [r7, #28]
}
20007dc0:	4618      	mov	r0, r3
20007dc2:	3724      	adds	r7, #36	; 0x24
20007dc4:	46bd      	mov	sp, r7
20007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20007dca:	4770      	bx	lr
20007dcc:	40023800 	.word	0x40023800
20007dd0:	00f42400 	.word	0x00f42400
20007dd4:	007a1200 	.word	0x007a1200
20007dd8:	00bb8000 	.word	0x00bb8000

20007ddc <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
20007ddc:	b480      	push	{r7}
20007dde:	b083      	sub	sp, #12
20007de0:	af00      	add	r7, sp, #0
20007de2:	4603      	mov	r3, r0
20007de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if(Mode == RCC_LSE_HIGHDRIVE_MODE)
20007de6:	79fb      	ldrb	r3, [r7, #7]
20007de8:	2b01      	cmp	r3, #1
20007dea:	d106      	bne.n	20007dfa <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20007dec:	4b09      	ldr	r3, [pc, #36]	; (20007e14 <HAL_RCCEx_SelectLSEMode+0x38>)
20007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007df0:	4a08      	ldr	r2, [pc, #32]	; (20007e14 <HAL_RCCEx_SelectLSEMode+0x38>)
20007df2:	f043 0308 	orr.w	r3, r3, #8
20007df6:	6713      	str	r3, [r2, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20007df8:	e005      	b.n	20007e06 <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20007dfa:	4b06      	ldr	r3, [pc, #24]	; (20007e14 <HAL_RCCEx_SelectLSEMode+0x38>)
20007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007dfe:	4a05      	ldr	r2, [pc, #20]	; (20007e14 <HAL_RCCEx_SelectLSEMode+0x38>)
20007e00:	f023 0308 	bic.w	r3, r3, #8
20007e04:	6713      	str	r3, [r2, #112]	; 0x70
}
20007e06:	bf00      	nop
20007e08:	370c      	adds	r7, #12
20007e0a:	46bd      	mov	sp, r7
20007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20007e10:	4770      	bx	lr
20007e12:	bf00      	nop
20007e14:	40023800 	.word	0x40023800

20007e18 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
20007e18:	b580      	push	{r7, lr}
20007e1a:	b084      	sub	sp, #16
20007e1c:	af00      	add	r7, sp, #0
20007e1e:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20007e20:	4b23      	ldr	r3, [pc, #140]	; (20007eb0 <HAL_RCCEx_EnablePLLI2S+0x98>)
20007e22:	2200      	movs	r2, #0
20007e24:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20007e26:	f7f8 fd72 	bl	2000090e <HAL_GetTick>
20007e2a:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20007e2c:	e008      	b.n	20007e40 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20007e2e:	f7f8 fd6e 	bl	2000090e <HAL_GetTick>
20007e32:	4602      	mov	r2, r0
20007e34:	68fb      	ldr	r3, [r7, #12]
20007e36:	1ad3      	subs	r3, r2, r3
20007e38:	2b02      	cmp	r3, #2
20007e3a:	d901      	bls.n	20007e40 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007e3c:	2303      	movs	r3, #3
20007e3e:	e033      	b.n	20007ea8 <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20007e40:	4b1c      	ldr	r3, [pc, #112]	; (20007eb4 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20007e42:	681b      	ldr	r3, [r3, #0]
20007e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007e48:	2b00      	cmp	r3, #0
20007e4a:	d1f0      	bne.n	20007e2e <HAL_RCCEx_EnablePLLI2S+0x16>
#if defined(STM32F446xx)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
20007e4c:	687b      	ldr	r3, [r7, #4]
20007e4e:	681a      	ldr	r2, [r3, #0]
20007e50:	687b      	ldr	r3, [r7, #4]
20007e52:	685b      	ldr	r3, [r3, #4]
20007e54:	019b      	lsls	r3, r3, #6
20007e56:	431a      	orrs	r2, r3
20007e58:	687b      	ldr	r3, [r7, #4]
20007e5a:	689b      	ldr	r3, [r3, #8]
20007e5c:	085b      	lsrs	r3, r3, #1
20007e5e:	3b01      	subs	r3, #1
20007e60:	041b      	lsls	r3, r3, #16
20007e62:	431a      	orrs	r2, r3
20007e64:	687b      	ldr	r3, [r7, #4]
20007e66:	68db      	ldr	r3, [r3, #12]
20007e68:	061b      	lsls	r3, r3, #24
20007e6a:	431a      	orrs	r2, r3
20007e6c:	687b      	ldr	r3, [r7, #4]
20007e6e:	691b      	ldr	r3, [r3, #16]
20007e70:	071b      	lsls	r3, r3, #28
20007e72:	4910      	ldr	r1, [pc, #64]	; (20007eb4 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20007e74:	4313      	orrs	r3, r2
20007e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
20007e7a:	4b0d      	ldr	r3, [pc, #52]	; (20007eb0 <HAL_RCCEx_EnablePLLI2S+0x98>)
20007e7c:	2201      	movs	r2, #1
20007e7e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
20007e80:	f7f8 fd45 	bl	2000090e <HAL_GetTick>
20007e84:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20007e86:	e008      	b.n	20007e9a <HAL_RCCEx_EnablePLLI2S+0x82>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20007e88:	f7f8 fd41 	bl	2000090e <HAL_GetTick>
20007e8c:	4602      	mov	r2, r0
20007e8e:	68fb      	ldr	r3, [r7, #12]
20007e90:	1ad3      	subs	r3, r2, r3
20007e92:	2b02      	cmp	r3, #2
20007e94:	d901      	bls.n	20007e9a <HAL_RCCEx_EnablePLLI2S+0x82>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007e96:	2303      	movs	r3, #3
20007e98:	e006      	b.n	20007ea8 <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20007e9a:	4b06      	ldr	r3, [pc, #24]	; (20007eb4 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20007e9c:	681b      	ldr	r3, [r3, #0]
20007e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007ea2:	2b00      	cmp	r3, #0
20007ea4:	d0f0      	beq.n	20007e88 <HAL_RCCEx_EnablePLLI2S+0x70>
    }
  }

 return HAL_OK;
20007ea6:	2300      	movs	r3, #0
}
20007ea8:	4618      	mov	r0, r3
20007eaa:	3710      	adds	r7, #16
20007eac:	46bd      	mov	sp, r7
20007eae:	bd80      	pop	{r7, pc}
20007eb0:	42470068 	.word	0x42470068
20007eb4:	40023800 	.word	0x40023800

20007eb8 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
20007eb8:	b580      	push	{r7, lr}
20007eba:	b082      	sub	sp, #8
20007ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20007ebe:	4b0d      	ldr	r3, [pc, #52]	; (20007ef4 <HAL_RCCEx_DisablePLLI2S+0x3c>)
20007ec0:	2200      	movs	r2, #0
20007ec2:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20007ec4:	f7f8 fd23 	bl	2000090e <HAL_GetTick>
20007ec8:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20007eca:	e008      	b.n	20007ede <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20007ecc:	f7f8 fd1f 	bl	2000090e <HAL_GetTick>
20007ed0:	4602      	mov	r2, r0
20007ed2:	687b      	ldr	r3, [r7, #4]
20007ed4:	1ad3      	subs	r3, r2, r3
20007ed6:	2b02      	cmp	r3, #2
20007ed8:	d901      	bls.n	20007ede <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007eda:	2303      	movs	r3, #3
20007edc:	e006      	b.n	20007eec <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20007ede:	4b06      	ldr	r3, [pc, #24]	; (20007ef8 <HAL_RCCEx_DisablePLLI2S+0x40>)
20007ee0:	681b      	ldr	r3, [r3, #0]
20007ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007ee6:	2b00      	cmp	r3, #0
20007ee8:	d1f0      	bne.n	20007ecc <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
20007eea:	2300      	movs	r3, #0
}
20007eec:	4618      	mov	r0, r3
20007eee:	3708      	adds	r7, #8
20007ef0:	46bd      	mov	sp, r7
20007ef2:	bd80      	pop	{r7, pc}
20007ef4:	42470068 	.word	0x42470068
20007ef8:	40023800 	.word	0x40023800

20007efc <HAL_RCCEx_EnablePLLSAI>:
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
{
20007efc:	b580      	push	{r7, lr}
20007efe:	b084      	sub	sp, #16
20007f00:	af00      	add	r7, sp, #0
20007f02:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
20007f04:	4b22      	ldr	r3, [pc, #136]	; (20007f90 <HAL_RCCEx_EnablePLLSAI+0x94>)
20007f06:	2200      	movs	r2, #0
20007f08:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
20007f0a:	f7f8 fd00 	bl	2000090e <HAL_GetTick>
20007f0e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007f10:	e008      	b.n	20007f24 <HAL_RCCEx_EnablePLLSAI+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20007f12:	f7f8 fcfc 	bl	2000090e <HAL_GetTick>
20007f16:	4602      	mov	r2, r0
20007f18:	68fb      	ldr	r3, [r7, #12]
20007f1a:	1ad3      	subs	r3, r2, r3
20007f1c:	2b02      	cmp	r3, #2
20007f1e:	d901      	bls.n	20007f24 <HAL_RCCEx_EnablePLLSAI+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007f20:	2303      	movs	r3, #3
20007f22:	e031      	b.n	20007f88 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007f24:	4b1b      	ldr	r3, [pc, #108]	; (20007f94 <HAL_RCCEx_EnablePLLSAI+0x98>)
20007f26:	681b      	ldr	r3, [r3, #0]
20007f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20007f30:	d0ef      	beq.n	20007f12 <HAL_RCCEx_EnablePLLSAI+0x16>
#if defined(STM32F446xx)
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
20007f32:	687b      	ldr	r3, [r7, #4]
20007f34:	681a      	ldr	r2, [r3, #0]
20007f36:	687b      	ldr	r3, [r7, #4]
20007f38:	685b      	ldr	r3, [r3, #4]
20007f3a:	019b      	lsls	r3, r3, #6
20007f3c:	431a      	orrs	r2, r3
20007f3e:	687b      	ldr	r3, [r7, #4]
20007f40:	689b      	ldr	r3, [r3, #8]
20007f42:	085b      	lsrs	r3, r3, #1
20007f44:	3b01      	subs	r3, #1
20007f46:	041b      	lsls	r3, r3, #16
20007f48:	431a      	orrs	r2, r3
20007f4a:	687b      	ldr	r3, [r7, #4]
20007f4c:	68db      	ldr	r3, [r3, #12]
20007f4e:	061b      	lsls	r3, r3, #24
20007f50:	4910      	ldr	r1, [pc, #64]	; (20007f94 <HAL_RCCEx_EnablePLLSAI+0x98>)
20007f52:	4313      	orrs	r3, r2
20007f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
#endif /* STM32F446xx */

  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();
20007f58:	4b0d      	ldr	r3, [pc, #52]	; (20007f90 <HAL_RCCEx_EnablePLLSAI+0x94>)
20007f5a:	2201      	movs	r2, #1
20007f5c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
20007f5e:	f7f8 fcd6 	bl	2000090e <HAL_GetTick>
20007f62:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20007f64:	e008      	b.n	20007f78 <HAL_RCCEx_EnablePLLSAI+0x7c>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20007f66:	f7f8 fcd2 	bl	2000090e <HAL_GetTick>
20007f6a:	4602      	mov	r2, r0
20007f6c:	68fb      	ldr	r3, [r7, #12]
20007f6e:	1ad3      	subs	r3, r2, r3
20007f70:	2b02      	cmp	r3, #2
20007f72:	d901      	bls.n	20007f78 <HAL_RCCEx_EnablePLLSAI+0x7c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007f74:	2303      	movs	r3, #3
20007f76:	e007      	b.n	20007f88 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20007f78:	4b06      	ldr	r3, [pc, #24]	; (20007f94 <HAL_RCCEx_EnablePLLSAI+0x98>)
20007f7a:	681b      	ldr	r3, [r3, #0]
20007f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20007f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20007f84:	d1ef      	bne.n	20007f66 <HAL_RCCEx_EnablePLLSAI+0x6a>
    }
  }

 return HAL_OK;
20007f86:	2300      	movs	r3, #0
}
20007f88:	4618      	mov	r0, r3
20007f8a:	3710      	adds	r7, #16
20007f8c:	46bd      	mov	sp, r7
20007f8e:	bd80      	pop	{r7, pc}
20007f90:	42470070 	.word	0x42470070
20007f94:	40023800 	.word	0x40023800

20007f98 <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
20007f98:	b580      	push	{r7, lr}
20007f9a:	b082      	sub	sp, #8
20007f9c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
20007f9e:	4b0e      	ldr	r3, [pc, #56]	; (20007fd8 <HAL_RCCEx_DisablePLLSAI+0x40>)
20007fa0:	2200      	movs	r2, #0
20007fa2:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
20007fa4:	f7f8 fcb3 	bl	2000090e <HAL_GetTick>
20007fa8:	6078      	str	r0, [r7, #4]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007faa:	e008      	b.n	20007fbe <HAL_RCCEx_DisablePLLSAI+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20007fac:	f7f8 fcaf 	bl	2000090e <HAL_GetTick>
20007fb0:	4602      	mov	r2, r0
20007fb2:	687b      	ldr	r3, [r7, #4]
20007fb4:	1ad3      	subs	r3, r2, r3
20007fb6:	2b02      	cmp	r3, #2
20007fb8:	d901      	bls.n	20007fbe <HAL_RCCEx_DisablePLLSAI+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007fba:	2303      	movs	r3, #3
20007fbc:	e007      	b.n	20007fce <HAL_RCCEx_DisablePLLSAI+0x36>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20007fbe:	4b07      	ldr	r3, [pc, #28]	; (20007fdc <HAL_RCCEx_DisablePLLSAI+0x44>)
20007fc0:	681b      	ldr	r3, [r3, #0]
20007fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20007fca:	d0ef      	beq.n	20007fac <HAL_RCCEx_DisablePLLSAI+0x14>
    }
  }

  return HAL_OK;
20007fcc:	2300      	movs	r3, #0
}
20007fce:	4618      	mov	r0, r3
20007fd0:	3708      	adds	r7, #8
20007fd2:	46bd      	mov	sp, r7
20007fd4:	bd80      	pop	{r7, pc}
20007fd6:	bf00      	nop
20007fd8:	42470070 	.word	0x42470070
20007fdc:	40023800 	.word	0x40023800

20007fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20007fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20007fe4:	b0ae      	sub	sp, #184	; 0xb8
20007fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
20007fe8:	2300      	movs	r3, #0
20007fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
20007fee:	2300      	movs	r3, #0
20007ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
20007ff4:	2300      	movs	r3, #0
20007ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
20007ffa:	2300      	movs	r3, #0
20007ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
20008000:	2300      	movs	r3, #0
20008002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20008006:	4bcb      	ldr	r3, [pc, #812]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
20008008:	689b      	ldr	r3, [r3, #8]
2000800a:	f003 030c 	and.w	r3, r3, #12
2000800e:	2b0c      	cmp	r3, #12
20008010:	f200 8206 	bhi.w	20008420 <HAL_RCC_GetSysClockFreq+0x440>
20008014:	a201      	add	r2, pc, #4	; (adr r2, 2000801c <HAL_RCC_GetSysClockFreq+0x3c>)
20008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000801a:	bf00      	nop
2000801c:	20008051 	.word	0x20008051
20008020:	20008421 	.word	0x20008421
20008024:	20008421 	.word	0x20008421
20008028:	20008421 	.word	0x20008421
2000802c:	20008059 	.word	0x20008059
20008030:	20008421 	.word	0x20008421
20008034:	20008421 	.word	0x20008421
20008038:	20008421 	.word	0x20008421
2000803c:	20008061 	.word	0x20008061
20008040:	20008421 	.word	0x20008421
20008044:	20008421 	.word	0x20008421
20008048:	20008421 	.word	0x20008421
2000804c:	20008251 	.word	0x20008251
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20008050:	4bb9      	ldr	r3, [pc, #740]	; (20008338 <HAL_RCC_GetSysClockFreq+0x358>)
20008052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
20008056:	e1e7      	b.n	20008428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20008058:	4bb8      	ldr	r3, [pc, #736]	; (2000833c <HAL_RCC_GetSysClockFreq+0x35c>)
2000805a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
2000805e:	e1e3      	b.n	20008428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20008060:	4bb4      	ldr	r3, [pc, #720]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
20008062:	685b      	ldr	r3, [r3, #4]
20008064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20008068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000806c:	4bb1      	ldr	r3, [pc, #708]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000806e:	685b      	ldr	r3, [r3, #4]
20008070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20008074:	2b00      	cmp	r3, #0
20008076:	d071      	beq.n	2000815c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20008078:	4bae      	ldr	r3, [pc, #696]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000807a:	685b      	ldr	r3, [r3, #4]
2000807c:	099b      	lsrs	r3, r3, #6
2000807e:	2200      	movs	r2, #0
20008080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
20008084:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
20008088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
2000808c:	f3c3 0308 	ubfx	r3, r3, #0, #9
20008090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
20008094:	2300      	movs	r3, #0
20008096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
2000809a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
2000809e:	4622      	mov	r2, r4
200080a0:	462b      	mov	r3, r5
200080a2:	f04f 0000 	mov.w	r0, #0
200080a6:	f04f 0100 	mov.w	r1, #0
200080aa:	0159      	lsls	r1, r3, #5
200080ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
200080b0:	0150      	lsls	r0, r2, #5
200080b2:	4602      	mov	r2, r0
200080b4:	460b      	mov	r3, r1
200080b6:	4621      	mov	r1, r4
200080b8:	1a51      	subs	r1, r2, r1
200080ba:	6439      	str	r1, [r7, #64]	; 0x40
200080bc:	4629      	mov	r1, r5
200080be:	eb63 0301 	sbc.w	r3, r3, r1
200080c2:	647b      	str	r3, [r7, #68]	; 0x44
200080c4:	f04f 0200 	mov.w	r2, #0
200080c8:	f04f 0300 	mov.w	r3, #0
200080cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
200080d0:	4649      	mov	r1, r9
200080d2:	018b      	lsls	r3, r1, #6
200080d4:	4641      	mov	r1, r8
200080d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
200080da:	4641      	mov	r1, r8
200080dc:	018a      	lsls	r2, r1, #6
200080de:	4641      	mov	r1, r8
200080e0:	1a51      	subs	r1, r2, r1
200080e2:	63b9      	str	r1, [r7, #56]	; 0x38
200080e4:	4649      	mov	r1, r9
200080e6:	eb63 0301 	sbc.w	r3, r3, r1
200080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
200080ec:	f04f 0200 	mov.w	r2, #0
200080f0:	f04f 0300 	mov.w	r3, #0
200080f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
200080f8:	4649      	mov	r1, r9
200080fa:	00cb      	lsls	r3, r1, #3
200080fc:	4641      	mov	r1, r8
200080fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
20008102:	4641      	mov	r1, r8
20008104:	00ca      	lsls	r2, r1, #3
20008106:	4610      	mov	r0, r2
20008108:	4619      	mov	r1, r3
2000810a:	4603      	mov	r3, r0
2000810c:	4622      	mov	r2, r4
2000810e:	189b      	adds	r3, r3, r2
20008110:	633b      	str	r3, [r7, #48]	; 0x30
20008112:	462b      	mov	r3, r5
20008114:	460a      	mov	r2, r1
20008116:	eb42 0303 	adc.w	r3, r2, r3
2000811a:	637b      	str	r3, [r7, #52]	; 0x34
2000811c:	f04f 0200 	mov.w	r2, #0
20008120:	f04f 0300 	mov.w	r3, #0
20008124:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
20008128:	4629      	mov	r1, r5
2000812a:	024b      	lsls	r3, r1, #9
2000812c:	4621      	mov	r1, r4
2000812e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
20008132:	4621      	mov	r1, r4
20008134:	024a      	lsls	r2, r1, #9
20008136:	4610      	mov	r0, r2
20008138:	4619      	mov	r1, r3
2000813a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
2000813e:	2200      	movs	r2, #0
20008140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
20008144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
20008148:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
2000814c:	f7f8 fa36 	bl	200005bc <__aeabi_uldivmod>
20008150:	4602      	mov	r2, r0
20008152:	460b      	mov	r3, r1
20008154:	4613      	mov	r3, r2
20008156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
2000815a:	e067      	b.n	2000822c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000815c:	4b75      	ldr	r3, [pc, #468]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000815e:	685b      	ldr	r3, [r3, #4]
20008160:	099b      	lsrs	r3, r3, #6
20008162:	2200      	movs	r2, #0
20008164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
20008168:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
2000816c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
20008170:	f3c3 0308 	ubfx	r3, r3, #0, #9
20008174:	67bb      	str	r3, [r7, #120]	; 0x78
20008176:	2300      	movs	r3, #0
20008178:	67fb      	str	r3, [r7, #124]	; 0x7c
2000817a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
2000817e:	4622      	mov	r2, r4
20008180:	462b      	mov	r3, r5
20008182:	f04f 0000 	mov.w	r0, #0
20008186:	f04f 0100 	mov.w	r1, #0
2000818a:	0159      	lsls	r1, r3, #5
2000818c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20008190:	0150      	lsls	r0, r2, #5
20008192:	4602      	mov	r2, r0
20008194:	460b      	mov	r3, r1
20008196:	4621      	mov	r1, r4
20008198:	1a51      	subs	r1, r2, r1
2000819a:	62b9      	str	r1, [r7, #40]	; 0x28
2000819c:	4629      	mov	r1, r5
2000819e:	eb63 0301 	sbc.w	r3, r3, r1
200081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
200081a4:	f04f 0200 	mov.w	r2, #0
200081a8:	f04f 0300 	mov.w	r3, #0
200081ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
200081b0:	4649      	mov	r1, r9
200081b2:	018b      	lsls	r3, r1, #6
200081b4:	4641      	mov	r1, r8
200081b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
200081ba:	4641      	mov	r1, r8
200081bc:	018a      	lsls	r2, r1, #6
200081be:	4641      	mov	r1, r8
200081c0:	ebb2 0a01 	subs.w	sl, r2, r1
200081c4:	4649      	mov	r1, r9
200081c6:	eb63 0b01 	sbc.w	fp, r3, r1
200081ca:	f04f 0200 	mov.w	r2, #0
200081ce:	f04f 0300 	mov.w	r3, #0
200081d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
200081d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
200081da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
200081de:	4692      	mov	sl, r2
200081e0:	469b      	mov	fp, r3
200081e2:	4623      	mov	r3, r4
200081e4:	eb1a 0303 	adds.w	r3, sl, r3
200081e8:	623b      	str	r3, [r7, #32]
200081ea:	462b      	mov	r3, r5
200081ec:	eb4b 0303 	adc.w	r3, fp, r3
200081f0:	627b      	str	r3, [r7, #36]	; 0x24
200081f2:	f04f 0200 	mov.w	r2, #0
200081f6:	f04f 0300 	mov.w	r3, #0
200081fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
200081fe:	4629      	mov	r1, r5
20008200:	028b      	lsls	r3, r1, #10
20008202:	4621      	mov	r1, r4
20008204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20008208:	4621      	mov	r1, r4
2000820a:	028a      	lsls	r2, r1, #10
2000820c:	4610      	mov	r0, r2
2000820e:	4619      	mov	r1, r3
20008210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
20008214:	2200      	movs	r2, #0
20008216:	673b      	str	r3, [r7, #112]	; 0x70
20008218:	677a      	str	r2, [r7, #116]	; 0x74
2000821a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
2000821e:	f7f8 f9cd 	bl	200005bc <__aeabi_uldivmod>
20008222:	4602      	mov	r2, r0
20008224:	460b      	mov	r3, r1
20008226:	4613      	mov	r3, r2
20008228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000822c:	4b41      	ldr	r3, [pc, #260]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000822e:	685b      	ldr	r3, [r3, #4]
20008230:	0c1b      	lsrs	r3, r3, #16
20008232:	f003 0303 	and.w	r3, r3, #3
20008236:	3301      	adds	r3, #1
20008238:	005b      	lsls	r3, r3, #1
2000823a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
2000823e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20008242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
20008246:	fbb2 f3f3 	udiv	r3, r2, r3
2000824a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
2000824e:	e0eb      	b.n	20008428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20008250:	4b38      	ldr	r3, [pc, #224]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
20008252:	685b      	ldr	r3, [r3, #4]
20008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20008258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000825c:	4b35      	ldr	r3, [pc, #212]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000825e:	685b      	ldr	r3, [r3, #4]
20008260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20008264:	2b00      	cmp	r3, #0
20008266:	d06b      	beq.n	20008340 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20008268:	4b32      	ldr	r3, [pc, #200]	; (20008334 <HAL_RCC_GetSysClockFreq+0x354>)
2000826a:	685b      	ldr	r3, [r3, #4]
2000826c:	099b      	lsrs	r3, r3, #6
2000826e:	2200      	movs	r2, #0
20008270:	66bb      	str	r3, [r7, #104]	; 0x68
20008272:	66fa      	str	r2, [r7, #108]	; 0x6c
20008274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
20008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000827a:	663b      	str	r3, [r7, #96]	; 0x60
2000827c:	2300      	movs	r3, #0
2000827e:	667b      	str	r3, [r7, #100]	; 0x64
20008280:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
20008284:	4622      	mov	r2, r4
20008286:	462b      	mov	r3, r5
20008288:	f04f 0000 	mov.w	r0, #0
2000828c:	f04f 0100 	mov.w	r1, #0
20008290:	0159      	lsls	r1, r3, #5
20008292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20008296:	0150      	lsls	r0, r2, #5
20008298:	4602      	mov	r2, r0
2000829a:	460b      	mov	r3, r1
2000829c:	4621      	mov	r1, r4
2000829e:	1a51      	subs	r1, r2, r1
200082a0:	61b9      	str	r1, [r7, #24]
200082a2:	4629      	mov	r1, r5
200082a4:	eb63 0301 	sbc.w	r3, r3, r1
200082a8:	61fb      	str	r3, [r7, #28]
200082aa:	f04f 0200 	mov.w	r2, #0
200082ae:	f04f 0300 	mov.w	r3, #0
200082b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
200082b6:	4659      	mov	r1, fp
200082b8:	018b      	lsls	r3, r1, #6
200082ba:	4651      	mov	r1, sl
200082bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
200082c0:	4651      	mov	r1, sl
200082c2:	018a      	lsls	r2, r1, #6
200082c4:	4651      	mov	r1, sl
200082c6:	ebb2 0801 	subs.w	r8, r2, r1
200082ca:	4659      	mov	r1, fp
200082cc:	eb63 0901 	sbc.w	r9, r3, r1
200082d0:	f04f 0200 	mov.w	r2, #0
200082d4:	f04f 0300 	mov.w	r3, #0
200082d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
200082dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
200082e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
200082e4:	4690      	mov	r8, r2
200082e6:	4699      	mov	r9, r3
200082e8:	4623      	mov	r3, r4
200082ea:	eb18 0303 	adds.w	r3, r8, r3
200082ee:	613b      	str	r3, [r7, #16]
200082f0:	462b      	mov	r3, r5
200082f2:	eb49 0303 	adc.w	r3, r9, r3
200082f6:	617b      	str	r3, [r7, #20]
200082f8:	f04f 0200 	mov.w	r2, #0
200082fc:	f04f 0300 	mov.w	r3, #0
20008300:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
20008304:	4629      	mov	r1, r5
20008306:	024b      	lsls	r3, r1, #9
20008308:	4621      	mov	r1, r4
2000830a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
2000830e:	4621      	mov	r1, r4
20008310:	024a      	lsls	r2, r1, #9
20008312:	4610      	mov	r0, r2
20008314:	4619      	mov	r1, r3
20008316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
2000831a:	2200      	movs	r2, #0
2000831c:	65bb      	str	r3, [r7, #88]	; 0x58
2000831e:	65fa      	str	r2, [r7, #92]	; 0x5c
20008320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
20008324:	f7f8 f94a 	bl	200005bc <__aeabi_uldivmod>
20008328:	4602      	mov	r2, r0
2000832a:	460b      	mov	r3, r1
2000832c:	4613      	mov	r3, r2
2000832e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
20008332:	e065      	b.n	20008400 <HAL_RCC_GetSysClockFreq+0x420>
20008334:	40023800 	.word	0x40023800
20008338:	00f42400 	.word	0x00f42400
2000833c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20008340:	4b3d      	ldr	r3, [pc, #244]	; (20008438 <HAL_RCC_GetSysClockFreq+0x458>)
20008342:	685b      	ldr	r3, [r3, #4]
20008344:	099b      	lsrs	r3, r3, #6
20008346:	2200      	movs	r2, #0
20008348:	4618      	mov	r0, r3
2000834a:	4611      	mov	r1, r2
2000834c:	f3c0 0308 	ubfx	r3, r0, #0, #9
20008350:	653b      	str	r3, [r7, #80]	; 0x50
20008352:	2300      	movs	r3, #0
20008354:	657b      	str	r3, [r7, #84]	; 0x54
20008356:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
2000835a:	4642      	mov	r2, r8
2000835c:	464b      	mov	r3, r9
2000835e:	f04f 0000 	mov.w	r0, #0
20008362:	f04f 0100 	mov.w	r1, #0
20008366:	0159      	lsls	r1, r3, #5
20008368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
2000836c:	0150      	lsls	r0, r2, #5
2000836e:	4602      	mov	r2, r0
20008370:	460b      	mov	r3, r1
20008372:	4641      	mov	r1, r8
20008374:	1a51      	subs	r1, r2, r1
20008376:	60b9      	str	r1, [r7, #8]
20008378:	4649      	mov	r1, r9
2000837a:	eb63 0301 	sbc.w	r3, r3, r1
2000837e:	60fb      	str	r3, [r7, #12]
20008380:	f04f 0200 	mov.w	r2, #0
20008384:	f04f 0300 	mov.w	r3, #0
20008388:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
2000838c:	4659      	mov	r1, fp
2000838e:	018b      	lsls	r3, r1, #6
20008390:	4651      	mov	r1, sl
20008392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
20008396:	4651      	mov	r1, sl
20008398:	018a      	lsls	r2, r1, #6
2000839a:	4651      	mov	r1, sl
2000839c:	1a54      	subs	r4, r2, r1
2000839e:	4659      	mov	r1, fp
200083a0:	eb63 0501 	sbc.w	r5, r3, r1
200083a4:	f04f 0200 	mov.w	r2, #0
200083a8:	f04f 0300 	mov.w	r3, #0
200083ac:	00eb      	lsls	r3, r5, #3
200083ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
200083b2:	00e2      	lsls	r2, r4, #3
200083b4:	4614      	mov	r4, r2
200083b6:	461d      	mov	r5, r3
200083b8:	4643      	mov	r3, r8
200083ba:	18e3      	adds	r3, r4, r3
200083bc:	603b      	str	r3, [r7, #0]
200083be:	464b      	mov	r3, r9
200083c0:	eb45 0303 	adc.w	r3, r5, r3
200083c4:	607b      	str	r3, [r7, #4]
200083c6:	f04f 0200 	mov.w	r2, #0
200083ca:	f04f 0300 	mov.w	r3, #0
200083ce:	e9d7 4500 	ldrd	r4, r5, [r7]
200083d2:	4629      	mov	r1, r5
200083d4:	028b      	lsls	r3, r1, #10
200083d6:	4621      	mov	r1, r4
200083d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
200083dc:	4621      	mov	r1, r4
200083de:	028a      	lsls	r2, r1, #10
200083e0:	4610      	mov	r0, r2
200083e2:	4619      	mov	r1, r3
200083e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
200083e8:	2200      	movs	r2, #0
200083ea:	64bb      	str	r3, [r7, #72]	; 0x48
200083ec:	64fa      	str	r2, [r7, #76]	; 0x4c
200083ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
200083f2:	f7f8 f8e3 	bl	200005bc <__aeabi_uldivmod>
200083f6:	4602      	mov	r2, r0
200083f8:	460b      	mov	r3, r1
200083fa:	4613      	mov	r3, r2
200083fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
20008400:	4b0d      	ldr	r3, [pc, #52]	; (20008438 <HAL_RCC_GetSysClockFreq+0x458>)
20008402:	685b      	ldr	r3, [r3, #4]
20008404:	0f1b      	lsrs	r3, r3, #28
20008406:	f003 0307 	and.w	r3, r3, #7
2000840a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
2000840e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20008412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
20008416:	fbb2 f3f3 	udiv	r3, r2, r3
2000841a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
2000841e:	e003      	b.n	20008428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20008420:	4b06      	ldr	r3, [pc, #24]	; (2000843c <HAL_RCC_GetSysClockFreq+0x45c>)
20008422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
20008426:	bf00      	nop
    }
  }
  return sysclockfreq;
20008428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
2000842c:	4618      	mov	r0, r3
2000842e:	37b8      	adds	r7, #184	; 0xb8
20008430:	46bd      	mov	sp, r7
20008432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20008436:	bf00      	nop
20008438:	40023800 	.word	0x40023800
2000843c:	00f42400 	.word	0x00f42400

20008440 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20008440:	b580      	push	{r7, lr}
20008442:	b082      	sub	sp, #8
20008444:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008446:	f7f8 fa62 	bl	2000090e <HAL_GetTick>
2000844a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
2000844c:	4b72      	ldr	r3, [pc, #456]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000844e:	681b      	ldr	r3, [r3, #0]
20008450:	4a71      	ldr	r2, [pc, #452]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008452:	f043 0301 	orr.w	r3, r3, #1
20008456:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20008458:	e008      	b.n	2000846c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000845a:	f7f8 fa58 	bl	2000090e <HAL_GetTick>
2000845e:	4602      	mov	r2, r0
20008460:	687b      	ldr	r3, [r7, #4]
20008462:	1ad3      	subs	r3, r2, r3
20008464:	2b02      	cmp	r3, #2
20008466:	d901      	bls.n	2000846c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
20008468:	2303      	movs	r3, #3
2000846a:	e0d0      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
2000846c:	4b6a      	ldr	r3, [pc, #424]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000846e:	681b      	ldr	r3, [r3, #0]
20008470:	f003 0302 	and.w	r3, r3, #2
20008474:	2b00      	cmp	r3, #0
20008476:	d0f0      	beq.n	2000845a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20008478:	4b67      	ldr	r3, [pc, #412]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000847a:	681b      	ldr	r3, [r3, #0]
2000847c:	4a66      	ldr	r2, [pc, #408]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20008482:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008484:	f7f8 fa43 	bl	2000090e <HAL_GetTick>
20008488:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
2000848a:	4b63      	ldr	r3, [pc, #396]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000848c:	2200      	movs	r2, #0
2000848e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20008490:	e00a      	b.n	200084a8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20008492:	f7f8 fa3c 	bl	2000090e <HAL_GetTick>
20008496:	4602      	mov	r2, r0
20008498:	687b      	ldr	r3, [r7, #4]
2000849a:	1ad3      	subs	r3, r2, r3
2000849c:	f241 3288 	movw	r2, #5000	; 0x1388
200084a0:	4293      	cmp	r3, r2
200084a2:	d901      	bls.n	200084a8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
200084a4:	2303      	movs	r3, #3
200084a6:	e0b2      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
200084a8:	4b5b      	ldr	r3, [pc, #364]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084aa:	689b      	ldr	r3, [r3, #8]
200084ac:	f003 030c 	and.w	r3, r3, #12
200084b0:	2b00      	cmp	r3, #0
200084b2:	d1ee      	bne.n	20008492 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200084b4:	f7f8 fa2b 	bl	2000090e <HAL_GetTick>
200084b8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
200084ba:	4b57      	ldr	r3, [pc, #348]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084bc:	681b      	ldr	r3, [r3, #0]
200084be:	4a56      	ldr	r2, [pc, #344]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084c0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
200084c4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
200084c6:	e008      	b.n	200084da <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200084c8:	f7f8 fa21 	bl	2000090e <HAL_GetTick>
200084cc:	4602      	mov	r2, r0
200084ce:	687b      	ldr	r3, [r7, #4]
200084d0:	1ad3      	subs	r3, r2, r3
200084d2:	2b64      	cmp	r3, #100	; 0x64
200084d4:	d901      	bls.n	200084da <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
200084d6:	2303      	movs	r3, #3
200084d8:	e099      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
200084da:	4b4f      	ldr	r3, [pc, #316]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084dc:	681b      	ldr	r3, [r3, #0]
200084de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200084e2:	2b00      	cmp	r3, #0
200084e4:	d1f0      	bne.n	200084c8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200084e6:	f7f8 fa12 	bl	2000090e <HAL_GetTick>
200084ea:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
200084ec:	4b4a      	ldr	r3, [pc, #296]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084ee:	681b      	ldr	r3, [r3, #0]
200084f0:	4a49      	ldr	r2, [pc, #292]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200084f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
200084f6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
200084f8:	e008      	b.n	2000850c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200084fa:	f7f8 fa08 	bl	2000090e <HAL_GetTick>
200084fe:	4602      	mov	r2, r0
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	1ad3      	subs	r3, r2, r3
20008504:	2b02      	cmp	r3, #2
20008506:	d901      	bls.n	2000850c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
20008508:	2303      	movs	r3, #3
2000850a:	e080      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
2000850c:	4b42      	ldr	r3, [pc, #264]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000850e:	681b      	ldr	r3, [r3, #0]
20008510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20008514:	2b00      	cmp	r3, #0
20008516:	d1f0      	bne.n	200084fa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
20008518:	f7f8 f9f9 	bl	2000090e <HAL_GetTick>
2000851c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
2000851e:	4b3e      	ldr	r3, [pc, #248]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008520:	681b      	ldr	r3, [r3, #0]
20008522:	4a3d      	ldr	r2, [pc, #244]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
20008528:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000852a:	e008      	b.n	2000853e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000852c:	f7f8 f9ef 	bl	2000090e <HAL_GetTick>
20008530:	4602      	mov	r2, r0
20008532:	687b      	ldr	r3, [r7, #4]
20008534:	1ad3      	subs	r3, r2, r3
20008536:	2b02      	cmp	r3, #2
20008538:	d901      	bls.n	2000853e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
2000853a:	2303      	movs	r3, #3
2000853c:	e067      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000853e:	4b36      	ldr	r3, [pc, #216]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008540:	681b      	ldr	r3, [r3, #0]
20008542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20008546:	2b00      	cmp	r3, #0
20008548:	d1f0      	bne.n	2000852c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000854a:	f7f8 f9e0 	bl	2000090e <HAL_GetTick>
2000854e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
20008550:	4b31      	ldr	r3, [pc, #196]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008552:	681b      	ldr	r3, [r3, #0]
20008554:	4a30      	ldr	r2, [pc, #192]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000855a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
2000855c:	e008      	b.n	20008570 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000855e:	f7f8 f9d6 	bl	2000090e <HAL_GetTick>
20008562:	4602      	mov	r2, r0
20008564:	687b      	ldr	r3, [r7, #4]
20008566:	1ad3      	subs	r3, r2, r3
20008568:	2b02      	cmp	r3, #2
2000856a:	d901      	bls.n	20008570 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
2000856c:	2303      	movs	r3, #3
2000856e:	e04e      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
20008570:	4b29      	ldr	r3, [pc, #164]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008572:	681b      	ldr	r3, [r3, #0]
20008574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20008578:	2b00      	cmp	r3, #0
2000857a:	d1f0      	bne.n	2000855e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
2000857c:	4b26      	ldr	r3, [pc, #152]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000857e:	4a27      	ldr	r2, [pc, #156]	; (2000861c <HAL_RCC_DeInit+0x1dc>)
20008580:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
20008582:	4b25      	ldr	r3, [pc, #148]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008584:	4a25      	ldr	r2, [pc, #148]	; (2000861c <HAL_RCC_DeInit+0x1dc>)
20008586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
2000858a:	4b23      	ldr	r3, [pc, #140]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
2000858c:	4a24      	ldr	r2, [pc, #144]	; (20008620 <HAL_RCC_DeInit+0x1e0>)
2000858e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
20008592:	4b21      	ldr	r3, [pc, #132]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008594:	68db      	ldr	r3, [r3, #12]
20008596:	4a20      	ldr	r2, [pc, #128]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
20008598:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
2000859c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
2000859e:	4b1e      	ldr	r3, [pc, #120]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085a0:	68db      	ldr	r3, [r3, #12]
200085a2:	4a1d      	ldr	r2, [pc, #116]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
200085a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
200085aa:	4b1b      	ldr	r3, [pc, #108]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085ac:	68db      	ldr	r3, [r3, #12]
200085ae:	4a1a      	ldr	r2, [pc, #104]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
200085b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
200085b6:	4b18      	ldr	r3, [pc, #96]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085b8:	68db      	ldr	r3, [r3, #12]
200085ba:	4a17      	ldr	r2, [pc, #92]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085bc:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
200085c0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
200085c2:	4b15      	ldr	r3, [pc, #84]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085c4:	68db      	ldr	r3, [r3, #12]
200085c6:	4a14      	ldr	r2, [pc, #80]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
200085cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
200085ce:	4b12      	ldr	r3, [pc, #72]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085d0:	68db      	ldr	r3, [r3, #12]
200085d2:	4a11      	ldr	r2, [pc, #68]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
200085d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
200085da:	4b0f      	ldr	r3, [pc, #60]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200085de:	4a0e      	ldr	r2, [pc, #56]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085e0:	f023 0301 	bic.w	r3, r3, #1
200085e4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
200085e6:	4b0c      	ldr	r3, [pc, #48]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200085ea:	4a0b      	ldr	r2, [pc, #44]	; (20008618 <HAL_RCC_DeInit+0x1d8>)
200085ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
200085f0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
200085f2:	4b0c      	ldr	r3, [pc, #48]	; (20008624 <HAL_RCC_DeInit+0x1e4>)
200085f4:	4a0c      	ldr	r2, [pc, #48]	; (20008628 <HAL_RCC_DeInit+0x1e8>)
200085f6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
200085f8:	4b0c      	ldr	r3, [pc, #48]	; (2000862c <HAL_RCC_DeInit+0x1ec>)
200085fa:	681b      	ldr	r3, [r3, #0]
200085fc:	4618      	mov	r0, r3
200085fe:	f7f8 f999 	bl	20000934 <HAL_InitTick>
20008602:	4603      	mov	r3, r0
20008604:	2b00      	cmp	r3, #0
20008606:	d001      	beq.n	2000860c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
20008608:	2301      	movs	r3, #1
2000860a:	e000      	b.n	2000860e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
2000860c:	2300      	movs	r3, #0
  }
}
2000860e:	4618      	mov	r0, r3
20008610:	3708      	adds	r7, #8
20008612:	46bd      	mov	sp, r7
20008614:	bd80      	pop	{r7, pc}
20008616:	bf00      	nop
20008618:	40023800 	.word	0x40023800
2000861c:	24003010 	.word	0x24003010
20008620:	04003010 	.word	0x04003010
20008624:	200003dc 	.word	0x200003dc
20008628:	00f42400 	.word	0x00f42400
2000862c:	200003e0 	.word	0x200003e0

20008630 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20008630:	b580      	push	{r7, lr}
20008632:	b086      	sub	sp, #24
20008634:	af00      	add	r7, sp, #0
20008636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20008638:	687b      	ldr	r3, [r7, #4]
2000863a:	2b00      	cmp	r3, #0
2000863c:	d101      	bne.n	20008642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000863e:	2301      	movs	r3, #1
20008640:	e28d      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20008642:	687b      	ldr	r3, [r7, #4]
20008644:	681b      	ldr	r3, [r3, #0]
20008646:	f003 0301 	and.w	r3, r3, #1
2000864a:	2b00      	cmp	r3, #0
2000864c:	f000 8083 	beq.w	20008756 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
20008650:	4b94      	ldr	r3, [pc, #592]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008652:	689b      	ldr	r3, [r3, #8]
20008654:	f003 030c 	and.w	r3, r3, #12
20008658:	2b04      	cmp	r3, #4
2000865a:	d019      	beq.n	20008690 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
2000865c:	4b91      	ldr	r3, [pc, #580]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
2000865e:	689b      	ldr	r3, [r3, #8]
20008660:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
20008664:	2b08      	cmp	r3, #8
20008666:	d106      	bne.n	20008676 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
20008668:	4b8e      	ldr	r3, [pc, #568]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
2000866a:	685b      	ldr	r3, [r3, #4]
2000866c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20008670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20008674:	d00c      	beq.n	20008690 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20008676:	4b8b      	ldr	r3, [pc, #556]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008678:	689b      	ldr	r3, [r3, #8]
2000867a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
2000867e:	2b0c      	cmp	r3, #12
20008680:	d112      	bne.n	200086a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20008682:	4b88      	ldr	r3, [pc, #544]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008684:	685b      	ldr	r3, [r3, #4]
20008686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000868a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000868e:	d10b      	bne.n	200086a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20008690:	4b84      	ldr	r3, [pc, #528]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008692:	681b      	ldr	r3, [r3, #0]
20008694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20008698:	2b00      	cmp	r3, #0
2000869a:	d05b      	beq.n	20008754 <HAL_RCC_OscConfig+0x124>
2000869c:	687b      	ldr	r3, [r7, #4]
2000869e:	685b      	ldr	r3, [r3, #4]
200086a0:	2b00      	cmp	r3, #0
200086a2:	d157      	bne.n	20008754 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
200086a4:	2301      	movs	r3, #1
200086a6:	e25a      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200086a8:	687b      	ldr	r3, [r7, #4]
200086aa:	685b      	ldr	r3, [r3, #4]
200086ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200086b0:	d106      	bne.n	200086c0 <HAL_RCC_OscConfig+0x90>
200086b2:	4b7c      	ldr	r3, [pc, #496]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086b4:	681b      	ldr	r3, [r3, #0]
200086b6:	4a7b      	ldr	r2, [pc, #492]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200086bc:	6013      	str	r3, [r2, #0]
200086be:	e01d      	b.n	200086fc <HAL_RCC_OscConfig+0xcc>
200086c0:	687b      	ldr	r3, [r7, #4]
200086c2:	685b      	ldr	r3, [r3, #4]
200086c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
200086c8:	d10c      	bne.n	200086e4 <HAL_RCC_OscConfig+0xb4>
200086ca:	4b76      	ldr	r3, [pc, #472]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086cc:	681b      	ldr	r3, [r3, #0]
200086ce:	4a75      	ldr	r2, [pc, #468]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200086d4:	6013      	str	r3, [r2, #0]
200086d6:	4b73      	ldr	r3, [pc, #460]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086d8:	681b      	ldr	r3, [r3, #0]
200086da:	4a72      	ldr	r2, [pc, #456]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200086e0:	6013      	str	r3, [r2, #0]
200086e2:	e00b      	b.n	200086fc <HAL_RCC_OscConfig+0xcc>
200086e4:	4b6f      	ldr	r3, [pc, #444]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086e6:	681b      	ldr	r3, [r3, #0]
200086e8:	4a6e      	ldr	r2, [pc, #440]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200086ee:	6013      	str	r3, [r2, #0]
200086f0:	4b6c      	ldr	r3, [pc, #432]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086f2:	681b      	ldr	r3, [r3, #0]
200086f4:	4a6b      	ldr	r2, [pc, #428]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200086f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200086fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
200086fc:	687b      	ldr	r3, [r7, #4]
200086fe:	685b      	ldr	r3, [r3, #4]
20008700:	2b00      	cmp	r3, #0
20008702:	d013      	beq.n	2000872c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20008704:	f7f8 f903 	bl	2000090e <HAL_GetTick>
20008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000870a:	e008      	b.n	2000871e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000870c:	f7f8 f8ff 	bl	2000090e <HAL_GetTick>
20008710:	4602      	mov	r2, r0
20008712:	693b      	ldr	r3, [r7, #16]
20008714:	1ad3      	subs	r3, r2, r3
20008716:	2b64      	cmp	r3, #100	; 0x64
20008718:	d901      	bls.n	2000871e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
2000871a:	2303      	movs	r3, #3
2000871c:	e21f      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000871e:	4b61      	ldr	r3, [pc, #388]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008720:	681b      	ldr	r3, [r3, #0]
20008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20008726:	2b00      	cmp	r3, #0
20008728:	d0f0      	beq.n	2000870c <HAL_RCC_OscConfig+0xdc>
2000872a:	e014      	b.n	20008756 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000872c:	f7f8 f8ef 	bl	2000090e <HAL_GetTick>
20008730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20008732:	e008      	b.n	20008746 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20008734:	f7f8 f8eb 	bl	2000090e <HAL_GetTick>
20008738:	4602      	mov	r2, r0
2000873a:	693b      	ldr	r3, [r7, #16]
2000873c:	1ad3      	subs	r3, r2, r3
2000873e:	2b64      	cmp	r3, #100	; 0x64
20008740:	d901      	bls.n	20008746 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
20008742:	2303      	movs	r3, #3
20008744:	e20b      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20008746:	4b57      	ldr	r3, [pc, #348]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008748:	681b      	ldr	r3, [r3, #0]
2000874a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000874e:	2b00      	cmp	r3, #0
20008750:	d1f0      	bne.n	20008734 <HAL_RCC_OscConfig+0x104>
20008752:	e000      	b.n	20008756 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20008754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20008756:	687b      	ldr	r3, [r7, #4]
20008758:	681b      	ldr	r3, [r3, #0]
2000875a:	f003 0302 	and.w	r3, r3, #2
2000875e:	2b00      	cmp	r3, #0
20008760:	d06f      	beq.n	20008842 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
20008762:	4b50      	ldr	r3, [pc, #320]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008764:	689b      	ldr	r3, [r3, #8]
20008766:	f003 030c 	and.w	r3, r3, #12
2000876a:	2b00      	cmp	r3, #0
2000876c:	d017      	beq.n	2000879e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
2000876e:	4b4d      	ldr	r3, [pc, #308]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008770:	689b      	ldr	r3, [r3, #8]
20008772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
20008776:	2b08      	cmp	r3, #8
20008778:	d105      	bne.n	20008786 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
2000877a:	4b4a      	ldr	r3, [pc, #296]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
2000877c:	685b      	ldr	r3, [r3, #4]
2000877e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20008782:	2b00      	cmp	r3, #0
20008784:	d00b      	beq.n	2000879e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20008786:	4b47      	ldr	r3, [pc, #284]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008788:	689b      	ldr	r3, [r3, #8]
2000878a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
2000878e:	2b0c      	cmp	r3, #12
20008790:	d11c      	bne.n	200087cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20008792:	4b44      	ldr	r3, [pc, #272]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008794:	685b      	ldr	r3, [r3, #4]
20008796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000879a:	2b00      	cmp	r3, #0
2000879c:	d116      	bne.n	200087cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000879e:	4b41      	ldr	r3, [pc, #260]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200087a0:	681b      	ldr	r3, [r3, #0]
200087a2:	f003 0302 	and.w	r3, r3, #2
200087a6:	2b00      	cmp	r3, #0
200087a8:	d005      	beq.n	200087b6 <HAL_RCC_OscConfig+0x186>
200087aa:	687b      	ldr	r3, [r7, #4]
200087ac:	68db      	ldr	r3, [r3, #12]
200087ae:	2b01      	cmp	r3, #1
200087b0:	d001      	beq.n	200087b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
200087b2:	2301      	movs	r3, #1
200087b4:	e1d3      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200087b6:	4b3b      	ldr	r3, [pc, #236]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200087b8:	681b      	ldr	r3, [r3, #0]
200087ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
200087be:	687b      	ldr	r3, [r7, #4]
200087c0:	691b      	ldr	r3, [r3, #16]
200087c2:	00db      	lsls	r3, r3, #3
200087c4:	4937      	ldr	r1, [pc, #220]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200087c6:	4313      	orrs	r3, r2
200087c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200087ca:	e03a      	b.n	20008842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
200087cc:	687b      	ldr	r3, [r7, #4]
200087ce:	68db      	ldr	r3, [r3, #12]
200087d0:	2b00      	cmp	r3, #0
200087d2:	d020      	beq.n	20008816 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
200087d4:	4b34      	ldr	r3, [pc, #208]	; (200088a8 <HAL_RCC_OscConfig+0x278>)
200087d6:	2201      	movs	r2, #1
200087d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200087da:	f7f8 f898 	bl	2000090e <HAL_GetTick>
200087de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200087e0:	e008      	b.n	200087f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200087e2:	f7f8 f894 	bl	2000090e <HAL_GetTick>
200087e6:	4602      	mov	r2, r0
200087e8:	693b      	ldr	r3, [r7, #16]
200087ea:	1ad3      	subs	r3, r2, r3
200087ec:	2b02      	cmp	r3, #2
200087ee:	d901      	bls.n	200087f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
200087f0:	2303      	movs	r3, #3
200087f2:	e1b4      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200087f4:	4b2b      	ldr	r3, [pc, #172]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
200087f6:	681b      	ldr	r3, [r3, #0]
200087f8:	f003 0302 	and.w	r3, r3, #2
200087fc:	2b00      	cmp	r3, #0
200087fe:	d0f0      	beq.n	200087e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20008800:	4b28      	ldr	r3, [pc, #160]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008802:	681b      	ldr	r3, [r3, #0]
20008804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20008808:	687b      	ldr	r3, [r7, #4]
2000880a:	691b      	ldr	r3, [r3, #16]
2000880c:	00db      	lsls	r3, r3, #3
2000880e:	4925      	ldr	r1, [pc, #148]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008810:	4313      	orrs	r3, r2
20008812:	600b      	str	r3, [r1, #0]
20008814:	e015      	b.n	20008842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20008816:	4b24      	ldr	r3, [pc, #144]	; (200088a8 <HAL_RCC_OscConfig+0x278>)
20008818:	2200      	movs	r2, #0
2000881a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000881c:	f7f8 f877 	bl	2000090e <HAL_GetTick>
20008820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20008822:	e008      	b.n	20008836 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20008824:	f7f8 f873 	bl	2000090e <HAL_GetTick>
20008828:	4602      	mov	r2, r0
2000882a:	693b      	ldr	r3, [r7, #16]
2000882c:	1ad3      	subs	r3, r2, r3
2000882e:	2b02      	cmp	r3, #2
20008830:	d901      	bls.n	20008836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
20008832:	2303      	movs	r3, #3
20008834:	e193      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20008836:	4b1b      	ldr	r3, [pc, #108]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008838:	681b      	ldr	r3, [r3, #0]
2000883a:	f003 0302 	and.w	r3, r3, #2
2000883e:	2b00      	cmp	r3, #0
20008840:	d1f0      	bne.n	20008824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20008842:	687b      	ldr	r3, [r7, #4]
20008844:	681b      	ldr	r3, [r3, #0]
20008846:	f003 0308 	and.w	r3, r3, #8
2000884a:	2b00      	cmp	r3, #0
2000884c:	d036      	beq.n	200088bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000884e:	687b      	ldr	r3, [r7, #4]
20008850:	695b      	ldr	r3, [r3, #20]
20008852:	2b00      	cmp	r3, #0
20008854:	d016      	beq.n	20008884 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20008856:	4b15      	ldr	r3, [pc, #84]	; (200088ac <HAL_RCC_OscConfig+0x27c>)
20008858:	2201      	movs	r2, #1
2000885a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000885c:	f7f8 f857 	bl	2000090e <HAL_GetTick>
20008860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20008862:	e008      	b.n	20008876 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20008864:	f7f8 f853 	bl	2000090e <HAL_GetTick>
20008868:	4602      	mov	r2, r0
2000886a:	693b      	ldr	r3, [r7, #16]
2000886c:	1ad3      	subs	r3, r2, r3
2000886e:	2b02      	cmp	r3, #2
20008870:	d901      	bls.n	20008876 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
20008872:	2303      	movs	r3, #3
20008874:	e173      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20008876:	4b0b      	ldr	r3, [pc, #44]	; (200088a4 <HAL_RCC_OscConfig+0x274>)
20008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000887a:	f003 0302 	and.w	r3, r3, #2
2000887e:	2b00      	cmp	r3, #0
20008880:	d0f0      	beq.n	20008864 <HAL_RCC_OscConfig+0x234>
20008882:	e01b      	b.n	200088bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20008884:	4b09      	ldr	r3, [pc, #36]	; (200088ac <HAL_RCC_OscConfig+0x27c>)
20008886:	2200      	movs	r2, #0
20008888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000888a:	f7f8 f840 	bl	2000090e <HAL_GetTick>
2000888e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20008890:	e00e      	b.n	200088b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20008892:	f7f8 f83c 	bl	2000090e <HAL_GetTick>
20008896:	4602      	mov	r2, r0
20008898:	693b      	ldr	r3, [r7, #16]
2000889a:	1ad3      	subs	r3, r2, r3
2000889c:	2b02      	cmp	r3, #2
2000889e:	d907      	bls.n	200088b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
200088a0:	2303      	movs	r3, #3
200088a2:	e15c      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
200088a4:	40023800 	.word	0x40023800
200088a8:	42470000 	.word	0x42470000
200088ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200088b0:	4b8a      	ldr	r3, [pc, #552]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200088b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200088b4:	f003 0302 	and.w	r3, r3, #2
200088b8:	2b00      	cmp	r3, #0
200088ba:	d1ea      	bne.n	20008892 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200088bc:	687b      	ldr	r3, [r7, #4]
200088be:	681b      	ldr	r3, [r3, #0]
200088c0:	f003 0304 	and.w	r3, r3, #4
200088c4:	2b00      	cmp	r3, #0
200088c6:	f000 8097 	beq.w	200089f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
200088ca:	2300      	movs	r3, #0
200088cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
200088ce:	4b83      	ldr	r3, [pc, #524]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200088d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200088d6:	2b00      	cmp	r3, #0
200088d8:	d10f      	bne.n	200088fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
200088da:	2300      	movs	r3, #0
200088dc:	60bb      	str	r3, [r7, #8]
200088de:	4b7f      	ldr	r3, [pc, #508]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200088e2:	4a7e      	ldr	r2, [pc, #504]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200088e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200088e8:	6413      	str	r3, [r2, #64]	; 0x40
200088ea:	4b7c      	ldr	r3, [pc, #496]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200088ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200088f2:	60bb      	str	r3, [r7, #8]
200088f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
200088f6:	2301      	movs	r3, #1
200088f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200088fa:	4b79      	ldr	r3, [pc, #484]	; (20008ae0 <HAL_RCC_OscConfig+0x4b0>)
200088fc:	681b      	ldr	r3, [r3, #0]
200088fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008902:	2b00      	cmp	r3, #0
20008904:	d118      	bne.n	20008938 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20008906:	4b76      	ldr	r3, [pc, #472]	; (20008ae0 <HAL_RCC_OscConfig+0x4b0>)
20008908:	681b      	ldr	r3, [r3, #0]
2000890a:	4a75      	ldr	r2, [pc, #468]	; (20008ae0 <HAL_RCC_OscConfig+0x4b0>)
2000890c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20008910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20008912:	f7f7 fffc 	bl	2000090e <HAL_GetTick>
20008916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20008918:	e008      	b.n	2000892c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000891a:	f7f7 fff8 	bl	2000090e <HAL_GetTick>
2000891e:	4602      	mov	r2, r0
20008920:	693b      	ldr	r3, [r7, #16]
20008922:	1ad3      	subs	r3, r2, r3
20008924:	2b02      	cmp	r3, #2
20008926:	d901      	bls.n	2000892c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
20008928:	2303      	movs	r3, #3
2000892a:	e118      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000892c:	4b6c      	ldr	r3, [pc, #432]	; (20008ae0 <HAL_RCC_OscConfig+0x4b0>)
2000892e:	681b      	ldr	r3, [r3, #0]
20008930:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008934:	2b00      	cmp	r3, #0
20008936:	d0f0      	beq.n	2000891a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20008938:	687b      	ldr	r3, [r7, #4]
2000893a:	689b      	ldr	r3, [r3, #8]
2000893c:	2b01      	cmp	r3, #1
2000893e:	d106      	bne.n	2000894e <HAL_RCC_OscConfig+0x31e>
20008940:	4b66      	ldr	r3, [pc, #408]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008944:	4a65      	ldr	r2, [pc, #404]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008946:	f043 0301 	orr.w	r3, r3, #1
2000894a:	6713      	str	r3, [r2, #112]	; 0x70
2000894c:	e01c      	b.n	20008988 <HAL_RCC_OscConfig+0x358>
2000894e:	687b      	ldr	r3, [r7, #4]
20008950:	689b      	ldr	r3, [r3, #8]
20008952:	2b05      	cmp	r3, #5
20008954:	d10c      	bne.n	20008970 <HAL_RCC_OscConfig+0x340>
20008956:	4b61      	ldr	r3, [pc, #388]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000895a:	4a60      	ldr	r2, [pc, #384]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
2000895c:	f043 0304 	orr.w	r3, r3, #4
20008960:	6713      	str	r3, [r2, #112]	; 0x70
20008962:	4b5e      	ldr	r3, [pc, #376]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008966:	4a5d      	ldr	r2, [pc, #372]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008968:	f043 0301 	orr.w	r3, r3, #1
2000896c:	6713      	str	r3, [r2, #112]	; 0x70
2000896e:	e00b      	b.n	20008988 <HAL_RCC_OscConfig+0x358>
20008970:	4b5a      	ldr	r3, [pc, #360]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008974:	4a59      	ldr	r2, [pc, #356]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008976:	f023 0301 	bic.w	r3, r3, #1
2000897a:	6713      	str	r3, [r2, #112]	; 0x70
2000897c:	4b57      	ldr	r3, [pc, #348]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
2000897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008980:	4a56      	ldr	r2, [pc, #344]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008982:	f023 0304 	bic.w	r3, r3, #4
20008986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
20008988:	687b      	ldr	r3, [r7, #4]
2000898a:	689b      	ldr	r3, [r3, #8]
2000898c:	2b00      	cmp	r3, #0
2000898e:	d015      	beq.n	200089bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20008990:	f7f7 ffbd 	bl	2000090e <HAL_GetTick>
20008994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20008996:	e00a      	b.n	200089ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20008998:	f7f7 ffb9 	bl	2000090e <HAL_GetTick>
2000899c:	4602      	mov	r2, r0
2000899e:	693b      	ldr	r3, [r7, #16]
200089a0:	1ad3      	subs	r3, r2, r3
200089a2:	f241 3288 	movw	r2, #5000	; 0x1388
200089a6:	4293      	cmp	r3, r2
200089a8:	d901      	bls.n	200089ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
200089aa:	2303      	movs	r3, #3
200089ac:	e0d7      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200089ae:	4b4b      	ldr	r3, [pc, #300]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200089b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200089b2:	f003 0302 	and.w	r3, r3, #2
200089b6:	2b00      	cmp	r3, #0
200089b8:	d0ee      	beq.n	20008998 <HAL_RCC_OscConfig+0x368>
200089ba:	e014      	b.n	200089e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200089bc:	f7f7 ffa7 	bl	2000090e <HAL_GetTick>
200089c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200089c2:	e00a      	b.n	200089da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200089c4:	f7f7 ffa3 	bl	2000090e <HAL_GetTick>
200089c8:	4602      	mov	r2, r0
200089ca:	693b      	ldr	r3, [r7, #16]
200089cc:	1ad3      	subs	r3, r2, r3
200089ce:	f241 3288 	movw	r2, #5000	; 0x1388
200089d2:	4293      	cmp	r3, r2
200089d4:	d901      	bls.n	200089da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
200089d6:	2303      	movs	r3, #3
200089d8:	e0c1      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200089da:	4b40      	ldr	r3, [pc, #256]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200089dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200089de:	f003 0302 	and.w	r3, r3, #2
200089e2:	2b00      	cmp	r3, #0
200089e4:	d1ee      	bne.n	200089c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200089e6:	7dfb      	ldrb	r3, [r7, #23]
200089e8:	2b01      	cmp	r3, #1
200089ea:	d105      	bne.n	200089f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200089ec:	4b3b      	ldr	r3, [pc, #236]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200089f0:	4a3a      	ldr	r2, [pc, #232]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
200089f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200089f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200089f8:	687b      	ldr	r3, [r7, #4]
200089fa:	699b      	ldr	r3, [r3, #24]
200089fc:	2b00      	cmp	r3, #0
200089fe:	f000 80ad 	beq.w	20008b5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20008a02:	4b36      	ldr	r3, [pc, #216]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008a04:	689b      	ldr	r3, [r3, #8]
20008a06:	f003 030c 	and.w	r3, r3, #12
20008a0a:	2b08      	cmp	r3, #8
20008a0c:	d060      	beq.n	20008ad0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
20008a0e:	687b      	ldr	r3, [r7, #4]
20008a10:	699b      	ldr	r3, [r3, #24]
20008a12:	2b02      	cmp	r3, #2
20008a14:	d145      	bne.n	20008aa2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20008a16:	4b33      	ldr	r3, [pc, #204]	; (20008ae4 <HAL_RCC_OscConfig+0x4b4>)
20008a18:	2200      	movs	r2, #0
20008a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20008a1c:	f7f7 ff77 	bl	2000090e <HAL_GetTick>
20008a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20008a22:	e008      	b.n	20008a36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20008a24:	f7f7 ff73 	bl	2000090e <HAL_GetTick>
20008a28:	4602      	mov	r2, r0
20008a2a:	693b      	ldr	r3, [r7, #16]
20008a2c:	1ad3      	subs	r3, r2, r3
20008a2e:	2b02      	cmp	r3, #2
20008a30:	d901      	bls.n	20008a36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
20008a32:	2303      	movs	r3, #3
20008a34:	e093      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20008a36:	4b29      	ldr	r3, [pc, #164]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008a38:	681b      	ldr	r3, [r3, #0]
20008a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20008a3e:	2b00      	cmp	r3, #0
20008a40:	d1f0      	bne.n	20008a24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20008a42:	687b      	ldr	r3, [r7, #4]
20008a44:	69da      	ldr	r2, [r3, #28]
20008a46:	687b      	ldr	r3, [r7, #4]
20008a48:	6a1b      	ldr	r3, [r3, #32]
20008a4a:	431a      	orrs	r2, r3
20008a4c:	687b      	ldr	r3, [r7, #4]
20008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20008a50:	019b      	lsls	r3, r3, #6
20008a52:	431a      	orrs	r2, r3
20008a54:	687b      	ldr	r3, [r7, #4]
20008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20008a58:	085b      	lsrs	r3, r3, #1
20008a5a:	3b01      	subs	r3, #1
20008a5c:	041b      	lsls	r3, r3, #16
20008a5e:	431a      	orrs	r2, r3
20008a60:	687b      	ldr	r3, [r7, #4]
20008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20008a64:	061b      	lsls	r3, r3, #24
20008a66:	431a      	orrs	r2, r3
20008a68:	687b      	ldr	r3, [r7, #4]
20008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008a6c:	071b      	lsls	r3, r3, #28
20008a6e:	491b      	ldr	r1, [pc, #108]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008a70:	4313      	orrs	r3, r2
20008a72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20008a74:	4b1b      	ldr	r3, [pc, #108]	; (20008ae4 <HAL_RCC_OscConfig+0x4b4>)
20008a76:	2201      	movs	r2, #1
20008a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20008a7a:	f7f7 ff48 	bl	2000090e <HAL_GetTick>
20008a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20008a80:	e008      	b.n	20008a94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20008a82:	f7f7 ff44 	bl	2000090e <HAL_GetTick>
20008a86:	4602      	mov	r2, r0
20008a88:	693b      	ldr	r3, [r7, #16]
20008a8a:	1ad3      	subs	r3, r2, r3
20008a8c:	2b02      	cmp	r3, #2
20008a8e:	d901      	bls.n	20008a94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
20008a90:	2303      	movs	r3, #3
20008a92:	e064      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20008a94:	4b11      	ldr	r3, [pc, #68]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008a96:	681b      	ldr	r3, [r3, #0]
20008a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20008a9c:	2b00      	cmp	r3, #0
20008a9e:	d0f0      	beq.n	20008a82 <HAL_RCC_OscConfig+0x452>
20008aa0:	e05c      	b.n	20008b5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20008aa2:	4b10      	ldr	r3, [pc, #64]	; (20008ae4 <HAL_RCC_OscConfig+0x4b4>)
20008aa4:	2200      	movs	r2, #0
20008aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20008aa8:	f7f7 ff31 	bl	2000090e <HAL_GetTick>
20008aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20008aae:	e008      	b.n	20008ac2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20008ab0:	f7f7 ff2d 	bl	2000090e <HAL_GetTick>
20008ab4:	4602      	mov	r2, r0
20008ab6:	693b      	ldr	r3, [r7, #16]
20008ab8:	1ad3      	subs	r3, r2, r3
20008aba:	2b02      	cmp	r3, #2
20008abc:	d901      	bls.n	20008ac2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
20008abe:	2303      	movs	r3, #3
20008ac0:	e04d      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20008ac2:	4b06      	ldr	r3, [pc, #24]	; (20008adc <HAL_RCC_OscConfig+0x4ac>)
20008ac4:	681b      	ldr	r3, [r3, #0]
20008ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20008aca:	2b00      	cmp	r3, #0
20008acc:	d1f0      	bne.n	20008ab0 <HAL_RCC_OscConfig+0x480>
20008ace:	e045      	b.n	20008b5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20008ad0:	687b      	ldr	r3, [r7, #4]
20008ad2:	699b      	ldr	r3, [r3, #24]
20008ad4:	2b01      	cmp	r3, #1
20008ad6:	d107      	bne.n	20008ae8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
20008ad8:	2301      	movs	r3, #1
20008ada:	e040      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
20008adc:	40023800 	.word	0x40023800
20008ae0:	40007000 	.word	0x40007000
20008ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20008ae8:	4b1f      	ldr	r3, [pc, #124]	; (20008b68 <HAL_RCC_OscConfig+0x538>)
20008aea:	685b      	ldr	r3, [r3, #4]
20008aec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20008aee:	687b      	ldr	r3, [r7, #4]
20008af0:	699b      	ldr	r3, [r3, #24]
20008af2:	2b01      	cmp	r3, #1
20008af4:	d030      	beq.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20008af6:	68fb      	ldr	r3, [r7, #12]
20008af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20008afc:	687b      	ldr	r3, [r7, #4]
20008afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20008b00:	429a      	cmp	r2, r3
20008b02:	d129      	bne.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20008b04:	68fb      	ldr	r3, [r7, #12]
20008b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20008b0a:	687b      	ldr	r3, [r7, #4]
20008b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20008b0e:	429a      	cmp	r2, r3
20008b10:	d122      	bne.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20008b12:	68fa      	ldr	r2, [r7, #12]
20008b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20008b18:	4013      	ands	r3, r2
20008b1a:	687a      	ldr	r2, [r7, #4]
20008b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
20008b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20008b20:	4293      	cmp	r3, r2
20008b22:	d119      	bne.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20008b24:	68fb      	ldr	r3, [r7, #12]
20008b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20008b2a:	687b      	ldr	r3, [r7, #4]
20008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20008b2e:	085b      	lsrs	r3, r3, #1
20008b30:	3b01      	subs	r3, #1
20008b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20008b34:	429a      	cmp	r2, r3
20008b36:	d10f      	bne.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20008b38:	68fb      	ldr	r3, [r7, #12]
20008b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20008b3e:	687b      	ldr	r3, [r7, #4]
20008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20008b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20008b44:	429a      	cmp	r2, r3
20008b46:	d107      	bne.n	20008b58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
20008b48:	68fb      	ldr	r3, [r7, #12]
20008b4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
20008b4e:	687b      	ldr	r3, [r7, #4]
20008b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008b52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
20008b54:	429a      	cmp	r2, r3
20008b56:	d001      	beq.n	20008b5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
20008b58:	2301      	movs	r3, #1
20008b5a:	e000      	b.n	20008b5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
20008b5c:	2300      	movs	r3, #0
}
20008b5e:	4618      	mov	r0, r3
20008b60:	3718      	adds	r7, #24
20008b62:	46bd      	mov	sp, r7
20008b64:	bd80      	pop	{r7, pc}
20008b66:	bf00      	nop
20008b68:	40023800 	.word	0x40023800

20008b6c <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20008b6c:	b480      	push	{r7}
20008b6e:	b083      	sub	sp, #12
20008b70:	af00      	add	r7, sp, #0
20008b72:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20008b74:	687b      	ldr	r3, [r7, #4]
20008b76:	220f      	movs	r2, #15
20008b78:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20008b7a:	4b49      	ldr	r3, [pc, #292]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008b7c:	681b      	ldr	r3, [r3, #0]
20008b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20008b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
20008b86:	d104      	bne.n	20008b92 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20008b88:	687b      	ldr	r3, [r7, #4]
20008b8a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
20008b8e:	605a      	str	r2, [r3, #4]
20008b90:	e00e      	b.n	20008bb0 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
20008b92:	4b43      	ldr	r3, [pc, #268]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008b94:	681b      	ldr	r3, [r3, #0]
20008b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20008b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20008b9e:	d104      	bne.n	20008baa <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20008ba0:	687b      	ldr	r3, [r7, #4]
20008ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20008ba6:	605a      	str	r2, [r3, #4]
20008ba8:	e002      	b.n	20008bb0 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20008baa:	687b      	ldr	r3, [r7, #4]
20008bac:	2200      	movs	r2, #0
20008bae:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
20008bb0:	4b3b      	ldr	r3, [pc, #236]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008bb2:	681b      	ldr	r3, [r3, #0]
20008bb4:	f003 0301 	and.w	r3, r3, #1
20008bb8:	2b01      	cmp	r3, #1
20008bba:	d103      	bne.n	20008bc4 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20008bbc:	687b      	ldr	r3, [r7, #4]
20008bbe:	2201      	movs	r2, #1
20008bc0:	60da      	str	r2, [r3, #12]
20008bc2:	e002      	b.n	20008bca <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20008bc4:	687b      	ldr	r3, [r7, #4]
20008bc6:	2200      	movs	r2, #0
20008bc8:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20008bca:	4b35      	ldr	r3, [pc, #212]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008bcc:	681b      	ldr	r3, [r3, #0]
20008bce:	08db      	lsrs	r3, r3, #3
20008bd0:	f003 021f 	and.w	r2, r3, #31
20008bd4:	687b      	ldr	r3, [r7, #4]
20008bd6:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20008bd8:	4b31      	ldr	r3, [pc, #196]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008bdc:	f003 0304 	and.w	r3, r3, #4
20008be0:	2b04      	cmp	r3, #4
20008be2:	d103      	bne.n	20008bec <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20008be4:	687b      	ldr	r3, [r7, #4]
20008be6:	2205      	movs	r2, #5
20008be8:	609a      	str	r2, [r3, #8]
20008bea:	e00c      	b.n	20008c06 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20008bec:	4b2c      	ldr	r3, [pc, #176]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20008bf0:	f003 0301 	and.w	r3, r3, #1
20008bf4:	2b01      	cmp	r3, #1
20008bf6:	d103      	bne.n	20008c00 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20008bf8:	687b      	ldr	r3, [r7, #4]
20008bfa:	2201      	movs	r2, #1
20008bfc:	609a      	str	r2, [r3, #8]
20008bfe:	e002      	b.n	20008c06 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20008c00:	687b      	ldr	r3, [r7, #4]
20008c02:	2200      	movs	r2, #0
20008c04:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
20008c06:	4b26      	ldr	r3, [pc, #152]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20008c0a:	f003 0301 	and.w	r3, r3, #1
20008c0e:	2b01      	cmp	r3, #1
20008c10:	d103      	bne.n	20008c1a <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
20008c12:	687b      	ldr	r3, [r7, #4]
20008c14:	2201      	movs	r2, #1
20008c16:	615a      	str	r2, [r3, #20]
20008c18:	e002      	b.n	20008c20 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20008c1a:	687b      	ldr	r3, [r7, #4]
20008c1c:	2200      	movs	r2, #0
20008c1e:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
20008c20:	4b1f      	ldr	r3, [pc, #124]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c22:	681b      	ldr	r3, [r3, #0]
20008c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20008c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20008c2c:	d103      	bne.n	20008c36 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20008c2e:	687b      	ldr	r3, [r7, #4]
20008c30:	2202      	movs	r2, #2
20008c32:	619a      	str	r2, [r3, #24]
20008c34:	e002      	b.n	20008c3c <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20008c36:	687b      	ldr	r3, [r7, #4]
20008c38:	2201      	movs	r2, #1
20008c3a:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20008c3c:	4b18      	ldr	r3, [pc, #96]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c3e:	685b      	ldr	r3, [r3, #4]
20008c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20008c44:	687b      	ldr	r3, [r7, #4]
20008c46:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20008c48:	4b15      	ldr	r3, [pc, #84]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c4a:	685b      	ldr	r3, [r3, #4]
20008c4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20008c50:	687b      	ldr	r3, [r7, #4]
20008c52:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20008c54:	4b12      	ldr	r3, [pc, #72]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c56:	685b      	ldr	r3, [r3, #4]
20008c58:	099b      	lsrs	r3, r3, #6
20008c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
20008c5e:	687b      	ldr	r3, [r7, #4]
20008c60:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
20008c62:	4b0f      	ldr	r3, [pc, #60]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c64:	685b      	ldr	r3, [r3, #4]
20008c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20008c6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20008c6e:	005b      	lsls	r3, r3, #1
20008c70:	0c1a      	lsrs	r2, r3, #16
20008c72:	687b      	ldr	r3, [r7, #4]
20008c74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
20008c76:	4b0a      	ldr	r3, [pc, #40]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c78:	685b      	ldr	r3, [r3, #4]
20008c7a:	0e1b      	lsrs	r3, r3, #24
20008c7c:	f003 020f 	and.w	r2, r3, #15
20008c80:	687b      	ldr	r3, [r7, #4]
20008c82:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
20008c84:	4b06      	ldr	r3, [pc, #24]	; (20008ca0 <HAL_RCC_GetOscConfig+0x134>)
20008c86:	685b      	ldr	r3, [r3, #4]
20008c88:	0f1b      	lsrs	r3, r3, #28
20008c8a:	f003 0207 	and.w	r2, r3, #7
20008c8e:	687b      	ldr	r3, [r7, #4]
20008c90:	631a      	str	r2, [r3, #48]	; 0x30
}
20008c92:	bf00      	nop
20008c94:	370c      	adds	r7, #12
20008c96:	46bd      	mov	sp, r7
20008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
20008c9c:	4770      	bx	lr
20008c9e:	bf00      	nop
20008ca0:	40023800 	.word	0x40023800

20008ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20008ca4:	b580      	push	{r7, lr}
20008ca6:	b082      	sub	sp, #8
20008ca8:	af00      	add	r7, sp, #0
20008caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20008cac:	687b      	ldr	r3, [r7, #4]
20008cae:	2b00      	cmp	r3, #0
20008cb0:	d101      	bne.n	20008cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20008cb2:	2301      	movs	r3, #1
20008cb4:	e07b      	b.n	20008dae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20008cb6:	687b      	ldr	r3, [r7, #4]
20008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20008cba:	2b00      	cmp	r3, #0
20008cbc:	d108      	bne.n	20008cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20008cbe:	687b      	ldr	r3, [r7, #4]
20008cc0:	685b      	ldr	r3, [r3, #4]
20008cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008cc6:	d009      	beq.n	20008cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20008cc8:	687b      	ldr	r3, [r7, #4]
20008cca:	2200      	movs	r2, #0
20008ccc:	61da      	str	r2, [r3, #28]
20008cce:	e005      	b.n	20008cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20008cd0:	687b      	ldr	r3, [r7, #4]
20008cd2:	2200      	movs	r2, #0
20008cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20008cd6:	687b      	ldr	r3, [r7, #4]
20008cd8:	2200      	movs	r2, #0
20008cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20008cdc:	687b      	ldr	r3, [r7, #4]
20008cde:	2200      	movs	r2, #0
20008ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20008ce2:	687b      	ldr	r3, [r7, #4]
20008ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008ce8:	b2db      	uxtb	r3, r3
20008cea:	2b00      	cmp	r3, #0
20008cec:	d106      	bne.n	20008cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20008cee:	687b      	ldr	r3, [r7, #4]
20008cf0:	2200      	movs	r2, #0
20008cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20008cf6:	6878      	ldr	r0, [r7, #4]
20008cf8:	f7f8 f94c 	bl	20000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20008cfc:	687b      	ldr	r3, [r7, #4]
20008cfe:	2202      	movs	r2, #2
20008d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20008d04:	687b      	ldr	r3, [r7, #4]
20008d06:	681b      	ldr	r3, [r3, #0]
20008d08:	681a      	ldr	r2, [r3, #0]
20008d0a:	687b      	ldr	r3, [r7, #4]
20008d0c:	681b      	ldr	r3, [r3, #0]
20008d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20008d14:	687b      	ldr	r3, [r7, #4]
20008d16:	685b      	ldr	r3, [r3, #4]
20008d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
20008d1c:	687b      	ldr	r3, [r7, #4]
20008d1e:	689b      	ldr	r3, [r3, #8]
20008d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
20008d24:	431a      	orrs	r2, r3
20008d26:	687b      	ldr	r3, [r7, #4]
20008d28:	68db      	ldr	r3, [r3, #12]
20008d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20008d2e:	431a      	orrs	r2, r3
20008d30:	687b      	ldr	r3, [r7, #4]
20008d32:	691b      	ldr	r3, [r3, #16]
20008d34:	f003 0302 	and.w	r3, r3, #2
20008d38:	431a      	orrs	r2, r3
20008d3a:	687b      	ldr	r3, [r7, #4]
20008d3c:	695b      	ldr	r3, [r3, #20]
20008d3e:	f003 0301 	and.w	r3, r3, #1
20008d42:	431a      	orrs	r2, r3
20008d44:	687b      	ldr	r3, [r7, #4]
20008d46:	699b      	ldr	r3, [r3, #24]
20008d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
20008d4c:	431a      	orrs	r2, r3
20008d4e:	687b      	ldr	r3, [r7, #4]
20008d50:	69db      	ldr	r3, [r3, #28]
20008d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
20008d56:	431a      	orrs	r2, r3
20008d58:	687b      	ldr	r3, [r7, #4]
20008d5a:	6a1b      	ldr	r3, [r3, #32]
20008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20008d60:	ea42 0103 	orr.w	r1, r2, r3
20008d64:	687b      	ldr	r3, [r7, #4]
20008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20008d68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20008d6c:	687b      	ldr	r3, [r7, #4]
20008d6e:	681b      	ldr	r3, [r3, #0]
20008d70:	430a      	orrs	r2, r1
20008d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
20008d74:	687b      	ldr	r3, [r7, #4]
20008d76:	699b      	ldr	r3, [r3, #24]
20008d78:	0c1b      	lsrs	r3, r3, #16
20008d7a:	f003 0104 	and.w	r1, r3, #4
20008d7e:	687b      	ldr	r3, [r7, #4]
20008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20008d82:	f003 0210 	and.w	r2, r3, #16
20008d86:	687b      	ldr	r3, [r7, #4]
20008d88:	681b      	ldr	r3, [r3, #0]
20008d8a:	430a      	orrs	r2, r1
20008d8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20008d8e:	687b      	ldr	r3, [r7, #4]
20008d90:	681b      	ldr	r3, [r3, #0]
20008d92:	69da      	ldr	r2, [r3, #28]
20008d94:	687b      	ldr	r3, [r7, #4]
20008d96:	681b      	ldr	r3, [r3, #0]
20008d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20008d9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008d9e:	687b      	ldr	r3, [r7, #4]
20008da0:	2200      	movs	r2, #0
20008da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20008da4:	687b      	ldr	r3, [r7, #4]
20008da6:	2201      	movs	r2, #1
20008da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20008dac:	2300      	movs	r3, #0
}
20008dae:	4618      	mov	r0, r3
20008db0:	3708      	adds	r7, #8
20008db2:	46bd      	mov	sp, r7
20008db4:	bd80      	pop	{r7, pc}

20008db6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
20008db6:	b580      	push	{r7, lr}
20008db8:	b082      	sub	sp, #8
20008dba:	af00      	add	r7, sp, #0
20008dbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20008dbe:	687b      	ldr	r3, [r7, #4]
20008dc0:	2b00      	cmp	r3, #0
20008dc2:	d101      	bne.n	20008dc8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
20008dc4:	2301      	movs	r3, #1
20008dc6:	e01a      	b.n	20008dfe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
20008dc8:	687b      	ldr	r3, [r7, #4]
20008dca:	2202      	movs	r2, #2
20008dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
20008dd0:	687b      	ldr	r3, [r7, #4]
20008dd2:	681b      	ldr	r3, [r3, #0]
20008dd4:	681a      	ldr	r2, [r3, #0]
20008dd6:	687b      	ldr	r3, [r7, #4]
20008dd8:	681b      	ldr	r3, [r3, #0]
20008dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008dde:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
20008de0:	6878      	ldr	r0, [r7, #4]
20008de2:	f7f8 f93f 	bl	20001064 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008de6:	687b      	ldr	r3, [r7, #4]
20008de8:	2200      	movs	r2, #0
20008dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
20008dec:	687b      	ldr	r3, [r7, #4]
20008dee:	2200      	movs	r2, #0
20008df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
20008df4:	687b      	ldr	r3, [r7, #4]
20008df6:	2200      	movs	r2, #0
20008df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20008dfc:	2300      	movs	r3, #0
}
20008dfe:	4618      	mov	r0, r3
20008e00:	3708      	adds	r7, #8
20008e02:	46bd      	mov	sp, r7
20008e04:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
20008e06:	b480      	push	{r7}
20008e08:	b083      	sub	sp, #12
20008e0a:	af00      	add	r7, sp, #0
20008e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
20008e0e:	bf00      	nop
20008e10:	370c      	adds	r7, #12
20008e12:	46bd      	mov	sp, r7
20008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e18:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
20008e1a:	b480      	push	{r7}
20008e1c:	b083      	sub	sp, #12
20008e1e:	af00      	add	r7, sp, #0
20008e20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
20008e22:	bf00      	nop
20008e24:	370c      	adds	r7, #12
20008e26:	46bd      	mov	sp, r7
20008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e2c:	4770      	bx	lr

20008e2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20008e2e:	b580      	push	{r7, lr}
20008e30:	b088      	sub	sp, #32
20008e32:	af00      	add	r7, sp, #0
20008e34:	60f8      	str	r0, [r7, #12]
20008e36:	60b9      	str	r1, [r7, #8]
20008e38:	603b      	str	r3, [r7, #0]
20008e3a:	4613      	mov	r3, r2
20008e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20008e3e:	2300      	movs	r3, #0
20008e40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20008e42:	68fb      	ldr	r3, [r7, #12]
20008e44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008e48:	2b01      	cmp	r3, #1
20008e4a:	d101      	bne.n	20008e50 <HAL_SPI_Transmit+0x22>
20008e4c:	2302      	movs	r3, #2
20008e4e:	e126      	b.n	2000909e <HAL_SPI_Transmit+0x270>
20008e50:	68fb      	ldr	r3, [r7, #12]
20008e52:	2201      	movs	r2, #1
20008e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20008e58:	f7f7 fd59 	bl	2000090e <HAL_GetTick>
20008e5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20008e5e:	88fb      	ldrh	r3, [r7, #6]
20008e60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20008e62:	68fb      	ldr	r3, [r7, #12]
20008e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008e68:	b2db      	uxtb	r3, r3
20008e6a:	2b01      	cmp	r3, #1
20008e6c:	d002      	beq.n	20008e74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20008e6e:	2302      	movs	r3, #2
20008e70:	77fb      	strb	r3, [r7, #31]
    goto error;
20008e72:	e10b      	b.n	2000908c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
20008e74:	68bb      	ldr	r3, [r7, #8]
20008e76:	2b00      	cmp	r3, #0
20008e78:	d002      	beq.n	20008e80 <HAL_SPI_Transmit+0x52>
20008e7a:	88fb      	ldrh	r3, [r7, #6]
20008e7c:	2b00      	cmp	r3, #0
20008e7e:	d102      	bne.n	20008e86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20008e80:	2301      	movs	r3, #1
20008e82:	77fb      	strb	r3, [r7, #31]
    goto error;
20008e84:	e102      	b.n	2000908c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20008e86:	68fb      	ldr	r3, [r7, #12]
20008e88:	2203      	movs	r2, #3
20008e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20008e8e:	68fb      	ldr	r3, [r7, #12]
20008e90:	2200      	movs	r2, #0
20008e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20008e94:	68fb      	ldr	r3, [r7, #12]
20008e96:	68ba      	ldr	r2, [r7, #8]
20008e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20008e9a:	68fb      	ldr	r3, [r7, #12]
20008e9c:	88fa      	ldrh	r2, [r7, #6]
20008e9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20008ea0:	68fb      	ldr	r3, [r7, #12]
20008ea2:	88fa      	ldrh	r2, [r7, #6]
20008ea4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20008ea6:	68fb      	ldr	r3, [r7, #12]
20008ea8:	2200      	movs	r2, #0
20008eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20008eac:	68fb      	ldr	r3, [r7, #12]
20008eae:	2200      	movs	r2, #0
20008eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20008eb2:	68fb      	ldr	r3, [r7, #12]
20008eb4:	2200      	movs	r2, #0
20008eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20008eb8:	68fb      	ldr	r3, [r7, #12]
20008eba:	2200      	movs	r2, #0
20008ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20008ebe:	68fb      	ldr	r3, [r7, #12]
20008ec0:	2200      	movs	r2, #0
20008ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20008ec4:	68fb      	ldr	r3, [r7, #12]
20008ec6:	689b      	ldr	r3, [r3, #8]
20008ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20008ecc:	d10f      	bne.n	20008eee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20008ece:	68fb      	ldr	r3, [r7, #12]
20008ed0:	681b      	ldr	r3, [r3, #0]
20008ed2:	681a      	ldr	r2, [r3, #0]
20008ed4:	68fb      	ldr	r3, [r7, #12]
20008ed6:	681b      	ldr	r3, [r3, #0]
20008ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008edc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20008ede:	68fb      	ldr	r3, [r7, #12]
20008ee0:	681b      	ldr	r3, [r3, #0]
20008ee2:	681a      	ldr	r2, [r3, #0]
20008ee4:	68fb      	ldr	r3, [r7, #12]
20008ee6:	681b      	ldr	r3, [r3, #0]
20008ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20008eec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008eee:	68fb      	ldr	r3, [r7, #12]
20008ef0:	681b      	ldr	r3, [r3, #0]
20008ef2:	681b      	ldr	r3, [r3, #0]
20008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008ef8:	2b40      	cmp	r3, #64	; 0x40
20008efa:	d007      	beq.n	20008f0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008efc:	68fb      	ldr	r3, [r7, #12]
20008efe:	681b      	ldr	r3, [r3, #0]
20008f00:	681a      	ldr	r2, [r3, #0]
20008f02:	68fb      	ldr	r3, [r7, #12]
20008f04:	681b      	ldr	r3, [r3, #0]
20008f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008f0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20008f0c:	68fb      	ldr	r3, [r7, #12]
20008f0e:	68db      	ldr	r3, [r3, #12]
20008f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20008f14:	d14b      	bne.n	20008fae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20008f16:	68fb      	ldr	r3, [r7, #12]
20008f18:	685b      	ldr	r3, [r3, #4]
20008f1a:	2b00      	cmp	r3, #0
20008f1c:	d002      	beq.n	20008f24 <HAL_SPI_Transmit+0xf6>
20008f1e:	8afb      	ldrh	r3, [r7, #22]
20008f20:	2b01      	cmp	r3, #1
20008f22:	d13e      	bne.n	20008fa2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20008f24:	68fb      	ldr	r3, [r7, #12]
20008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008f28:	881a      	ldrh	r2, [r3, #0]
20008f2a:	68fb      	ldr	r3, [r7, #12]
20008f2c:	681b      	ldr	r3, [r3, #0]
20008f2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20008f30:	68fb      	ldr	r3, [r7, #12]
20008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008f34:	1c9a      	adds	r2, r3, #2
20008f36:	68fb      	ldr	r3, [r7, #12]
20008f38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20008f3a:	68fb      	ldr	r3, [r7, #12]
20008f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008f3e:	b29b      	uxth	r3, r3
20008f40:	3b01      	subs	r3, #1
20008f42:	b29a      	uxth	r2, r3
20008f44:	68fb      	ldr	r3, [r7, #12]
20008f46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20008f48:	e02b      	b.n	20008fa2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20008f4a:	68fb      	ldr	r3, [r7, #12]
20008f4c:	681b      	ldr	r3, [r3, #0]
20008f4e:	689b      	ldr	r3, [r3, #8]
20008f50:	f003 0302 	and.w	r3, r3, #2
20008f54:	2b02      	cmp	r3, #2
20008f56:	d112      	bne.n	20008f7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20008f58:	68fb      	ldr	r3, [r7, #12]
20008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008f5c:	881a      	ldrh	r2, [r3, #0]
20008f5e:	68fb      	ldr	r3, [r7, #12]
20008f60:	681b      	ldr	r3, [r3, #0]
20008f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20008f64:	68fb      	ldr	r3, [r7, #12]
20008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008f68:	1c9a      	adds	r2, r3, #2
20008f6a:	68fb      	ldr	r3, [r7, #12]
20008f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20008f6e:	68fb      	ldr	r3, [r7, #12]
20008f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008f72:	b29b      	uxth	r3, r3
20008f74:	3b01      	subs	r3, #1
20008f76:	b29a      	uxth	r2, r3
20008f78:	68fb      	ldr	r3, [r7, #12]
20008f7a:	86da      	strh	r2, [r3, #54]	; 0x36
20008f7c:	e011      	b.n	20008fa2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20008f7e:	f7f7 fcc6 	bl	2000090e <HAL_GetTick>
20008f82:	4602      	mov	r2, r0
20008f84:	69bb      	ldr	r3, [r7, #24]
20008f86:	1ad3      	subs	r3, r2, r3
20008f88:	683a      	ldr	r2, [r7, #0]
20008f8a:	429a      	cmp	r2, r3
20008f8c:	d803      	bhi.n	20008f96 <HAL_SPI_Transmit+0x168>
20008f8e:	683b      	ldr	r3, [r7, #0]
20008f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20008f94:	d102      	bne.n	20008f9c <HAL_SPI_Transmit+0x16e>
20008f96:	683b      	ldr	r3, [r7, #0]
20008f98:	2b00      	cmp	r3, #0
20008f9a:	d102      	bne.n	20008fa2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
20008f9c:	2303      	movs	r3, #3
20008f9e:	77fb      	strb	r3, [r7, #31]
          goto error;
20008fa0:	e074      	b.n	2000908c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
20008fa2:	68fb      	ldr	r3, [r7, #12]
20008fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008fa6:	b29b      	uxth	r3, r3
20008fa8:	2b00      	cmp	r3, #0
20008faa:	d1ce      	bne.n	20008f4a <HAL_SPI_Transmit+0x11c>
20008fac:	e04c      	b.n	20009048 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20008fae:	68fb      	ldr	r3, [r7, #12]
20008fb0:	685b      	ldr	r3, [r3, #4]
20008fb2:	2b00      	cmp	r3, #0
20008fb4:	d002      	beq.n	20008fbc <HAL_SPI_Transmit+0x18e>
20008fb6:	8afb      	ldrh	r3, [r7, #22]
20008fb8:	2b01      	cmp	r3, #1
20008fba:	d140      	bne.n	2000903e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20008fbc:	68fb      	ldr	r3, [r7, #12]
20008fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20008fc0:	68fb      	ldr	r3, [r7, #12]
20008fc2:	681b      	ldr	r3, [r3, #0]
20008fc4:	330c      	adds	r3, #12
20008fc6:	7812      	ldrb	r2, [r2, #0]
20008fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20008fca:	68fb      	ldr	r3, [r7, #12]
20008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008fce:	1c5a      	adds	r2, r3, #1
20008fd0:	68fb      	ldr	r3, [r7, #12]
20008fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20008fd4:	68fb      	ldr	r3, [r7, #12]
20008fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008fd8:	b29b      	uxth	r3, r3
20008fda:	3b01      	subs	r3, #1
20008fdc:	b29a      	uxth	r2, r3
20008fde:	68fb      	ldr	r3, [r7, #12]
20008fe0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
20008fe2:	e02c      	b.n	2000903e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20008fe4:	68fb      	ldr	r3, [r7, #12]
20008fe6:	681b      	ldr	r3, [r3, #0]
20008fe8:	689b      	ldr	r3, [r3, #8]
20008fea:	f003 0302 	and.w	r3, r3, #2
20008fee:	2b02      	cmp	r3, #2
20008ff0:	d113      	bne.n	2000901a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20008ff2:	68fb      	ldr	r3, [r7, #12]
20008ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20008ff6:	68fb      	ldr	r3, [r7, #12]
20008ff8:	681b      	ldr	r3, [r3, #0]
20008ffa:	330c      	adds	r3, #12
20008ffc:	7812      	ldrb	r2, [r2, #0]
20008ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20009000:	68fb      	ldr	r3, [r7, #12]
20009002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009004:	1c5a      	adds	r2, r3, #1
20009006:	68fb      	ldr	r3, [r7, #12]
20009008:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000900a:	68fb      	ldr	r3, [r7, #12]
2000900c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000900e:	b29b      	uxth	r3, r3
20009010:	3b01      	subs	r3, #1
20009012:	b29a      	uxth	r2, r3
20009014:	68fb      	ldr	r3, [r7, #12]
20009016:	86da      	strh	r2, [r3, #54]	; 0x36
20009018:	e011      	b.n	2000903e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000901a:	f7f7 fc78 	bl	2000090e <HAL_GetTick>
2000901e:	4602      	mov	r2, r0
20009020:	69bb      	ldr	r3, [r7, #24]
20009022:	1ad3      	subs	r3, r2, r3
20009024:	683a      	ldr	r2, [r7, #0]
20009026:	429a      	cmp	r2, r3
20009028:	d803      	bhi.n	20009032 <HAL_SPI_Transmit+0x204>
2000902a:	683b      	ldr	r3, [r7, #0]
2000902c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20009030:	d102      	bne.n	20009038 <HAL_SPI_Transmit+0x20a>
20009032:	683b      	ldr	r3, [r7, #0]
20009034:	2b00      	cmp	r3, #0
20009036:	d102      	bne.n	2000903e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
20009038:	2303      	movs	r3, #3
2000903a:	77fb      	strb	r3, [r7, #31]
          goto error;
2000903c:	e026      	b.n	2000908c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
2000903e:	68fb      	ldr	r3, [r7, #12]
20009040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009042:	b29b      	uxth	r3, r3
20009044:	2b00      	cmp	r3, #0
20009046:	d1cd      	bne.n	20008fe4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20009048:	69ba      	ldr	r2, [r7, #24]
2000904a:	6839      	ldr	r1, [r7, #0]
2000904c:	68f8      	ldr	r0, [r7, #12]
2000904e:	f001 ff41 	bl	2000aed4 <SPI_EndRxTxTransaction>
20009052:	4603      	mov	r3, r0
20009054:	2b00      	cmp	r3, #0
20009056:	d002      	beq.n	2000905e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20009058:	68fb      	ldr	r3, [r7, #12]
2000905a:	2220      	movs	r2, #32
2000905c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000905e:	68fb      	ldr	r3, [r7, #12]
20009060:	689b      	ldr	r3, [r3, #8]
20009062:	2b00      	cmp	r3, #0
20009064:	d10a      	bne.n	2000907c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009066:	2300      	movs	r3, #0
20009068:	613b      	str	r3, [r7, #16]
2000906a:	68fb      	ldr	r3, [r7, #12]
2000906c:	681b      	ldr	r3, [r3, #0]
2000906e:	68db      	ldr	r3, [r3, #12]
20009070:	613b      	str	r3, [r7, #16]
20009072:	68fb      	ldr	r3, [r7, #12]
20009074:	681b      	ldr	r3, [r3, #0]
20009076:	689b      	ldr	r3, [r3, #8]
20009078:	613b      	str	r3, [r7, #16]
2000907a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000907c:	68fb      	ldr	r3, [r7, #12]
2000907e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009080:	2b00      	cmp	r3, #0
20009082:	d002      	beq.n	2000908a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
20009084:	2301      	movs	r3, #1
20009086:	77fb      	strb	r3, [r7, #31]
20009088:	e000      	b.n	2000908c <HAL_SPI_Transmit+0x25e>
  }

error:
2000908a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
2000908c:	68fb      	ldr	r3, [r7, #12]
2000908e:	2201      	movs	r2, #1
20009090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20009094:	68fb      	ldr	r3, [r7, #12]
20009096:	2200      	movs	r2, #0
20009098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000909c:	7ffb      	ldrb	r3, [r7, #31]
}
2000909e:	4618      	mov	r0, r3
200090a0:	3720      	adds	r7, #32
200090a2:	46bd      	mov	sp, r7
200090a4:	bd80      	pop	{r7, pc}

200090a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200090a6:	b580      	push	{r7, lr}
200090a8:	b088      	sub	sp, #32
200090aa:	af02      	add	r7, sp, #8
200090ac:	60f8      	str	r0, [r7, #12]
200090ae:	60b9      	str	r1, [r7, #8]
200090b0:	603b      	str	r3, [r7, #0]
200090b2:	4613      	mov	r3, r2
200090b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
200090b6:	2300      	movs	r3, #0
200090b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
200090ba:	68fb      	ldr	r3, [r7, #12]
200090bc:	685b      	ldr	r3, [r3, #4]
200090be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200090c2:	d112      	bne.n	200090ea <HAL_SPI_Receive+0x44>
200090c4:	68fb      	ldr	r3, [r7, #12]
200090c6:	689b      	ldr	r3, [r3, #8]
200090c8:	2b00      	cmp	r3, #0
200090ca:	d10e      	bne.n	200090ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
200090cc:	68fb      	ldr	r3, [r7, #12]
200090ce:	2204      	movs	r2, #4
200090d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
200090d4:	88fa      	ldrh	r2, [r7, #6]
200090d6:	683b      	ldr	r3, [r7, #0]
200090d8:	9300      	str	r3, [sp, #0]
200090da:	4613      	mov	r3, r2
200090dc:	68ba      	ldr	r2, [r7, #8]
200090de:	68b9      	ldr	r1, [r7, #8]
200090e0:	68f8      	ldr	r0, [r7, #12]
200090e2:	f000 f8f1 	bl	200092c8 <HAL_SPI_TransmitReceive>
200090e6:	4603      	mov	r3, r0
200090e8:	e0ea      	b.n	200092c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200090ea:	68fb      	ldr	r3, [r7, #12]
200090ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200090f0:	2b01      	cmp	r3, #1
200090f2:	d101      	bne.n	200090f8 <HAL_SPI_Receive+0x52>
200090f4:	2302      	movs	r3, #2
200090f6:	e0e3      	b.n	200092c0 <HAL_SPI_Receive+0x21a>
200090f8:	68fb      	ldr	r3, [r7, #12]
200090fa:	2201      	movs	r2, #1
200090fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20009100:	f7f7 fc05 	bl	2000090e <HAL_GetTick>
20009104:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
20009106:	68fb      	ldr	r3, [r7, #12]
20009108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000910c:	b2db      	uxtb	r3, r3
2000910e:	2b01      	cmp	r3, #1
20009110:	d002      	beq.n	20009118 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
20009112:	2302      	movs	r3, #2
20009114:	75fb      	strb	r3, [r7, #23]
    goto error;
20009116:	e0ca      	b.n	200092ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
20009118:	68bb      	ldr	r3, [r7, #8]
2000911a:	2b00      	cmp	r3, #0
2000911c:	d002      	beq.n	20009124 <HAL_SPI_Receive+0x7e>
2000911e:	88fb      	ldrh	r3, [r7, #6]
20009120:	2b00      	cmp	r3, #0
20009122:	d102      	bne.n	2000912a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
20009124:	2301      	movs	r3, #1
20009126:	75fb      	strb	r3, [r7, #23]
    goto error;
20009128:	e0c1      	b.n	200092ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2000912a:	68fb      	ldr	r3, [r7, #12]
2000912c:	2204      	movs	r2, #4
2000912e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20009132:	68fb      	ldr	r3, [r7, #12]
20009134:	2200      	movs	r2, #0
20009136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20009138:	68fb      	ldr	r3, [r7, #12]
2000913a:	68ba      	ldr	r2, [r7, #8]
2000913c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
2000913e:	68fb      	ldr	r3, [r7, #12]
20009140:	88fa      	ldrh	r2, [r7, #6]
20009142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20009144:	68fb      	ldr	r3, [r7, #12]
20009146:	88fa      	ldrh	r2, [r7, #6]
20009148:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
2000914a:	68fb      	ldr	r3, [r7, #12]
2000914c:	2200      	movs	r2, #0
2000914e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
20009150:	68fb      	ldr	r3, [r7, #12]
20009152:	2200      	movs	r2, #0
20009154:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20009156:	68fb      	ldr	r3, [r7, #12]
20009158:	2200      	movs	r2, #0
2000915a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
2000915c:	68fb      	ldr	r3, [r7, #12]
2000915e:	2200      	movs	r2, #0
20009160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20009162:	68fb      	ldr	r3, [r7, #12]
20009164:	2200      	movs	r2, #0
20009166:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20009168:	68fb      	ldr	r3, [r7, #12]
2000916a:	689b      	ldr	r3, [r3, #8]
2000916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20009170:	d10f      	bne.n	20009192 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20009172:	68fb      	ldr	r3, [r7, #12]
20009174:	681b      	ldr	r3, [r3, #0]
20009176:	681a      	ldr	r2, [r3, #0]
20009178:	68fb      	ldr	r3, [r7, #12]
2000917a:	681b      	ldr	r3, [r3, #0]
2000917c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20009182:	68fb      	ldr	r3, [r7, #12]
20009184:	681b      	ldr	r3, [r3, #0]
20009186:	681a      	ldr	r2, [r3, #0]
20009188:	68fb      	ldr	r3, [r7, #12]
2000918a:	681b      	ldr	r3, [r3, #0]
2000918c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20009190:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20009192:	68fb      	ldr	r3, [r7, #12]
20009194:	681b      	ldr	r3, [r3, #0]
20009196:	681b      	ldr	r3, [r3, #0]
20009198:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000919c:	2b40      	cmp	r3, #64	; 0x40
2000919e:	d007      	beq.n	200091b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200091a0:	68fb      	ldr	r3, [r7, #12]
200091a2:	681b      	ldr	r3, [r3, #0]
200091a4:	681a      	ldr	r2, [r3, #0]
200091a6:	68fb      	ldr	r3, [r7, #12]
200091a8:	681b      	ldr	r3, [r3, #0]
200091aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200091ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
200091b0:	68fb      	ldr	r3, [r7, #12]
200091b2:	68db      	ldr	r3, [r3, #12]
200091b4:	2b00      	cmp	r3, #0
200091b6:	d162      	bne.n	2000927e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
200091b8:	e02e      	b.n	20009218 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
200091ba:	68fb      	ldr	r3, [r7, #12]
200091bc:	681b      	ldr	r3, [r3, #0]
200091be:	689b      	ldr	r3, [r3, #8]
200091c0:	f003 0301 	and.w	r3, r3, #1
200091c4:	2b01      	cmp	r3, #1
200091c6:	d115      	bne.n	200091f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
200091c8:	68fb      	ldr	r3, [r7, #12]
200091ca:	681b      	ldr	r3, [r3, #0]
200091cc:	f103 020c 	add.w	r2, r3, #12
200091d0:	68fb      	ldr	r3, [r7, #12]
200091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200091d4:	7812      	ldrb	r2, [r2, #0]
200091d6:	b2d2      	uxtb	r2, r2
200091d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
200091da:	68fb      	ldr	r3, [r7, #12]
200091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200091de:	1c5a      	adds	r2, r3, #1
200091e0:	68fb      	ldr	r3, [r7, #12]
200091e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
200091e4:	68fb      	ldr	r3, [r7, #12]
200091e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200091e8:	b29b      	uxth	r3, r3
200091ea:	3b01      	subs	r3, #1
200091ec:	b29a      	uxth	r2, r3
200091ee:	68fb      	ldr	r3, [r7, #12]
200091f0:	87da      	strh	r2, [r3, #62]	; 0x3e
200091f2:	e011      	b.n	20009218 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
200091f4:	f7f7 fb8b 	bl	2000090e <HAL_GetTick>
200091f8:	4602      	mov	r2, r0
200091fa:	693b      	ldr	r3, [r7, #16]
200091fc:	1ad3      	subs	r3, r2, r3
200091fe:	683a      	ldr	r2, [r7, #0]
20009200:	429a      	cmp	r2, r3
20009202:	d803      	bhi.n	2000920c <HAL_SPI_Receive+0x166>
20009204:	683b      	ldr	r3, [r7, #0]
20009206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000920a:	d102      	bne.n	20009212 <HAL_SPI_Receive+0x16c>
2000920c:	683b      	ldr	r3, [r7, #0]
2000920e:	2b00      	cmp	r3, #0
20009210:	d102      	bne.n	20009218 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
20009212:	2303      	movs	r3, #3
20009214:	75fb      	strb	r3, [r7, #23]
          goto error;
20009216:	e04a      	b.n	200092ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
20009218:	68fb      	ldr	r3, [r7, #12]
2000921a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000921c:	b29b      	uxth	r3, r3
2000921e:	2b00      	cmp	r3, #0
20009220:	d1cb      	bne.n	200091ba <HAL_SPI_Receive+0x114>
20009222:	e031      	b.n	20009288 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20009224:	68fb      	ldr	r3, [r7, #12]
20009226:	681b      	ldr	r3, [r3, #0]
20009228:	689b      	ldr	r3, [r3, #8]
2000922a:	f003 0301 	and.w	r3, r3, #1
2000922e:	2b01      	cmp	r3, #1
20009230:	d113      	bne.n	2000925a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20009232:	68fb      	ldr	r3, [r7, #12]
20009234:	681b      	ldr	r3, [r3, #0]
20009236:	68da      	ldr	r2, [r3, #12]
20009238:	68fb      	ldr	r3, [r7, #12]
2000923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000923c:	b292      	uxth	r2, r2
2000923e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20009240:	68fb      	ldr	r3, [r7, #12]
20009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009244:	1c9a      	adds	r2, r3, #2
20009246:	68fb      	ldr	r3, [r7, #12]
20009248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
2000924a:	68fb      	ldr	r3, [r7, #12]
2000924c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000924e:	b29b      	uxth	r3, r3
20009250:	3b01      	subs	r3, #1
20009252:	b29a      	uxth	r2, r3
20009254:	68fb      	ldr	r3, [r7, #12]
20009256:	87da      	strh	r2, [r3, #62]	; 0x3e
20009258:	e011      	b.n	2000927e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000925a:	f7f7 fb58 	bl	2000090e <HAL_GetTick>
2000925e:	4602      	mov	r2, r0
20009260:	693b      	ldr	r3, [r7, #16]
20009262:	1ad3      	subs	r3, r2, r3
20009264:	683a      	ldr	r2, [r7, #0]
20009266:	429a      	cmp	r2, r3
20009268:	d803      	bhi.n	20009272 <HAL_SPI_Receive+0x1cc>
2000926a:	683b      	ldr	r3, [r7, #0]
2000926c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20009270:	d102      	bne.n	20009278 <HAL_SPI_Receive+0x1d2>
20009272:	683b      	ldr	r3, [r7, #0]
20009274:	2b00      	cmp	r3, #0
20009276:	d102      	bne.n	2000927e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
20009278:	2303      	movs	r3, #3
2000927a:	75fb      	strb	r3, [r7, #23]
          goto error;
2000927c:	e017      	b.n	200092ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
2000927e:	68fb      	ldr	r3, [r7, #12]
20009280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009282:	b29b      	uxth	r3, r3
20009284:	2b00      	cmp	r3, #0
20009286:	d1cd      	bne.n	20009224 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20009288:	693a      	ldr	r2, [r7, #16]
2000928a:	6839      	ldr	r1, [r7, #0]
2000928c:	68f8      	ldr	r0, [r7, #12]
2000928e:	f001 fdbb 	bl	2000ae08 <SPI_EndRxTransaction>
20009292:	4603      	mov	r3, r0
20009294:	2b00      	cmp	r3, #0
20009296:	d002      	beq.n	2000929e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20009298:	68fb      	ldr	r3, [r7, #12]
2000929a:	2220      	movs	r2, #32
2000929c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000929e:	68fb      	ldr	r3, [r7, #12]
200092a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200092a2:	2b00      	cmp	r3, #0
200092a4:	d002      	beq.n	200092ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
200092a6:	2301      	movs	r3, #1
200092a8:	75fb      	strb	r3, [r7, #23]
200092aa:	e000      	b.n	200092ae <HAL_SPI_Receive+0x208>
  }

error :
200092ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200092ae:	68fb      	ldr	r3, [r7, #12]
200092b0:	2201      	movs	r2, #1
200092b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200092b6:	68fb      	ldr	r3, [r7, #12]
200092b8:	2200      	movs	r2, #0
200092ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200092be:	7dfb      	ldrb	r3, [r7, #23]
}
200092c0:	4618      	mov	r0, r3
200092c2:	3718      	adds	r7, #24
200092c4:	46bd      	mov	sp, r7
200092c6:	bd80      	pop	{r7, pc}

200092c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
200092c8:	b580      	push	{r7, lr}
200092ca:	b08c      	sub	sp, #48	; 0x30
200092cc:	af00      	add	r7, sp, #0
200092ce:	60f8      	str	r0, [r7, #12]
200092d0:	60b9      	str	r1, [r7, #8]
200092d2:	607a      	str	r2, [r7, #4]
200092d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
200092d6:	2301      	movs	r3, #1
200092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
200092da:	2300      	movs	r3, #0
200092dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200092e0:	68fb      	ldr	r3, [r7, #12]
200092e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200092e6:	2b01      	cmp	r3, #1
200092e8:	d101      	bne.n	200092ee <HAL_SPI_TransmitReceive+0x26>
200092ea:	2302      	movs	r3, #2
200092ec:	e18a      	b.n	20009604 <HAL_SPI_TransmitReceive+0x33c>
200092ee:	68fb      	ldr	r3, [r7, #12]
200092f0:	2201      	movs	r2, #1
200092f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200092f6:	f7f7 fb0a 	bl	2000090e <HAL_GetTick>
200092fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
200092fc:	68fb      	ldr	r3, [r7, #12]
200092fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
20009306:	68fb      	ldr	r3, [r7, #12]
20009308:	685b      	ldr	r3, [r3, #4]
2000930a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
2000930c:	887b      	ldrh	r3, [r7, #2]
2000930e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20009310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20009314:	2b01      	cmp	r3, #1
20009316:	d00f      	beq.n	20009338 <HAL_SPI_TransmitReceive+0x70>
20009318:	69fb      	ldr	r3, [r7, #28]
2000931a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000931e:	d107      	bne.n	20009330 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20009320:	68fb      	ldr	r3, [r7, #12]
20009322:	689b      	ldr	r3, [r3, #8]
20009324:	2b00      	cmp	r3, #0
20009326:	d103      	bne.n	20009330 <HAL_SPI_TransmitReceive+0x68>
20009328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
2000932c:	2b04      	cmp	r3, #4
2000932e:	d003      	beq.n	20009338 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
20009330:	2302      	movs	r3, #2
20009332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20009336:	e15b      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20009338:	68bb      	ldr	r3, [r7, #8]
2000933a:	2b00      	cmp	r3, #0
2000933c:	d005      	beq.n	2000934a <HAL_SPI_TransmitReceive+0x82>
2000933e:	687b      	ldr	r3, [r7, #4]
20009340:	2b00      	cmp	r3, #0
20009342:	d002      	beq.n	2000934a <HAL_SPI_TransmitReceive+0x82>
20009344:	887b      	ldrh	r3, [r7, #2]
20009346:	2b00      	cmp	r3, #0
20009348:	d103      	bne.n	20009352 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
2000934a:	2301      	movs	r3, #1
2000934c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20009350:	e14e      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20009352:	68fb      	ldr	r3, [r7, #12]
20009354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009358:	b2db      	uxtb	r3, r3
2000935a:	2b04      	cmp	r3, #4
2000935c:	d003      	beq.n	20009366 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
2000935e:	68fb      	ldr	r3, [r7, #12]
20009360:	2205      	movs	r2, #5
20009362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20009366:	68fb      	ldr	r3, [r7, #12]
20009368:	2200      	movs	r2, #0
2000936a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2000936c:	68fb      	ldr	r3, [r7, #12]
2000936e:	687a      	ldr	r2, [r7, #4]
20009370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20009372:	68fb      	ldr	r3, [r7, #12]
20009374:	887a      	ldrh	r2, [r7, #2]
20009376:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
20009378:	68fb      	ldr	r3, [r7, #12]
2000937a:	887a      	ldrh	r2, [r7, #2]
2000937c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
2000937e:	68fb      	ldr	r3, [r7, #12]
20009380:	68ba      	ldr	r2, [r7, #8]
20009382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20009384:	68fb      	ldr	r3, [r7, #12]
20009386:	887a      	ldrh	r2, [r7, #2]
20009388:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
2000938a:	68fb      	ldr	r3, [r7, #12]
2000938c:	887a      	ldrh	r2, [r7, #2]
2000938e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20009390:	68fb      	ldr	r3, [r7, #12]
20009392:	2200      	movs	r2, #0
20009394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20009396:	68fb      	ldr	r3, [r7, #12]
20009398:	2200      	movs	r2, #0
2000939a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000939c:	68fb      	ldr	r3, [r7, #12]
2000939e:	681b      	ldr	r3, [r3, #0]
200093a0:	681b      	ldr	r3, [r3, #0]
200093a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
200093a6:	2b40      	cmp	r3, #64	; 0x40
200093a8:	d007      	beq.n	200093ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200093aa:	68fb      	ldr	r3, [r7, #12]
200093ac:	681b      	ldr	r3, [r3, #0]
200093ae:	681a      	ldr	r2, [r3, #0]
200093b0:	68fb      	ldr	r3, [r7, #12]
200093b2:	681b      	ldr	r3, [r3, #0]
200093b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200093b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
200093ba:	68fb      	ldr	r3, [r7, #12]
200093bc:	68db      	ldr	r3, [r3, #12]
200093be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200093c2:	d178      	bne.n	200094b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200093c4:	68fb      	ldr	r3, [r7, #12]
200093c6:	685b      	ldr	r3, [r3, #4]
200093c8:	2b00      	cmp	r3, #0
200093ca:	d002      	beq.n	200093d2 <HAL_SPI_TransmitReceive+0x10a>
200093cc:	8b7b      	ldrh	r3, [r7, #26]
200093ce:	2b01      	cmp	r3, #1
200093d0:	d166      	bne.n	200094a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200093d2:	68fb      	ldr	r3, [r7, #12]
200093d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200093d6:	881a      	ldrh	r2, [r3, #0]
200093d8:	68fb      	ldr	r3, [r7, #12]
200093da:	681b      	ldr	r3, [r3, #0]
200093dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200093de:	68fb      	ldr	r3, [r7, #12]
200093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200093e2:	1c9a      	adds	r2, r3, #2
200093e4:	68fb      	ldr	r3, [r7, #12]
200093e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200093e8:	68fb      	ldr	r3, [r7, #12]
200093ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200093ec:	b29b      	uxth	r3, r3
200093ee:	3b01      	subs	r3, #1
200093f0:	b29a      	uxth	r2, r3
200093f2:	68fb      	ldr	r3, [r7, #12]
200093f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200093f6:	e053      	b.n	200094a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200093f8:	68fb      	ldr	r3, [r7, #12]
200093fa:	681b      	ldr	r3, [r3, #0]
200093fc:	689b      	ldr	r3, [r3, #8]
200093fe:	f003 0302 	and.w	r3, r3, #2
20009402:	2b02      	cmp	r3, #2
20009404:	d11b      	bne.n	2000943e <HAL_SPI_TransmitReceive+0x176>
20009406:	68fb      	ldr	r3, [r7, #12]
20009408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000940a:	b29b      	uxth	r3, r3
2000940c:	2b00      	cmp	r3, #0
2000940e:	d016      	beq.n	2000943e <HAL_SPI_TransmitReceive+0x176>
20009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20009412:	2b01      	cmp	r3, #1
20009414:	d113      	bne.n	2000943e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20009416:	68fb      	ldr	r3, [r7, #12]
20009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000941a:	881a      	ldrh	r2, [r3, #0]
2000941c:	68fb      	ldr	r3, [r7, #12]
2000941e:	681b      	ldr	r3, [r3, #0]
20009420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20009422:	68fb      	ldr	r3, [r7, #12]
20009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009426:	1c9a      	adds	r2, r3, #2
20009428:	68fb      	ldr	r3, [r7, #12]
2000942a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000942c:	68fb      	ldr	r3, [r7, #12]
2000942e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009430:	b29b      	uxth	r3, r3
20009432:	3b01      	subs	r3, #1
20009434:	b29a      	uxth	r2, r3
20009436:	68fb      	ldr	r3, [r7, #12]
20009438:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
2000943a:	2300      	movs	r3, #0
2000943c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
2000943e:	68fb      	ldr	r3, [r7, #12]
20009440:	681b      	ldr	r3, [r3, #0]
20009442:	689b      	ldr	r3, [r3, #8]
20009444:	f003 0301 	and.w	r3, r3, #1
20009448:	2b01      	cmp	r3, #1
2000944a:	d119      	bne.n	20009480 <HAL_SPI_TransmitReceive+0x1b8>
2000944c:	68fb      	ldr	r3, [r7, #12]
2000944e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009450:	b29b      	uxth	r3, r3
20009452:	2b00      	cmp	r3, #0
20009454:	d014      	beq.n	20009480 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20009456:	68fb      	ldr	r3, [r7, #12]
20009458:	681b      	ldr	r3, [r3, #0]
2000945a:	68da      	ldr	r2, [r3, #12]
2000945c:	68fb      	ldr	r3, [r7, #12]
2000945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009460:	b292      	uxth	r2, r2
20009462:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20009464:	68fb      	ldr	r3, [r7, #12]
20009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009468:	1c9a      	adds	r2, r3, #2
2000946a:	68fb      	ldr	r3, [r7, #12]
2000946c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
2000946e:	68fb      	ldr	r3, [r7, #12]
20009470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009472:	b29b      	uxth	r3, r3
20009474:	3b01      	subs	r3, #1
20009476:	b29a      	uxth	r2, r3
20009478:	68fb      	ldr	r3, [r7, #12]
2000947a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
2000947c:	2301      	movs	r3, #1
2000947e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20009480:	f7f7 fa45 	bl	2000090e <HAL_GetTick>
20009484:	4602      	mov	r2, r0
20009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20009488:	1ad3      	subs	r3, r2, r3
2000948a:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000948c:	429a      	cmp	r2, r3
2000948e:	d807      	bhi.n	200094a0 <HAL_SPI_TransmitReceive+0x1d8>
20009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20009492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20009496:	d003      	beq.n	200094a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
20009498:	2303      	movs	r3, #3
2000949a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
2000949e:	e0a7      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200094a0:	68fb      	ldr	r3, [r7, #12]
200094a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200094a4:	b29b      	uxth	r3, r3
200094a6:	2b00      	cmp	r3, #0
200094a8:	d1a6      	bne.n	200093f8 <HAL_SPI_TransmitReceive+0x130>
200094aa:	68fb      	ldr	r3, [r7, #12]
200094ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200094ae:	b29b      	uxth	r3, r3
200094b0:	2b00      	cmp	r3, #0
200094b2:	d1a1      	bne.n	200093f8 <HAL_SPI_TransmitReceive+0x130>
200094b4:	e07c      	b.n	200095b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200094b6:	68fb      	ldr	r3, [r7, #12]
200094b8:	685b      	ldr	r3, [r3, #4]
200094ba:	2b00      	cmp	r3, #0
200094bc:	d002      	beq.n	200094c4 <HAL_SPI_TransmitReceive+0x1fc>
200094be:	8b7b      	ldrh	r3, [r7, #26]
200094c0:	2b01      	cmp	r3, #1
200094c2:	d16b      	bne.n	2000959c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200094c4:	68fb      	ldr	r3, [r7, #12]
200094c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200094c8:	68fb      	ldr	r3, [r7, #12]
200094ca:	681b      	ldr	r3, [r3, #0]
200094cc:	330c      	adds	r3, #12
200094ce:	7812      	ldrb	r2, [r2, #0]
200094d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200094d2:	68fb      	ldr	r3, [r7, #12]
200094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200094d6:	1c5a      	adds	r2, r3, #1
200094d8:	68fb      	ldr	r3, [r7, #12]
200094da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200094dc:	68fb      	ldr	r3, [r7, #12]
200094de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200094e0:	b29b      	uxth	r3, r3
200094e2:	3b01      	subs	r3, #1
200094e4:	b29a      	uxth	r2, r3
200094e6:	68fb      	ldr	r3, [r7, #12]
200094e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200094ea:	e057      	b.n	2000959c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200094ec:	68fb      	ldr	r3, [r7, #12]
200094ee:	681b      	ldr	r3, [r3, #0]
200094f0:	689b      	ldr	r3, [r3, #8]
200094f2:	f003 0302 	and.w	r3, r3, #2
200094f6:	2b02      	cmp	r3, #2
200094f8:	d11c      	bne.n	20009534 <HAL_SPI_TransmitReceive+0x26c>
200094fa:	68fb      	ldr	r3, [r7, #12]
200094fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200094fe:	b29b      	uxth	r3, r3
20009500:	2b00      	cmp	r3, #0
20009502:	d017      	beq.n	20009534 <HAL_SPI_TransmitReceive+0x26c>
20009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20009506:	2b01      	cmp	r3, #1
20009508:	d114      	bne.n	20009534 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2000950a:	68fb      	ldr	r3, [r7, #12]
2000950c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000950e:	68fb      	ldr	r3, [r7, #12]
20009510:	681b      	ldr	r3, [r3, #0]
20009512:	330c      	adds	r3, #12
20009514:	7812      	ldrb	r2, [r2, #0]
20009516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
20009518:	68fb      	ldr	r3, [r7, #12]
2000951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000951c:	1c5a      	adds	r2, r3, #1
2000951e:	68fb      	ldr	r3, [r7, #12]
20009520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20009522:	68fb      	ldr	r3, [r7, #12]
20009524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009526:	b29b      	uxth	r3, r3
20009528:	3b01      	subs	r3, #1
2000952a:	b29a      	uxth	r2, r3
2000952c:	68fb      	ldr	r3, [r7, #12]
2000952e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20009530:	2300      	movs	r3, #0
20009532:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20009534:	68fb      	ldr	r3, [r7, #12]
20009536:	681b      	ldr	r3, [r3, #0]
20009538:	689b      	ldr	r3, [r3, #8]
2000953a:	f003 0301 	and.w	r3, r3, #1
2000953e:	2b01      	cmp	r3, #1
20009540:	d119      	bne.n	20009576 <HAL_SPI_TransmitReceive+0x2ae>
20009542:	68fb      	ldr	r3, [r7, #12]
20009544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009546:	b29b      	uxth	r3, r3
20009548:	2b00      	cmp	r3, #0
2000954a:	d014      	beq.n	20009576 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
2000954c:	68fb      	ldr	r3, [r7, #12]
2000954e:	681b      	ldr	r3, [r3, #0]
20009550:	68da      	ldr	r2, [r3, #12]
20009552:	68fb      	ldr	r3, [r7, #12]
20009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009556:	b2d2      	uxtb	r2, r2
20009558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
2000955a:	68fb      	ldr	r3, [r7, #12]
2000955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000955e:	1c5a      	adds	r2, r3, #1
20009560:	68fb      	ldr	r3, [r7, #12]
20009562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20009564:	68fb      	ldr	r3, [r7, #12]
20009566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009568:	b29b      	uxth	r3, r3
2000956a:	3b01      	subs	r3, #1
2000956c:	b29a      	uxth	r2, r3
2000956e:	68fb      	ldr	r3, [r7, #12]
20009570:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20009572:	2301      	movs	r3, #1
20009574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20009576:	f7f7 f9ca 	bl	2000090e <HAL_GetTick>
2000957a:	4602      	mov	r2, r0
2000957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000957e:	1ad3      	subs	r3, r2, r3
20009580:	6bba      	ldr	r2, [r7, #56]	; 0x38
20009582:	429a      	cmp	r2, r3
20009584:	d803      	bhi.n	2000958e <HAL_SPI_TransmitReceive+0x2c6>
20009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20009588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000958c:	d102      	bne.n	20009594 <HAL_SPI_TransmitReceive+0x2cc>
2000958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20009590:	2b00      	cmp	r3, #0
20009592:	d103      	bne.n	2000959c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
20009594:	2303      	movs	r3, #3
20009596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
2000959a:	e029      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000959c:	68fb      	ldr	r3, [r7, #12]
2000959e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200095a0:	b29b      	uxth	r3, r3
200095a2:	2b00      	cmp	r3, #0
200095a4:	d1a2      	bne.n	200094ec <HAL_SPI_TransmitReceive+0x224>
200095a6:	68fb      	ldr	r3, [r7, #12]
200095a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200095aa:	b29b      	uxth	r3, r3
200095ac:	2b00      	cmp	r3, #0
200095ae:	d19d      	bne.n	200094ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
200095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200095b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
200095b4:	68f8      	ldr	r0, [r7, #12]
200095b6:	f001 fc8d 	bl	2000aed4 <SPI_EndRxTxTransaction>
200095ba:	4603      	mov	r3, r0
200095bc:	2b00      	cmp	r3, #0
200095be:	d006      	beq.n	200095ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
200095c0:	2301      	movs	r3, #1
200095c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
200095c6:	68fb      	ldr	r3, [r7, #12]
200095c8:	2220      	movs	r2, #32
200095ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
200095cc:	e010      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200095ce:	68fb      	ldr	r3, [r7, #12]
200095d0:	689b      	ldr	r3, [r3, #8]
200095d2:	2b00      	cmp	r3, #0
200095d4:	d10b      	bne.n	200095ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200095d6:	2300      	movs	r3, #0
200095d8:	617b      	str	r3, [r7, #20]
200095da:	68fb      	ldr	r3, [r7, #12]
200095dc:	681b      	ldr	r3, [r3, #0]
200095de:	68db      	ldr	r3, [r3, #12]
200095e0:	617b      	str	r3, [r7, #20]
200095e2:	68fb      	ldr	r3, [r7, #12]
200095e4:	681b      	ldr	r3, [r3, #0]
200095e6:	689b      	ldr	r3, [r3, #8]
200095e8:	617b      	str	r3, [r7, #20]
200095ea:	697b      	ldr	r3, [r7, #20]
200095ec:	e000      	b.n	200095f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
200095ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200095f0:	68fb      	ldr	r3, [r7, #12]
200095f2:	2201      	movs	r2, #1
200095f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200095f8:	68fb      	ldr	r3, [r7, #12]
200095fa:	2200      	movs	r2, #0
200095fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
20009604:	4618      	mov	r0, r3
20009606:	3730      	adds	r7, #48	; 0x30
20009608:	46bd      	mov	sp, r7
2000960a:	bd80      	pop	{r7, pc}

2000960c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
2000960c:	b480      	push	{r7}
2000960e:	b087      	sub	sp, #28
20009610:	af00      	add	r7, sp, #0
20009612:	60f8      	str	r0, [r7, #12]
20009614:	60b9      	str	r1, [r7, #8]
20009616:	4613      	mov	r3, r2
20009618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
2000961a:	2300      	movs	r3, #0
2000961c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
2000961e:	68fb      	ldr	r3, [r7, #12]
20009620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20009624:	2b01      	cmp	r3, #1
20009626:	d101      	bne.n	2000962c <HAL_SPI_Transmit_IT+0x20>
20009628:	2302      	movs	r3, #2
2000962a:	e06f      	b.n	2000970c <HAL_SPI_Transmit_IT+0x100>
2000962c:	68fb      	ldr	r3, [r7, #12]
2000962e:	2201      	movs	r2, #1
20009630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
20009634:	68bb      	ldr	r3, [r7, #8]
20009636:	2b00      	cmp	r3, #0
20009638:	d002      	beq.n	20009640 <HAL_SPI_Transmit_IT+0x34>
2000963a:	88fb      	ldrh	r3, [r7, #6]
2000963c:	2b00      	cmp	r3, #0
2000963e:	d102      	bne.n	20009646 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
20009640:	2301      	movs	r3, #1
20009642:	75fb      	strb	r3, [r7, #23]
    goto error;
20009644:	e05d      	b.n	20009702 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
20009646:	68fb      	ldr	r3, [r7, #12]
20009648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000964c:	b2db      	uxtb	r3, r3
2000964e:	2b01      	cmp	r3, #1
20009650:	d002      	beq.n	20009658 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
20009652:	2302      	movs	r3, #2
20009654:	75fb      	strb	r3, [r7, #23]
    goto error;
20009656:	e054      	b.n	20009702 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20009658:	68fb      	ldr	r3, [r7, #12]
2000965a:	2203      	movs	r2, #3
2000965c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20009660:	68fb      	ldr	r3, [r7, #12]
20009662:	2200      	movs	r2, #0
20009664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20009666:	68fb      	ldr	r3, [r7, #12]
20009668:	68ba      	ldr	r2, [r7, #8]
2000966a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
2000966c:	68fb      	ldr	r3, [r7, #12]
2000966e:	88fa      	ldrh	r2, [r7, #6]
20009670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20009672:	68fb      	ldr	r3, [r7, #12]
20009674:	88fa      	ldrh	r2, [r7, #6]
20009676:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20009678:	68fb      	ldr	r3, [r7, #12]
2000967a:	2200      	movs	r2, #0
2000967c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
2000967e:	68fb      	ldr	r3, [r7, #12]
20009680:	2200      	movs	r2, #0
20009682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20009684:	68fb      	ldr	r3, [r7, #12]
20009686:	2200      	movs	r2, #0
20009688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
2000968a:	68fb      	ldr	r3, [r7, #12]
2000968c:	2200      	movs	r2, #0
2000968e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20009690:	68fb      	ldr	r3, [r7, #12]
20009692:	68db      	ldr	r3, [r3, #12]
20009694:	2b00      	cmp	r3, #0
20009696:	d003      	beq.n	200096a0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
20009698:	68fb      	ldr	r3, [r7, #12]
2000969a:	4a1f      	ldr	r2, [pc, #124]	; (20009718 <HAL_SPI_Transmit_IT+0x10c>)
2000969c:	645a      	str	r2, [r3, #68]	; 0x44
2000969e:	e002      	b.n	200096a6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
200096a0:	68fb      	ldr	r3, [r7, #12]
200096a2:	4a1e      	ldr	r2, [pc, #120]	; (2000971c <HAL_SPI_Transmit_IT+0x110>)
200096a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200096a6:	68fb      	ldr	r3, [r7, #12]
200096a8:	689b      	ldr	r3, [r3, #8]
200096aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200096ae:	d10f      	bne.n	200096d0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200096b0:	68fb      	ldr	r3, [r7, #12]
200096b2:	681b      	ldr	r3, [r3, #0]
200096b4:	681a      	ldr	r2, [r3, #0]
200096b6:	68fb      	ldr	r3, [r7, #12]
200096b8:	681b      	ldr	r3, [r3, #0]
200096ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200096be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
200096c0:	68fb      	ldr	r3, [r7, #12]
200096c2:	681b      	ldr	r3, [r3, #0]
200096c4:	681a      	ldr	r2, [r3, #0]
200096c6:	68fb      	ldr	r3, [r7, #12]
200096c8:	681b      	ldr	r3, [r3, #0]
200096ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200096ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
200096d0:	68fb      	ldr	r3, [r7, #12]
200096d2:	681b      	ldr	r3, [r3, #0]
200096d4:	685a      	ldr	r2, [r3, #4]
200096d6:	68fb      	ldr	r3, [r7, #12]
200096d8:	681b      	ldr	r3, [r3, #0]
200096da:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
200096de:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200096e0:	68fb      	ldr	r3, [r7, #12]
200096e2:	681b      	ldr	r3, [r3, #0]
200096e4:	681b      	ldr	r3, [r3, #0]
200096e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
200096ea:	2b40      	cmp	r3, #64	; 0x40
200096ec:	d008      	beq.n	20009700 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200096ee:	68fb      	ldr	r3, [r7, #12]
200096f0:	681b      	ldr	r3, [r3, #0]
200096f2:	681a      	ldr	r2, [r3, #0]
200096f4:	68fb      	ldr	r3, [r7, #12]
200096f6:	681b      	ldr	r3, [r3, #0]
200096f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200096fc:	601a      	str	r2, [r3, #0]
200096fe:	e000      	b.n	20009702 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
20009700:	bf00      	nop
  __HAL_UNLOCK(hspi);
20009702:	68fb      	ldr	r3, [r7, #12]
20009704:	2200      	movs	r2, #0
20009706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000970a:	7dfb      	ldrb	r3, [r7, #23]
}
2000970c:	4618      	mov	r0, r3
2000970e:	371c      	adds	r7, #28
20009710:	46bd      	mov	sp, r7
20009712:	f85d 7b04 	ldr.w	r7, [sp], #4
20009716:	4770      	bx	lr
20009718:	2000acb5 	.word	0x2000acb5
2000971c:	2000ac6f 	.word	0x2000ac6f

20009720 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20009720:	b580      	push	{r7, lr}
20009722:	b086      	sub	sp, #24
20009724:	af00      	add	r7, sp, #0
20009726:	60f8      	str	r0, [r7, #12]
20009728:	60b9      	str	r1, [r7, #8]
2000972a:	4613      	mov	r3, r2
2000972c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
2000972e:	2300      	movs	r3, #0
20009730:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20009732:	68fb      	ldr	r3, [r7, #12]
20009734:	689b      	ldr	r3, [r3, #8]
20009736:	2b00      	cmp	r3, #0
20009738:	d110      	bne.n	2000975c <HAL_SPI_Receive_IT+0x3c>
2000973a:	68fb      	ldr	r3, [r7, #12]
2000973c:	685b      	ldr	r3, [r3, #4]
2000973e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009742:	d10b      	bne.n	2000975c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20009744:	68fb      	ldr	r3, [r7, #12]
20009746:	2204      	movs	r2, #4
20009748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
2000974c:	88fb      	ldrh	r3, [r7, #6]
2000974e:	68ba      	ldr	r2, [r7, #8]
20009750:	68b9      	ldr	r1, [r7, #8]
20009752:	68f8      	ldr	r0, [r7, #12]
20009754:	f000 f882 	bl	2000985c <HAL_SPI_TransmitReceive_IT>
20009758:	4603      	mov	r3, r0
2000975a:	e076      	b.n	2000984a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
2000975c:	68fb      	ldr	r3, [r7, #12]
2000975e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20009762:	2b01      	cmp	r3, #1
20009764:	d101      	bne.n	2000976a <HAL_SPI_Receive_IT+0x4a>
20009766:	2302      	movs	r3, #2
20009768:	e06f      	b.n	2000984a <HAL_SPI_Receive_IT+0x12a>
2000976a:	68fb      	ldr	r3, [r7, #12]
2000976c:	2201      	movs	r2, #1
2000976e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20009772:	68fb      	ldr	r3, [r7, #12]
20009774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009778:	b2db      	uxtb	r3, r3
2000977a:	2b01      	cmp	r3, #1
2000977c:	d002      	beq.n	20009784 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
2000977e:	2302      	movs	r3, #2
20009780:	75fb      	strb	r3, [r7, #23]
    goto error;
20009782:	e05d      	b.n	20009840 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
20009784:	68bb      	ldr	r3, [r7, #8]
20009786:	2b00      	cmp	r3, #0
20009788:	d002      	beq.n	20009790 <HAL_SPI_Receive_IT+0x70>
2000978a:	88fb      	ldrh	r3, [r7, #6]
2000978c:	2b00      	cmp	r3, #0
2000978e:	d102      	bne.n	20009796 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
20009790:	2301      	movs	r3, #1
20009792:	75fb      	strb	r3, [r7, #23]
    goto error;
20009794:	e054      	b.n	20009840 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20009796:	68fb      	ldr	r3, [r7, #12]
20009798:	2204      	movs	r2, #4
2000979a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000979e:	68fb      	ldr	r3, [r7, #12]
200097a0:	2200      	movs	r2, #0
200097a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200097a4:	68fb      	ldr	r3, [r7, #12]
200097a6:	68ba      	ldr	r2, [r7, #8]
200097a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200097aa:	68fb      	ldr	r3, [r7, #12]
200097ac:	88fa      	ldrh	r2, [r7, #6]
200097ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
200097b0:	68fb      	ldr	r3, [r7, #12]
200097b2:	88fa      	ldrh	r2, [r7, #6]
200097b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
200097b6:	68fb      	ldr	r3, [r7, #12]
200097b8:	2200      	movs	r2, #0
200097ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
200097bc:	68fb      	ldr	r3, [r7, #12]
200097be:	2200      	movs	r2, #0
200097c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
200097c2:	68fb      	ldr	r3, [r7, #12]
200097c4:	2200      	movs	r2, #0
200097c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
200097c8:	68fb      	ldr	r3, [r7, #12]
200097ca:	2200      	movs	r2, #0
200097cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200097ce:	68fb      	ldr	r3, [r7, #12]
200097d0:	68db      	ldr	r3, [r3, #12]
200097d2:	2b00      	cmp	r3, #0
200097d4:	d003      	beq.n	200097de <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
200097d6:	68fb      	ldr	r3, [r7, #12]
200097d8:	4a1e      	ldr	r2, [pc, #120]	; (20009854 <HAL_SPI_Receive_IT+0x134>)
200097da:	641a      	str	r2, [r3, #64]	; 0x40
200097dc:	e002      	b.n	200097e4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
200097de:	68fb      	ldr	r3, [r7, #12]
200097e0:	4a1d      	ldr	r2, [pc, #116]	; (20009858 <HAL_SPI_Receive_IT+0x138>)
200097e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200097e4:	68fb      	ldr	r3, [r7, #12]
200097e6:	689b      	ldr	r3, [r3, #8]
200097e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200097ec:	d10f      	bne.n	2000980e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200097ee:	68fb      	ldr	r3, [r7, #12]
200097f0:	681b      	ldr	r3, [r3, #0]
200097f2:	681a      	ldr	r2, [r3, #0]
200097f4:	68fb      	ldr	r3, [r7, #12]
200097f6:	681b      	ldr	r3, [r3, #0]
200097f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200097fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
200097fe:	68fb      	ldr	r3, [r7, #12]
20009800:	681b      	ldr	r3, [r3, #0]
20009802:	681a      	ldr	r2, [r3, #0]
20009804:	68fb      	ldr	r3, [r7, #12]
20009806:	681b      	ldr	r3, [r3, #0]
20009808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000980c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
2000980e:	68fb      	ldr	r3, [r7, #12]
20009810:	681b      	ldr	r3, [r3, #0]
20009812:	685a      	ldr	r2, [r3, #4]
20009814:	68fb      	ldr	r3, [r7, #12]
20009816:	681b      	ldr	r3, [r3, #0]
20009818:	f042 0260 	orr.w	r2, r2, #96	; 0x60
2000981c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000981e:	68fb      	ldr	r3, [r7, #12]
20009820:	681b      	ldr	r3, [r3, #0]
20009822:	681b      	ldr	r3, [r3, #0]
20009824:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009828:	2b40      	cmp	r3, #64	; 0x40
2000982a:	d008      	beq.n	2000983e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000982c:	68fb      	ldr	r3, [r7, #12]
2000982e:	681b      	ldr	r3, [r3, #0]
20009830:	681a      	ldr	r2, [r3, #0]
20009832:	68fb      	ldr	r3, [r7, #12]
20009834:	681b      	ldr	r3, [r3, #0]
20009836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000983a:	601a      	str	r2, [r3, #0]
2000983c:	e000      	b.n	20009840 <HAL_SPI_Receive_IT+0x120>
  }

error :
2000983e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20009840:	68fb      	ldr	r3, [r7, #12]
20009842:	2200      	movs	r2, #0
20009844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009848:	7dfb      	ldrb	r3, [r7, #23]
}
2000984a:	4618      	mov	r0, r3
2000984c:	3718      	adds	r7, #24
2000984e:	46bd      	mov	sp, r7
20009850:	bd80      	pop	{r7, pc}
20009852:	bf00      	nop
20009854:	2000ac29 	.word	0x2000ac29
20009858:	2000abdf 	.word	0x2000abdf

2000985c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
2000985c:	b480      	push	{r7}
2000985e:	b087      	sub	sp, #28
20009860:	af00      	add	r7, sp, #0
20009862:	60f8      	str	r0, [r7, #12]
20009864:	60b9      	str	r1, [r7, #8]
20009866:	607a      	str	r2, [r7, #4]
20009868:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
2000986a:	2300      	movs	r3, #0
2000986c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
2000986e:	68fb      	ldr	r3, [r7, #12]
20009870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20009874:	2b01      	cmp	r3, #1
20009876:	d101      	bne.n	2000987c <HAL_SPI_TransmitReceive_IT+0x20>
20009878:	2302      	movs	r3, #2
2000987a:	e075      	b.n	20009968 <HAL_SPI_TransmitReceive_IT+0x10c>
2000987c:	68fb      	ldr	r3, [r7, #12]
2000987e:	2201      	movs	r2, #1
20009880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
20009884:	68fb      	ldr	r3, [r7, #12]
20009886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000988a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
2000988c:	68fb      	ldr	r3, [r7, #12]
2000988e:	685b      	ldr	r3, [r3, #4]
20009890:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20009892:	7dbb      	ldrb	r3, [r7, #22]
20009894:	2b01      	cmp	r3, #1
20009896:	d00d      	beq.n	200098b4 <HAL_SPI_TransmitReceive_IT+0x58>
20009898:	693b      	ldr	r3, [r7, #16]
2000989a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000989e:	d106      	bne.n	200098ae <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200098a0:	68fb      	ldr	r3, [r7, #12]
200098a2:	689b      	ldr	r3, [r3, #8]
200098a4:	2b00      	cmp	r3, #0
200098a6:	d102      	bne.n	200098ae <HAL_SPI_TransmitReceive_IT+0x52>
200098a8:	7dbb      	ldrb	r3, [r7, #22]
200098aa:	2b04      	cmp	r3, #4
200098ac:	d002      	beq.n	200098b4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
200098ae:	2302      	movs	r3, #2
200098b0:	75fb      	strb	r3, [r7, #23]
    goto error;
200098b2:	e054      	b.n	2000995e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200098b4:	68bb      	ldr	r3, [r7, #8]
200098b6:	2b00      	cmp	r3, #0
200098b8:	d005      	beq.n	200098c6 <HAL_SPI_TransmitReceive_IT+0x6a>
200098ba:	687b      	ldr	r3, [r7, #4]
200098bc:	2b00      	cmp	r3, #0
200098be:	d002      	beq.n	200098c6 <HAL_SPI_TransmitReceive_IT+0x6a>
200098c0:	887b      	ldrh	r3, [r7, #2]
200098c2:	2b00      	cmp	r3, #0
200098c4:	d102      	bne.n	200098cc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
200098c6:	2301      	movs	r3, #1
200098c8:	75fb      	strb	r3, [r7, #23]
    goto error;
200098ca:	e048      	b.n	2000995e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
200098cc:	68fb      	ldr	r3, [r7, #12]
200098ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200098d2:	b2db      	uxtb	r3, r3
200098d4:	2b04      	cmp	r3, #4
200098d6:	d003      	beq.n	200098e0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
200098d8:	68fb      	ldr	r3, [r7, #12]
200098da:	2205      	movs	r2, #5
200098dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200098e0:	68fb      	ldr	r3, [r7, #12]
200098e2:	2200      	movs	r2, #0
200098e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
200098e6:	68fb      	ldr	r3, [r7, #12]
200098e8:	68ba      	ldr	r2, [r7, #8]
200098ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200098ec:	68fb      	ldr	r3, [r7, #12]
200098ee:	887a      	ldrh	r2, [r7, #2]
200098f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200098f2:	68fb      	ldr	r3, [r7, #12]
200098f4:	887a      	ldrh	r2, [r7, #2]
200098f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
200098f8:	68fb      	ldr	r3, [r7, #12]
200098fa:	687a      	ldr	r2, [r7, #4]
200098fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200098fe:	68fb      	ldr	r3, [r7, #12]
20009900:	887a      	ldrh	r2, [r7, #2]
20009902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20009904:	68fb      	ldr	r3, [r7, #12]
20009906:	887a      	ldrh	r2, [r7, #2]
20009908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2000990a:	68fb      	ldr	r3, [r7, #12]
2000990c:	68db      	ldr	r3, [r3, #12]
2000990e:	2b00      	cmp	r3, #0
20009910:	d006      	beq.n	20009920 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
20009912:	68fb      	ldr	r3, [r7, #12]
20009914:	4a17      	ldr	r2, [pc, #92]	; (20009974 <HAL_SPI_TransmitReceive_IT+0x118>)
20009916:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
20009918:	68fb      	ldr	r3, [r7, #12]
2000991a:	4a17      	ldr	r2, [pc, #92]	; (20009978 <HAL_SPI_TransmitReceive_IT+0x11c>)
2000991c:	645a      	str	r2, [r3, #68]	; 0x44
2000991e:	e005      	b.n	2000992c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
20009920:	68fb      	ldr	r3, [r7, #12]
20009922:	4a16      	ldr	r2, [pc, #88]	; (2000997c <HAL_SPI_TransmitReceive_IT+0x120>)
20009924:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
20009926:	68fb      	ldr	r3, [r7, #12]
20009928:	4a15      	ldr	r2, [pc, #84]	; (20009980 <HAL_SPI_TransmitReceive_IT+0x124>)
2000992a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2000992c:	68fb      	ldr	r3, [r7, #12]
2000992e:	681b      	ldr	r3, [r3, #0]
20009930:	685a      	ldr	r2, [r3, #4]
20009932:	68fb      	ldr	r3, [r7, #12]
20009934:	681b      	ldr	r3, [r3, #0]
20009936:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
2000993a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000993c:	68fb      	ldr	r3, [r7, #12]
2000993e:	681b      	ldr	r3, [r3, #0]
20009940:	681b      	ldr	r3, [r3, #0]
20009942:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009946:	2b40      	cmp	r3, #64	; 0x40
20009948:	d008      	beq.n	2000995c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000994a:	68fb      	ldr	r3, [r7, #12]
2000994c:	681b      	ldr	r3, [r3, #0]
2000994e:	681a      	ldr	r2, [r3, #0]
20009950:	68fb      	ldr	r3, [r7, #12]
20009952:	681b      	ldr	r3, [r3, #0]
20009954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20009958:	601a      	str	r2, [r3, #0]
2000995a:	e000      	b.n	2000995e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
2000995c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000995e:	68fb      	ldr	r3, [r7, #12]
20009960:	2200      	movs	r2, #0
20009962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009966:	7dfb      	ldrb	r3, [r7, #23]
}
20009968:	4618      	mov	r0, r3
2000996a:	371c      	adds	r7, #28
2000996c:	46bd      	mov	sp, r7
2000996e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009972:	4770      	bx	lr
20009974:	2000ab21 	.word	0x2000ab21
20009978:	2000ab81 	.word	0x2000ab81
2000997c:	2000aa5d 	.word	0x2000aa5d
20009980:	2000aac1 	.word	0x2000aac1

20009984 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20009984:	b580      	push	{r7, lr}
20009986:	b086      	sub	sp, #24
20009988:	af00      	add	r7, sp, #0
2000998a:	60f8      	str	r0, [r7, #12]
2000998c:	60b9      	str	r1, [r7, #8]
2000998e:	4613      	mov	r3, r2
20009990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20009992:	2300      	movs	r3, #0
20009994:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20009996:	68fb      	ldr	r3, [r7, #12]
20009998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2000999c:	2b01      	cmp	r3, #1
2000999e:	d101      	bne.n	200099a4 <HAL_SPI_Transmit_DMA+0x20>
200099a0:	2302      	movs	r3, #2
200099a2:	e09b      	b.n	20009adc <HAL_SPI_Transmit_DMA+0x158>
200099a4:	68fb      	ldr	r3, [r7, #12]
200099a6:	2201      	movs	r2, #1
200099a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
200099ac:	68fb      	ldr	r3, [r7, #12]
200099ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200099b2:	b2db      	uxtb	r3, r3
200099b4:	2b01      	cmp	r3, #1
200099b6:	d002      	beq.n	200099be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
200099b8:	2302      	movs	r3, #2
200099ba:	75fb      	strb	r3, [r7, #23]
    goto error;
200099bc:	e089      	b.n	20009ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
200099be:	68bb      	ldr	r3, [r7, #8]
200099c0:	2b00      	cmp	r3, #0
200099c2:	d002      	beq.n	200099ca <HAL_SPI_Transmit_DMA+0x46>
200099c4:	88fb      	ldrh	r3, [r7, #6]
200099c6:	2b00      	cmp	r3, #0
200099c8:	d102      	bne.n	200099d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
200099ca:	2301      	movs	r3, #1
200099cc:	75fb      	strb	r3, [r7, #23]
    goto error;
200099ce:	e080      	b.n	20009ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
200099d0:	68fb      	ldr	r3, [r7, #12]
200099d2:	2203      	movs	r2, #3
200099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200099d8:	68fb      	ldr	r3, [r7, #12]
200099da:	2200      	movs	r2, #0
200099dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
200099de:	68fb      	ldr	r3, [r7, #12]
200099e0:	68ba      	ldr	r2, [r7, #8]
200099e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200099e4:	68fb      	ldr	r3, [r7, #12]
200099e6:	88fa      	ldrh	r2, [r7, #6]
200099e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200099ea:	68fb      	ldr	r3, [r7, #12]
200099ec:	88fa      	ldrh	r2, [r7, #6]
200099ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200099f0:	68fb      	ldr	r3, [r7, #12]
200099f2:	2200      	movs	r2, #0
200099f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
200099f6:	68fb      	ldr	r3, [r7, #12]
200099f8:	2200      	movs	r2, #0
200099fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
200099fc:	68fb      	ldr	r3, [r7, #12]
200099fe:	2200      	movs	r2, #0
20009a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
20009a02:	68fb      	ldr	r3, [r7, #12]
20009a04:	2200      	movs	r2, #0
20009a06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20009a08:	68fb      	ldr	r3, [r7, #12]
20009a0a:	2200      	movs	r2, #0
20009a0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20009a0e:	68fb      	ldr	r3, [r7, #12]
20009a10:	689b      	ldr	r3, [r3, #8]
20009a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20009a16:	d10f      	bne.n	20009a38 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20009a18:	68fb      	ldr	r3, [r7, #12]
20009a1a:	681b      	ldr	r3, [r3, #0]
20009a1c:	681a      	ldr	r2, [r3, #0]
20009a1e:	68fb      	ldr	r3, [r7, #12]
20009a20:	681b      	ldr	r3, [r3, #0]
20009a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20009a28:	68fb      	ldr	r3, [r7, #12]
20009a2a:	681b      	ldr	r3, [r3, #0]
20009a2c:	681a      	ldr	r2, [r3, #0]
20009a2e:	68fb      	ldr	r3, [r7, #12]
20009a30:	681b      	ldr	r3, [r3, #0]
20009a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20009a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
20009a38:	68fb      	ldr	r3, [r7, #12]
20009a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009a3c:	4a29      	ldr	r2, [pc, #164]	; (20009ae4 <HAL_SPI_Transmit_DMA+0x160>)
20009a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
20009a40:	68fb      	ldr	r3, [r7, #12]
20009a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009a44:	4a28      	ldr	r2, [pc, #160]	; (20009ae8 <HAL_SPI_Transmit_DMA+0x164>)
20009a46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
20009a48:	68fb      	ldr	r3, [r7, #12]
20009a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009a4c:	4a27      	ldr	r2, [pc, #156]	; (20009aec <HAL_SPI_Transmit_DMA+0x168>)
20009a4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
20009a50:	68fb      	ldr	r3, [r7, #12]
20009a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009a54:	2200      	movs	r2, #0
20009a56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20009a58:	68fb      	ldr	r3, [r7, #12]
20009a5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
20009a5c:	68fb      	ldr	r3, [r7, #12]
20009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009a60:	4619      	mov	r1, r3
20009a62:	68fb      	ldr	r3, [r7, #12]
20009a64:	681b      	ldr	r3, [r3, #0]
20009a66:	330c      	adds	r3, #12
20009a68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
20009a6a:	68fb      	ldr	r3, [r7, #12]
20009a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009a6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20009a70:	f7f8 ff1d 	bl	200028ae <HAL_DMA_Start_IT>
20009a74:	4603      	mov	r3, r0
20009a76:	2b00      	cmp	r3, #0
20009a78:	d00c      	beq.n	20009a94 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20009a7a:	68fb      	ldr	r3, [r7, #12]
20009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009a7e:	f043 0210 	orr.w	r2, r3, #16
20009a82:	68fb      	ldr	r3, [r7, #12]
20009a84:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20009a86:	2301      	movs	r3, #1
20009a88:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20009a8a:	68fb      	ldr	r3, [r7, #12]
20009a8c:	2201      	movs	r2, #1
20009a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20009a92:	e01e      	b.n	20009ad2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20009a94:	68fb      	ldr	r3, [r7, #12]
20009a96:	681b      	ldr	r3, [r3, #0]
20009a98:	681b      	ldr	r3, [r3, #0]
20009a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009a9e:	2b40      	cmp	r3, #64	; 0x40
20009aa0:	d007      	beq.n	20009ab2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20009aa2:	68fb      	ldr	r3, [r7, #12]
20009aa4:	681b      	ldr	r3, [r3, #0]
20009aa6:	681a      	ldr	r2, [r3, #0]
20009aa8:	68fb      	ldr	r3, [r7, #12]
20009aaa:	681b      	ldr	r3, [r3, #0]
20009aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20009ab0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20009ab2:	68fb      	ldr	r3, [r7, #12]
20009ab4:	681b      	ldr	r3, [r3, #0]
20009ab6:	685a      	ldr	r2, [r3, #4]
20009ab8:	68fb      	ldr	r3, [r7, #12]
20009aba:	681b      	ldr	r3, [r3, #0]
20009abc:	f042 0220 	orr.w	r2, r2, #32
20009ac0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20009ac2:	68fb      	ldr	r3, [r7, #12]
20009ac4:	681b      	ldr	r3, [r3, #0]
20009ac6:	685a      	ldr	r2, [r3, #4]
20009ac8:	68fb      	ldr	r3, [r7, #12]
20009aca:	681b      	ldr	r3, [r3, #0]
20009acc:	f042 0202 	orr.w	r2, r2, #2
20009ad0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20009ad2:	68fb      	ldr	r3, [r7, #12]
20009ad4:	2200      	movs	r2, #0
20009ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009ada:	7dfb      	ldrb	r3, [r7, #23]
}
20009adc:	4618      	mov	r0, r3
20009ade:	3718      	adds	r7, #24
20009ae0:	46bd      	mov	sp, r7
20009ae2:	bd80      	pop	{r7, pc}
20009ae4:	2000a80d 	.word	0x2000a80d
20009ae8:	2000a62d 	.word	0x2000a62d
20009aec:	2000a861 	.word	0x2000a861

20009af0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20009af0:	b580      	push	{r7, lr}
20009af2:	b086      	sub	sp, #24
20009af4:	af00      	add	r7, sp, #0
20009af6:	60f8      	str	r0, [r7, #12]
20009af8:	60b9      	str	r1, [r7, #8]
20009afa:	4613      	mov	r3, r2
20009afc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20009afe:	2300      	movs	r3, #0
20009b00:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20009b02:	68fb      	ldr	r3, [r7, #12]
20009b04:	689b      	ldr	r3, [r3, #8]
20009b06:	2b00      	cmp	r3, #0
20009b08:	d110      	bne.n	20009b2c <HAL_SPI_Receive_DMA+0x3c>
20009b0a:	68fb      	ldr	r3, [r7, #12]
20009b0c:	685b      	ldr	r3, [r3, #4]
20009b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009b12:	d10b      	bne.n	20009b2c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20009b14:	68fb      	ldr	r3, [r7, #12]
20009b16:	2204      	movs	r2, #4
20009b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
20009b1c:	88fb      	ldrh	r3, [r7, #6]
20009b1e:	68ba      	ldr	r2, [r7, #8]
20009b20:	68b9      	ldr	r1, [r7, #8]
20009b22:	68f8      	ldr	r0, [r7, #12]
20009b24:	f000 f8ac 	bl	20009c80 <HAL_SPI_TransmitReceive_DMA>
20009b28:	4603      	mov	r3, r0
20009b2a:	e09f      	b.n	20009c6c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20009b2c:	68fb      	ldr	r3, [r7, #12]
20009b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20009b32:	2b01      	cmp	r3, #1
20009b34:	d101      	bne.n	20009b3a <HAL_SPI_Receive_DMA+0x4a>
20009b36:	2302      	movs	r3, #2
20009b38:	e098      	b.n	20009c6c <HAL_SPI_Receive_DMA+0x17c>
20009b3a:	68fb      	ldr	r3, [r7, #12]
20009b3c:	2201      	movs	r2, #1
20009b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20009b42:	68fb      	ldr	r3, [r7, #12]
20009b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009b48:	b2db      	uxtb	r3, r3
20009b4a:	2b01      	cmp	r3, #1
20009b4c:	d002      	beq.n	20009b54 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
20009b4e:	2302      	movs	r3, #2
20009b50:	75fb      	strb	r3, [r7, #23]
    goto error;
20009b52:	e086      	b.n	20009c62 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
20009b54:	68bb      	ldr	r3, [r7, #8]
20009b56:	2b00      	cmp	r3, #0
20009b58:	d002      	beq.n	20009b60 <HAL_SPI_Receive_DMA+0x70>
20009b5a:	88fb      	ldrh	r3, [r7, #6]
20009b5c:	2b00      	cmp	r3, #0
20009b5e:	d102      	bne.n	20009b66 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
20009b60:	2301      	movs	r3, #1
20009b62:	75fb      	strb	r3, [r7, #23]
    goto error;
20009b64:	e07d      	b.n	20009c62 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20009b66:	68fb      	ldr	r3, [r7, #12]
20009b68:	2204      	movs	r2, #4
20009b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20009b6e:	68fb      	ldr	r3, [r7, #12]
20009b70:	2200      	movs	r2, #0
20009b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20009b74:	68fb      	ldr	r3, [r7, #12]
20009b76:	68ba      	ldr	r2, [r7, #8]
20009b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20009b7a:	68fb      	ldr	r3, [r7, #12]
20009b7c:	88fa      	ldrh	r2, [r7, #6]
20009b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20009b80:	68fb      	ldr	r3, [r7, #12]
20009b82:	88fa      	ldrh	r2, [r7, #6]
20009b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20009b86:	68fb      	ldr	r3, [r7, #12]
20009b88:	2200      	movs	r2, #0
20009b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20009b8c:	68fb      	ldr	r3, [r7, #12]
20009b8e:	2200      	movs	r2, #0
20009b90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
20009b92:	68fb      	ldr	r3, [r7, #12]
20009b94:	2200      	movs	r2, #0
20009b96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20009b98:	68fb      	ldr	r3, [r7, #12]
20009b9a:	2200      	movs	r2, #0
20009b9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20009b9e:	68fb      	ldr	r3, [r7, #12]
20009ba0:	689b      	ldr	r3, [r3, #8]
20009ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20009ba6:	d10f      	bne.n	20009bc8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20009ba8:	68fb      	ldr	r3, [r7, #12]
20009baa:	681b      	ldr	r3, [r3, #0]
20009bac:	681a      	ldr	r2, [r3, #0]
20009bae:	68fb      	ldr	r3, [r7, #12]
20009bb0:	681b      	ldr	r3, [r3, #0]
20009bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009bb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20009bb8:	68fb      	ldr	r3, [r7, #12]
20009bba:	681b      	ldr	r3, [r3, #0]
20009bbc:	681a      	ldr	r2, [r3, #0]
20009bbe:	68fb      	ldr	r3, [r7, #12]
20009bc0:	681b      	ldr	r3, [r3, #0]
20009bc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20009bc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
20009bc8:	68fb      	ldr	r3, [r7, #12]
20009bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009bcc:	4a29      	ldr	r2, [pc, #164]	; (20009c74 <HAL_SPI_Receive_DMA+0x184>)
20009bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
20009bd0:	68fb      	ldr	r3, [r7, #12]
20009bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009bd4:	4a28      	ldr	r2, [pc, #160]	; (20009c78 <HAL_SPI_Receive_DMA+0x188>)
20009bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
20009bd8:	68fb      	ldr	r3, [r7, #12]
20009bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009bdc:	4a27      	ldr	r2, [pc, #156]	; (20009c7c <HAL_SPI_Receive_DMA+0x18c>)
20009bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20009be0:	68fb      	ldr	r3, [r7, #12]
20009be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009be4:	2200      	movs	r2, #0
20009be6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20009be8:	68fb      	ldr	r3, [r7, #12]
20009bea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20009bec:	68fb      	ldr	r3, [r7, #12]
20009bee:	681b      	ldr	r3, [r3, #0]
20009bf0:	330c      	adds	r3, #12
20009bf2:	4619      	mov	r1, r3
20009bf4:	68fb      	ldr	r3, [r7, #12]
20009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009bf8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
20009bfa:	68fb      	ldr	r3, [r7, #12]
20009bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009bfe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20009c00:	f7f8 fe55 	bl	200028ae <HAL_DMA_Start_IT>
20009c04:	4603      	mov	r3, r0
20009c06:	2b00      	cmp	r3, #0
20009c08:	d00c      	beq.n	20009c24 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20009c0a:	68fb      	ldr	r3, [r7, #12]
20009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009c0e:	f043 0210 	orr.w	r2, r3, #16
20009c12:	68fb      	ldr	r3, [r7, #12]
20009c14:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20009c16:	2301      	movs	r3, #1
20009c18:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20009c1a:	68fb      	ldr	r3, [r7, #12]
20009c1c:	2201      	movs	r2, #1
20009c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20009c22:	e01e      	b.n	20009c62 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20009c24:	68fb      	ldr	r3, [r7, #12]
20009c26:	681b      	ldr	r3, [r3, #0]
20009c28:	681b      	ldr	r3, [r3, #0]
20009c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009c2e:	2b40      	cmp	r3, #64	; 0x40
20009c30:	d007      	beq.n	20009c42 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20009c32:	68fb      	ldr	r3, [r7, #12]
20009c34:	681b      	ldr	r3, [r3, #0]
20009c36:	681a      	ldr	r2, [r3, #0]
20009c38:	68fb      	ldr	r3, [r7, #12]
20009c3a:	681b      	ldr	r3, [r3, #0]
20009c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20009c40:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20009c42:	68fb      	ldr	r3, [r7, #12]
20009c44:	681b      	ldr	r3, [r3, #0]
20009c46:	685a      	ldr	r2, [r3, #4]
20009c48:	68fb      	ldr	r3, [r7, #12]
20009c4a:	681b      	ldr	r3, [r3, #0]
20009c4c:	f042 0220 	orr.w	r2, r2, #32
20009c50:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20009c52:	68fb      	ldr	r3, [r7, #12]
20009c54:	681b      	ldr	r3, [r3, #0]
20009c56:	685a      	ldr	r2, [r3, #4]
20009c58:	68fb      	ldr	r3, [r7, #12]
20009c5a:	681b      	ldr	r3, [r3, #0]
20009c5c:	f042 0201 	orr.w	r2, r2, #1
20009c60:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20009c62:	68fb      	ldr	r3, [r7, #12]
20009c64:	2200      	movs	r2, #0
20009c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009c6a:	7dfb      	ldrb	r3, [r7, #23]
}
20009c6c:	4618      	mov	r0, r3
20009c6e:	3718      	adds	r7, #24
20009c70:	46bd      	mov	sp, r7
20009c72:	bd80      	pop	{r7, pc}
20009c74:	2000a829 	.word	0x2000a829
20009c78:	2000a6d5 	.word	0x2000a6d5
20009c7c:	2000a861 	.word	0x2000a861

20009c80 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
20009c80:	b580      	push	{r7, lr}
20009c82:	b086      	sub	sp, #24
20009c84:	af00      	add	r7, sp, #0
20009c86:	60f8      	str	r0, [r7, #12]
20009c88:	60b9      	str	r1, [r7, #8]
20009c8a:	607a      	str	r2, [r7, #4]
20009c8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
20009c8e:	2300      	movs	r3, #0
20009c90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
20009c92:	68fb      	ldr	r3, [r7, #12]
20009c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20009c98:	2b01      	cmp	r3, #1
20009c9a:	d101      	bne.n	20009ca0 <HAL_SPI_TransmitReceive_DMA+0x20>
20009c9c:	2302      	movs	r3, #2
20009c9e:	e0e3      	b.n	20009e68 <HAL_SPI_TransmitReceive_DMA+0x1e8>
20009ca0:	68fb      	ldr	r3, [r7, #12]
20009ca2:	2201      	movs	r2, #1
20009ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
20009ca8:	68fb      	ldr	r3, [r7, #12]
20009caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009cae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
20009cb0:	68fb      	ldr	r3, [r7, #12]
20009cb2:	685b      	ldr	r3, [r3, #4]
20009cb4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
20009cb6:	7dbb      	ldrb	r3, [r7, #22]
20009cb8:	2b01      	cmp	r3, #1
20009cba:	d00d      	beq.n	20009cd8 <HAL_SPI_TransmitReceive_DMA+0x58>
20009cbc:	693b      	ldr	r3, [r7, #16]
20009cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009cc2:	d106      	bne.n	20009cd2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20009cc4:	68fb      	ldr	r3, [r7, #12]
20009cc6:	689b      	ldr	r3, [r3, #8]
20009cc8:	2b00      	cmp	r3, #0
20009cca:	d102      	bne.n	20009cd2 <HAL_SPI_TransmitReceive_DMA+0x52>
20009ccc:	7dbb      	ldrb	r3, [r7, #22]
20009cce:	2b04      	cmp	r3, #4
20009cd0:	d002      	beq.n	20009cd8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
20009cd2:	2302      	movs	r3, #2
20009cd4:	75fb      	strb	r3, [r7, #23]
    goto error;
20009cd6:	e0c2      	b.n	20009e5e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20009cd8:	68bb      	ldr	r3, [r7, #8]
20009cda:	2b00      	cmp	r3, #0
20009cdc:	d005      	beq.n	20009cea <HAL_SPI_TransmitReceive_DMA+0x6a>
20009cde:	687b      	ldr	r3, [r7, #4]
20009ce0:	2b00      	cmp	r3, #0
20009ce2:	d002      	beq.n	20009cea <HAL_SPI_TransmitReceive_DMA+0x6a>
20009ce4:	887b      	ldrh	r3, [r7, #2]
20009ce6:	2b00      	cmp	r3, #0
20009ce8:	d102      	bne.n	20009cf0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
20009cea:	2301      	movs	r3, #1
20009cec:	75fb      	strb	r3, [r7, #23]
    goto error;
20009cee:	e0b6      	b.n	20009e5e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20009cf0:	68fb      	ldr	r3, [r7, #12]
20009cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009cf6:	b2db      	uxtb	r3, r3
20009cf8:	2b04      	cmp	r3, #4
20009cfa:	d003      	beq.n	20009d04 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20009cfc:	68fb      	ldr	r3, [r7, #12]
20009cfe:	2205      	movs	r2, #5
20009d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20009d04:	68fb      	ldr	r3, [r7, #12]
20009d06:	2200      	movs	r2, #0
20009d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20009d0a:	68fb      	ldr	r3, [r7, #12]
20009d0c:	68ba      	ldr	r2, [r7, #8]
20009d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20009d10:	68fb      	ldr	r3, [r7, #12]
20009d12:	887a      	ldrh	r2, [r7, #2]
20009d14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20009d16:	68fb      	ldr	r3, [r7, #12]
20009d18:	887a      	ldrh	r2, [r7, #2]
20009d1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20009d1c:	68fb      	ldr	r3, [r7, #12]
20009d1e:	687a      	ldr	r2, [r7, #4]
20009d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20009d22:	68fb      	ldr	r3, [r7, #12]
20009d24:	887a      	ldrh	r2, [r7, #2]
20009d26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20009d28:	68fb      	ldr	r3, [r7, #12]
20009d2a:	887a      	ldrh	r2, [r7, #2]
20009d2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20009d2e:	68fb      	ldr	r3, [r7, #12]
20009d30:	2200      	movs	r2, #0
20009d32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20009d34:	68fb      	ldr	r3, [r7, #12]
20009d36:	2200      	movs	r2, #0
20009d38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
20009d3a:	68fb      	ldr	r3, [r7, #12]
20009d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009d40:	b2db      	uxtb	r3, r3
20009d42:	2b04      	cmp	r3, #4
20009d44:	d108      	bne.n	20009d58 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
20009d46:	68fb      	ldr	r3, [r7, #12]
20009d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d4a:	4a49      	ldr	r2, [pc, #292]	; (20009e70 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
20009d4c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
20009d4e:	68fb      	ldr	r3, [r7, #12]
20009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d52:	4a48      	ldr	r2, [pc, #288]	; (20009e74 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
20009d54:	63da      	str	r2, [r3, #60]	; 0x3c
20009d56:	e007      	b.n	20009d68 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
20009d58:	68fb      	ldr	r3, [r7, #12]
20009d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d5c:	4a46      	ldr	r2, [pc, #280]	; (20009e78 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
20009d5e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
20009d60:	68fb      	ldr	r3, [r7, #12]
20009d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d64:	4a45      	ldr	r2, [pc, #276]	; (20009e7c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
20009d66:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
20009d68:	68fb      	ldr	r3, [r7, #12]
20009d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d6c:	4a44      	ldr	r2, [pc, #272]	; (20009e80 <HAL_SPI_TransmitReceive_DMA+0x200>)
20009d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20009d70:	68fb      	ldr	r3, [r7, #12]
20009d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009d74:	2200      	movs	r2, #0
20009d76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20009d78:	68fb      	ldr	r3, [r7, #12]
20009d7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20009d7c:	68fb      	ldr	r3, [r7, #12]
20009d7e:	681b      	ldr	r3, [r3, #0]
20009d80:	330c      	adds	r3, #12
20009d82:	4619      	mov	r1, r3
20009d84:	68fb      	ldr	r3, [r7, #12]
20009d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009d88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
20009d8a:	68fb      	ldr	r3, [r7, #12]
20009d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009d8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20009d90:	f7f8 fd8d 	bl	200028ae <HAL_DMA_Start_IT>
20009d94:	4603      	mov	r3, r0
20009d96:	2b00      	cmp	r3, #0
20009d98:	d00c      	beq.n	20009db4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20009d9a:	68fb      	ldr	r3, [r7, #12]
20009d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009d9e:	f043 0210 	orr.w	r2, r3, #16
20009da2:	68fb      	ldr	r3, [r7, #12]
20009da4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20009da6:	2301      	movs	r3, #1
20009da8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20009daa:	68fb      	ldr	r3, [r7, #12]
20009dac:	2201      	movs	r2, #1
20009dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20009db2:	e054      	b.n	20009e5e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20009db4:	68fb      	ldr	r3, [r7, #12]
20009db6:	681b      	ldr	r3, [r3, #0]
20009db8:	685a      	ldr	r2, [r3, #4]
20009dba:	68fb      	ldr	r3, [r7, #12]
20009dbc:	681b      	ldr	r3, [r3, #0]
20009dbe:	f042 0201 	orr.w	r2, r2, #1
20009dc2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
20009dc4:	68fb      	ldr	r3, [r7, #12]
20009dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009dc8:	2200      	movs	r2, #0
20009dca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
20009dcc:	68fb      	ldr	r3, [r7, #12]
20009dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009dd0:	2200      	movs	r2, #0
20009dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
20009dd4:	68fb      	ldr	r3, [r7, #12]
20009dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009dd8:	2200      	movs	r2, #0
20009dda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
20009ddc:	68fb      	ldr	r3, [r7, #12]
20009dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009de0:	2200      	movs	r2, #0
20009de2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20009de4:	68fb      	ldr	r3, [r7, #12]
20009de6:	6c98      	ldr	r0, [r3, #72]	; 0x48
20009de8:	68fb      	ldr	r3, [r7, #12]
20009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009dec:	4619      	mov	r1, r3
20009dee:	68fb      	ldr	r3, [r7, #12]
20009df0:	681b      	ldr	r3, [r3, #0]
20009df2:	330c      	adds	r3, #12
20009df4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
20009df6:	68fb      	ldr	r3, [r7, #12]
20009df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009dfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20009dfc:	f7f8 fd57 	bl	200028ae <HAL_DMA_Start_IT>
20009e00:	4603      	mov	r3, r0
20009e02:	2b00      	cmp	r3, #0
20009e04:	d00c      	beq.n	20009e20 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20009e06:	68fb      	ldr	r3, [r7, #12]
20009e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009e0a:	f043 0210 	orr.w	r2, r3, #16
20009e0e:	68fb      	ldr	r3, [r7, #12]
20009e10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20009e12:	2301      	movs	r3, #1
20009e14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20009e16:	68fb      	ldr	r3, [r7, #12]
20009e18:	2201      	movs	r2, #1
20009e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20009e1e:	e01e      	b.n	20009e5e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20009e20:	68fb      	ldr	r3, [r7, #12]
20009e22:	681b      	ldr	r3, [r3, #0]
20009e24:	681b      	ldr	r3, [r3, #0]
20009e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009e2a:	2b40      	cmp	r3, #64	; 0x40
20009e2c:	d007      	beq.n	20009e3e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20009e2e:	68fb      	ldr	r3, [r7, #12]
20009e30:	681b      	ldr	r3, [r3, #0]
20009e32:	681a      	ldr	r2, [r3, #0]
20009e34:	68fb      	ldr	r3, [r7, #12]
20009e36:	681b      	ldr	r3, [r3, #0]
20009e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20009e3c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20009e3e:	68fb      	ldr	r3, [r7, #12]
20009e40:	681b      	ldr	r3, [r3, #0]
20009e42:	685a      	ldr	r2, [r3, #4]
20009e44:	68fb      	ldr	r3, [r7, #12]
20009e46:	681b      	ldr	r3, [r3, #0]
20009e48:	f042 0220 	orr.w	r2, r2, #32
20009e4c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20009e4e:	68fb      	ldr	r3, [r7, #12]
20009e50:	681b      	ldr	r3, [r3, #0]
20009e52:	685a      	ldr	r2, [r3, #4]
20009e54:	68fb      	ldr	r3, [r7, #12]
20009e56:	681b      	ldr	r3, [r3, #0]
20009e58:	f042 0202 	orr.w	r2, r2, #2
20009e5c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20009e5e:	68fb      	ldr	r3, [r7, #12]
20009e60:	2200      	movs	r2, #0
20009e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20009e66:	7dfb      	ldrb	r3, [r7, #23]
}
20009e68:	4618      	mov	r0, r3
20009e6a:	3718      	adds	r7, #24
20009e6c:	46bd      	mov	sp, r7
20009e6e:	bd80      	pop	{r7, pc}
20009e70:	2000a829 	.word	0x2000a829
20009e74:	2000a6d5 	.word	0x2000a6d5
20009e78:	2000a845 	.word	0x2000a845
20009e7c:	2000a77d 	.word	0x2000a77d
20009e80:	2000a861 	.word	0x2000a861

20009e84 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
20009e84:	b580      	push	{r7, lr}
20009e86:	b088      	sub	sp, #32
20009e88:	af00      	add	r7, sp, #0
20009e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20009e8c:	2300      	movs	r3, #0
20009e8e:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20009e90:	4b6e      	ldr	r3, [pc, #440]	; (2000a04c <HAL_SPI_Abort+0x1c8>)
20009e92:	681b      	ldr	r3, [r3, #0]
20009e94:	4a6e      	ldr	r2, [pc, #440]	; (2000a050 <HAL_SPI_Abort+0x1cc>)
20009e96:	fba2 2303 	umull	r2, r3, r2, r3
20009e9a:	0a5b      	lsrs	r3, r3, #9
20009e9c:	2264      	movs	r2, #100	; 0x64
20009e9e:	fb02 f303 	mul.w	r3, r2, r3
20009ea2:	617b      	str	r3, [r7, #20]
  count = resetcount;
20009ea4:	697b      	ldr	r3, [r7, #20]
20009ea6:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
20009ea8:	687b      	ldr	r3, [r7, #4]
20009eaa:	681b      	ldr	r3, [r3, #0]
20009eac:	685a      	ldr	r2, [r3, #4]
20009eae:	687b      	ldr	r3, [r7, #4]
20009eb0:	681b      	ldr	r3, [r3, #0]
20009eb2:	f022 0220 	bic.w	r2, r2, #32
20009eb6:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
20009eb8:	687b      	ldr	r3, [r7, #4]
20009eba:	681b      	ldr	r3, [r3, #0]
20009ebc:	685b      	ldr	r3, [r3, #4]
20009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
20009ec2:	2b80      	cmp	r3, #128	; 0x80
20009ec4:	d117      	bne.n	20009ef6 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
20009ec6:	687b      	ldr	r3, [r7, #4]
20009ec8:	4a62      	ldr	r2, [pc, #392]	; (2000a054 <HAL_SPI_Abort+0x1d0>)
20009eca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20009ecc:	69bb      	ldr	r3, [r7, #24]
20009ece:	2b00      	cmp	r3, #0
20009ed0:	d106      	bne.n	20009ee0 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009ed2:	687b      	ldr	r3, [r7, #4]
20009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20009eda:	687b      	ldr	r3, [r7, #4]
20009edc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20009ede:	e008      	b.n	20009ef2 <HAL_SPI_Abort+0x6e>
      }
      count--;
20009ee0:	69bb      	ldr	r3, [r7, #24]
20009ee2:	3b01      	subs	r3, #1
20009ee4:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20009ee6:	687b      	ldr	r3, [r7, #4]
20009ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009eec:	b2db      	uxtb	r3, r3
20009eee:	2b07      	cmp	r3, #7
20009ef0:	d1ec      	bne.n	20009ecc <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
20009ef2:	697b      	ldr	r3, [r7, #20]
20009ef4:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
20009ef6:	687b      	ldr	r3, [r7, #4]
20009ef8:	681b      	ldr	r3, [r3, #0]
20009efa:	685b      	ldr	r3, [r3, #4]
20009efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
20009f00:	2b40      	cmp	r3, #64	; 0x40
20009f02:	d117      	bne.n	20009f34 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20009f04:	687b      	ldr	r3, [r7, #4]
20009f06:	4a54      	ldr	r2, [pc, #336]	; (2000a058 <HAL_SPI_Abort+0x1d4>)
20009f08:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20009f0a:	69bb      	ldr	r3, [r7, #24]
20009f0c:	2b00      	cmp	r3, #0
20009f0e:	d106      	bne.n	20009f1e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009f10:	687b      	ldr	r3, [r7, #4]
20009f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20009f18:	687b      	ldr	r3, [r7, #4]
20009f1a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20009f1c:	e008      	b.n	20009f30 <HAL_SPI_Abort+0xac>
      }
      count--;
20009f1e:	69bb      	ldr	r3, [r7, #24]
20009f20:	3b01      	subs	r3, #1
20009f22:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20009f24:	687b      	ldr	r3, [r7, #4]
20009f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20009f2a:	b2db      	uxtb	r3, r3
20009f2c:	2b07      	cmp	r3, #7
20009f2e:	d1ec      	bne.n	20009f0a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
20009f30:	697b      	ldr	r3, [r7, #20]
20009f32:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20009f34:	687b      	ldr	r3, [r7, #4]
20009f36:	681b      	ldr	r3, [r3, #0]
20009f38:	685b      	ldr	r3, [r3, #4]
20009f3a:	f003 0302 	and.w	r3, r3, #2
20009f3e:	2b02      	cmp	r3, #2
20009f40:	d12e      	bne.n	20009fa0 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
20009f42:	687b      	ldr	r3, [r7, #4]
20009f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009f46:	2b00      	cmp	r3, #0
20009f48:	d02a      	beq.n	20009fa0 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
20009f4a:	687b      	ldr	r3, [r7, #4]
20009f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009f4e:	2200      	movs	r2, #0
20009f50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
20009f52:	687b      	ldr	r3, [r7, #4]
20009f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009f56:	4618      	mov	r0, r3
20009f58:	f7f8 fd01 	bl	2000295e <HAL_DMA_Abort>
20009f5c:	4603      	mov	r3, r0
20009f5e:	2b00      	cmp	r3, #0
20009f60:	d002      	beq.n	20009f68 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20009f62:	687b      	ldr	r3, [r7, #4]
20009f64:	2240      	movs	r2, #64	; 0x40
20009f66:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
20009f68:	687b      	ldr	r3, [r7, #4]
20009f6a:	681b      	ldr	r3, [r3, #0]
20009f6c:	685a      	ldr	r2, [r3, #4]
20009f6e:	687b      	ldr	r3, [r7, #4]
20009f70:	681b      	ldr	r3, [r3, #0]
20009f72:	f022 0202 	bic.w	r2, r2, #2
20009f76:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
20009f78:	69bb      	ldr	r3, [r7, #24]
20009f7a:	2b00      	cmp	r3, #0
20009f7c:	d106      	bne.n	20009f8c <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009f7e:	687b      	ldr	r3, [r7, #4]
20009f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20009f86:	687b      	ldr	r3, [r7, #4]
20009f88:	655a      	str	r2, [r3, #84]	; 0x54
          break;
20009f8a:	e009      	b.n	20009fa0 <HAL_SPI_Abort+0x11c>
        }
        count--;
20009f8c:	69bb      	ldr	r3, [r7, #24]
20009f8e:	3b01      	subs	r3, #1
20009f90:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009f92:	687b      	ldr	r3, [r7, #4]
20009f94:	681b      	ldr	r3, [r3, #0]
20009f96:	689b      	ldr	r3, [r3, #8]
20009f98:	f003 0302 	and.w	r3, r3, #2
20009f9c:	2b00      	cmp	r3, #0
20009f9e:	d0eb      	beq.n	20009f78 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20009fa0:	687b      	ldr	r3, [r7, #4]
20009fa2:	681b      	ldr	r3, [r3, #0]
20009fa4:	685b      	ldr	r3, [r3, #4]
20009fa6:	f003 0301 	and.w	r3, r3, #1
20009faa:	2b01      	cmp	r3, #1
20009fac:	d122      	bne.n	20009ff4 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
20009fae:	687b      	ldr	r3, [r7, #4]
20009fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009fb2:	2b00      	cmp	r3, #0
20009fb4:	d01e      	beq.n	20009ff4 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
20009fb6:	687b      	ldr	r3, [r7, #4]
20009fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009fba:	2200      	movs	r2, #0
20009fbc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
20009fbe:	687b      	ldr	r3, [r7, #4]
20009fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20009fc2:	4618      	mov	r0, r3
20009fc4:	f7f8 fccb 	bl	2000295e <HAL_DMA_Abort>
20009fc8:	4603      	mov	r3, r0
20009fca:	2b00      	cmp	r3, #0
20009fcc:	d002      	beq.n	20009fd4 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20009fce:	687b      	ldr	r3, [r7, #4]
20009fd0:	2240      	movs	r2, #64	; 0x40
20009fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
20009fd4:	687b      	ldr	r3, [r7, #4]
20009fd6:	681b      	ldr	r3, [r3, #0]
20009fd8:	681a      	ldr	r2, [r3, #0]
20009fda:	687b      	ldr	r3, [r7, #4]
20009fdc:	681b      	ldr	r3, [r3, #0]
20009fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009fe2:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
20009fe4:	687b      	ldr	r3, [r7, #4]
20009fe6:	681b      	ldr	r3, [r3, #0]
20009fe8:	685a      	ldr	r2, [r3, #4]
20009fea:	687b      	ldr	r3, [r7, #4]
20009fec:	681b      	ldr	r3, [r3, #0]
20009fee:	f022 0201 	bic.w	r2, r2, #1
20009ff2:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
20009ff4:	687b      	ldr	r3, [r7, #4]
20009ff6:	2200      	movs	r2, #0
20009ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20009ffa:	687b      	ldr	r3, [r7, #4]
20009ffc:	2200      	movs	r2, #0
20009ffe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
2000a000:	687b      	ldr	r3, [r7, #4]
2000a002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a004:	2b40      	cmp	r3, #64	; 0x40
2000a006:	d102      	bne.n	2000a00e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
2000a008:	2301      	movs	r3, #1
2000a00a:	77fb      	strb	r3, [r7, #31]
2000a00c:	e002      	b.n	2000a014 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000a00e:	687b      	ldr	r3, [r7, #4]
2000a010:	2200      	movs	r2, #0
2000a012:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a014:	2300      	movs	r3, #0
2000a016:	613b      	str	r3, [r7, #16]
2000a018:	687b      	ldr	r3, [r7, #4]
2000a01a:	681b      	ldr	r3, [r3, #0]
2000a01c:	68db      	ldr	r3, [r3, #12]
2000a01e:	613b      	str	r3, [r7, #16]
2000a020:	687b      	ldr	r3, [r7, #4]
2000a022:	681b      	ldr	r3, [r3, #0]
2000a024:	689b      	ldr	r3, [r3, #8]
2000a026:	613b      	str	r3, [r7, #16]
2000a028:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000a02a:	2300      	movs	r3, #0
2000a02c:	60fb      	str	r3, [r7, #12]
2000a02e:	687b      	ldr	r3, [r7, #4]
2000a030:	681b      	ldr	r3, [r3, #0]
2000a032:	689b      	ldr	r3, [r3, #8]
2000a034:	60fb      	str	r3, [r7, #12]
2000a036:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
2000a038:	687b      	ldr	r3, [r7, #4]
2000a03a:	2201      	movs	r2, #1
2000a03c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
2000a040:	7ffb      	ldrb	r3, [r7, #31]
}
2000a042:	4618      	mov	r0, r3
2000a044:	3720      	adds	r7, #32
2000a046:	46bd      	mov	sp, r7
2000a048:	bd80      	pop	{r7, pc}
2000a04a:	bf00      	nop
2000a04c:	200003dc 	.word	0x200003dc
2000a050:	057619f1 	.word	0x057619f1
2000a054:	2000b215 	.word	0x2000b215
2000a058:	2000b185 	.word	0x2000b185

2000a05c <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
2000a05c:	b580      	push	{r7, lr}
2000a05e:	b088      	sub	sp, #32
2000a060:	af00      	add	r7, sp, #0
2000a062:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
2000a064:	2300      	movs	r3, #0
2000a066:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
2000a068:	2301      	movs	r3, #1
2000a06a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000a06c:	4b72      	ldr	r3, [pc, #456]	; (2000a238 <HAL_SPI_Abort_IT+0x1dc>)
2000a06e:	681b      	ldr	r3, [r3, #0]
2000a070:	4a72      	ldr	r2, [pc, #456]	; (2000a23c <HAL_SPI_Abort_IT+0x1e0>)
2000a072:	fba2 2303 	umull	r2, r3, r2, r3
2000a076:	0a5b      	lsrs	r3, r3, #9
2000a078:	2264      	movs	r2, #100	; 0x64
2000a07a:	fb02 f303 	mul.w	r3, r2, r3
2000a07e:	613b      	str	r3, [r7, #16]
  count = resetcount;
2000a080:	693b      	ldr	r3, [r7, #16]
2000a082:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
2000a084:	687b      	ldr	r3, [r7, #4]
2000a086:	681b      	ldr	r3, [r3, #0]
2000a088:	685a      	ldr	r2, [r3, #4]
2000a08a:	687b      	ldr	r3, [r7, #4]
2000a08c:	681b      	ldr	r3, [r3, #0]
2000a08e:	f022 0220 	bic.w	r2, r2, #32
2000a092:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
2000a094:	687b      	ldr	r3, [r7, #4]
2000a096:	681b      	ldr	r3, [r3, #0]
2000a098:	685b      	ldr	r3, [r3, #4]
2000a09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000a09e:	2b80      	cmp	r3, #128	; 0x80
2000a0a0:	d117      	bne.n	2000a0d2 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
2000a0a2:	687b      	ldr	r3, [r7, #4]
2000a0a4:	4a66      	ldr	r2, [pc, #408]	; (2000a240 <HAL_SPI_Abort_IT+0x1e4>)
2000a0a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
2000a0a8:	697b      	ldr	r3, [r7, #20]
2000a0aa:	2b00      	cmp	r3, #0
2000a0ac:	d106      	bne.n	2000a0bc <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a0ae:	687b      	ldr	r3, [r7, #4]
2000a0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a0b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a0b6:	687b      	ldr	r3, [r7, #4]
2000a0b8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
2000a0ba:	e008      	b.n	2000a0ce <HAL_SPI_Abort_IT+0x72>
      }
      count--;
2000a0bc:	697b      	ldr	r3, [r7, #20]
2000a0be:	3b01      	subs	r3, #1
2000a0c0:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
2000a0c2:	687b      	ldr	r3, [r7, #4]
2000a0c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000a0c8:	b2db      	uxtb	r3, r3
2000a0ca:	2b07      	cmp	r3, #7
2000a0cc:	d1ec      	bne.n	2000a0a8 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
2000a0ce:	693b      	ldr	r3, [r7, #16]
2000a0d0:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
2000a0d2:	687b      	ldr	r3, [r7, #4]
2000a0d4:	681b      	ldr	r3, [r3, #0]
2000a0d6:	685b      	ldr	r3, [r3, #4]
2000a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000a0dc:	2b40      	cmp	r3, #64	; 0x40
2000a0de:	d117      	bne.n	2000a110 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
2000a0e0:	687b      	ldr	r3, [r7, #4]
2000a0e2:	4a58      	ldr	r2, [pc, #352]	; (2000a244 <HAL_SPI_Abort_IT+0x1e8>)
2000a0e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
2000a0e6:	697b      	ldr	r3, [r7, #20]
2000a0e8:	2b00      	cmp	r3, #0
2000a0ea:	d106      	bne.n	2000a0fa <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a0ec:	687b      	ldr	r3, [r7, #4]
2000a0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a0f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a0f4:	687b      	ldr	r3, [r7, #4]
2000a0f6:	655a      	str	r2, [r3, #84]	; 0x54
        break;
2000a0f8:	e008      	b.n	2000a10c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
2000a0fa:	697b      	ldr	r3, [r7, #20]
2000a0fc:	3b01      	subs	r3, #1
2000a0fe:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
2000a100:	687b      	ldr	r3, [r7, #4]
2000a102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000a106:	b2db      	uxtb	r3, r3
2000a108:	2b07      	cmp	r3, #7
2000a10a:	d1ec      	bne.n	2000a0e6 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
2000a10c:	693b      	ldr	r3, [r7, #16]
2000a10e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
2000a110:	687b      	ldr	r3, [r7, #4]
2000a112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a114:	2b00      	cmp	r3, #0
2000a116:	d00f      	beq.n	2000a138 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2000a118:	687b      	ldr	r3, [r7, #4]
2000a11a:	681b      	ldr	r3, [r3, #0]
2000a11c:	685b      	ldr	r3, [r3, #4]
2000a11e:	f003 0302 	and.w	r3, r3, #2
2000a122:	2b02      	cmp	r3, #2
2000a124:	d104      	bne.n	2000a130 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
2000a126:	687b      	ldr	r3, [r7, #4]
2000a128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a12a:	4a47      	ldr	r2, [pc, #284]	; (2000a248 <HAL_SPI_Abort_IT+0x1ec>)
2000a12c:	651a      	str	r2, [r3, #80]	; 0x50
2000a12e:	e003      	b.n	2000a138 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
2000a130:	687b      	ldr	r3, [r7, #4]
2000a132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a134:	2200      	movs	r2, #0
2000a136:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
2000a138:	687b      	ldr	r3, [r7, #4]
2000a13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a13c:	2b00      	cmp	r3, #0
2000a13e:	d00f      	beq.n	2000a160 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2000a140:	687b      	ldr	r3, [r7, #4]
2000a142:	681b      	ldr	r3, [r3, #0]
2000a144:	685b      	ldr	r3, [r3, #4]
2000a146:	f003 0301 	and.w	r3, r3, #1
2000a14a:	2b01      	cmp	r3, #1
2000a14c:	d104      	bne.n	2000a158 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
2000a14e:	687b      	ldr	r3, [r7, #4]
2000a150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a152:	4a3e      	ldr	r2, [pc, #248]	; (2000a24c <HAL_SPI_Abort_IT+0x1f0>)
2000a154:	651a      	str	r2, [r3, #80]	; 0x50
2000a156:	e003      	b.n	2000a160 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
2000a158:	687b      	ldr	r3, [r7, #4]
2000a15a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a15c:	2200      	movs	r2, #0
2000a15e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2000a160:	687b      	ldr	r3, [r7, #4]
2000a162:	681b      	ldr	r3, [r3, #0]
2000a164:	685b      	ldr	r3, [r3, #4]
2000a166:	f003 0302 	and.w	r3, r3, #2
2000a16a:	2b02      	cmp	r3, #2
2000a16c:	d115      	bne.n	2000a19a <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
2000a16e:	687b      	ldr	r3, [r7, #4]
2000a170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a172:	2b00      	cmp	r3, #0
2000a174:	d011      	beq.n	2000a19a <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
2000a176:	687b      	ldr	r3, [r7, #4]
2000a178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a17a:	4618      	mov	r0, r3
2000a17c:	f7f8 fc5f 	bl	20002a3e <HAL_DMA_Abort_IT>
2000a180:	4603      	mov	r3, r0
2000a182:	2b00      	cmp	r3, #0
2000a184:	d007      	beq.n	2000a196 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
2000a186:	687b      	ldr	r3, [r7, #4]
2000a188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a18a:	2200      	movs	r2, #0
2000a18c:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2000a18e:	687b      	ldr	r3, [r7, #4]
2000a190:	2240      	movs	r2, #64	; 0x40
2000a192:	655a      	str	r2, [r3, #84]	; 0x54
2000a194:	e001      	b.n	2000a19a <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
2000a196:	2300      	movs	r3, #0
2000a198:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
2000a19a:	687b      	ldr	r3, [r7, #4]
2000a19c:	681b      	ldr	r3, [r3, #0]
2000a19e:	685b      	ldr	r3, [r3, #4]
2000a1a0:	f003 0301 	and.w	r3, r3, #1
2000a1a4:	2b01      	cmp	r3, #1
2000a1a6:	d115      	bne.n	2000a1d4 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
2000a1a8:	687b      	ldr	r3, [r7, #4]
2000a1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a1ac:	2b00      	cmp	r3, #0
2000a1ae:	d011      	beq.n	2000a1d4 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
2000a1b0:	687b      	ldr	r3, [r7, #4]
2000a1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a1b4:	4618      	mov	r0, r3
2000a1b6:	f7f8 fc42 	bl	20002a3e <HAL_DMA_Abort_IT>
2000a1ba:	4603      	mov	r3, r0
2000a1bc:	2b00      	cmp	r3, #0
2000a1be:	d007      	beq.n	2000a1d0 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
2000a1c0:	687b      	ldr	r3, [r7, #4]
2000a1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a1c4:	2200      	movs	r2, #0
2000a1c6:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2000a1c8:	687b      	ldr	r3, [r7, #4]
2000a1ca:	2240      	movs	r2, #64	; 0x40
2000a1cc:	655a      	str	r2, [r3, #84]	; 0x54
2000a1ce:	e001      	b.n	2000a1d4 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
2000a1d0:	2300      	movs	r3, #0
2000a1d2:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
2000a1d4:	69bb      	ldr	r3, [r7, #24]
2000a1d6:	2b01      	cmp	r3, #1
2000a1d8:	d128      	bne.n	2000a22c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
2000a1da:	687b      	ldr	r3, [r7, #4]
2000a1dc:	2200      	movs	r2, #0
2000a1de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
2000a1e0:	687b      	ldr	r3, [r7, #4]
2000a1e2:	2200      	movs	r2, #0
2000a1e4:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
2000a1e6:	687b      	ldr	r3, [r7, #4]
2000a1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a1ea:	2b40      	cmp	r3, #64	; 0x40
2000a1ec:	d102      	bne.n	2000a1f4 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
2000a1ee:	2301      	movs	r3, #1
2000a1f0:	77fb      	strb	r3, [r7, #31]
2000a1f2:	e002      	b.n	2000a1fa <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000a1f4:	687b      	ldr	r3, [r7, #4]
2000a1f6:	2200      	movs	r2, #0
2000a1f8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a1fa:	2300      	movs	r3, #0
2000a1fc:	60fb      	str	r3, [r7, #12]
2000a1fe:	687b      	ldr	r3, [r7, #4]
2000a200:	681b      	ldr	r3, [r3, #0]
2000a202:	68db      	ldr	r3, [r3, #12]
2000a204:	60fb      	str	r3, [r7, #12]
2000a206:	687b      	ldr	r3, [r7, #4]
2000a208:	681b      	ldr	r3, [r3, #0]
2000a20a:	689b      	ldr	r3, [r3, #8]
2000a20c:	60fb      	str	r3, [r7, #12]
2000a20e:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2000a210:	2300      	movs	r3, #0
2000a212:	60bb      	str	r3, [r7, #8]
2000a214:	687b      	ldr	r3, [r7, #4]
2000a216:	681b      	ldr	r3, [r3, #0]
2000a218:	689b      	ldr	r3, [r3, #8]
2000a21a:	60bb      	str	r3, [r7, #8]
2000a21c:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
2000a21e:	687b      	ldr	r3, [r7, #4]
2000a220:	2201      	movs	r2, #1
2000a222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
2000a226:	6878      	ldr	r0, [r7, #4]
2000a228:	f000 f9dc 	bl	2000a5e4 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
2000a22c:	7ffb      	ldrb	r3, [r7, #31]
}
2000a22e:	4618      	mov	r0, r3
2000a230:	3720      	adds	r7, #32
2000a232:	46bd      	mov	sp, r7
2000a234:	bd80      	pop	{r7, pc}
2000a236:	bf00      	nop
2000a238:	200003dc 	.word	0x200003dc
2000a23c:	057619f1 	.word	0x057619f1
2000a240:	2000b215 	.word	0x2000b215
2000a244:	2000b185 	.word	0x2000b185
2000a248:	2000a8c9 	.word	0x2000a8c9
2000a24c:	2000a99d 	.word	0x2000a99d

2000a250 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
2000a250:	b480      	push	{r7}
2000a252:	b083      	sub	sp, #12
2000a254:	af00      	add	r7, sp, #0
2000a256:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
2000a258:	687b      	ldr	r3, [r7, #4]
2000a25a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2000a25e:	2b01      	cmp	r3, #1
2000a260:	d101      	bne.n	2000a266 <HAL_SPI_DMAPause+0x16>
2000a262:	2302      	movs	r3, #2
2000a264:	e010      	b.n	2000a288 <HAL_SPI_DMAPause+0x38>
2000a266:	687b      	ldr	r3, [r7, #4]
2000a268:	2201      	movs	r2, #1
2000a26a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a26e:	687b      	ldr	r3, [r7, #4]
2000a270:	681b      	ldr	r3, [r3, #0]
2000a272:	685a      	ldr	r2, [r3, #4]
2000a274:	687b      	ldr	r3, [r7, #4]
2000a276:	681b      	ldr	r3, [r3, #0]
2000a278:	f022 0203 	bic.w	r2, r2, #3
2000a27c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000a27e:	687b      	ldr	r3, [r7, #4]
2000a280:	2200      	movs	r2, #0
2000a282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
2000a286:	2300      	movs	r3, #0
}
2000a288:	4618      	mov	r0, r3
2000a28a:	370c      	adds	r7, #12
2000a28c:	46bd      	mov	sp, r7
2000a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a292:	4770      	bx	lr

2000a294 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
2000a294:	b480      	push	{r7}
2000a296:	b083      	sub	sp, #12
2000a298:	af00      	add	r7, sp, #0
2000a29a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
2000a29c:	687b      	ldr	r3, [r7, #4]
2000a29e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2000a2a2:	2b01      	cmp	r3, #1
2000a2a4:	d101      	bne.n	2000a2aa <HAL_SPI_DMAResume+0x16>
2000a2a6:	2302      	movs	r3, #2
2000a2a8:	e010      	b.n	2000a2cc <HAL_SPI_DMAResume+0x38>
2000a2aa:	687b      	ldr	r3, [r7, #4]
2000a2ac:	2201      	movs	r2, #1
2000a2ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a2b2:	687b      	ldr	r3, [r7, #4]
2000a2b4:	681b      	ldr	r3, [r3, #0]
2000a2b6:	685a      	ldr	r2, [r3, #4]
2000a2b8:	687b      	ldr	r3, [r7, #4]
2000a2ba:	681b      	ldr	r3, [r3, #0]
2000a2bc:	f042 0203 	orr.w	r2, r2, #3
2000a2c0:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000a2c2:	687b      	ldr	r3, [r7, #4]
2000a2c4:	2200      	movs	r2, #0
2000a2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
2000a2ca:	2300      	movs	r3, #0
}
2000a2cc:	4618      	mov	r0, r3
2000a2ce:	370c      	adds	r7, #12
2000a2d0:	46bd      	mov	sp, r7
2000a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a2d6:	4770      	bx	lr

2000a2d8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
2000a2d8:	b580      	push	{r7, lr}
2000a2da:	b084      	sub	sp, #16
2000a2dc:	af00      	add	r7, sp, #0
2000a2de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
2000a2e0:	2300      	movs	r3, #0
2000a2e2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
2000a2e4:	687b      	ldr	r3, [r7, #4]
2000a2e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a2e8:	2b00      	cmp	r3, #0
2000a2ea:	d00f      	beq.n	2000a30c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
2000a2ec:	687b      	ldr	r3, [r7, #4]
2000a2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a2f0:	4618      	mov	r0, r3
2000a2f2:	f7f8 fb34 	bl	2000295e <HAL_DMA_Abort>
2000a2f6:	4603      	mov	r3, r0
2000a2f8:	2b00      	cmp	r3, #0
2000a2fa:	d007      	beq.n	2000a30c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000a2fc:	687b      	ldr	r3, [r7, #4]
2000a2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a300:	f043 0210 	orr.w	r2, r3, #16
2000a304:	687b      	ldr	r3, [r7, #4]
2000a306:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
2000a308:	2301      	movs	r3, #1
2000a30a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
2000a30c:	687b      	ldr	r3, [r7, #4]
2000a30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a310:	2b00      	cmp	r3, #0
2000a312:	d00f      	beq.n	2000a334 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
2000a314:	687b      	ldr	r3, [r7, #4]
2000a316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a318:	4618      	mov	r0, r3
2000a31a:	f7f8 fb20 	bl	2000295e <HAL_DMA_Abort>
2000a31e:	4603      	mov	r3, r0
2000a320:	2b00      	cmp	r3, #0
2000a322:	d007      	beq.n	2000a334 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000a324:	687b      	ldr	r3, [r7, #4]
2000a326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a328:	f043 0210 	orr.w	r2, r3, #16
2000a32c:	687b      	ldr	r3, [r7, #4]
2000a32e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
2000a330:	2301      	movs	r3, #1
2000a332:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a334:	687b      	ldr	r3, [r7, #4]
2000a336:	681b      	ldr	r3, [r3, #0]
2000a338:	685a      	ldr	r2, [r3, #4]
2000a33a:	687b      	ldr	r3, [r7, #4]
2000a33c:	681b      	ldr	r3, [r3, #0]
2000a33e:	f022 0203 	bic.w	r2, r2, #3
2000a342:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
2000a344:	687b      	ldr	r3, [r7, #4]
2000a346:	2201      	movs	r2, #1
2000a348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
2000a34c:	7bfb      	ldrb	r3, [r7, #15]
}
2000a34e:	4618      	mov	r0, r3
2000a350:	3710      	adds	r7, #16
2000a352:	46bd      	mov	sp, r7
2000a354:	bd80      	pop	{r7, pc}
	...

2000a358 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
2000a358:	b580      	push	{r7, lr}
2000a35a:	b088      	sub	sp, #32
2000a35c:	af00      	add	r7, sp, #0
2000a35e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
2000a360:	687b      	ldr	r3, [r7, #4]
2000a362:	681b      	ldr	r3, [r3, #0]
2000a364:	685b      	ldr	r3, [r3, #4]
2000a366:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
2000a368:	687b      	ldr	r3, [r7, #4]
2000a36a:	681b      	ldr	r3, [r3, #0]
2000a36c:	689b      	ldr	r3, [r3, #8]
2000a36e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
2000a370:	69bb      	ldr	r3, [r7, #24]
2000a372:	099b      	lsrs	r3, r3, #6
2000a374:	f003 0301 	and.w	r3, r3, #1
2000a378:	2b00      	cmp	r3, #0
2000a37a:	d10f      	bne.n	2000a39c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
2000a37c:	69bb      	ldr	r3, [r7, #24]
2000a37e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
2000a382:	2b00      	cmp	r3, #0
2000a384:	d00a      	beq.n	2000a39c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
2000a386:	69fb      	ldr	r3, [r7, #28]
2000a388:	099b      	lsrs	r3, r3, #6
2000a38a:	f003 0301 	and.w	r3, r3, #1
2000a38e:	2b00      	cmp	r3, #0
2000a390:	d004      	beq.n	2000a39c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
2000a392:	687b      	ldr	r3, [r7, #4]
2000a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a396:	6878      	ldr	r0, [r7, #4]
2000a398:	4798      	blx	r3
    return;
2000a39a:	e0d7      	b.n	2000a54c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
2000a39c:	69bb      	ldr	r3, [r7, #24]
2000a39e:	085b      	lsrs	r3, r3, #1
2000a3a0:	f003 0301 	and.w	r3, r3, #1
2000a3a4:	2b00      	cmp	r3, #0
2000a3a6:	d00a      	beq.n	2000a3be <HAL_SPI_IRQHandler+0x66>
2000a3a8:	69fb      	ldr	r3, [r7, #28]
2000a3aa:	09db      	lsrs	r3, r3, #7
2000a3ac:	f003 0301 	and.w	r3, r3, #1
2000a3b0:	2b00      	cmp	r3, #0
2000a3b2:	d004      	beq.n	2000a3be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
2000a3b4:	687b      	ldr	r3, [r7, #4]
2000a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a3b8:	6878      	ldr	r0, [r7, #4]
2000a3ba:	4798      	blx	r3
    return;
2000a3bc:	e0c6      	b.n	2000a54c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
2000a3be:	69bb      	ldr	r3, [r7, #24]
2000a3c0:	095b      	lsrs	r3, r3, #5
2000a3c2:	f003 0301 	and.w	r3, r3, #1
2000a3c6:	2b00      	cmp	r3, #0
2000a3c8:	d10c      	bne.n	2000a3e4 <HAL_SPI_IRQHandler+0x8c>
2000a3ca:	69bb      	ldr	r3, [r7, #24]
2000a3cc:	099b      	lsrs	r3, r3, #6
2000a3ce:	f003 0301 	and.w	r3, r3, #1
2000a3d2:	2b00      	cmp	r3, #0
2000a3d4:	d106      	bne.n	2000a3e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
2000a3d6:	69bb      	ldr	r3, [r7, #24]
2000a3d8:	0a1b      	lsrs	r3, r3, #8
2000a3da:	f003 0301 	and.w	r3, r3, #1
2000a3de:	2b00      	cmp	r3, #0
2000a3e0:	f000 80b4 	beq.w	2000a54c <HAL_SPI_IRQHandler+0x1f4>
2000a3e4:	69fb      	ldr	r3, [r7, #28]
2000a3e6:	095b      	lsrs	r3, r3, #5
2000a3e8:	f003 0301 	and.w	r3, r3, #1
2000a3ec:	2b00      	cmp	r3, #0
2000a3ee:	f000 80ad 	beq.w	2000a54c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
2000a3f2:	69bb      	ldr	r3, [r7, #24]
2000a3f4:	099b      	lsrs	r3, r3, #6
2000a3f6:	f003 0301 	and.w	r3, r3, #1
2000a3fa:	2b00      	cmp	r3, #0
2000a3fc:	d023      	beq.n	2000a446 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2000a3fe:	687b      	ldr	r3, [r7, #4]
2000a400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000a404:	b2db      	uxtb	r3, r3
2000a406:	2b03      	cmp	r3, #3
2000a408:	d011      	beq.n	2000a42e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2000a40a:	687b      	ldr	r3, [r7, #4]
2000a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a40e:	f043 0204 	orr.w	r2, r3, #4
2000a412:	687b      	ldr	r3, [r7, #4]
2000a414:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a416:	2300      	movs	r3, #0
2000a418:	617b      	str	r3, [r7, #20]
2000a41a:	687b      	ldr	r3, [r7, #4]
2000a41c:	681b      	ldr	r3, [r3, #0]
2000a41e:	68db      	ldr	r3, [r3, #12]
2000a420:	617b      	str	r3, [r7, #20]
2000a422:	687b      	ldr	r3, [r7, #4]
2000a424:	681b      	ldr	r3, [r3, #0]
2000a426:	689b      	ldr	r3, [r3, #8]
2000a428:	617b      	str	r3, [r7, #20]
2000a42a:	697b      	ldr	r3, [r7, #20]
2000a42c:	e00b      	b.n	2000a446 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a42e:	2300      	movs	r3, #0
2000a430:	613b      	str	r3, [r7, #16]
2000a432:	687b      	ldr	r3, [r7, #4]
2000a434:	681b      	ldr	r3, [r3, #0]
2000a436:	68db      	ldr	r3, [r3, #12]
2000a438:	613b      	str	r3, [r7, #16]
2000a43a:	687b      	ldr	r3, [r7, #4]
2000a43c:	681b      	ldr	r3, [r3, #0]
2000a43e:	689b      	ldr	r3, [r3, #8]
2000a440:	613b      	str	r3, [r7, #16]
2000a442:	693b      	ldr	r3, [r7, #16]
        return;
2000a444:	e082      	b.n	2000a54c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
2000a446:	69bb      	ldr	r3, [r7, #24]
2000a448:	095b      	lsrs	r3, r3, #5
2000a44a:	f003 0301 	and.w	r3, r3, #1
2000a44e:	2b00      	cmp	r3, #0
2000a450:	d014      	beq.n	2000a47c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2000a452:	687b      	ldr	r3, [r7, #4]
2000a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a456:	f043 0201 	orr.w	r2, r3, #1
2000a45a:	687b      	ldr	r3, [r7, #4]
2000a45c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2000a45e:	2300      	movs	r3, #0
2000a460:	60fb      	str	r3, [r7, #12]
2000a462:	687b      	ldr	r3, [r7, #4]
2000a464:	681b      	ldr	r3, [r3, #0]
2000a466:	689b      	ldr	r3, [r3, #8]
2000a468:	60fb      	str	r3, [r7, #12]
2000a46a:	687b      	ldr	r3, [r7, #4]
2000a46c:	681b      	ldr	r3, [r3, #0]
2000a46e:	681a      	ldr	r2, [r3, #0]
2000a470:	687b      	ldr	r3, [r7, #4]
2000a472:	681b      	ldr	r3, [r3, #0]
2000a474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000a478:	601a      	str	r2, [r3, #0]
2000a47a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
2000a47c:	69bb      	ldr	r3, [r7, #24]
2000a47e:	0a1b      	lsrs	r3, r3, #8
2000a480:	f003 0301 	and.w	r3, r3, #1
2000a484:	2b00      	cmp	r3, #0
2000a486:	d00c      	beq.n	2000a4a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2000a488:	687b      	ldr	r3, [r7, #4]
2000a48a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a48c:	f043 0208 	orr.w	r2, r3, #8
2000a490:	687b      	ldr	r3, [r7, #4]
2000a492:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2000a494:	2300      	movs	r3, #0
2000a496:	60bb      	str	r3, [r7, #8]
2000a498:	687b      	ldr	r3, [r7, #4]
2000a49a:	681b      	ldr	r3, [r3, #0]
2000a49c:	689b      	ldr	r3, [r3, #8]
2000a49e:	60bb      	str	r3, [r7, #8]
2000a4a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000a4a2:	687b      	ldr	r3, [r7, #4]
2000a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a4a6:	2b00      	cmp	r3, #0
2000a4a8:	d04f      	beq.n	2000a54a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
2000a4aa:	687b      	ldr	r3, [r7, #4]
2000a4ac:	681b      	ldr	r3, [r3, #0]
2000a4ae:	685a      	ldr	r2, [r3, #4]
2000a4b0:	687b      	ldr	r3, [r7, #4]
2000a4b2:	681b      	ldr	r3, [r3, #0]
2000a4b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
2000a4b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
2000a4ba:	687b      	ldr	r3, [r7, #4]
2000a4bc:	2201      	movs	r2, #1
2000a4be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
2000a4c2:	69fb      	ldr	r3, [r7, #28]
2000a4c4:	f003 0302 	and.w	r3, r3, #2
2000a4c8:	2b00      	cmp	r3, #0
2000a4ca:	d104      	bne.n	2000a4d6 <HAL_SPI_IRQHandler+0x17e>
2000a4cc:	69fb      	ldr	r3, [r7, #28]
2000a4ce:	f003 0301 	and.w	r3, r3, #1
2000a4d2:	2b00      	cmp	r3, #0
2000a4d4:	d034      	beq.n	2000a540 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
2000a4d6:	687b      	ldr	r3, [r7, #4]
2000a4d8:	681b      	ldr	r3, [r3, #0]
2000a4da:	685a      	ldr	r2, [r3, #4]
2000a4dc:	687b      	ldr	r3, [r7, #4]
2000a4de:	681b      	ldr	r3, [r3, #0]
2000a4e0:	f022 0203 	bic.w	r2, r2, #3
2000a4e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
2000a4e6:	687b      	ldr	r3, [r7, #4]
2000a4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a4ea:	2b00      	cmp	r3, #0
2000a4ec:	d011      	beq.n	2000a512 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2000a4ee:	687b      	ldr	r3, [r7, #4]
2000a4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a4f2:	4a18      	ldr	r2, [pc, #96]	; (2000a554 <HAL_SPI_IRQHandler+0x1fc>)
2000a4f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2000a4f6:	687b      	ldr	r3, [r7, #4]
2000a4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a4fa:	4618      	mov	r0, r3
2000a4fc:	f7f8 fa9f 	bl	20002a3e <HAL_DMA_Abort_IT>
2000a500:	4603      	mov	r3, r0
2000a502:	2b00      	cmp	r3, #0
2000a504:	d005      	beq.n	2000a512 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a506:	687b      	ldr	r3, [r7, #4]
2000a508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a50a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a50e:	687b      	ldr	r3, [r7, #4]
2000a510:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
2000a512:	687b      	ldr	r3, [r7, #4]
2000a514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a516:	2b00      	cmp	r3, #0
2000a518:	d016      	beq.n	2000a548 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2000a51a:	687b      	ldr	r3, [r7, #4]
2000a51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a51e:	4a0d      	ldr	r2, [pc, #52]	; (2000a554 <HAL_SPI_IRQHandler+0x1fc>)
2000a520:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2000a522:	687b      	ldr	r3, [r7, #4]
2000a524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a526:	4618      	mov	r0, r3
2000a528:	f7f8 fa89 	bl	20002a3e <HAL_DMA_Abort_IT>
2000a52c:	4603      	mov	r3, r0
2000a52e:	2b00      	cmp	r3, #0
2000a530:	d00a      	beq.n	2000a548 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a532:	687b      	ldr	r3, [r7, #4]
2000a534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a53a:	687b      	ldr	r3, [r7, #4]
2000a53c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
2000a53e:	e003      	b.n	2000a548 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
2000a540:	6878      	ldr	r0, [r7, #4]
2000a542:	f000 f845 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
2000a546:	e000      	b.n	2000a54a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
2000a548:	bf00      	nop
    return;
2000a54a:	bf00      	nop
  }
}
2000a54c:	3720      	adds	r7, #32
2000a54e:	46bd      	mov	sp, r7
2000a550:	bd80      	pop	{r7, pc}
2000a552:	bf00      	nop
2000a554:	2000a8a1 	.word	0x2000a8a1

2000a558 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a558:	b480      	push	{r7}
2000a55a:	b083      	sub	sp, #12
2000a55c:	af00      	add	r7, sp, #0
2000a55e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
2000a560:	bf00      	nop
2000a562:	370c      	adds	r7, #12
2000a564:	46bd      	mov	sp, r7
2000a566:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a56a:	4770      	bx	lr

2000a56c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a56c:	b480      	push	{r7}
2000a56e:	b083      	sub	sp, #12
2000a570:	af00      	add	r7, sp, #0
2000a572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
2000a574:	bf00      	nop
2000a576:	370c      	adds	r7, #12
2000a578:	46bd      	mov	sp, r7
2000a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a57e:	4770      	bx	lr

2000a580 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a580:	b480      	push	{r7}
2000a582:	b083      	sub	sp, #12
2000a584:	af00      	add	r7, sp, #0
2000a586:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
2000a588:	bf00      	nop
2000a58a:	370c      	adds	r7, #12
2000a58c:	46bd      	mov	sp, r7
2000a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a592:	4770      	bx	lr

2000a594 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a594:	b480      	push	{r7}
2000a596:	b083      	sub	sp, #12
2000a598:	af00      	add	r7, sp, #0
2000a59a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
2000a59c:	bf00      	nop
2000a59e:	370c      	adds	r7, #12
2000a5a0:	46bd      	mov	sp, r7
2000a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5a6:	4770      	bx	lr

2000a5a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a5a8:	b480      	push	{r7}
2000a5aa:	b083      	sub	sp, #12
2000a5ac:	af00      	add	r7, sp, #0
2000a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
2000a5b0:	bf00      	nop
2000a5b2:	370c      	adds	r7, #12
2000a5b4:	46bd      	mov	sp, r7
2000a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5ba:	4770      	bx	lr

2000a5bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a5bc:	b480      	push	{r7}
2000a5be:	b083      	sub	sp, #12
2000a5c0:	af00      	add	r7, sp, #0
2000a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
2000a5c4:	bf00      	nop
2000a5c6:	370c      	adds	r7, #12
2000a5c8:	46bd      	mov	sp, r7
2000a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5ce:	4770      	bx	lr

2000a5d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
2000a5d0:	b480      	push	{r7}
2000a5d2:	b083      	sub	sp, #12
2000a5d4:	af00      	add	r7, sp, #0
2000a5d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
2000a5d8:	bf00      	nop
2000a5da:	370c      	adds	r7, #12
2000a5dc:	46bd      	mov	sp, r7
2000a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5e2:	4770      	bx	lr

2000a5e4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
2000a5e4:	b480      	push	{r7}
2000a5e6:	b083      	sub	sp, #12
2000a5e8:	af00      	add	r7, sp, #0
2000a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
2000a5ec:	bf00      	nop
2000a5ee:	370c      	adds	r7, #12
2000a5f0:	46bd      	mov	sp, r7
2000a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a5f6:	4770      	bx	lr

2000a5f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
2000a5f8:	b480      	push	{r7}
2000a5fa:	b083      	sub	sp, #12
2000a5fc:	af00      	add	r7, sp, #0
2000a5fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
2000a600:	687b      	ldr	r3, [r7, #4]
2000a602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000a606:	b2db      	uxtb	r3, r3
}
2000a608:	4618      	mov	r0, r3
2000a60a:	370c      	adds	r7, #12
2000a60c:	46bd      	mov	sp, r7
2000a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a612:	4770      	bx	lr

2000a614 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
2000a614:	b480      	push	{r7}
2000a616:	b083      	sub	sp, #12
2000a618:	af00      	add	r7, sp, #0
2000a61a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
2000a61c:	687b      	ldr	r3, [r7, #4]
2000a61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
2000a620:	4618      	mov	r0, r3
2000a622:	370c      	adds	r7, #12
2000a624:	46bd      	mov	sp, r7
2000a626:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a62a:	4770      	bx	lr

2000a62c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
2000a62c:	b580      	push	{r7, lr}
2000a62e:	b086      	sub	sp, #24
2000a630:	af00      	add	r7, sp, #0
2000a632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a634:	687b      	ldr	r3, [r7, #4]
2000a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a638:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000a63a:	f7f6 f968 	bl	2000090e <HAL_GetTick>
2000a63e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2000a640:	687b      	ldr	r3, [r7, #4]
2000a642:	681b      	ldr	r3, [r3, #0]
2000a644:	681b      	ldr	r3, [r3, #0]
2000a646:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000a64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000a64e:	d03b      	beq.n	2000a6c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000a650:	697b      	ldr	r3, [r7, #20]
2000a652:	681b      	ldr	r3, [r3, #0]
2000a654:	685a      	ldr	r2, [r3, #4]
2000a656:	697b      	ldr	r3, [r7, #20]
2000a658:	681b      	ldr	r3, [r3, #0]
2000a65a:	f022 0220 	bic.w	r2, r2, #32
2000a65e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
2000a660:	697b      	ldr	r3, [r7, #20]
2000a662:	681b      	ldr	r3, [r3, #0]
2000a664:	685a      	ldr	r2, [r3, #4]
2000a666:	697b      	ldr	r3, [r7, #20]
2000a668:	681b      	ldr	r3, [r3, #0]
2000a66a:	f022 0202 	bic.w	r2, r2, #2
2000a66e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000a670:	693a      	ldr	r2, [r7, #16]
2000a672:	2164      	movs	r1, #100	; 0x64
2000a674:	6978      	ldr	r0, [r7, #20]
2000a676:	f000 fc2d 	bl	2000aed4 <SPI_EndRxTxTransaction>
2000a67a:	4603      	mov	r3, r0
2000a67c:	2b00      	cmp	r3, #0
2000a67e:	d005      	beq.n	2000a68c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000a680:	697b      	ldr	r3, [r7, #20]
2000a682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a684:	f043 0220 	orr.w	r2, r3, #32
2000a688:	697b      	ldr	r3, [r7, #20]
2000a68a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000a68c:	697b      	ldr	r3, [r7, #20]
2000a68e:	689b      	ldr	r3, [r3, #8]
2000a690:	2b00      	cmp	r3, #0
2000a692:	d10a      	bne.n	2000a6aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a694:	2300      	movs	r3, #0
2000a696:	60fb      	str	r3, [r7, #12]
2000a698:	697b      	ldr	r3, [r7, #20]
2000a69a:	681b      	ldr	r3, [r3, #0]
2000a69c:	68db      	ldr	r3, [r3, #12]
2000a69e:	60fb      	str	r3, [r7, #12]
2000a6a0:	697b      	ldr	r3, [r7, #20]
2000a6a2:	681b      	ldr	r3, [r3, #0]
2000a6a4:	689b      	ldr	r3, [r3, #8]
2000a6a6:	60fb      	str	r3, [r7, #12]
2000a6a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
2000a6aa:	697b      	ldr	r3, [r7, #20]
2000a6ac:	2200      	movs	r2, #0
2000a6ae:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
2000a6b0:	697b      	ldr	r3, [r7, #20]
2000a6b2:	2201      	movs	r2, #1
2000a6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000a6b8:	697b      	ldr	r3, [r7, #20]
2000a6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a6bc:	2b00      	cmp	r3, #0
2000a6be:	d003      	beq.n	2000a6c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
2000a6c0:	6978      	ldr	r0, [r7, #20]
2000a6c2:	f7ff ff85 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
2000a6c6:	e002      	b.n	2000a6ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
2000a6c8:	6978      	ldr	r0, [r7, #20]
2000a6ca:	f7ff ff45 	bl	2000a558 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a6ce:	3718      	adds	r7, #24
2000a6d0:	46bd      	mov	sp, r7
2000a6d2:	bd80      	pop	{r7, pc}

2000a6d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a6d4:	b580      	push	{r7, lr}
2000a6d6:	b084      	sub	sp, #16
2000a6d8:	af00      	add	r7, sp, #0
2000a6da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a6dc:	687b      	ldr	r3, [r7, #4]
2000a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a6e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000a6e2:	f7f6 f914 	bl	2000090e <HAL_GetTick>
2000a6e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2000a6e8:	687b      	ldr	r3, [r7, #4]
2000a6ea:	681b      	ldr	r3, [r3, #0]
2000a6ec:	681b      	ldr	r3, [r3, #0]
2000a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000a6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000a6f6:	d03b      	beq.n	2000a770 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000a6f8:	68fb      	ldr	r3, [r7, #12]
2000a6fa:	681b      	ldr	r3, [r3, #0]
2000a6fc:	685a      	ldr	r2, [r3, #4]
2000a6fe:	68fb      	ldr	r3, [r7, #12]
2000a700:	681b      	ldr	r3, [r3, #0]
2000a702:	f022 0220 	bic.w	r2, r2, #32
2000a706:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
2000a708:	68fb      	ldr	r3, [r7, #12]
2000a70a:	689b      	ldr	r3, [r3, #8]
2000a70c:	2b00      	cmp	r3, #0
2000a70e:	d10d      	bne.n	2000a72c <SPI_DMAReceiveCplt+0x58>
2000a710:	68fb      	ldr	r3, [r7, #12]
2000a712:	685b      	ldr	r3, [r3, #4]
2000a714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000a718:	d108      	bne.n	2000a72c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a71a:	68fb      	ldr	r3, [r7, #12]
2000a71c:	681b      	ldr	r3, [r3, #0]
2000a71e:	685a      	ldr	r2, [r3, #4]
2000a720:	68fb      	ldr	r3, [r7, #12]
2000a722:	681b      	ldr	r3, [r3, #0]
2000a724:	f022 0203 	bic.w	r2, r2, #3
2000a728:	605a      	str	r2, [r3, #4]
2000a72a:	e007      	b.n	2000a73c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
2000a72c:	68fb      	ldr	r3, [r7, #12]
2000a72e:	681b      	ldr	r3, [r3, #0]
2000a730:	685a      	ldr	r2, [r3, #4]
2000a732:	68fb      	ldr	r3, [r7, #12]
2000a734:	681b      	ldr	r3, [r3, #0]
2000a736:	f022 0201 	bic.w	r2, r2, #1
2000a73a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000a73c:	68ba      	ldr	r2, [r7, #8]
2000a73e:	2164      	movs	r1, #100	; 0x64
2000a740:	68f8      	ldr	r0, [r7, #12]
2000a742:	f000 fb61 	bl	2000ae08 <SPI_EndRxTransaction>
2000a746:	4603      	mov	r3, r0
2000a748:	2b00      	cmp	r3, #0
2000a74a:	d002      	beq.n	2000a752 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2000a74c:	68fb      	ldr	r3, [r7, #12]
2000a74e:	2220      	movs	r2, #32
2000a750:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
2000a752:	68fb      	ldr	r3, [r7, #12]
2000a754:	2200      	movs	r2, #0
2000a756:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
2000a758:	68fb      	ldr	r3, [r7, #12]
2000a75a:	2201      	movs	r2, #1
2000a75c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000a760:	68fb      	ldr	r3, [r7, #12]
2000a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a764:	2b00      	cmp	r3, #0
2000a766:	d003      	beq.n	2000a770 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
2000a768:	68f8      	ldr	r0, [r7, #12]
2000a76a:	f7ff ff31 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
2000a76e:	e002      	b.n	2000a776 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
2000a770:	68f8      	ldr	r0, [r7, #12]
2000a772:	f7ff fefb 	bl	2000a56c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a776:	3710      	adds	r7, #16
2000a778:	46bd      	mov	sp, r7
2000a77a:	bd80      	pop	{r7, pc}

2000a77c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a77c:	b580      	push	{r7, lr}
2000a77e:	b084      	sub	sp, #16
2000a780:	af00      	add	r7, sp, #0
2000a782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a784:	687b      	ldr	r3, [r7, #4]
2000a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a788:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000a78a:	f7f6 f8c0 	bl	2000090e <HAL_GetTick>
2000a78e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2000a790:	687b      	ldr	r3, [r7, #4]
2000a792:	681b      	ldr	r3, [r3, #0]
2000a794:	681b      	ldr	r3, [r3, #0]
2000a796:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000a79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000a79e:	d02f      	beq.n	2000a800 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000a7a0:	68fb      	ldr	r3, [r7, #12]
2000a7a2:	681b      	ldr	r3, [r3, #0]
2000a7a4:	685a      	ldr	r2, [r3, #4]
2000a7a6:	68fb      	ldr	r3, [r7, #12]
2000a7a8:	681b      	ldr	r3, [r3, #0]
2000a7aa:	f022 0220 	bic.w	r2, r2, #32
2000a7ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000a7b0:	68ba      	ldr	r2, [r7, #8]
2000a7b2:	2164      	movs	r1, #100	; 0x64
2000a7b4:	68f8      	ldr	r0, [r7, #12]
2000a7b6:	f000 fb8d 	bl	2000aed4 <SPI_EndRxTxTransaction>
2000a7ba:	4603      	mov	r3, r0
2000a7bc:	2b00      	cmp	r3, #0
2000a7be:	d005      	beq.n	2000a7cc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000a7c0:	68fb      	ldr	r3, [r7, #12]
2000a7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a7c4:	f043 0220 	orr.w	r2, r3, #32
2000a7c8:	68fb      	ldr	r3, [r7, #12]
2000a7ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a7cc:	68fb      	ldr	r3, [r7, #12]
2000a7ce:	681b      	ldr	r3, [r3, #0]
2000a7d0:	685a      	ldr	r2, [r3, #4]
2000a7d2:	68fb      	ldr	r3, [r7, #12]
2000a7d4:	681b      	ldr	r3, [r3, #0]
2000a7d6:	f022 0203 	bic.w	r2, r2, #3
2000a7da:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
2000a7dc:	68fb      	ldr	r3, [r7, #12]
2000a7de:	2200      	movs	r2, #0
2000a7e0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
2000a7e2:	68fb      	ldr	r3, [r7, #12]
2000a7e4:	2200      	movs	r2, #0
2000a7e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
2000a7e8:	68fb      	ldr	r3, [r7, #12]
2000a7ea:	2201      	movs	r2, #1
2000a7ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000a7f0:	68fb      	ldr	r3, [r7, #12]
2000a7f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a7f4:	2b00      	cmp	r3, #0
2000a7f6:	d003      	beq.n	2000a800 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
2000a7f8:	68f8      	ldr	r0, [r7, #12]
2000a7fa:	f7ff fee9 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
2000a7fe:	e002      	b.n	2000a806 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
2000a800:	68f8      	ldr	r0, [r7, #12]
2000a802:	f7ff febd 	bl	2000a580 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a806:	3710      	adds	r7, #16
2000a808:	46bd      	mov	sp, r7
2000a80a:	bd80      	pop	{r7, pc}

2000a80c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
2000a80c:	b580      	push	{r7, lr}
2000a80e:	b084      	sub	sp, #16
2000a810:	af00      	add	r7, sp, #0
2000a812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a814:	687b      	ldr	r3, [r7, #4]
2000a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a818:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
2000a81a:	68f8      	ldr	r0, [r7, #12]
2000a81c:	f7ff feba 	bl	2000a594 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a820:	bf00      	nop
2000a822:	3710      	adds	r7, #16
2000a824:	46bd      	mov	sp, r7
2000a826:	bd80      	pop	{r7, pc}

2000a828 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a828:	b580      	push	{r7, lr}
2000a82a:	b084      	sub	sp, #16
2000a82c:	af00      	add	r7, sp, #0
2000a82e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a830:	687b      	ldr	r3, [r7, #4]
2000a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a834:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
2000a836:	68f8      	ldr	r0, [r7, #12]
2000a838:	f7ff feb6 	bl	2000a5a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a83c:	bf00      	nop
2000a83e:	3710      	adds	r7, #16
2000a840:	46bd      	mov	sp, r7
2000a842:	bd80      	pop	{r7, pc}

2000a844 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a844:	b580      	push	{r7, lr}
2000a846:	b084      	sub	sp, #16
2000a848:	af00      	add	r7, sp, #0
2000a84a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a84c:	687b      	ldr	r3, [r7, #4]
2000a84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a850:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2000a852:	68f8      	ldr	r0, [r7, #12]
2000a854:	f7ff feb2 	bl	2000a5bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a858:	bf00      	nop
2000a85a:	3710      	adds	r7, #16
2000a85c:	46bd      	mov	sp, r7
2000a85e:	bd80      	pop	{r7, pc}

2000a860 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
2000a860:	b580      	push	{r7, lr}
2000a862:	b084      	sub	sp, #16
2000a864:	af00      	add	r7, sp, #0
2000a866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a868:	687b      	ldr	r3, [r7, #4]
2000a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a86c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000a86e:	68fb      	ldr	r3, [r7, #12]
2000a870:	681b      	ldr	r3, [r3, #0]
2000a872:	685a      	ldr	r2, [r3, #4]
2000a874:	68fb      	ldr	r3, [r7, #12]
2000a876:	681b      	ldr	r3, [r3, #0]
2000a878:	f022 0203 	bic.w	r2, r2, #3
2000a87c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000a87e:	68fb      	ldr	r3, [r7, #12]
2000a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a882:	f043 0210 	orr.w	r2, r3, #16
2000a886:	68fb      	ldr	r3, [r7, #12]
2000a888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
2000a88a:	68fb      	ldr	r3, [r7, #12]
2000a88c:	2201      	movs	r2, #1
2000a88e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
2000a892:	68f8      	ldr	r0, [r7, #12]
2000a894:	f7ff fe9c 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a898:	bf00      	nop
2000a89a:	3710      	adds	r7, #16
2000a89c:	46bd      	mov	sp, r7
2000a89e:	bd80      	pop	{r7, pc}

2000a8a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
2000a8a0:	b580      	push	{r7, lr}
2000a8a2:	b084      	sub	sp, #16
2000a8a4:	af00      	add	r7, sp, #0
2000a8a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a8a8:	687b      	ldr	r3, [r7, #4]
2000a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a8ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
2000a8ae:	68fb      	ldr	r3, [r7, #12]
2000a8b0:	2200      	movs	r2, #0
2000a8b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
2000a8b4:	68fb      	ldr	r3, [r7, #12]
2000a8b6:	2200      	movs	r2, #0
2000a8b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
2000a8ba:	68f8      	ldr	r0, [r7, #12]
2000a8bc:	f7ff fe88 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a8c0:	bf00      	nop
2000a8c2:	3710      	adds	r7, #16
2000a8c4:	46bd      	mov	sp, r7
2000a8c6:	bd80      	pop	{r7, pc}

2000a8c8 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
2000a8c8:	b580      	push	{r7, lr}
2000a8ca:	b086      	sub	sp, #24
2000a8cc:	af00      	add	r7, sp, #0
2000a8ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a8d0:	687b      	ldr	r3, [r7, #4]
2000a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a8d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
2000a8d6:	697b      	ldr	r3, [r7, #20]
2000a8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a8da:	2200      	movs	r2, #0
2000a8dc:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000a8de:	4b2d      	ldr	r3, [pc, #180]	; (2000a994 <SPI_DMATxAbortCallback+0xcc>)
2000a8e0:	681b      	ldr	r3, [r3, #0]
2000a8e2:	4a2d      	ldr	r2, [pc, #180]	; (2000a998 <SPI_DMATxAbortCallback+0xd0>)
2000a8e4:	fba2 2303 	umull	r2, r3, r2, r3
2000a8e8:	0a5b      	lsrs	r3, r3, #9
2000a8ea:	2264      	movs	r2, #100	; 0x64
2000a8ec:	fb02 f303 	mul.w	r3, r2, r3
2000a8f0:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
2000a8f2:	697b      	ldr	r3, [r7, #20]
2000a8f4:	681b      	ldr	r3, [r3, #0]
2000a8f6:	685a      	ldr	r2, [r3, #4]
2000a8f8:	697b      	ldr	r3, [r7, #20]
2000a8fa:	681b      	ldr	r3, [r3, #0]
2000a8fc:	f022 0202 	bic.w	r2, r2, #2
2000a900:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000a902:	693b      	ldr	r3, [r7, #16]
2000a904:	2b00      	cmp	r3, #0
2000a906:	d106      	bne.n	2000a916 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a908:	697b      	ldr	r3, [r7, #20]
2000a90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a90c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a910:	697b      	ldr	r3, [r7, #20]
2000a912:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2000a914:	e009      	b.n	2000a92a <SPI_DMATxAbortCallback+0x62>
    }
    count--;
2000a916:	693b      	ldr	r3, [r7, #16]
2000a918:	3b01      	subs	r3, #1
2000a91a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
2000a91c:	697b      	ldr	r3, [r7, #20]
2000a91e:	681b      	ldr	r3, [r3, #0]
2000a920:	689b      	ldr	r3, [r3, #8]
2000a922:	f003 0302 	and.w	r3, r3, #2
2000a926:	2b00      	cmp	r3, #0
2000a928:	d0eb      	beq.n	2000a902 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
2000a92a:	697b      	ldr	r3, [r7, #20]
2000a92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a92e:	2b00      	cmp	r3, #0
2000a930:	d004      	beq.n	2000a93c <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
2000a932:	697b      	ldr	r3, [r7, #20]
2000a934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000a938:	2b00      	cmp	r3, #0
2000a93a:	d126      	bne.n	2000a98a <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
2000a93c:	697b      	ldr	r3, [r7, #20]
2000a93e:	2200      	movs	r2, #0
2000a940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
2000a942:	697b      	ldr	r3, [r7, #20]
2000a944:	2200      	movs	r2, #0
2000a946:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2000a948:	697b      	ldr	r3, [r7, #20]
2000a94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a94c:	2b40      	cmp	r3, #64	; 0x40
2000a94e:	d002      	beq.n	2000a956 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000a950:	697b      	ldr	r3, [r7, #20]
2000a952:	2200      	movs	r2, #0
2000a954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000a956:	2300      	movs	r3, #0
2000a958:	60fb      	str	r3, [r7, #12]
2000a95a:	697b      	ldr	r3, [r7, #20]
2000a95c:	681b      	ldr	r3, [r3, #0]
2000a95e:	68db      	ldr	r3, [r3, #12]
2000a960:	60fb      	str	r3, [r7, #12]
2000a962:	697b      	ldr	r3, [r7, #20]
2000a964:	681b      	ldr	r3, [r3, #0]
2000a966:	689b      	ldr	r3, [r3, #8]
2000a968:	60fb      	str	r3, [r7, #12]
2000a96a:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000a96c:	2300      	movs	r3, #0
2000a96e:	60bb      	str	r3, [r7, #8]
2000a970:	697b      	ldr	r3, [r7, #20]
2000a972:	681b      	ldr	r3, [r3, #0]
2000a974:	689b      	ldr	r3, [r3, #8]
2000a976:	60bb      	str	r3, [r7, #8]
2000a978:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
2000a97a:	697b      	ldr	r3, [r7, #20]
2000a97c:	2201      	movs	r2, #1
2000a97e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
2000a982:	6978      	ldr	r0, [r7, #20]
2000a984:	f7ff fe2e 	bl	2000a5e4 <HAL_SPI_AbortCpltCallback>
2000a988:	e000      	b.n	2000a98c <SPI_DMATxAbortCallback+0xc4>
      return;
2000a98a:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000a98c:	3718      	adds	r7, #24
2000a98e:	46bd      	mov	sp, r7
2000a990:	bd80      	pop	{r7, pc}
2000a992:	bf00      	nop
2000a994:	200003dc 	.word	0x200003dc
2000a998:	057619f1 	.word	0x057619f1

2000a99c <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
2000a99c:	b580      	push	{r7, lr}
2000a99e:	b086      	sub	sp, #24
2000a9a0:	af00      	add	r7, sp, #0
2000a9a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000a9a4:	687b      	ldr	r3, [r7, #4]
2000a9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a9a8:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
2000a9aa:	697b      	ldr	r3, [r7, #20]
2000a9ac:	681b      	ldr	r3, [r3, #0]
2000a9ae:	681a      	ldr	r2, [r3, #0]
2000a9b0:	697b      	ldr	r3, [r7, #20]
2000a9b2:	681b      	ldr	r3, [r3, #0]
2000a9b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000a9b8:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
2000a9ba:	697b      	ldr	r3, [r7, #20]
2000a9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000a9be:	2200      	movs	r2, #0
2000a9c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
2000a9c2:	697b      	ldr	r3, [r7, #20]
2000a9c4:	681b      	ldr	r3, [r3, #0]
2000a9c6:	685a      	ldr	r2, [r3, #4]
2000a9c8:	697b      	ldr	r3, [r7, #20]
2000a9ca:	681b      	ldr	r3, [r3, #0]
2000a9cc:	f022 0201 	bic.w	r2, r2, #1
2000a9d0:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
2000a9d2:	f7f5 ff9c 	bl	2000090e <HAL_GetTick>
2000a9d6:	4603      	mov	r3, r0
2000a9d8:	461a      	mov	r2, r3
2000a9da:	2164      	movs	r1, #100	; 0x64
2000a9dc:	6978      	ldr	r0, [r7, #20]
2000a9de:	f000 fa79 	bl	2000aed4 <SPI_EndRxTxTransaction>
2000a9e2:	4603      	mov	r3, r0
2000a9e4:	2b00      	cmp	r3, #0
2000a9e6:	d005      	beq.n	2000a9f4 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000a9e8:	697b      	ldr	r3, [r7, #20]
2000a9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000a9ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000a9f0:	697b      	ldr	r3, [r7, #20]
2000a9f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
2000a9f4:	697b      	ldr	r3, [r7, #20]
2000a9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000a9f8:	2b00      	cmp	r3, #0
2000a9fa:	d004      	beq.n	2000aa06 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
2000a9fc:	697b      	ldr	r3, [r7, #20]
2000a9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000aa00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000aa02:	2b00      	cmp	r3, #0
2000aa04:	d126      	bne.n	2000aa54 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
2000aa06:	697b      	ldr	r3, [r7, #20]
2000aa08:	2200      	movs	r2, #0
2000aa0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
2000aa0c:	697b      	ldr	r3, [r7, #20]
2000aa0e:	2200      	movs	r2, #0
2000aa10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2000aa12:	697b      	ldr	r3, [r7, #20]
2000aa14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000aa16:	2b40      	cmp	r3, #64	; 0x40
2000aa18:	d002      	beq.n	2000aa20 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000aa1a:	697b      	ldr	r3, [r7, #20]
2000aa1c:	2200      	movs	r2, #0
2000aa1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000aa20:	2300      	movs	r3, #0
2000aa22:	613b      	str	r3, [r7, #16]
2000aa24:	697b      	ldr	r3, [r7, #20]
2000aa26:	681b      	ldr	r3, [r3, #0]
2000aa28:	68db      	ldr	r3, [r3, #12]
2000aa2a:	613b      	str	r3, [r7, #16]
2000aa2c:	697b      	ldr	r3, [r7, #20]
2000aa2e:	681b      	ldr	r3, [r3, #0]
2000aa30:	689b      	ldr	r3, [r3, #8]
2000aa32:	613b      	str	r3, [r7, #16]
2000aa34:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000aa36:	2300      	movs	r3, #0
2000aa38:	60fb      	str	r3, [r7, #12]
2000aa3a:	697b      	ldr	r3, [r7, #20]
2000aa3c:	681b      	ldr	r3, [r3, #0]
2000aa3e:	689b      	ldr	r3, [r3, #8]
2000aa40:	60fb      	str	r3, [r7, #12]
2000aa42:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
2000aa44:	697b      	ldr	r3, [r7, #20]
2000aa46:	2201      	movs	r2, #1
2000aa48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
2000aa4c:	6978      	ldr	r0, [r7, #20]
2000aa4e:	f7ff fdc9 	bl	2000a5e4 <HAL_SPI_AbortCpltCallback>
2000aa52:	e000      	b.n	2000aa56 <SPI_DMARxAbortCallback+0xba>
      return;
2000aa54:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000aa56:	3718      	adds	r7, #24
2000aa58:	46bd      	mov	sp, r7
2000aa5a:	bd80      	pop	{r7, pc}

2000aa5c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000aa5c:	b580      	push	{r7, lr}
2000aa5e:	b082      	sub	sp, #8
2000aa60:	af00      	add	r7, sp, #0
2000aa62:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
2000aa64:	687b      	ldr	r3, [r7, #4]
2000aa66:	681b      	ldr	r3, [r3, #0]
2000aa68:	f103 020c 	add.w	r2, r3, #12
2000aa6c:	687b      	ldr	r3, [r7, #4]
2000aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000aa70:	7812      	ldrb	r2, [r2, #0]
2000aa72:	b2d2      	uxtb	r2, r2
2000aa74:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
2000aa76:	687b      	ldr	r3, [r7, #4]
2000aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000aa7a:	1c5a      	adds	r2, r3, #1
2000aa7c:	687b      	ldr	r3, [r7, #4]
2000aa7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2000aa80:	687b      	ldr	r3, [r7, #4]
2000aa82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000aa84:	b29b      	uxth	r3, r3
2000aa86:	3b01      	subs	r3, #1
2000aa88:	b29a      	uxth	r2, r3
2000aa8a:	687b      	ldr	r3, [r7, #4]
2000aa8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
2000aa8e:	687b      	ldr	r3, [r7, #4]
2000aa90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000aa92:	b29b      	uxth	r3, r3
2000aa94:	2b00      	cmp	r3, #0
2000aa96:	d10f      	bne.n	2000aab8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
2000aa98:	687b      	ldr	r3, [r7, #4]
2000aa9a:	681b      	ldr	r3, [r3, #0]
2000aa9c:	685a      	ldr	r2, [r3, #4]
2000aa9e:	687b      	ldr	r3, [r7, #4]
2000aaa0:	681b      	ldr	r3, [r3, #0]
2000aaa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
2000aaa6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
2000aaa8:	687b      	ldr	r3, [r7, #4]
2000aaaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000aaac:	b29b      	uxth	r3, r3
2000aaae:	2b00      	cmp	r3, #0
2000aab0:	d102      	bne.n	2000aab8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
2000aab2:	6878      	ldr	r0, [r7, #4]
2000aab4:	f000 fa50 	bl	2000af58 <SPI_CloseRxTx_ISR>
    }
  }
}
2000aab8:	bf00      	nop
2000aaba:	3708      	adds	r7, #8
2000aabc:	46bd      	mov	sp, r7
2000aabe:	bd80      	pop	{r7, pc}

2000aac0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000aac0:	b580      	push	{r7, lr}
2000aac2:	b082      	sub	sp, #8
2000aac4:	af00      	add	r7, sp, #0
2000aac6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2000aac8:	687b      	ldr	r3, [r7, #4]
2000aaca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000aacc:	687b      	ldr	r3, [r7, #4]
2000aace:	681b      	ldr	r3, [r3, #0]
2000aad0:	330c      	adds	r3, #12
2000aad2:	7812      	ldrb	r2, [r2, #0]
2000aad4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
2000aad6:	687b      	ldr	r3, [r7, #4]
2000aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000aada:	1c5a      	adds	r2, r3, #1
2000aadc:	687b      	ldr	r3, [r7, #4]
2000aade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000aae0:	687b      	ldr	r3, [r7, #4]
2000aae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000aae4:	b29b      	uxth	r3, r3
2000aae6:	3b01      	subs	r3, #1
2000aae8:	b29a      	uxth	r2, r3
2000aaea:	687b      	ldr	r3, [r7, #4]
2000aaec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
2000aaee:	687b      	ldr	r3, [r7, #4]
2000aaf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000aaf2:	b29b      	uxth	r3, r3
2000aaf4:	2b00      	cmp	r3, #0
2000aaf6:	d10f      	bne.n	2000ab18 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
2000aaf8:	687b      	ldr	r3, [r7, #4]
2000aafa:	681b      	ldr	r3, [r3, #0]
2000aafc:	685a      	ldr	r2, [r3, #4]
2000aafe:	687b      	ldr	r3, [r7, #4]
2000ab00:	681b      	ldr	r3, [r3, #0]
2000ab02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000ab06:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
2000ab08:	687b      	ldr	r3, [r7, #4]
2000ab0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ab0c:	b29b      	uxth	r3, r3
2000ab0e:	2b00      	cmp	r3, #0
2000ab10:	d102      	bne.n	2000ab18 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
2000ab12:	6878      	ldr	r0, [r7, #4]
2000ab14:	f000 fa20 	bl	2000af58 <SPI_CloseRxTx_ISR>
    }
  }
}
2000ab18:	bf00      	nop
2000ab1a:	3708      	adds	r7, #8
2000ab1c:	46bd      	mov	sp, r7
2000ab1e:	bd80      	pop	{r7, pc}

2000ab20 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2000ab20:	b580      	push	{r7, lr}
2000ab22:	b082      	sub	sp, #8
2000ab24:	af00      	add	r7, sp, #0
2000ab26:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
2000ab28:	687b      	ldr	r3, [r7, #4]
2000ab2a:	681b      	ldr	r3, [r3, #0]
2000ab2c:	68da      	ldr	r2, [r3, #12]
2000ab2e:	687b      	ldr	r3, [r7, #4]
2000ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000ab32:	b292      	uxth	r2, r2
2000ab34:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
2000ab36:	687b      	ldr	r3, [r7, #4]
2000ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000ab3a:	1c9a      	adds	r2, r3, #2
2000ab3c:	687b      	ldr	r3, [r7, #4]
2000ab3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2000ab40:	687b      	ldr	r3, [r7, #4]
2000ab42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ab44:	b29b      	uxth	r3, r3
2000ab46:	3b01      	subs	r3, #1
2000ab48:	b29a      	uxth	r2, r3
2000ab4a:	687b      	ldr	r3, [r7, #4]
2000ab4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
2000ab4e:	687b      	ldr	r3, [r7, #4]
2000ab50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ab52:	b29b      	uxth	r3, r3
2000ab54:	2b00      	cmp	r3, #0
2000ab56:	d10f      	bne.n	2000ab78 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
2000ab58:	687b      	ldr	r3, [r7, #4]
2000ab5a:	681b      	ldr	r3, [r3, #0]
2000ab5c:	685a      	ldr	r2, [r3, #4]
2000ab5e:	687b      	ldr	r3, [r7, #4]
2000ab60:	681b      	ldr	r3, [r3, #0]
2000ab62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000ab66:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
2000ab68:	687b      	ldr	r3, [r7, #4]
2000ab6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000ab6c:	b29b      	uxth	r3, r3
2000ab6e:	2b00      	cmp	r3, #0
2000ab70:	d102      	bne.n	2000ab78 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
2000ab72:	6878      	ldr	r0, [r7, #4]
2000ab74:	f000 f9f0 	bl	2000af58 <SPI_CloseRxTx_ISR>
    }
  }
}
2000ab78:	bf00      	nop
2000ab7a:	3708      	adds	r7, #8
2000ab7c:	46bd      	mov	sp, r7
2000ab7e:	bd80      	pop	{r7, pc}

2000ab80 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2000ab80:	b580      	push	{r7, lr}
2000ab82:	b082      	sub	sp, #8
2000ab84:	af00      	add	r7, sp, #0
2000ab86:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
2000ab88:	687b      	ldr	r3, [r7, #4]
2000ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ab8c:	881a      	ldrh	r2, [r3, #0]
2000ab8e:	687b      	ldr	r3, [r7, #4]
2000ab90:	681b      	ldr	r3, [r3, #0]
2000ab92:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
2000ab94:	687b      	ldr	r3, [r7, #4]
2000ab96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ab98:	1c9a      	adds	r2, r3, #2
2000ab9a:	687b      	ldr	r3, [r7, #4]
2000ab9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000ab9e:	687b      	ldr	r3, [r7, #4]
2000aba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000aba2:	b29b      	uxth	r3, r3
2000aba4:	3b01      	subs	r3, #1
2000aba6:	b29a      	uxth	r2, r3
2000aba8:	687b      	ldr	r3, [r7, #4]
2000abaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
2000abac:	687b      	ldr	r3, [r7, #4]
2000abae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000abb0:	b29b      	uxth	r3, r3
2000abb2:	2b00      	cmp	r3, #0
2000abb4:	d10f      	bne.n	2000abd6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
2000abb6:	687b      	ldr	r3, [r7, #4]
2000abb8:	681b      	ldr	r3, [r3, #0]
2000abba:	685a      	ldr	r2, [r3, #4]
2000abbc:	687b      	ldr	r3, [r7, #4]
2000abbe:	681b      	ldr	r3, [r3, #0]
2000abc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000abc4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
2000abc6:	687b      	ldr	r3, [r7, #4]
2000abc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000abca:	b29b      	uxth	r3, r3
2000abcc:	2b00      	cmp	r3, #0
2000abce:	d102      	bne.n	2000abd6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
2000abd0:	6878      	ldr	r0, [r7, #4]
2000abd2:	f000 f9c1 	bl	2000af58 <SPI_CloseRxTx_ISR>
    }
  }
}
2000abd6:	bf00      	nop
2000abd8:	3708      	adds	r7, #8
2000abda:	46bd      	mov	sp, r7
2000abdc:	bd80      	pop	{r7, pc}

2000abde <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000abde:	b580      	push	{r7, lr}
2000abe0:	b082      	sub	sp, #8
2000abe2:	af00      	add	r7, sp, #0
2000abe4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
2000abe6:	687b      	ldr	r3, [r7, #4]
2000abe8:	681b      	ldr	r3, [r3, #0]
2000abea:	f103 020c 	add.w	r2, r3, #12
2000abee:	687b      	ldr	r3, [r7, #4]
2000abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000abf2:	7812      	ldrb	r2, [r2, #0]
2000abf4:	b2d2      	uxtb	r2, r2
2000abf6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
2000abf8:	687b      	ldr	r3, [r7, #4]
2000abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000abfc:	1c5a      	adds	r2, r3, #1
2000abfe:	687b      	ldr	r3, [r7, #4]
2000ac00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2000ac02:	687b      	ldr	r3, [r7, #4]
2000ac04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ac06:	b29b      	uxth	r3, r3
2000ac08:	3b01      	subs	r3, #1
2000ac0a:	b29a      	uxth	r2, r3
2000ac0c:	687b      	ldr	r3, [r7, #4]
2000ac0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
2000ac10:	687b      	ldr	r3, [r7, #4]
2000ac12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ac14:	b29b      	uxth	r3, r3
2000ac16:	2b00      	cmp	r3, #0
2000ac18:	d102      	bne.n	2000ac20 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
2000ac1a:	6878      	ldr	r0, [r7, #4]
2000ac1c:	f000 fa10 	bl	2000b040 <SPI_CloseRx_ISR>
  }
}
2000ac20:	bf00      	nop
2000ac22:	3708      	adds	r7, #8
2000ac24:	46bd      	mov	sp, r7
2000ac26:	bd80      	pop	{r7, pc}

2000ac28 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2000ac28:	b580      	push	{r7, lr}
2000ac2a:	b082      	sub	sp, #8
2000ac2c:	af00      	add	r7, sp, #0
2000ac2e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
2000ac30:	687b      	ldr	r3, [r7, #4]
2000ac32:	681b      	ldr	r3, [r3, #0]
2000ac34:	68da      	ldr	r2, [r3, #12]
2000ac36:	687b      	ldr	r3, [r7, #4]
2000ac38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000ac3a:	b292      	uxth	r2, r2
2000ac3c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
2000ac3e:	687b      	ldr	r3, [r7, #4]
2000ac40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000ac42:	1c9a      	adds	r2, r3, #2
2000ac44:	687b      	ldr	r3, [r7, #4]
2000ac46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2000ac48:	687b      	ldr	r3, [r7, #4]
2000ac4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ac4c:	b29b      	uxth	r3, r3
2000ac4e:	3b01      	subs	r3, #1
2000ac50:	b29a      	uxth	r2, r3
2000ac52:	687b      	ldr	r3, [r7, #4]
2000ac54:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
2000ac56:	687b      	ldr	r3, [r7, #4]
2000ac58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000ac5a:	b29b      	uxth	r3, r3
2000ac5c:	2b00      	cmp	r3, #0
2000ac5e:	d102      	bne.n	2000ac66 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
2000ac60:	6878      	ldr	r0, [r7, #4]
2000ac62:	f000 f9ed 	bl	2000b040 <SPI_CloseRx_ISR>
  }
}
2000ac66:	bf00      	nop
2000ac68:	3708      	adds	r7, #8
2000ac6a:	46bd      	mov	sp, r7
2000ac6c:	bd80      	pop	{r7, pc}

2000ac6e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000ac6e:	b580      	push	{r7, lr}
2000ac70:	b082      	sub	sp, #8
2000ac72:	af00      	add	r7, sp, #0
2000ac74:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2000ac76:	687b      	ldr	r3, [r7, #4]
2000ac78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000ac7a:	687b      	ldr	r3, [r7, #4]
2000ac7c:	681b      	ldr	r3, [r3, #0]
2000ac7e:	330c      	adds	r3, #12
2000ac80:	7812      	ldrb	r2, [r2, #0]
2000ac82:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
2000ac84:	687b      	ldr	r3, [r7, #4]
2000ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ac88:	1c5a      	adds	r2, r3, #1
2000ac8a:	687b      	ldr	r3, [r7, #4]
2000ac8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000ac8e:	687b      	ldr	r3, [r7, #4]
2000ac90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000ac92:	b29b      	uxth	r3, r3
2000ac94:	3b01      	subs	r3, #1
2000ac96:	b29a      	uxth	r2, r3
2000ac98:	687b      	ldr	r3, [r7, #4]
2000ac9a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
2000ac9c:	687b      	ldr	r3, [r7, #4]
2000ac9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000aca0:	b29b      	uxth	r3, r3
2000aca2:	2b00      	cmp	r3, #0
2000aca4:	d102      	bne.n	2000acac <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
2000aca6:	6878      	ldr	r0, [r7, #4]
2000aca8:	f000 fa0a 	bl	2000b0c0 <SPI_CloseTx_ISR>
  }
}
2000acac:	bf00      	nop
2000acae:	3708      	adds	r7, #8
2000acb0:	46bd      	mov	sp, r7
2000acb2:	bd80      	pop	{r7, pc}

2000acb4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2000acb4:	b580      	push	{r7, lr}
2000acb6:	b082      	sub	sp, #8
2000acb8:	af00      	add	r7, sp, #0
2000acba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
2000acbc:	687b      	ldr	r3, [r7, #4]
2000acbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000acc0:	881a      	ldrh	r2, [r3, #0]
2000acc2:	687b      	ldr	r3, [r7, #4]
2000acc4:	681b      	ldr	r3, [r3, #0]
2000acc6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
2000acc8:	687b      	ldr	r3, [r7, #4]
2000acca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000accc:	1c9a      	adds	r2, r3, #2
2000acce:	687b      	ldr	r3, [r7, #4]
2000acd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000acd2:	687b      	ldr	r3, [r7, #4]
2000acd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000acd6:	b29b      	uxth	r3, r3
2000acd8:	3b01      	subs	r3, #1
2000acda:	b29a      	uxth	r2, r3
2000acdc:	687b      	ldr	r3, [r7, #4]
2000acde:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
2000ace0:	687b      	ldr	r3, [r7, #4]
2000ace2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000ace4:	b29b      	uxth	r3, r3
2000ace6:	2b00      	cmp	r3, #0
2000ace8:	d102      	bne.n	2000acf0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
2000acea:	6878      	ldr	r0, [r7, #4]
2000acec:	f000 f9e8 	bl	2000b0c0 <SPI_CloseTx_ISR>
  }
}
2000acf0:	bf00      	nop
2000acf2:	3708      	adds	r7, #8
2000acf4:	46bd      	mov	sp, r7
2000acf6:	bd80      	pop	{r7, pc}

2000acf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
2000acf8:	b580      	push	{r7, lr}
2000acfa:	b088      	sub	sp, #32
2000acfc:	af00      	add	r7, sp, #0
2000acfe:	60f8      	str	r0, [r7, #12]
2000ad00:	60b9      	str	r1, [r7, #8]
2000ad02:	603b      	str	r3, [r7, #0]
2000ad04:	4613      	mov	r3, r2
2000ad06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
2000ad08:	f7f5 fe01 	bl	2000090e <HAL_GetTick>
2000ad0c:	4602      	mov	r2, r0
2000ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000ad10:	1a9b      	subs	r3, r3, r2
2000ad12:	683a      	ldr	r2, [r7, #0]
2000ad14:	4413      	add	r3, r2
2000ad16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
2000ad18:	f7f5 fdf9 	bl	2000090e <HAL_GetTick>
2000ad1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
2000ad1e:	4b39      	ldr	r3, [pc, #228]	; (2000ae04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
2000ad20:	681b      	ldr	r3, [r3, #0]
2000ad22:	015b      	lsls	r3, r3, #5
2000ad24:	0d1b      	lsrs	r3, r3, #20
2000ad26:	69fa      	ldr	r2, [r7, #28]
2000ad28:	fb02 f303 	mul.w	r3, r2, r3
2000ad2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
2000ad2e:	e054      	b.n	2000adda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
2000ad30:	683b      	ldr	r3, [r7, #0]
2000ad32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000ad36:	d050      	beq.n	2000adda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
2000ad38:	f7f5 fde9 	bl	2000090e <HAL_GetTick>
2000ad3c:	4602      	mov	r2, r0
2000ad3e:	69bb      	ldr	r3, [r7, #24]
2000ad40:	1ad3      	subs	r3, r2, r3
2000ad42:	69fa      	ldr	r2, [r7, #28]
2000ad44:	429a      	cmp	r2, r3
2000ad46:	d902      	bls.n	2000ad4e <SPI_WaitFlagStateUntilTimeout+0x56>
2000ad48:	69fb      	ldr	r3, [r7, #28]
2000ad4a:	2b00      	cmp	r3, #0
2000ad4c:	d13d      	bne.n	2000adca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2000ad4e:	68fb      	ldr	r3, [r7, #12]
2000ad50:	681b      	ldr	r3, [r3, #0]
2000ad52:	685a      	ldr	r2, [r3, #4]
2000ad54:	68fb      	ldr	r3, [r7, #12]
2000ad56:	681b      	ldr	r3, [r3, #0]
2000ad58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
2000ad5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000ad5e:	68fb      	ldr	r3, [r7, #12]
2000ad60:	685b      	ldr	r3, [r3, #4]
2000ad62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000ad66:	d111      	bne.n	2000ad8c <SPI_WaitFlagStateUntilTimeout+0x94>
2000ad68:	68fb      	ldr	r3, [r7, #12]
2000ad6a:	689b      	ldr	r3, [r3, #8]
2000ad6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000ad70:	d004      	beq.n	2000ad7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000ad72:	68fb      	ldr	r3, [r7, #12]
2000ad74:	689b      	ldr	r3, [r3, #8]
2000ad76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000ad7a:	d107      	bne.n	2000ad8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
2000ad7c:	68fb      	ldr	r3, [r7, #12]
2000ad7e:	681b      	ldr	r3, [r3, #0]
2000ad80:	681a      	ldr	r2, [r3, #0]
2000ad82:	68fb      	ldr	r3, [r7, #12]
2000ad84:	681b      	ldr	r3, [r3, #0]
2000ad86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000ad8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
2000ad8c:	68fb      	ldr	r3, [r7, #12]
2000ad8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000ad90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2000ad94:	d10f      	bne.n	2000adb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
2000ad96:	68fb      	ldr	r3, [r7, #12]
2000ad98:	681b      	ldr	r3, [r3, #0]
2000ad9a:	681a      	ldr	r2, [r3, #0]
2000ad9c:	68fb      	ldr	r3, [r7, #12]
2000ad9e:	681b      	ldr	r3, [r3, #0]
2000ada0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
2000ada4:	601a      	str	r2, [r3, #0]
2000ada6:	68fb      	ldr	r3, [r7, #12]
2000ada8:	681b      	ldr	r3, [r3, #0]
2000adaa:	681a      	ldr	r2, [r3, #0]
2000adac:	68fb      	ldr	r3, [r7, #12]
2000adae:	681b      	ldr	r3, [r3, #0]
2000adb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000adb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
2000adb6:	68fb      	ldr	r3, [r7, #12]
2000adb8:	2201      	movs	r2, #1
2000adba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
2000adbe:	68fb      	ldr	r3, [r7, #12]
2000adc0:	2200      	movs	r2, #0
2000adc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
2000adc6:	2303      	movs	r3, #3
2000adc8:	e017      	b.n	2000adfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
2000adca:	697b      	ldr	r3, [r7, #20]
2000adcc:	2b00      	cmp	r3, #0
2000adce:	d101      	bne.n	2000add4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
2000add0:	2300      	movs	r3, #0
2000add2:	61fb      	str	r3, [r7, #28]
      }
      count--;
2000add4:	697b      	ldr	r3, [r7, #20]
2000add6:	3b01      	subs	r3, #1
2000add8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
2000adda:	68fb      	ldr	r3, [r7, #12]
2000addc:	681b      	ldr	r3, [r3, #0]
2000adde:	689a      	ldr	r2, [r3, #8]
2000ade0:	68bb      	ldr	r3, [r7, #8]
2000ade2:	4013      	ands	r3, r2
2000ade4:	68ba      	ldr	r2, [r7, #8]
2000ade6:	429a      	cmp	r2, r3
2000ade8:	bf0c      	ite	eq
2000adea:	2301      	moveq	r3, #1
2000adec:	2300      	movne	r3, #0
2000adee:	b2db      	uxtb	r3, r3
2000adf0:	461a      	mov	r2, r3
2000adf2:	79fb      	ldrb	r3, [r7, #7]
2000adf4:	429a      	cmp	r2, r3
2000adf6:	d19b      	bne.n	2000ad30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
2000adf8:	2300      	movs	r3, #0
}
2000adfa:	4618      	mov	r0, r3
2000adfc:	3720      	adds	r7, #32
2000adfe:	46bd      	mov	sp, r7
2000ae00:	bd80      	pop	{r7, pc}
2000ae02:	bf00      	nop
2000ae04:	200003dc 	.word	0x200003dc

2000ae08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
2000ae08:	b580      	push	{r7, lr}
2000ae0a:	b086      	sub	sp, #24
2000ae0c:	af02      	add	r7, sp, #8
2000ae0e:	60f8      	str	r0, [r7, #12]
2000ae10:	60b9      	str	r1, [r7, #8]
2000ae12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000ae14:	68fb      	ldr	r3, [r7, #12]
2000ae16:	685b      	ldr	r3, [r3, #4]
2000ae18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000ae1c:	d111      	bne.n	2000ae42 <SPI_EndRxTransaction+0x3a>
2000ae1e:	68fb      	ldr	r3, [r7, #12]
2000ae20:	689b      	ldr	r3, [r3, #8]
2000ae22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000ae26:	d004      	beq.n	2000ae32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000ae28:	68fb      	ldr	r3, [r7, #12]
2000ae2a:	689b      	ldr	r3, [r3, #8]
2000ae2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000ae30:	d107      	bne.n	2000ae42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
2000ae32:	68fb      	ldr	r3, [r7, #12]
2000ae34:	681b      	ldr	r3, [r3, #0]
2000ae36:	681a      	ldr	r2, [r3, #0]
2000ae38:	68fb      	ldr	r3, [r7, #12]
2000ae3a:	681b      	ldr	r3, [r3, #0]
2000ae3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000ae40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000ae42:	68fb      	ldr	r3, [r7, #12]
2000ae44:	685b      	ldr	r3, [r3, #4]
2000ae46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000ae4a:	d12a      	bne.n	2000aea2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
2000ae4c:	68fb      	ldr	r3, [r7, #12]
2000ae4e:	689b      	ldr	r3, [r3, #8]
2000ae50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000ae54:	d012      	beq.n	2000ae7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2000ae56:	687b      	ldr	r3, [r7, #4]
2000ae58:	9300      	str	r3, [sp, #0]
2000ae5a:	68bb      	ldr	r3, [r7, #8]
2000ae5c:	2200      	movs	r2, #0
2000ae5e:	2180      	movs	r1, #128	; 0x80
2000ae60:	68f8      	ldr	r0, [r7, #12]
2000ae62:	f7ff ff49 	bl	2000acf8 <SPI_WaitFlagStateUntilTimeout>
2000ae66:	4603      	mov	r3, r0
2000ae68:	2b00      	cmp	r3, #0
2000ae6a:	d02d      	beq.n	2000aec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000ae6c:	68fb      	ldr	r3, [r7, #12]
2000ae6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000ae70:	f043 0220 	orr.w	r2, r3, #32
2000ae74:	68fb      	ldr	r3, [r7, #12]
2000ae76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
2000ae78:	2303      	movs	r3, #3
2000ae7a:	e026      	b.n	2000aeca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
2000ae7c:	687b      	ldr	r3, [r7, #4]
2000ae7e:	9300      	str	r3, [sp, #0]
2000ae80:	68bb      	ldr	r3, [r7, #8]
2000ae82:	2200      	movs	r2, #0
2000ae84:	2101      	movs	r1, #1
2000ae86:	68f8      	ldr	r0, [r7, #12]
2000ae88:	f7ff ff36 	bl	2000acf8 <SPI_WaitFlagStateUntilTimeout>
2000ae8c:	4603      	mov	r3, r0
2000ae8e:	2b00      	cmp	r3, #0
2000ae90:	d01a      	beq.n	2000aec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000ae92:	68fb      	ldr	r3, [r7, #12]
2000ae94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000ae96:	f043 0220 	orr.w	r2, r3, #32
2000ae9a:	68fb      	ldr	r3, [r7, #12]
2000ae9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
2000ae9e:	2303      	movs	r3, #3
2000aea0:	e013      	b.n	2000aeca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
2000aea2:	687b      	ldr	r3, [r7, #4]
2000aea4:	9300      	str	r3, [sp, #0]
2000aea6:	68bb      	ldr	r3, [r7, #8]
2000aea8:	2200      	movs	r2, #0
2000aeaa:	2101      	movs	r1, #1
2000aeac:	68f8      	ldr	r0, [r7, #12]
2000aeae:	f7ff ff23 	bl	2000acf8 <SPI_WaitFlagStateUntilTimeout>
2000aeb2:	4603      	mov	r3, r0
2000aeb4:	2b00      	cmp	r3, #0
2000aeb6:	d007      	beq.n	2000aec8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000aeb8:	68fb      	ldr	r3, [r7, #12]
2000aeba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000aebc:	f043 0220 	orr.w	r2, r3, #32
2000aec0:	68fb      	ldr	r3, [r7, #12]
2000aec2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
2000aec4:	2303      	movs	r3, #3
2000aec6:	e000      	b.n	2000aeca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
2000aec8:	2300      	movs	r3, #0
}
2000aeca:	4618      	mov	r0, r3
2000aecc:	3710      	adds	r7, #16
2000aece:	46bd      	mov	sp, r7
2000aed0:	bd80      	pop	{r7, pc}
	...

2000aed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
2000aed4:	b580      	push	{r7, lr}
2000aed6:	b088      	sub	sp, #32
2000aed8:	af02      	add	r7, sp, #8
2000aeda:	60f8      	str	r0, [r7, #12]
2000aedc:	60b9      	str	r1, [r7, #8]
2000aede:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
2000aee0:	4b1b      	ldr	r3, [pc, #108]	; (2000af50 <SPI_EndRxTxTransaction+0x7c>)
2000aee2:	681b      	ldr	r3, [r3, #0]
2000aee4:	4a1b      	ldr	r2, [pc, #108]	; (2000af54 <SPI_EndRxTxTransaction+0x80>)
2000aee6:	fba2 2303 	umull	r2, r3, r2, r3
2000aeea:	0d5b      	lsrs	r3, r3, #21
2000aeec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
2000aef0:	fb02 f303 	mul.w	r3, r2, r3
2000aef4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000aef6:	68fb      	ldr	r3, [r7, #12]
2000aef8:	685b      	ldr	r3, [r3, #4]
2000aefa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000aefe:	d112      	bne.n	2000af26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2000af00:	687b      	ldr	r3, [r7, #4]
2000af02:	9300      	str	r3, [sp, #0]
2000af04:	68bb      	ldr	r3, [r7, #8]
2000af06:	2200      	movs	r2, #0
2000af08:	2180      	movs	r1, #128	; 0x80
2000af0a:	68f8      	ldr	r0, [r7, #12]
2000af0c:	f7ff fef4 	bl	2000acf8 <SPI_WaitFlagStateUntilTimeout>
2000af10:	4603      	mov	r3, r0
2000af12:	2b00      	cmp	r3, #0
2000af14:	d016      	beq.n	2000af44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000af16:	68fb      	ldr	r3, [r7, #12]
2000af18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000af1a:	f043 0220 	orr.w	r2, r3, #32
2000af1e:	68fb      	ldr	r3, [r7, #12]
2000af20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
2000af22:	2303      	movs	r3, #3
2000af24:	e00f      	b.n	2000af46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
2000af26:	697b      	ldr	r3, [r7, #20]
2000af28:	2b00      	cmp	r3, #0
2000af2a:	d00a      	beq.n	2000af42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
2000af2c:	697b      	ldr	r3, [r7, #20]
2000af2e:	3b01      	subs	r3, #1
2000af30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
2000af32:	68fb      	ldr	r3, [r7, #12]
2000af34:	681b      	ldr	r3, [r3, #0]
2000af36:	689b      	ldr	r3, [r3, #8]
2000af38:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000af3c:	2b80      	cmp	r3, #128	; 0x80
2000af3e:	d0f2      	beq.n	2000af26 <SPI_EndRxTxTransaction+0x52>
2000af40:	e000      	b.n	2000af44 <SPI_EndRxTxTransaction+0x70>
        break;
2000af42:	bf00      	nop
  }

  return HAL_OK;
2000af44:	2300      	movs	r3, #0
}
2000af46:	4618      	mov	r0, r3
2000af48:	3718      	adds	r7, #24
2000af4a:	46bd      	mov	sp, r7
2000af4c:	bd80      	pop	{r7, pc}
2000af4e:	bf00      	nop
2000af50:	200003dc 	.word	0x200003dc
2000af54:	165e9f81 	.word	0x165e9f81

2000af58 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
2000af58:	b580      	push	{r7, lr}
2000af5a:	b086      	sub	sp, #24
2000af5c:	af00      	add	r7, sp, #0
2000af5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000af60:	4b35      	ldr	r3, [pc, #212]	; (2000b038 <SPI_CloseRxTx_ISR+0xe0>)
2000af62:	681b      	ldr	r3, [r3, #0]
2000af64:	4a35      	ldr	r2, [pc, #212]	; (2000b03c <SPI_CloseRxTx_ISR+0xe4>)
2000af66:	fba2 2303 	umull	r2, r3, r2, r3
2000af6a:	0a5b      	lsrs	r3, r3, #9
2000af6c:	2264      	movs	r2, #100	; 0x64
2000af6e:	fb02 f303 	mul.w	r3, r2, r3
2000af72:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
2000af74:	f7f5 fccb 	bl	2000090e <HAL_GetTick>
2000af78:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000af7a:	687b      	ldr	r3, [r7, #4]
2000af7c:	681b      	ldr	r3, [r3, #0]
2000af7e:	685a      	ldr	r2, [r3, #4]
2000af80:	687b      	ldr	r3, [r7, #4]
2000af82:	681b      	ldr	r3, [r3, #0]
2000af84:	f022 0220 	bic.w	r2, r2, #32
2000af88:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000af8a:	693b      	ldr	r3, [r7, #16]
2000af8c:	2b00      	cmp	r3, #0
2000af8e:	d106      	bne.n	2000af9e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000af90:	687b      	ldr	r3, [r7, #4]
2000af92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000af94:	f043 0220 	orr.w	r2, r3, #32
2000af98:	687b      	ldr	r3, [r7, #4]
2000af9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2000af9c:	e009      	b.n	2000afb2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
2000af9e:	693b      	ldr	r3, [r7, #16]
2000afa0:	3b01      	subs	r3, #1
2000afa2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
2000afa4:	687b      	ldr	r3, [r7, #4]
2000afa6:	681b      	ldr	r3, [r3, #0]
2000afa8:	689b      	ldr	r3, [r3, #8]
2000afaa:	f003 0302 	and.w	r3, r3, #2
2000afae:	2b00      	cmp	r3, #0
2000afb0:	d0eb      	beq.n	2000af8a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000afb2:	697a      	ldr	r2, [r7, #20]
2000afb4:	2164      	movs	r1, #100	; 0x64
2000afb6:	6878      	ldr	r0, [r7, #4]
2000afb8:	f7ff ff8c 	bl	2000aed4 <SPI_EndRxTxTransaction>
2000afbc:	4603      	mov	r3, r0
2000afbe:	2b00      	cmp	r3, #0
2000afc0:	d005      	beq.n	2000afce <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000afc2:	687b      	ldr	r3, [r7, #4]
2000afc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000afc6:	f043 0220 	orr.w	r2, r3, #32
2000afca:	687b      	ldr	r3, [r7, #4]
2000afcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000afce:	687b      	ldr	r3, [r7, #4]
2000afd0:	689b      	ldr	r3, [r3, #8]
2000afd2:	2b00      	cmp	r3, #0
2000afd4:	d10a      	bne.n	2000afec <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000afd6:	2300      	movs	r3, #0
2000afd8:	60fb      	str	r3, [r7, #12]
2000afda:	687b      	ldr	r3, [r7, #4]
2000afdc:	681b      	ldr	r3, [r3, #0]
2000afde:	68db      	ldr	r3, [r3, #12]
2000afe0:	60fb      	str	r3, [r7, #12]
2000afe2:	687b      	ldr	r3, [r7, #4]
2000afe4:	681b      	ldr	r3, [r3, #0]
2000afe6:	689b      	ldr	r3, [r3, #8]
2000afe8:	60fb      	str	r3, [r7, #12]
2000afea:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
2000afec:	687b      	ldr	r3, [r7, #4]
2000afee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000aff0:	2b00      	cmp	r3, #0
2000aff2:	d115      	bne.n	2000b020 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
2000aff4:	687b      	ldr	r3, [r7, #4]
2000aff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000affa:	b2db      	uxtb	r3, r3
2000affc:	2b04      	cmp	r3, #4
2000affe:	d107      	bne.n	2000b010 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
2000b000:	687b      	ldr	r3, [r7, #4]
2000b002:	2201      	movs	r2, #1
2000b004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
2000b008:	6878      	ldr	r0, [r7, #4]
2000b00a:	f7ff faaf 	bl	2000a56c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
2000b00e:	e00e      	b.n	2000b02e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
2000b010:	687b      	ldr	r3, [r7, #4]
2000b012:	2201      	movs	r2, #1
2000b014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
2000b018:	6878      	ldr	r0, [r7, #4]
2000b01a:	f7ff fab1 	bl	2000a580 <HAL_SPI_TxRxCpltCallback>
}
2000b01e:	e006      	b.n	2000b02e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
2000b020:	687b      	ldr	r3, [r7, #4]
2000b022:	2201      	movs	r2, #1
2000b024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
2000b028:	6878      	ldr	r0, [r7, #4]
2000b02a:	f7ff fad1 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
}
2000b02e:	bf00      	nop
2000b030:	3718      	adds	r7, #24
2000b032:	46bd      	mov	sp, r7
2000b034:	bd80      	pop	{r7, pc}
2000b036:	bf00      	nop
2000b038:	200003dc 	.word	0x200003dc
2000b03c:	057619f1 	.word	0x057619f1

2000b040 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
2000b040:	b580      	push	{r7, lr}
2000b042:	b084      	sub	sp, #16
2000b044:	af00      	add	r7, sp, #0
2000b046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
2000b048:	687b      	ldr	r3, [r7, #4]
2000b04a:	681b      	ldr	r3, [r3, #0]
2000b04c:	685a      	ldr	r2, [r3, #4]
2000b04e:	687b      	ldr	r3, [r7, #4]
2000b050:	681b      	ldr	r3, [r3, #0]
2000b052:	f022 0260 	bic.w	r2, r2, #96	; 0x60
2000b056:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
2000b058:	f7f5 fc59 	bl	2000090e <HAL_GetTick>
2000b05c:	4603      	mov	r3, r0
2000b05e:	461a      	mov	r2, r3
2000b060:	2164      	movs	r1, #100	; 0x64
2000b062:	6878      	ldr	r0, [r7, #4]
2000b064:	f7ff fed0 	bl	2000ae08 <SPI_EndRxTransaction>
2000b068:	4603      	mov	r3, r0
2000b06a:	2b00      	cmp	r3, #0
2000b06c:	d005      	beq.n	2000b07a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000b06e:	687b      	ldr	r3, [r7, #4]
2000b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b072:	f043 0220 	orr.w	r2, r3, #32
2000b076:	687b      	ldr	r3, [r7, #4]
2000b078:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000b07a:	687b      	ldr	r3, [r7, #4]
2000b07c:	689b      	ldr	r3, [r3, #8]
2000b07e:	2b00      	cmp	r3, #0
2000b080:	d10a      	bne.n	2000b098 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000b082:	2300      	movs	r3, #0
2000b084:	60fb      	str	r3, [r7, #12]
2000b086:	687b      	ldr	r3, [r7, #4]
2000b088:	681b      	ldr	r3, [r3, #0]
2000b08a:	68db      	ldr	r3, [r3, #12]
2000b08c:	60fb      	str	r3, [r7, #12]
2000b08e:	687b      	ldr	r3, [r7, #4]
2000b090:	681b      	ldr	r3, [r3, #0]
2000b092:	689b      	ldr	r3, [r3, #8]
2000b094:	60fb      	str	r3, [r7, #12]
2000b096:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
2000b098:	687b      	ldr	r3, [r7, #4]
2000b09a:	2201      	movs	r2, #1
2000b09c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
2000b0a0:	687b      	ldr	r3, [r7, #4]
2000b0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b0a4:	2b00      	cmp	r3, #0
2000b0a6:	d103      	bne.n	2000b0b0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
2000b0a8:	6878      	ldr	r0, [r7, #4]
2000b0aa:	f7ff fa5f 	bl	2000a56c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
2000b0ae:	e002      	b.n	2000b0b6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
2000b0b0:	6878      	ldr	r0, [r7, #4]
2000b0b2:	f7ff fa8d 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
}
2000b0b6:	bf00      	nop
2000b0b8:	3710      	adds	r7, #16
2000b0ba:	46bd      	mov	sp, r7
2000b0bc:	bd80      	pop	{r7, pc}
	...

2000b0c0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
2000b0c0:	b580      	push	{r7, lr}
2000b0c2:	b086      	sub	sp, #24
2000b0c4:	af00      	add	r7, sp, #0
2000b0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000b0c8:	4b2c      	ldr	r3, [pc, #176]	; (2000b17c <SPI_CloseTx_ISR+0xbc>)
2000b0ca:	681b      	ldr	r3, [r3, #0]
2000b0cc:	4a2c      	ldr	r2, [pc, #176]	; (2000b180 <SPI_CloseTx_ISR+0xc0>)
2000b0ce:	fba2 2303 	umull	r2, r3, r2, r3
2000b0d2:	0a5b      	lsrs	r3, r3, #9
2000b0d4:	2264      	movs	r2, #100	; 0x64
2000b0d6:	fb02 f303 	mul.w	r3, r2, r3
2000b0da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000b0dc:	f7f5 fc17 	bl	2000090e <HAL_GetTick>
2000b0e0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000b0e2:	693b      	ldr	r3, [r7, #16]
2000b0e4:	2b00      	cmp	r3, #0
2000b0e6:	d106      	bne.n	2000b0f6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000b0e8:	687b      	ldr	r3, [r7, #4]
2000b0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b0ec:	f043 0220 	orr.w	r2, r3, #32
2000b0f0:	687b      	ldr	r3, [r7, #4]
2000b0f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2000b0f4:	e009      	b.n	2000b10a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
2000b0f6:	693b      	ldr	r3, [r7, #16]
2000b0f8:	3b01      	subs	r3, #1
2000b0fa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
2000b0fc:	687b      	ldr	r3, [r7, #4]
2000b0fe:	681b      	ldr	r3, [r3, #0]
2000b100:	689b      	ldr	r3, [r3, #8]
2000b102:	f003 0302 	and.w	r3, r3, #2
2000b106:	2b00      	cmp	r3, #0
2000b108:	d0eb      	beq.n	2000b0e2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
2000b10a:	687b      	ldr	r3, [r7, #4]
2000b10c:	681b      	ldr	r3, [r3, #0]
2000b10e:	685a      	ldr	r2, [r3, #4]
2000b110:	687b      	ldr	r3, [r7, #4]
2000b112:	681b      	ldr	r3, [r3, #0]
2000b114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
2000b118:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000b11a:	697a      	ldr	r2, [r7, #20]
2000b11c:	2164      	movs	r1, #100	; 0x64
2000b11e:	6878      	ldr	r0, [r7, #4]
2000b120:	f7ff fed8 	bl	2000aed4 <SPI_EndRxTxTransaction>
2000b124:	4603      	mov	r3, r0
2000b126:	2b00      	cmp	r3, #0
2000b128:	d005      	beq.n	2000b136 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000b12a:	687b      	ldr	r3, [r7, #4]
2000b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b12e:	f043 0220 	orr.w	r2, r3, #32
2000b132:	687b      	ldr	r3, [r7, #4]
2000b134:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000b136:	687b      	ldr	r3, [r7, #4]
2000b138:	689b      	ldr	r3, [r3, #8]
2000b13a:	2b00      	cmp	r3, #0
2000b13c:	d10a      	bne.n	2000b154 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000b13e:	2300      	movs	r3, #0
2000b140:	60fb      	str	r3, [r7, #12]
2000b142:	687b      	ldr	r3, [r7, #4]
2000b144:	681b      	ldr	r3, [r3, #0]
2000b146:	68db      	ldr	r3, [r3, #12]
2000b148:	60fb      	str	r3, [r7, #12]
2000b14a:	687b      	ldr	r3, [r7, #4]
2000b14c:	681b      	ldr	r3, [r3, #0]
2000b14e:	689b      	ldr	r3, [r3, #8]
2000b150:	60fb      	str	r3, [r7, #12]
2000b152:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
2000b154:	687b      	ldr	r3, [r7, #4]
2000b156:	2201      	movs	r2, #1
2000b158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000b15c:	687b      	ldr	r3, [r7, #4]
2000b15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b160:	2b00      	cmp	r3, #0
2000b162:	d003      	beq.n	2000b16c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
2000b164:	6878      	ldr	r0, [r7, #4]
2000b166:	f7ff fa33 	bl	2000a5d0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
2000b16a:	e002      	b.n	2000b172 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
2000b16c:	6878      	ldr	r0, [r7, #4]
2000b16e:	f7ff f9f3 	bl	2000a558 <HAL_SPI_TxCpltCallback>
}
2000b172:	bf00      	nop
2000b174:	3718      	adds	r7, #24
2000b176:	46bd      	mov	sp, r7
2000b178:	bd80      	pop	{r7, pc}
2000b17a:	bf00      	nop
2000b17c:	200003dc 	.word	0x200003dc
2000b180:	057619f1 	.word	0x057619f1

2000b184 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
2000b184:	b480      	push	{r7}
2000b186:	b085      	sub	sp, #20
2000b188:	af00      	add	r7, sp, #0
2000b18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
2000b18c:	2300      	movs	r3, #0
2000b18e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000b190:	4b1e      	ldr	r3, [pc, #120]	; (2000b20c <SPI_AbortRx_ISR+0x88>)
2000b192:	681b      	ldr	r3, [r3, #0]
2000b194:	4a1e      	ldr	r2, [pc, #120]	; (2000b210 <SPI_AbortRx_ISR+0x8c>)
2000b196:	fba2 2303 	umull	r2, r3, r2, r3
2000b19a:	0a5b      	lsrs	r3, r3, #9
2000b19c:	2264      	movs	r2, #100	; 0x64
2000b19e:	fb02 f303 	mul.w	r3, r2, r3
2000b1a2:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000b1a4:	68bb      	ldr	r3, [r7, #8]
2000b1a6:	2b00      	cmp	r3, #0
2000b1a8:	d106      	bne.n	2000b1b8 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000b1aa:	687b      	ldr	r3, [r7, #4]
2000b1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000b1ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000b1b2:	687b      	ldr	r3, [r7, #4]
2000b1b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2000b1b6:	e009      	b.n	2000b1cc <SPI_AbortRx_ISR+0x48>
    }
    count--;
2000b1b8:	68bb      	ldr	r3, [r7, #8]
2000b1ba:	3b01      	subs	r3, #1
2000b1bc:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
2000b1be:	687b      	ldr	r3, [r7, #4]
2000b1c0:	681b      	ldr	r3, [r3, #0]
2000b1c2:	689b      	ldr	r3, [r3, #8]
2000b1c4:	f003 0302 	and.w	r3, r3, #2
2000b1c8:	2b00      	cmp	r3, #0
2000b1ca:	d0eb      	beq.n	2000b1a4 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
2000b1cc:	687b      	ldr	r3, [r7, #4]
2000b1ce:	681b      	ldr	r3, [r3, #0]
2000b1d0:	681a      	ldr	r2, [r3, #0]
2000b1d2:	687b      	ldr	r3, [r7, #4]
2000b1d4:	681b      	ldr	r3, [r3, #0]
2000b1d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000b1da:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
2000b1dc:	687b      	ldr	r3, [r7, #4]
2000b1de:	681b      	ldr	r3, [r3, #0]
2000b1e0:	685a      	ldr	r2, [r3, #4]
2000b1e2:	687b      	ldr	r3, [r7, #4]
2000b1e4:	681b      	ldr	r3, [r3, #0]
2000b1e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
2000b1ea:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
2000b1ec:	687b      	ldr	r3, [r7, #4]
2000b1ee:	681b      	ldr	r3, [r3, #0]
2000b1f0:	68db      	ldr	r3, [r3, #12]
2000b1f2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
2000b1f4:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
2000b1f6:	687b      	ldr	r3, [r7, #4]
2000b1f8:	2207      	movs	r2, #7
2000b1fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
2000b1fe:	bf00      	nop
2000b200:	3714      	adds	r7, #20
2000b202:	46bd      	mov	sp, r7
2000b204:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b208:	4770      	bx	lr
2000b20a:	bf00      	nop
2000b20c:	200003dc 	.word	0x200003dc
2000b210:	057619f1 	.word	0x057619f1

2000b214 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
2000b214:	b480      	push	{r7}
2000b216:	b083      	sub	sp, #12
2000b218:	af00      	add	r7, sp, #0
2000b21a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
2000b21c:	687b      	ldr	r3, [r7, #4]
2000b21e:	681b      	ldr	r3, [r3, #0]
2000b220:	685a      	ldr	r2, [r3, #4]
2000b222:	687b      	ldr	r3, [r7, #4]
2000b224:	681b      	ldr	r3, [r3, #0]
2000b226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000b22a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
2000b22c:	687b      	ldr	r3, [r7, #4]
2000b22e:	681b      	ldr	r3, [r3, #0]
2000b230:	681a      	ldr	r2, [r3, #0]
2000b232:	687b      	ldr	r3, [r7, #4]
2000b234:	681b      	ldr	r3, [r3, #0]
2000b236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000b23a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
2000b23c:	687b      	ldr	r3, [r7, #4]
2000b23e:	2207      	movs	r2, #7
2000b240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
2000b244:	bf00      	nop
2000b246:	370c      	adds	r7, #12
2000b248:	46bd      	mov	sp, r7
2000b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b24e:	4770      	bx	lr

2000b250 <__errno>:
2000b250:	4b01      	ldr	r3, [pc, #4]	; (2000b258 <__errno+0x8>)
2000b252:	6818      	ldr	r0, [r3, #0]
2000b254:	4770      	bx	lr
2000b256:	bf00      	nop
2000b258:	200003e8 	.word	0x200003e8

2000b25c <exit>:
2000b25c:	b508      	push	{r3, lr}
2000b25e:	4b07      	ldr	r3, [pc, #28]	; (2000b27c <exit+0x20>)
2000b260:	4604      	mov	r4, r0
2000b262:	b113      	cbz	r3, 2000b26a <exit+0xe>
2000b264:	2100      	movs	r1, #0
2000b266:	f3af 8000 	nop.w
2000b26a:	4b05      	ldr	r3, [pc, #20]	; (2000b280 <exit+0x24>)
2000b26c:	6818      	ldr	r0, [r3, #0]
2000b26e:	6a83      	ldr	r3, [r0, #40]	; 0x28
2000b270:	b103      	cbz	r3, 2000b274 <exit+0x18>
2000b272:	4798      	blx	r3
2000b274:	4620      	mov	r0, r4
2000b276:	f7f5 ff8a 	bl	2000118e <_exit>
2000b27a:	bf00      	nop
2000b27c:	00000000 	.word	0x00000000
2000b280:	2000b534 	.word	0x2000b534

2000b284 <__libc_init_array>:
2000b284:	b570      	push	{r4, r5, r6, lr}
2000b286:	4d0d      	ldr	r5, [pc, #52]	; (2000b2bc <__libc_init_array+0x38>)
2000b288:	4c0d      	ldr	r4, [pc, #52]	; (2000b2c0 <__libc_init_array+0x3c>)
2000b28a:	1b64      	subs	r4, r4, r5
2000b28c:	10a4      	asrs	r4, r4, #2
2000b28e:	2600      	movs	r6, #0
2000b290:	42a6      	cmp	r6, r4
2000b292:	d109      	bne.n	2000b2a8 <__libc_init_array+0x24>
2000b294:	4d0b      	ldr	r5, [pc, #44]	; (2000b2c4 <__libc_init_array+0x40>)
2000b296:	4c0c      	ldr	r4, [pc, #48]	; (2000b2c8 <__libc_init_array+0x44>)
2000b298:	f000 f820 	bl	2000b2dc <_init>
2000b29c:	1b64      	subs	r4, r4, r5
2000b29e:	10a4      	asrs	r4, r4, #2
2000b2a0:	2600      	movs	r6, #0
2000b2a2:	42a6      	cmp	r6, r4
2000b2a4:	d105      	bne.n	2000b2b2 <__libc_init_array+0x2e>
2000b2a6:	bd70      	pop	{r4, r5, r6, pc}
2000b2a8:	f855 3b04 	ldr.w	r3, [r5], #4
2000b2ac:	4798      	blx	r3
2000b2ae:	3601      	adds	r6, #1
2000b2b0:	e7ee      	b.n	2000b290 <__libc_init_array+0xc>
2000b2b2:	f855 3b04 	ldr.w	r3, [r5], #4
2000b2b6:	4798      	blx	r3
2000b2b8:	3601      	adds	r6, #1
2000b2ba:	e7f2      	b.n	2000b2a2 <__libc_init_array+0x1e>
2000b2bc:	200003cc 	.word	0x200003cc
2000b2c0:	200003cc 	.word	0x200003cc
2000b2c4:	200003cc 	.word	0x200003cc
2000b2c8:	200003d0 	.word	0x200003d0

2000b2cc <memset>:
2000b2cc:	4402      	add	r2, r0
2000b2ce:	4603      	mov	r3, r0
2000b2d0:	4293      	cmp	r3, r2
2000b2d2:	d100      	bne.n	2000b2d6 <memset+0xa>
2000b2d4:	4770      	bx	lr
2000b2d6:	f803 1b01 	strb.w	r1, [r3], #1
2000b2da:	e7f9      	b.n	2000b2d0 <memset+0x4>

2000b2dc <_init>:
2000b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000b2de:	bf00      	nop
2000b2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000b2e2:	bc08      	pop	{r3}
2000b2e4:	469e      	mov	lr, r3
2000b2e6:	4770      	bx	lr

2000b2e8 <_fini>:
2000b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000b2ea:	bf00      	nop
2000b2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000b2ee:	bc08      	pop	{r3}
2000b2f0:	469e      	mov	lr, r3
2000b2f2:	4770      	bx	lr

Disassembly of section .RamFunc:

2000b2f4 <HAL_FLASHEx_StopFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StopFlashInterfaceClk(void)
{
2000b2f4:	b480      	push	{r7}
2000b2f6:	b083      	sub	sp, #12
2000b2f8:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b2fa:	2300      	movs	r3, #0
2000b2fc:	607b      	str	r3, [r7, #4]
2000b2fe:	4b0c      	ldr	r3, [pc, #48]	; (2000b330 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b302:	4a0b      	ldr	r2, [pc, #44]	; (2000b330 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000b304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b308:	6413      	str	r3, [r2, #64]	; 0x40
2000b30a:	4b09      	ldr	r3, [pc, #36]	; (2000b330 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b30e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b312:	607b      	str	r3, [r7, #4]
2000b314:	687b      	ldr	r3, [r7, #4]
  /* Stop the flash interface while System Run */  
  SET_BIT(PWR->CR, PWR_CR_FISSR);
2000b316:	4b07      	ldr	r3, [pc, #28]	; (2000b334 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000b318:	681b      	ldr	r3, [r3, #0]
2000b31a:	4a06      	ldr	r2, [pc, #24]	; (2000b334 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000b31c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2000b320:	6013      	str	r3, [r2, #0]
   
  return HAL_OK;
2000b322:	2300      	movs	r3, #0
}
2000b324:	4618      	mov	r0, r3
2000b326:	370c      	adds	r7, #12
2000b328:	46bd      	mov	sp, r7
2000b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b32e:	4770      	bx	lr
2000b330:	40023800 	.word	0x40023800
2000b334:	40007000 	.word	0x40007000

2000b338 <HAL_FLASHEx_StartFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StartFlashInterfaceClk(void)
{
2000b338:	b480      	push	{r7}
2000b33a:	b083      	sub	sp, #12
2000b33c:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b33e:	2300      	movs	r3, #0
2000b340:	607b      	str	r3, [r7, #4]
2000b342:	4b0c      	ldr	r3, [pc, #48]	; (2000b374 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b346:	4a0b      	ldr	r2, [pc, #44]	; (2000b374 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000b348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b34c:	6413      	str	r3, [r2, #64]	; 0x40
2000b34e:	4b09      	ldr	r3, [pc, #36]	; (2000b374 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000b350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b356:	607b      	str	r3, [r7, #4]
2000b358:	687b      	ldr	r3, [r7, #4]
  /* Start the flash interface while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FISSR);
2000b35a:	4b07      	ldr	r3, [pc, #28]	; (2000b378 <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000b35c:	681b      	ldr	r3, [r3, #0]
2000b35e:	4a06      	ldr	r2, [pc, #24]	; (2000b378 <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000b360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
2000b364:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000b366:	2300      	movs	r3, #0
}
2000b368:	4618      	mov	r0, r3
2000b36a:	370c      	adds	r7, #12
2000b36c:	46bd      	mov	sp, r7
2000b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b372:	4770      	bx	lr
2000b374:	40023800 	.word	0x40023800
2000b378:	40007000 	.word	0x40007000

2000b37c <HAL_FLASHEx_EnableFlashSleepMode>:
  * @note  This mode could n't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableFlashSleepMode(void)
{
2000b37c:	b480      	push	{r7}
2000b37e:	b083      	sub	sp, #12
2000b380:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b382:	2300      	movs	r3, #0
2000b384:	607b      	str	r3, [r7, #4]
2000b386:	4b0c      	ldr	r3, [pc, #48]	; (2000b3b8 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b38a:	4a0b      	ldr	r2, [pc, #44]	; (2000b3b8 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000b38c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b390:	6413      	str	r3, [r2, #64]	; 0x40
2000b392:	4b09      	ldr	r3, [pc, #36]	; (2000b3b8 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b39a:	607b      	str	r3, [r7, #4]
2000b39c:	687b      	ldr	r3, [r7, #4]
  /* Enable the flash sleep while System Run */
  SET_BIT(PWR->CR, PWR_CR_FMSSR);
2000b39e:	4b07      	ldr	r3, [pc, #28]	; (2000b3bc <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000b3a0:	681b      	ldr	r3, [r3, #0]
2000b3a2:	4a06      	ldr	r2, [pc, #24]	; (2000b3bc <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000b3a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2000b3a8:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000b3aa:	2300      	movs	r3, #0
}
2000b3ac:	4618      	mov	r0, r3
2000b3ae:	370c      	adds	r7, #12
2000b3b0:	46bd      	mov	sp, r7
2000b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b3b6:	4770      	bx	lr
2000b3b8:	40023800 	.word	0x40023800
2000b3bc:	40007000 	.word	0x40007000

2000b3c0 <HAL_FLASHEx_DisableFlashSleepMode>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableFlashSleepMode(void)
{
2000b3c0:	b480      	push	{r7}
2000b3c2:	b083      	sub	sp, #12
2000b3c4:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b3c6:	2300      	movs	r3, #0
2000b3c8:	607b      	str	r3, [r7, #4]
2000b3ca:	4b0c      	ldr	r3, [pc, #48]	; (2000b3fc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000b3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b3ce:	4a0b      	ldr	r2, [pc, #44]	; (2000b3fc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000b3d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b3d4:	6413      	str	r3, [r2, #64]	; 0x40
2000b3d6:	4b09      	ldr	r3, [pc, #36]	; (2000b3fc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b3da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b3de:	607b      	str	r3, [r7, #4]
2000b3e0:	687b      	ldr	r3, [r7, #4]
  /* Disable the flash sleep while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FMSSR);
2000b3e2:	4b07      	ldr	r3, [pc, #28]	; (2000b400 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000b3e4:	681b      	ldr	r3, [r3, #0]
2000b3e6:	4a06      	ldr	r2, [pc, #24]	; (2000b400 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000b3e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2000b3ec:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;
2000b3ee:	2300      	movs	r3, #0
}
2000b3f0:	4618      	mov	r0, r3
2000b3f2:	370c      	adds	r7, #12
2000b3f4:	46bd      	mov	sp, r7
2000b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b3fa:	4770      	bx	lr
2000b3fc:	40023800 	.word	0x40023800
2000b400:	40007000 	.word	0x40007000
