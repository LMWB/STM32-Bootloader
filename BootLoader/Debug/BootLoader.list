
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c24  08003c24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c2c  08003c2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003ca4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003ca4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e90a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fa  00000000  00000000  0002e9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00030aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227c9  00000000  00000000  000322c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fba0  00000000  00000000  00054a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0da0  00000000  00000000  00064629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001353c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  0013541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003b48 	.word	0x08003b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003b48 	.word	0x08003b48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <bl_deinitEverything>:
#include "tim.h"

static uint8_t partition = 0;
volatile uint8_t bootSelection = 0;

void bl_deinitEverything() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LD2_GPIO_Port, LD2_Pin);
 80005b8:	2120      	movs	r1, #32
 80005ba:	481a      	ldr	r0, [pc, #104]	; (8000624 <bl_deinitEverything+0x70>)
 80005bc:	f000 ff8a 	bl	80014d4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <bl_deinitEverything+0x74>)
 80005c6:	f000 ff85 	bl	80014d4 <HAL_GPIO_DeInit>

	HAL_UART_MspDeInit(&huart2);
 80005ca:	4818      	ldr	r0, [pc, #96]	; (800062c <bl_deinitEverything+0x78>)
 80005cc:	f000 fb98 	bl	8000d00 <HAL_UART_MspDeInit>
	HAL_TIM_Base_MspDeInit(&htim6);
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <bl_deinitEverything+0x7c>)
 80005d2:	f000 fb09 	bl	8000be8 <HAL_TIM_Base_MspDeInit>

	__HAL_RCC_GPIOC_CLK_DISABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <bl_deinitEverything+0x80>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <bl_deinitEverything+0x80>)
 80005dc:	f023 0304 	bic.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_DISABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <bl_deinitEverything+0x80>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <bl_deinitEverything+0x80>)
 80005e8:	f023 0308 	bic.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <bl_deinitEverything+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <bl_deinitEverything+0x80>)
 80005f4:	f023 0302 	bic.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <bl_deinitEverything+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <bl_deinitEverything+0x80>)
 8000600:	f023 0301 	bic.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30

	HAL_RCC_DeInit();
 8000606:	f001 fbed 	bl	8001de4 <HAL_RCC_DeInit>

	HAL_DeInit();
 800060a:	f000 fbe3 	bl	8000dd4 <HAL_DeInit>

	SysTick->CTRL = 0;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <bl_deinitEverything+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <bl_deinitEverything+0x84>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <bl_deinitEverything+0x84>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020000 	.word	0x40020000
 8000628:	40020800 	.word	0x40020800
 800062c:	200000dc 	.word	0x200000dc
 8000630:	20000094 	.word	0x20000094
 8000634:	40023800 	.word	0x40023800
 8000638:	e000e010 	.word	0xe000e010

0800063c <bl_jumpToApplication>:


void bl_jumpToApplication(const uint32_t address)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	60fb      	str	r3, [r7, #12]

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	6852      	ldr	r2, [r2, #4]
 8000650:	f383 8808 	msr	MSP, r3
 8000654:	4710      	bx	r2
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <bl_main>:


void bl_main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0a2      	sub	sp, #136	; 0x88
 8000668:	af00      	add	r7, sp, #0
	char msg[128] = {};
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	227c      	movs	r2, #124	; 0x7c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fdf0 	bl	800325c <memset>
	uint16_t msgSize = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	msgSize = sprintf(msg, "Booting ...");
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	493d      	ldr	r1, [pc, #244]	; (800077c <bl_main+0x118>)
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fdf0 	bl	800326c <siprintf>
 800068c:	4603      	mov	r3, r0
 800068e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 8000692:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000696:	1d39      	adds	r1, r7, #4
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	4838      	ldr	r0, [pc, #224]	; (8000780 <bl_main+0x11c>)
 800069e:	f002 fa3e 	bl	8002b1e <HAL_UART_Transmit>

	msgSize = sprintf(msg, "Enter Bootloader\nMake Selection on Boot Partition then press Blue Button...\n");
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4937      	ldr	r1, [pc, #220]	; (8000784 <bl_main+0x120>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fde0 	bl	800326c <siprintf>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 80006b2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80006b6:	1d39      	adds	r1, r7, #4
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006bc:	4830      	ldr	r0, [pc, #192]	; (8000780 <bl_main+0x11c>)
 80006be:	f002 fa2e 	bl	8002b1e <HAL_UART_Transmit>

	while( !bootSelection ){
 80006c2:	e019      	b.n	80006f8 <bl_main+0x94>
		partition = HAL_GPIO_ReadPin(BootSelect0_GPIO_Port, BootSelect0_Pin);
 80006c4:	2101      	movs	r1, #1
 80006c6:	4830      	ldr	r0, [pc, #192]	; (8000788 <bl_main+0x124>)
 80006c8:	f000 fff8 	bl	80016bc <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <bl_main+0x128>)
 80006d2:	701a      	strb	r2, [r3, #0]
		partition |= (HAL_GPIO_ReadPin(BootSelect1_GPIO_Port, BootSelect1_Pin) << 1);
 80006d4:	2102      	movs	r1, #2
 80006d6:	482c      	ldr	r0, [pc, #176]	; (8000788 <bl_main+0x124>)
 80006d8:	f000 fff0 	bl	80016bc <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <bl_main+0x128>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b27      	ldr	r3, [pc, #156]	; (800078c <bl_main+0x128>)
 80006f0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80006f2:	200a      	movs	r0, #10
 80006f4:	f000 fbf2 	bl	8000edc <HAL_Delay>
	while( !bootSelection ){
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <bl_main+0x12c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0e0      	beq.n	80006c4 <bl_main+0x60>
	}

	msgSize = sprintf(msg, "Jump to Application %d...\n", partition);
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <bl_main+0x128>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4922      	ldr	r1, [pc, #136]	; (8000794 <bl_main+0x130>)
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fdad 	bl	800326c <siprintf>
 8000712:	4603      	mov	r3, r0
 8000714:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 8000718:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <bl_main+0x11c>)
 8000724:	f002 f9fb 	bl	8002b1e <HAL_UART_Transmit>

	bl_deinitEverything();
 8000728:	f7ff ff44 	bl	80005b4 <bl_deinitEverything>
	switch (partition) {
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <bl_main+0x128>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d81b      	bhi.n	800076c <bl_main+0x108>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <bl_main+0xd8>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	0800074d 	.word	0x0800074d
 8000740:	08000755 	.word	0x08000755
 8000744:	0800075d 	.word	0x0800075d
 8000748:	08000765 	.word	0x08000765
		case 0:
			bl_jumpToApplication(APP1_START);
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <bl_main+0x134>)
 800074e:	f7ff ff75 	bl	800063c <bl_jumpToApplication>
			break;
 8000752:	e00f      	b.n	8000774 <bl_main+0x110>
		case 1:
			bl_jumpToApplication(APP1_START);
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <bl_main+0x134>)
 8000756:	f7ff ff71 	bl	800063c <bl_jumpToApplication>
			break;
 800075a:	e00b      	b.n	8000774 <bl_main+0x110>
		case 2:
			bl_jumpToApplication(APP2_START);
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <bl_main+0x138>)
 800075e:	f7ff ff6d 	bl	800063c <bl_jumpToApplication>
		break;
 8000762:	e007      	b.n	8000774 <bl_main+0x110>
		case 3:
			bl_jumpToApplication(APP2_START);
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <bl_main+0x138>)
 8000766:	f7ff ff69 	bl	800063c <bl_jumpToApplication>
			break;
 800076a:	e003      	b.n	8000774 <bl_main+0x110>
		default:
			bl_jumpToApplication(APP1_START);
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <bl_main+0x134>)
 800076e:	f7ff ff65 	bl	800063c <bl_jumpToApplication>
			break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	3788      	adds	r7, #136	; 0x88
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08003b60 	.word	0x08003b60
 8000780:	200000dc 	.word	0x200000dc
 8000784:	08003b6c 	.word	0x08003b6c
 8000788:	40020800 	.word	0x40020800
 800078c:	2000008c 	.word	0x2000008c
 8000790:	2000008d 	.word	0x2000008d
 8000794:	08003bbc 	.word	0x08003bbc
 8000798:	08005000 	.word	0x08005000
 800079c:	0800a800 	.word	0x0800a800

080007a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == B1_Pin ){
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b0:	d102      	bne.n	80007b8 <HAL_GPIO_EXTI_Callback+0x18>
		bootSelection = 1;
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x24>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
	}
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	2000008d 	.word	0x2000008d

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_GPIO_Init+0xf8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_GPIO_Init+0xf8>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xfc>)
 8000854:	f000 ff4a 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <MX_GPIO_Init+0x100>)
 8000870:	f000 fc9c 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BootSelect0_Pin|BootSelect1_Pin;
 8000874:	2303      	movs	r3, #3
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x100>)
 8000888:	f000 fc90 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800088c:	2320      	movs	r3, #32
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <MX_GPIO_Init+0xfc>)
 80008a4:	f000 fc82 	bl	80011ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2028      	movs	r0, #40	; 0x28
 80008ae:	f000 fc38 	bl	8001122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f000 fc51 	bl	800115a <HAL_NVIC_EnableIRQ>

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020800 	.word	0x40020800

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 fa5e 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f80a 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f7ff ff76 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008dc:	f000 f99e 	bl	8000c1c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008e0:	f000 f924 	bl	8000b2c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  bl_main();
 80008e4:	f7ff febe 	bl	8000664 <bl_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <main+0x1c>
	...

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fcae 	bl	800325c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <SystemClock_Config+0xd4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <SystemClock_Config+0xd4>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xd4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <SystemClock_Config+0xd8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <SystemClock_Config+0xd8>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <SystemClock_Config+0xd8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	2310      	movs	r3, #16
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800095c:	2300      	movs	r3, #0
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000960:	2310      	movs	r3, #16
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000964:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800096a:	2304      	movs	r3, #4
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fb2a 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000986:	f000 f81f 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fed2 	bl	8001750 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009b2:	f000 f809 	bl	80009c8 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f000 fb7a 	bl	800110c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 fa14 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a80:	f000 fe4e 	bl	8001720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM6_DAC_IRQHandler+0x10>)
 8000a8e:	f001 fd8e 	bl	80025ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000094 	.word	0x20000094

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f002 fb9c 	bl	8003208 <__errno>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20020000 	.word	0x20020000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	20000090 	.word	0x20000090
 8000b04:	20000138 	.word	0x20000138

08000b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_TIM6_Init+0x68>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b42:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000b46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b50:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b5e:	f001 fcd7 	bl	8002510 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b68:	f7ff ff2e 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM6_Init+0x64>)
 8000b7a:	f001 fef3 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f7ff ff20 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000094 	.word	0x20000094
 8000b94:	40001000 	.word	0x40001000

08000b98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_TIM_Base_MspInit+0x48>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d115      	bne.n	8000bd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_TIM_Base_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_TIM_Base_MspInit+0x4c>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_TIM_Base_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2036      	movs	r0, #54	; 0x36
 8000bcc:	f000 faa9 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 fac2 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40001000 	.word	0x40001000
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_TIM_Base_MspDeInit+0x2c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d108      	bne.n	8000c0c <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_Base_MspDeInit+0x30>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_TIM_Base_MspDeInit+0x30>)
 8000c00:	f023 0310 	bic.w	r3, r3, #16
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM6 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8000c06:	2036      	movs	r0, #54	; 0x36
 8000c08:	f000 fab5 	bl	8001176 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40001000 	.word	0x40001000
 8000c18:	40023800 	.word	0x40023800

08000c1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART2_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f001 ff16 	bl	8002a84 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f7ff feb3 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000dc 	.word	0x200000dc
 8000c6c:	40004400 	.word	0x40004400

08000c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000ce6:	f000 fa61 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_UART_MspDeInit+0x30>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d109      	bne.n	8000d26 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_UART_MspDeInit+0x34>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_UART_MspDeInit+0x34>)
 8000d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8000d1e:	210c      	movs	r1, #12
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspDeInit+0x38>)
 8000d22:	f000 fbd7 	bl	80014d4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d66:	f7ff fecf 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 fa53 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fdad 	bl	80008cc <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d80:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d88:	20000134 	.word	0x20000134

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f9a7 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f83c 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe06 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_DeInit+0x54>)
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dde:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_DeInit+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_DeInit+0x54>)
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_DeInit+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_DeInit+0x54>)
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dfa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_DeInit+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_DeInit+0x54>)
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_DeInit+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_DeInit+0x54>)
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e16:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_DeInit+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e1e:	f000 f805 	bl	8000e2c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f999 	bl	8001192 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f000 f953 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000120 	.word	0x20000120

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000120 	.word	0x20000120

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db12      	blt.n	8000ffc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	490a      	ldr	r1, [pc, #40]	; (8001008 <__NVIC_DisableIRQ+0x44>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	3320      	adds	r3, #32
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff0:	f3bf 8f4f 	dsb	sy
}
 8000ff4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff6:	f3bf 8f6f 	isb	sy
}
 8000ffa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff05 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff1a 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff0d 	bl	8000f88 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff1d 	bl	8000fc4 <__NVIC_DisableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff94 	bl	80010c8 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e165      	b.n	8001494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8154 	bne.w	800148e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80ae 	beq.w	800148e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_GPIO_Init+0x300>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a5c      	ldr	r2, [pc, #368]	; (80014ac <HAL_GPIO_Init+0x300>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <HAL_GPIO_Init+0x300>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a58      	ldr	r2, [pc, #352]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x308>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <HAL_GPIO_Init+0x310>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x314>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <HAL_GPIO_Init+0x318>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x20a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4a      	ldr	r2, [pc, #296]	; (80014c8 <HAL_GPIO_Init+0x31c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x206>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a49      	ldr	r2, [pc, #292]	; (80014cc <HAL_GPIO_Init+0x320>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x202>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00c      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00a      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013b2:	2305      	movs	r3, #5
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x21c>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4935      	ldr	r1, [pc, #212]	; (80014b0 <HAL_GPIO_Init+0x304>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_GPIO_Init+0x324>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001434:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f ae96 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40021400 	.word	0x40021400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e0c7      	b.n	8001680 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	429a      	cmp	r2, r3
 8001508:	f040 80b7 	bne.w	800167a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800150c:	4a62      	ldr	r2, [pc, #392]	; (8001698 <HAL_GPIO_DeInit+0x1c4>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4013      	ands	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a5a      	ldr	r2, [pc, #360]	; (800169c <HAL_GPIO_DeInit+0x1c8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_DeInit+0xae>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a59      	ldr	r2, [pc, #356]	; (80016a0 <HAL_GPIO_DeInit+0x1cc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_DeInit+0xaa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_GPIO_DeInit+0x1d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_DeInit+0xa6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_GPIO_DeInit+0x1d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_DeInit+0xa2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a56      	ldr	r2, [pc, #344]	; (80016ac <HAL_GPIO_DeInit+0x1d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_DeInit+0x9e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a55      	ldr	r2, [pc, #340]	; (80016b0 <HAL_GPIO_DeInit+0x1dc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_DeInit+0x9a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_GPIO_DeInit+0x1e0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_DeInit+0x96>
 8001566:	2306      	movs	r3, #6
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800156a:	2307      	movs	r3, #7
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_DeInit+0xb0>
 8001582:	2300      	movs	r3, #0
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d132      	bne.n	80015fa <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	4946      	ldr	r1, [pc, #280]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80015a2:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4943      	ldr	r1, [pc, #268]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80015b0:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	493f      	ldr	r1, [pc, #252]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	493c      	ldr	r1, [pc, #240]	; (80016b8 <HAL_GPIO_DeInit+0x1e4>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_GPIO_DeInit+0x1c4>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	43da      	mvns	r2, r3
 80015ec:	482a      	ldr	r0, [pc, #168]	; (8001698 <HAL_GPIO_DeInit+0x1c4>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	400a      	ands	r2, r1
 80015f4:	3302      	adds	r3, #2
 80015f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2103      	movs	r1, #3
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	08d2      	lsrs	r2, r2, #3
 8001630:	4019      	ands	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2103      	movs	r1, #3
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2101      	movs	r1, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2103      	movs	r1, #3
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f af34 	bls.w	80014f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40013800 	.word	0x40013800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f82e 	bl	80007a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fb40 	bl	8000ec4 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fb3c 	bl	8000ec4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f855 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff faa0 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08003bd8 	.word	0x08003bd8
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_RCC_GetHCLKFreq+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000

08001934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001938:	f7ff fff0 	bl	800191c <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0a9b      	lsrs	r3, r3, #10
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	08003be8 	.word	0x08003be8

0800195c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001960:	f7ff ffdc 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0b5b      	lsrs	r3, r3, #13
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	08003be8 	.word	0x08003be8

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b0ae      	sub	sp, #184	; 0xb8
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019aa:	4bcb      	ldr	r3, [pc, #812]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	f200 8206 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x440>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019f5 	.word	0x080019f5
 80019c4:	08001dc5 	.word	0x08001dc5
 80019c8:	08001dc5 	.word	0x08001dc5
 80019cc:	08001dc5 	.word	0x08001dc5
 80019d0:	080019fd 	.word	0x080019fd
 80019d4:	08001dc5 	.word	0x08001dc5
 80019d8:	08001dc5 	.word	0x08001dc5
 80019dc:	08001dc5 	.word	0x08001dc5
 80019e0:	08001a05 	.word	0x08001a05
 80019e4:	08001dc5 	.word	0x08001dc5
 80019e8:	08001dc5 	.word	0x08001dc5
 80019ec:	08001dc5 	.word	0x08001dc5
 80019f0:	08001bf5 	.word	0x08001bf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4bb9      	ldr	r3, [pc, #740]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x358>)
 80019f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019fa:	e1e7      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4bb8      	ldr	r3, [pc, #736]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a02:	e1e3      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a04:	4bb4      	ldr	r3, [pc, #720]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a10:	4bb1      	ldr	r3, [pc, #708]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d071      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1c:	4bae      	ldr	r3, [pc, #696]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a42:	4622      	mov	r2, r4
 8001a44:	462b      	mov	r3, r5
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	0159      	lsls	r1, r3, #5
 8001a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a54:	0150      	lsls	r0, r2, #5
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a60:	4629      	mov	r1, r5
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a74:	4649      	mov	r1, r9
 8001a76:	018b      	lsls	r3, r1, #6
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7e:	4641      	mov	r1, r8
 8001a80:	018a      	lsls	r2, r1, #6
 8001a82:	4641      	mov	r1, r8
 8001a84:	1a51      	subs	r1, r2, r1
 8001a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a88:	4649      	mov	r1, r9
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	00cb      	lsls	r3, r1, #3
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	00ca      	lsls	r2, r1, #3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	189b      	adds	r3, r3, r2
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	460a      	mov	r2, r1
 8001aba:	eb42 0303 	adc.w	r3, r2, r3
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001acc:	4629      	mov	r1, r5
 8001ace:	024b      	lsls	r3, r1, #9
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	024a      	lsls	r2, r1, #9
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001af0:	f7fe fbde 	bl	80002b0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001afe:	e067      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b00:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b22:	4622      	mov	r2, r4
 8001b24:	462b      	mov	r3, r5
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	0159      	lsls	r1, r3, #5
 8001b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b34:	0150      	lsls	r0, r2, #5
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	1a51      	subs	r1, r2, r1
 8001b3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b40:	4629      	mov	r1, r5
 8001b42:	eb63 0301 	sbc.w	r3, r3, r1
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b54:	4649      	mov	r1, r9
 8001b56:	018b      	lsls	r3, r1, #6
 8001b58:	4641      	mov	r1, r8
 8001b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5e:	4641      	mov	r1, r8
 8001b60:	018a      	lsls	r2, r1, #6
 8001b62:	4641      	mov	r1, r8
 8001b64:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b68:	4649      	mov	r1, r9
 8001b6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b82:	4692      	mov	sl, r2
 8001b84:	469b      	mov	fp, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	eb1a 0303 	adds.w	r3, sl, r3
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	462b      	mov	r3, r5
 8001b90:	eb4b 0303 	adc.w	r3, fp, r3
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb8:	2200      	movs	r2, #0
 8001bba:	673b      	str	r3, [r7, #112]	; 0x70
 8001bbc:	677a      	str	r2, [r7, #116]	; 0x74
 8001bbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bc2:	f7fe fb75 	bl	80002b0 <__aeabi_uldivmod>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4613      	mov	r3, r2
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf2:	e0eb      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d06b      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	2200      	movs	r2, #0
 8001c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c20:	2300      	movs	r3, #0
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
 8001c24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c28:	4622      	mov	r2, r4
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4621      	mov	r1, r4
 8001c42:	1a51      	subs	r1, r2, r1
 8001c44:	61b9      	str	r1, [r7, #24]
 8001c46:	4629      	mov	r1, r5
 8001c48:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c5a:	4659      	mov	r1, fp
 8001c5c:	018b      	lsls	r3, r1, #6
 8001c5e:	4651      	mov	r1, sl
 8001c60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c64:	4651      	mov	r1, sl
 8001c66:	018a      	lsls	r2, r1, #6
 8001c68:	4651      	mov	r1, sl
 8001c6a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c6e:	4659      	mov	r1, fp
 8001c70:	eb63 0901 	sbc.w	r9, r3, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c88:	4690      	mov	r8, r2
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	eb18 0303 	adds.w	r3, r8, r3
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	462b      	mov	r3, r5
 8001c96:	eb49 0303 	adc.w	r3, r9, r3
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ca8:	4629      	mov	r1, r5
 8001caa:	024b      	lsls	r3, r1, #9
 8001cac:	4621      	mov	r1, r4
 8001cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	024a      	lsls	r2, r1, #9
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc8:	f7fe faf2 	bl	80002b0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cd6:	e065      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x420>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	2200      	movs	r2, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	4611      	mov	r1, r2
 8001cf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8001cfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	0159      	lsls	r1, r3, #5
 8001d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d10:	0150      	lsls	r0, r2, #5
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4641      	mov	r1, r8
 8001d18:	1a51      	subs	r1, r2, r1
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d30:	4659      	mov	r1, fp
 8001d32:	018b      	lsls	r3, r1, #6
 8001d34:	4651      	mov	r1, sl
 8001d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d3a:	4651      	mov	r1, sl
 8001d3c:	018a      	lsls	r2, r1, #6
 8001d3e:	4651      	mov	r1, sl
 8001d40:	1a54      	subs	r4, r2, r1
 8001d42:	4659      	mov	r1, fp
 8001d44:	eb63 0501 	sbc.w	r5, r3, r1
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	00eb      	lsls	r3, r5, #3
 8001d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d56:	00e2      	lsls	r2, r4, #3
 8001d58:	4614      	mov	r4, r2
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	18e3      	adds	r3, r4, r3
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	464b      	mov	r3, r9
 8001d64:	eb45 0303 	adc.w	r3, r5, r3
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d96:	f7fe fa8b 	bl	80002b0 <__aeabi_uldivmod>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0f1b      	lsrs	r3, r3, #28
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dc2:	e003      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	37b8      	adds	r7, #184	; 0xb8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	00f42400 	.word	0x00f42400

08001de4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001dea:	f7ff f86b 	bl	8000ec4 <HAL_GetTick>
 8001dee:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001df0:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a71      	ldr	r2, [pc, #452]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f861 	bl	8000ec4 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0d0      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001e1c:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a66      	ldr	r2, [pc, #408]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e28:	f7ff f84c 	bl	8000ec4 <HAL_GetTick>
 8001e2c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7ff f845 	bl	8000ec4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0b2      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001e4c:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e58:	f7ff f834 	bl	8000ec4 <HAL_GetTick>
 8001e5c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e64:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001e68:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f82a 	bl	8000ec4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e099      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001e7e:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e8a:	f7ff f81b 	bl	8000ec4 <HAL_GetTick>
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff f811 	bl	8000ec4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e080      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001eb0:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ebc:	f7ff f802 	bl	8000ec4 <HAL_GetTick>
 8001ec0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001ec8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ed0:	f7fe fff8 	bl	8000ec4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001eee:	f7fe ffe9 	bl	8000ec4 <HAL_GetTick>
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f02:	f7fe ffdf 	bl	8000ec4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e04e      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f22:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_RCC_DeInit+0x1dc>)
 8001f24:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <HAL_RCC_DeInit+0x1dc>)
 8001f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <HAL_RCC_DeInit+0x1e0>)
 8001f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f3c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001f40:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f60:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001f64:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_RCC_DeInit+0x1d8>)
 8001f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f94:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_DeInit+0x1e4>)
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_DeInit+0x1e8>)
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_DeInit+0x1ec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe ff4b 	bl	8000e3c <HAL_InitTick>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	24003010 	.word	0x24003010
 8001fc4:	04003010 	.word	0x04003010
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e28d      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8083 	beq.w	80020fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ff4:	4b94      	ldr	r3, [pc, #592]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d019      	beq.n	8002034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002000:	4b91      	ldr	r3, [pc, #580]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002008:	2b08      	cmp	r3, #8
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800200c:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d112      	bne.n	800204c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b84      	ldr	r3, [pc, #528]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d05b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x124>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d157      	bne.n	80020f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e25a      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x90>
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7b      	ldr	r2, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xcc>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xb4>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a72      	ldr	r2, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xcc>
 8002088:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6b      	ldr	r2, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff0c 	bl	8000ec4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff08 	bl	8000ec4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e21f      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xdc>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fef8 	bl	8000ec4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe fef4 	bl	8000ec4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e20b      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x104>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06f      	beq.n	80021e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002106:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d017      	beq.n	8002142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002112:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d105      	bne.n	800212a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x186>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1d3      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x278>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fea1 	bl	8000ec4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7fe fe9d 	bl	8000ec4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1b4      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x278>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe80 	bl	8000ec4 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fe7c 	bl	8000ec4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e193      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d036      	beq.n	8002260 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe fe60 	bl	8000ec4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fe5c 	bl	8000ec4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e173      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x234>
 8002226:	e01b      	b.n	8002260 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x27c>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fe49 	bl	8000ec4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00e      	b.n	8002254 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fe45 	bl	8000ec4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d907      	bls.n	8002254 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e15c      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
 8002248:	40023800 	.word	0x40023800
 800224c:	42470000 	.word	0x42470000
 8002250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b8a      	ldr	r3, [pc, #552]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ea      	bne.n	8002236 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8097 	beq.w	800239c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b79      	ldr	r3, [pc, #484]	; (8002484 <HAL_RCC_OscConfig+0x4b0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x4b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a75      	ldr	r2, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x4b0>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fe05 	bl	8000ec4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe fe01 	bl	8000ec4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e118      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x4b0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x31e>
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a65      	ldr	r2, [pc, #404]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x358>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x340>
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a60      	ldr	r2, [pc, #384]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b5e      	ldr	r3, [pc, #376]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a5d      	ldr	r2, [pc, #372]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x358>
 8002314:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a59      	ldr	r2, [pc, #356]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a56      	ldr	r2, [pc, #344]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fdc6 	bl	8000ec4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fdc2 	bl	8000ec4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0d7      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x368>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7fe fdb0 	bl	8000ec4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fdac 	bl	8000ec4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0c1      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80ad 	beq.w	8002500 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d060      	beq.n	8002474 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d145      	bne.n	8002446 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_RCC_OscConfig+0x4b4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd80 	bl	8000ec4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fd7c 	bl	8000ec4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e093      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	071b      	lsls	r3, r3, #28
 8002412:	491b      	ldr	r1, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x4b4>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fd51 	bl	8000ec4 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe fd4d 	bl	8000ec4 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e064      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x452>
 8002444:	e05c      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCC_OscConfig+0x4b4>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fd3a 	bl	8000ec4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fd36 	bl	8000ec4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04d      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x480>
 8002472:	e045      	b.n	8002500 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e040      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
 8002480:	40023800 	.word	0x40023800
 8002484:	40007000 	.word	0x40007000
 8002488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x538>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d030      	beq.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d129      	bne.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d122      	bne.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d119      	bne.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10f      	bne.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e041      	b.n	80025a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fb2e 	bl	8000b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 f968 	bl	8002824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d122      	bne.n	800260a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d11b      	bne.n	800260a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0202 	mvn.w	r2, #2
 80025da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f8f8 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 80025f6:	e005      	b.n	8002604 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8ea 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8fb 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d122      	bne.n	800265e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d11b      	bne.n	800265e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f06f 0204 	mvn.w	r2, #4
 800262e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f8ce 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 800264a:	e005      	b.n	8002658 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8c0 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8d1 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b08      	cmp	r3, #8
 800266a:	d122      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11b      	bne.n	80026b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0208 	mvn.w	r2, #8
 8002682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8a4 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 800269e:	e005      	b.n	80026ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f896 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8a7 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d122      	bne.n	8002706 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d11b      	bne.n	8002706 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f06f 0210 	mvn.w	r2, #16
 80026d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2208      	movs	r2, #8
 80026dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f87a 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 80026f2:	e005      	b.n	8002700 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f86c 	bl	80027d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f87d 	bl	80027fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d10e      	bne.n	8002732 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f06f 0201 	mvn.w	r2, #1
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f846 	bl	80027be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d10e      	bne.n	800275e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d107      	bne.n	800275e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f989 	bl	8002a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d10e      	bne.n	800278a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d107      	bne.n	800278a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f842 	bl	800280e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d10e      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0220 	mvn.w	r2, #32
 80027ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f953 	bl	8002a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a40      	ldr	r2, [pc, #256]	; (8002938 <TIM_Base_SetConfig+0x114>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d00f      	beq.n	8002864 <TIM_Base_SetConfig+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3d      	ldr	r2, [pc, #244]	; (800293c <TIM_Base_SetConfig+0x118>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00b      	beq.n	8002864 <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <TIM_Base_SetConfig+0x11c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3b      	ldr	r2, [pc, #236]	; (8002944 <TIM_Base_SetConfig+0x120>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3a      	ldr	r2, [pc, #232]	; (8002948 <TIM_Base_SetConfig+0x124>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d108      	bne.n	8002876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2f      	ldr	r2, [pc, #188]	; (8002938 <TIM_Base_SetConfig+0x114>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d02b      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d027      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <TIM_Base_SetConfig+0x118>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d023      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <TIM_Base_SetConfig+0x11c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <TIM_Base_SetConfig+0x120>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01b      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <TIM_Base_SetConfig+0x124>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d017      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <TIM_Base_SetConfig+0x128>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <TIM_Base_SetConfig+0x12c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00f      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <TIM_Base_SetConfig+0x130>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a25      	ldr	r2, [pc, #148]	; (8002958 <TIM_Base_SetConfig+0x134>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <TIM_Base_SetConfig+0x138>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <TIM_Base_SetConfig+0x13c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <TIM_Base_SetConfig+0x114>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0xf8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <TIM_Base_SetConfig+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d103      	bne.n	8002924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	615a      	str	r2, [r3, #20]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800
 8002944:	40000c00 	.word	0x40000c00
 8002948:	40010400 	.word	0x40010400
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800
 8002958:	40001800 	.word	0x40001800
 800295c:	40001c00 	.word	0x40001c00
 8002960:	40002000 	.word	0x40002000

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e05a      	b.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d022      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d01d      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40010400 	.word	0x40010400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40001800 	.word	0x40001800

08002a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e03f      	b.n	8002b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f8e0 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f929 	bl	8002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d17c      	bne.n	8002c38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit+0x2c>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e075      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x3e>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e06e      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f9a7 	bl	8000ec4 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bb0:	e02a      	b.n	8002c08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f840 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cf      	bne.n	8002bb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f810 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b090      	sub	sp, #64	; 0x40
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e050      	b.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5a:	d04c      	beq.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c62:	f7fe f92f 	bl	8000ec4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d241      	bcs.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c92:	637a      	str	r2, [r7, #52]	; 0x34
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e5      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc6:	623a      	str	r2, [r7, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	69f9      	ldr	r1, [r7, #28]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00f      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d09f      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3740      	adds	r7, #64	; 0x40
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b0c0      	sub	sp, #256	; 0x100
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	ea40 0301 	orr.w	r3, r0, r1
 8002d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d78:	f021 010c 	bic.w	r1, r1, #12
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	6999      	ldr	r1, [r3, #24]
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	ea40 0301 	orr.w	r3, r0, r1
 8002da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <UART_SetConfig+0x2cc>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d005      	beq.n	8002dc0 <UART_SetConfig+0xa0>
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <UART_SetConfig+0x2d0>)
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d104      	bne.n	8002dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7fe fdcc 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 8002dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dc8:	e003      	b.n	8002dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dca:	f7fe fdb3 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8002dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ddc:	f040 810c 	bne.w	8002ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e02:	4621      	mov	r1, r4
 8002e04:	eb12 0801 	adds.w	r8, r2, r1
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb43 0901 	adc.w	r9, r3, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e22:	4690      	mov	r8, r2
 8002e24:	4699      	mov	r9, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	eb18 0303 	adds.w	r3, r8, r3
 8002e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e30:	462b      	mov	r3, r5
 8002e32:	eb49 0303 	adc.w	r3, r9, r3
 8002e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e4e:	460b      	mov	r3, r1
 8002e50:	18db      	adds	r3, r3, r3
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
 8002e54:	4613      	mov	r3, r2
 8002e56:	eb42 0303 	adc.w	r3, r2, r3
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e64:	f7fd fa24 	bl	80002b0 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	011c      	lsls	r4, r3, #4
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	1891      	adds	r1, r2, r2
 8002e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e90:	415b      	adcs	r3, r3
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e98:	4641      	mov	r1, r8
 8002e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb8:	4692      	mov	sl, r2
 8002eba:	469b      	mov	fp, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	18db      	adds	r3, r3, r3
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	4613      	mov	r3, r2
 8002eec:	eb42 0303 	adc.w	r3, r2, r3
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002efa:	f7fd f9d9 	bl	80002b0 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f06:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2264      	movs	r2, #100	; 0x64
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	1acb      	subs	r3, r1, r3
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f28:	441c      	add	r4, r3
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f44:	415b      	adcs	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	1851      	adds	r1, r2, r1
 8002f50:	6339      	str	r1, [r7, #48]	; 0x30
 8002f52:	4649      	mov	r1, r9
 8002f54:	414b      	adcs	r3, r1
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f64:	4659      	mov	r1, fp
 8002f66:	00cb      	lsls	r3, r1, #3
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6e:	4651      	mov	r1, sl
 8002f70:	00ca      	lsls	r2, r1, #3
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f80:	464b      	mov	r3, r9
 8002f82:	460a      	mov	r2, r1
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	18db      	adds	r3, r3, r3
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fb6:	f7fd f97b 	bl	80002b0 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	; 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3332      	adds	r3, #50	; 0x32
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4422      	add	r2, r4
 8002fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe8:	e105      	b.n	80031f6 <UART_SetConfig+0x4d6>
 8002fea:	bf00      	nop
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800300a:	4642      	mov	r2, r8
 800300c:	464b      	mov	r3, r9
 800300e:	1891      	adds	r1, r2, r2
 8003010:	6239      	str	r1, [r7, #32]
 8003012:	415b      	adcs	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800301a:	4641      	mov	r1, r8
 800301c:	1854      	adds	r4, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb43 0501 	adc.w	r5, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003040:	464b      	mov	r3, r9
 8003042:	eb45 0303 	adc.w	r3, r5, r3
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003066:	4629      	mov	r1, r5
 8003068:	008b      	lsls	r3, r1, #2
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003070:	4621      	mov	r1, r4
 8003072:	008a      	lsls	r2, r1, #2
 8003074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003078:	f7fd f91a 	bl	80002b0 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4b60      	ldr	r3, [pc, #384]	; (8003204 <UART_SetConfig+0x4e4>)
 8003082:	fba3 2302 	umull	r2, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	011c      	lsls	r4, r3, #4
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	61b9      	str	r1, [r7, #24]
 80030a4:	415b      	adcs	r3, r3
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6139      	str	r1, [r7, #16]
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003104:	4649      	mov	r1, r9
 8003106:	008b      	lsls	r3, r1, #2
 8003108:	4641      	mov	r1, r8
 800310a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310e:	4641      	mov	r1, r8
 8003110:	008a      	lsls	r2, r1, #2
 8003112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003116:	f7fd f8cb 	bl	80002b0 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <UART_SetConfig+0x4e4>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2164      	movs	r1, #100	; 0x64
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	3332      	adds	r3, #50	; 0x32
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <UART_SetConfig+0x4e4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313e:	441c      	add	r4, r3
 8003140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003144:	2200      	movs	r2, #0
 8003146:	673b      	str	r3, [r7, #112]	; 0x70
 8003148:	677a      	str	r2, [r7, #116]	; 0x74
 800314a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	415b      	adcs	r3, r3
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315e:	4641      	mov	r1, r8
 8003160:	1851      	adds	r1, r2, r1
 8003162:	6039      	str	r1, [r7, #0]
 8003164:	4649      	mov	r1, r9
 8003166:	414b      	adcs	r3, r1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003176:	4659      	mov	r1, fp
 8003178:	00cb      	lsls	r3, r1, #3
 800317a:	4651      	mov	r1, sl
 800317c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003180:	4651      	mov	r1, sl
 8003182:	00ca      	lsls	r2, r1, #3
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	4603      	mov	r3, r0
 800318a:	4642      	mov	r2, r8
 800318c:	189b      	adds	r3, r3, r2
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003190:	464b      	mov	r3, r9
 8003192:	460a      	mov	r2, r1
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	663b      	str	r3, [r7, #96]	; 0x60
 80031a4:	667a      	str	r2, [r7, #100]	; 0x64
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031b2:	4649      	mov	r1, r9
 80031b4:	008b      	lsls	r3, r1, #2
 80031b6:	4641      	mov	r1, r8
 80031b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031bc:	4641      	mov	r1, r8
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c4:	f7fd f874 	bl	80002b0 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <UART_SetConfig+0x4e4>)
 80031ce:	fba3 1302 	umull	r1, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2164      	movs	r1, #100	; 0x64
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	3332      	adds	r3, #50	; 0x32
 80031e0:	4a08      	ldr	r2, [pc, #32]	; (8003204 <UART_SetConfig+0x4e4>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4422      	add	r2, r4
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	bf00      	nop
 80031f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003202:	bf00      	nop
 8003204:	51eb851f 	.word	0x51eb851f

08003208 <__errno>:
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <__errno+0x8>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4d0d      	ldr	r5, [pc, #52]	; (800324c <__libc_init_array+0x38>)
 8003218:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	2600      	movs	r6, #0
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	4d0b      	ldr	r5, [pc, #44]	; (8003254 <__libc_init_array+0x40>)
 8003226:	4c0c      	ldr	r4, [pc, #48]	; (8003258 <__libc_init_array+0x44>)
 8003228:	f000 fc8e 	bl	8003b48 <_init>
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	2600      	movs	r6, #0
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08003c2c 	.word	0x08003c2c
 8003250:	08003c2c 	.word	0x08003c2c
 8003254:	08003c2c 	.word	0x08003c2c
 8003258:	08003c30 	.word	0x08003c30

0800325c <memset>:
 800325c:	4402      	add	r2, r0
 800325e:	4603      	mov	r3, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	d100      	bne.n	8003266 <memset+0xa>
 8003264:	4770      	bx	lr
 8003266:	f803 1b01 	strb.w	r1, [r3], #1
 800326a:	e7f9      	b.n	8003260 <memset+0x4>

0800326c <siprintf>:
 800326c:	b40e      	push	{r1, r2, r3}
 800326e:	b500      	push	{lr}
 8003270:	b09c      	sub	sp, #112	; 0x70
 8003272:	ab1d      	add	r3, sp, #116	; 0x74
 8003274:	9002      	str	r0, [sp, #8]
 8003276:	9006      	str	r0, [sp, #24]
 8003278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800327c:	4809      	ldr	r0, [pc, #36]	; (80032a4 <siprintf+0x38>)
 800327e:	9107      	str	r1, [sp, #28]
 8003280:	9104      	str	r1, [sp, #16]
 8003282:	4909      	ldr	r1, [pc, #36]	; (80032a8 <siprintf+0x3c>)
 8003284:	f853 2b04 	ldr.w	r2, [r3], #4
 8003288:	9105      	str	r1, [sp, #20]
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	a902      	add	r1, sp, #8
 8003290:	f000 f868 	bl	8003364 <_svfiprintf_r>
 8003294:	9b02      	ldr	r3, [sp, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	b01c      	add	sp, #112	; 0x70
 800329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a0:	b003      	add	sp, #12
 80032a2:	4770      	bx	lr
 80032a4:	2000000c 	.word	0x2000000c
 80032a8:	ffff0208 	.word	0xffff0208

080032ac <__ssputs_r>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	688e      	ldr	r6, [r1, #8]
 80032b2:	429e      	cmp	r6, r3
 80032b4:	4682      	mov	sl, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4690      	mov	r8, r2
 80032ba:	461f      	mov	r7, r3
 80032bc:	d838      	bhi.n	8003330 <__ssputs_r+0x84>
 80032be:	898a      	ldrh	r2, [r1, #12]
 80032c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c4:	d032      	beq.n	800332c <__ssputs_r+0x80>
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	6909      	ldr	r1, [r1, #16]
 80032ca:	eba5 0901 	sub.w	r9, r5, r1
 80032ce:	6965      	ldr	r5, [r4, #20]
 80032d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032d8:	3301      	adds	r3, #1
 80032da:	444b      	add	r3, r9
 80032dc:	106d      	asrs	r5, r5, #1
 80032de:	429d      	cmp	r5, r3
 80032e0:	bf38      	it	cc
 80032e2:	461d      	movcc	r5, r3
 80032e4:	0553      	lsls	r3, r2, #21
 80032e6:	d531      	bpl.n	800334c <__ssputs_r+0xa0>
 80032e8:	4629      	mov	r1, r5
 80032ea:	f000 fb63 	bl	80039b4 <_malloc_r>
 80032ee:	4606      	mov	r6, r0
 80032f0:	b950      	cbnz	r0, 8003308 <__ssputs_r+0x5c>
 80032f2:	230c      	movs	r3, #12
 80032f4:	f8ca 3000 	str.w	r3, [sl]
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	6921      	ldr	r1, [r4, #16]
 800330a:	464a      	mov	r2, r9
 800330c:	f000 fabe 	bl	800388c <memcpy>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	6126      	str	r6, [r4, #16]
 800331e:	6165      	str	r5, [r4, #20]
 8003320:	444e      	add	r6, r9
 8003322:	eba5 0509 	sub.w	r5, r5, r9
 8003326:	6026      	str	r6, [r4, #0]
 8003328:	60a5      	str	r5, [r4, #8]
 800332a:	463e      	mov	r6, r7
 800332c:	42be      	cmp	r6, r7
 800332e:	d900      	bls.n	8003332 <__ssputs_r+0x86>
 8003330:	463e      	mov	r6, r7
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	4632      	mov	r2, r6
 8003336:	4641      	mov	r1, r8
 8003338:	f000 fab6 	bl	80038a8 <memmove>
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	1b9b      	subs	r3, r3, r6
 8003340:	60a3      	str	r3, [r4, #8]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	4433      	add	r3, r6
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	2000      	movs	r0, #0
 800334a:	e7db      	b.n	8003304 <__ssputs_r+0x58>
 800334c:	462a      	mov	r2, r5
 800334e:	f000 fba5 	bl	8003a9c <_realloc_r>
 8003352:	4606      	mov	r6, r0
 8003354:	2800      	cmp	r0, #0
 8003356:	d1e1      	bne.n	800331c <__ssputs_r+0x70>
 8003358:	6921      	ldr	r1, [r4, #16]
 800335a:	4650      	mov	r0, sl
 800335c:	f000 fabe 	bl	80038dc <_free_r>
 8003360:	e7c7      	b.n	80032f2 <__ssputs_r+0x46>
	...

08003364 <_svfiprintf_r>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	4698      	mov	r8, r3
 800336a:	898b      	ldrh	r3, [r1, #12]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	b09d      	sub	sp, #116	; 0x74
 8003370:	4607      	mov	r7, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4614      	mov	r4, r2
 8003376:	d50e      	bpl.n	8003396 <_svfiprintf_r+0x32>
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b963      	cbnz	r3, 8003396 <_svfiprintf_r+0x32>
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	f000 fb19 	bl	80039b4 <_malloc_r>
 8003382:	6028      	str	r0, [r5, #0]
 8003384:	6128      	str	r0, [r5, #16]
 8003386:	b920      	cbnz	r0, 8003392 <_svfiprintf_r+0x2e>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003390:	e0d1      	b.n	8003536 <_svfiprintf_r+0x1d2>
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	616b      	str	r3, [r5, #20]
 8003396:	2300      	movs	r3, #0
 8003398:	9309      	str	r3, [sp, #36]	; 0x24
 800339a:	2320      	movs	r3, #32
 800339c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a4:	2330      	movs	r3, #48	; 0x30
 80033a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003550 <_svfiprintf_r+0x1ec>
 80033aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033ae:	f04f 0901 	mov.w	r9, #1
 80033b2:	4623      	mov	r3, r4
 80033b4:	469a      	mov	sl, r3
 80033b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ba:	b10a      	cbz	r2, 80033c0 <_svfiprintf_r+0x5c>
 80033bc:	2a25      	cmp	r2, #37	; 0x25
 80033be:	d1f9      	bne.n	80033b4 <_svfiprintf_r+0x50>
 80033c0:	ebba 0b04 	subs.w	fp, sl, r4
 80033c4:	d00b      	beq.n	80033de <_svfiprintf_r+0x7a>
 80033c6:	465b      	mov	r3, fp
 80033c8:	4622      	mov	r2, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	4638      	mov	r0, r7
 80033ce:	f7ff ff6d 	bl	80032ac <__ssputs_r>
 80033d2:	3001      	adds	r0, #1
 80033d4:	f000 80aa 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033da:	445a      	add	r2, fp
 80033dc:	9209      	str	r2, [sp, #36]	; 0x24
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a2 	beq.w	800352c <_svfiprintf_r+0x1c8>
 80033e8:	2300      	movs	r3, #0
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f2:	f10a 0a01 	add.w	sl, sl, #1
 80033f6:	9304      	str	r3, [sp, #16]
 80033f8:	9307      	str	r3, [sp, #28]
 80033fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033fe:	931a      	str	r3, [sp, #104]	; 0x68
 8003400:	4654      	mov	r4, sl
 8003402:	2205      	movs	r2, #5
 8003404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003408:	4851      	ldr	r0, [pc, #324]	; (8003550 <_svfiprintf_r+0x1ec>)
 800340a:	f7fc ff01 	bl	8000210 <memchr>
 800340e:	9a04      	ldr	r2, [sp, #16]
 8003410:	b9d8      	cbnz	r0, 800344a <_svfiprintf_r+0xe6>
 8003412:	06d0      	lsls	r0, r2, #27
 8003414:	bf44      	itt	mi
 8003416:	2320      	movmi	r3, #32
 8003418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341c:	0711      	lsls	r1, r2, #28
 800341e:	bf44      	itt	mi
 8003420:	232b      	movmi	r3, #43	; 0x2b
 8003422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003426:	f89a 3000 	ldrb.w	r3, [sl]
 800342a:	2b2a      	cmp	r3, #42	; 0x2a
 800342c:	d015      	beq.n	800345a <_svfiprintf_r+0xf6>
 800342e:	9a07      	ldr	r2, [sp, #28]
 8003430:	4654      	mov	r4, sl
 8003432:	2000      	movs	r0, #0
 8003434:	f04f 0c0a 	mov.w	ip, #10
 8003438:	4621      	mov	r1, r4
 800343a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800343e:	3b30      	subs	r3, #48	; 0x30
 8003440:	2b09      	cmp	r3, #9
 8003442:	d94e      	bls.n	80034e2 <_svfiprintf_r+0x17e>
 8003444:	b1b0      	cbz	r0, 8003474 <_svfiprintf_r+0x110>
 8003446:	9207      	str	r2, [sp, #28]
 8003448:	e014      	b.n	8003474 <_svfiprintf_r+0x110>
 800344a:	eba0 0308 	sub.w	r3, r0, r8
 800344e:	fa09 f303 	lsl.w	r3, r9, r3
 8003452:	4313      	orrs	r3, r2
 8003454:	9304      	str	r3, [sp, #16]
 8003456:	46a2      	mov	sl, r4
 8003458:	e7d2      	b.n	8003400 <_svfiprintf_r+0x9c>
 800345a:	9b03      	ldr	r3, [sp, #12]
 800345c:	1d19      	adds	r1, r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	9103      	str	r1, [sp, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfbb      	ittet	lt
 8003466:	425b      	neglt	r3, r3
 8003468:	f042 0202 	orrlt.w	r2, r2, #2
 800346c:	9307      	strge	r3, [sp, #28]
 800346e:	9307      	strlt	r3, [sp, #28]
 8003470:	bfb8      	it	lt
 8003472:	9204      	strlt	r2, [sp, #16]
 8003474:	7823      	ldrb	r3, [r4, #0]
 8003476:	2b2e      	cmp	r3, #46	; 0x2e
 8003478:	d10c      	bne.n	8003494 <_svfiprintf_r+0x130>
 800347a:	7863      	ldrb	r3, [r4, #1]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d135      	bne.n	80034ec <_svfiprintf_r+0x188>
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	9203      	str	r2, [sp, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	bfb8      	it	lt
 800348c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003490:	3402      	adds	r4, #2
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003560 <_svfiprintf_r+0x1fc>
 8003498:	7821      	ldrb	r1, [r4, #0]
 800349a:	2203      	movs	r2, #3
 800349c:	4650      	mov	r0, sl
 800349e:	f7fc feb7 	bl	8000210 <memchr>
 80034a2:	b140      	cbz	r0, 80034b6 <_svfiprintf_r+0x152>
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	eba0 000a 	sub.w	r0, r0, sl
 80034aa:	fa03 f000 	lsl.w	r0, r3, r0
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	4303      	orrs	r3, r0
 80034b2:	3401      	adds	r4, #1
 80034b4:	9304      	str	r3, [sp, #16]
 80034b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ba:	4826      	ldr	r0, [pc, #152]	; (8003554 <_svfiprintf_r+0x1f0>)
 80034bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c0:	2206      	movs	r2, #6
 80034c2:	f7fc fea5 	bl	8000210 <memchr>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d038      	beq.n	800353c <_svfiprintf_r+0x1d8>
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <_svfiprintf_r+0x1f4>)
 80034cc:	bb1b      	cbnz	r3, 8003516 <_svfiprintf_r+0x1b2>
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	3307      	adds	r3, #7
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	3308      	adds	r3, #8
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034dc:	4433      	add	r3, r6
 80034de:	9309      	str	r3, [sp, #36]	; 0x24
 80034e0:	e767      	b.n	80033b2 <_svfiprintf_r+0x4e>
 80034e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e6:	460c      	mov	r4, r1
 80034e8:	2001      	movs	r0, #1
 80034ea:	e7a5      	b.n	8003438 <_svfiprintf_r+0xd4>
 80034ec:	2300      	movs	r3, #0
 80034ee:	3401      	adds	r4, #1
 80034f0:	9305      	str	r3, [sp, #20]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	4620      	mov	r0, r4
 80034fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fe:	3a30      	subs	r2, #48	; 0x30
 8003500:	2a09      	cmp	r2, #9
 8003502:	d903      	bls.n	800350c <_svfiprintf_r+0x1a8>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0c5      	beq.n	8003494 <_svfiprintf_r+0x130>
 8003508:	9105      	str	r1, [sp, #20]
 800350a:	e7c3      	b.n	8003494 <_svfiprintf_r+0x130>
 800350c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003510:	4604      	mov	r4, r0
 8003512:	2301      	movs	r3, #1
 8003514:	e7f0      	b.n	80034f8 <_svfiprintf_r+0x194>
 8003516:	ab03      	add	r3, sp, #12
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	462a      	mov	r2, r5
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <_svfiprintf_r+0x1f8>)
 800351e:	a904      	add	r1, sp, #16
 8003520:	4638      	mov	r0, r7
 8003522:	f3af 8000 	nop.w
 8003526:	1c42      	adds	r2, r0, #1
 8003528:	4606      	mov	r6, r0
 800352a:	d1d6      	bne.n	80034da <_svfiprintf_r+0x176>
 800352c:	89ab      	ldrh	r3, [r5, #12]
 800352e:	065b      	lsls	r3, r3, #25
 8003530:	f53f af2c 	bmi.w	800338c <_svfiprintf_r+0x28>
 8003534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003536:	b01d      	add	sp, #116	; 0x74
 8003538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	ab03      	add	r3, sp, #12
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	462a      	mov	r2, r5
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <_svfiprintf_r+0x1f8>)
 8003544:	a904      	add	r1, sp, #16
 8003546:	4638      	mov	r0, r7
 8003548:	f000 f87a 	bl	8003640 <_printf_i>
 800354c:	e7eb      	b.n	8003526 <_svfiprintf_r+0x1c2>
 800354e:	bf00      	nop
 8003550:	08003bf0 	.word	0x08003bf0
 8003554:	08003bfa 	.word	0x08003bfa
 8003558:	00000000 	.word	0x00000000
 800355c:	080032ad 	.word	0x080032ad
 8003560:	08003bf6 	.word	0x08003bf6

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4616      	mov	r6, r2
 800356a:	4699      	mov	r9, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	4293      	cmp	r3, r2
 8003576:	bfb8      	it	lt
 8003578:	4613      	movlt	r3, r2
 800357a:	6033      	str	r3, [r6, #0]
 800357c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003580:	4607      	mov	r7, r0
 8003582:	460c      	mov	r4, r1
 8003584:	b10a      	cbz	r2, 800358a <_printf_common+0x26>
 8003586:	3301      	adds	r3, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	0699      	lsls	r1, r3, #26
 800358e:	bf42      	ittt	mi
 8003590:	6833      	ldrmi	r3, [r6, #0]
 8003592:	3302      	addmi	r3, #2
 8003594:	6033      	strmi	r3, [r6, #0]
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	f015 0506 	ands.w	r5, r5, #6
 800359c:	d106      	bne.n	80035ac <_printf_common+0x48>
 800359e:	f104 0a19 	add.w	sl, r4, #25
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dc26      	bgt.n	80035fa <_printf_common+0x96>
 80035ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b0:	1e13      	subs	r3, r2, #0
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	0692      	lsls	r2, r2, #26
 80035ba:	d42b      	bmi.n	8003614 <_printf_common+0xb0>
 80035bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d01e      	beq.n	8003608 <_printf_common+0xa4>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	68e5      	ldr	r5, [r4, #12]
 80035ce:	6832      	ldr	r2, [r6, #0]
 80035d0:	f003 0306 	and.w	r3, r3, #6
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	bf08      	it	eq
 80035d8:	1aad      	subeq	r5, r5, r2
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6922      	ldr	r2, [r4, #16]
 80035de:	bf0c      	ite	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	2500      	movne	r5, #0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	bfc4      	itt	gt
 80035ea:	1a9b      	subgt	r3, r3, r2
 80035ec:	18ed      	addgt	r5, r5, r3
 80035ee:	2600      	movs	r6, #0
 80035f0:	341a      	adds	r4, #26
 80035f2:	42b5      	cmp	r5, r6
 80035f4:	d11a      	bne.n	800362c <_printf_common+0xc8>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e008      	b.n	800360c <_printf_common+0xa8>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	4649      	mov	r1, r9
 8003600:	4638      	mov	r0, r7
 8003602:	47c0      	blx	r8
 8003604:	3001      	adds	r0, #1
 8003606:	d103      	bne.n	8003610 <_printf_common+0xac>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003610:	3501      	adds	r5, #1
 8003612:	e7c6      	b.n	80035a2 <_printf_common+0x3e>
 8003614:	18e1      	adds	r1, r4, r3
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361e:	4422      	add	r2, r4
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003628:	3302      	adds	r3, #2
 800362a:	e7c7      	b.n	80035bc <_printf_common+0x58>
 800362c:	2301      	movs	r3, #1
 800362e:	4622      	mov	r2, r4
 8003630:	4649      	mov	r1, r9
 8003632:	4638      	mov	r0, r7
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d0e6      	beq.n	8003608 <_printf_common+0xa4>
 800363a:	3601      	adds	r6, #1
 800363c:	e7d9      	b.n	80035f2 <_printf_common+0x8e>
	...

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003648:	2f78      	cmp	r7, #120	; 0x78
 800364a:	4691      	mov	r9, r2
 800364c:	4680      	mov	r8, r0
 800364e:	460c      	mov	r4, r1
 8003650:	469a      	mov	sl, r3
 8003652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	; 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d8 	beq.w	8003812 <_printf_i+0x1d2>
 8003662:	2f58      	cmp	r7, #88	; 0x58
 8003664:	f000 80a3 	beq.w	80037ae <_printf_i+0x16e>
 8003668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	; (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037f9 	.word	0x080037f9
 80036b0:	0800371d 	.word	0x0800371d
 80036b4:	080037db 	.word	0x080037db
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	0800381b 	.word	0x0800381b
 80036c4:	08003669 	.word	0x08003669
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037e3 	.word	0x080037e3
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	602a      	str	r2, [r5, #0]
 80036e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0a3      	b.n	8003834 <_printf_i+0x1f4>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	0606      	lsls	r6, r0, #24
 80036f2:	f101 0304 	add.w	r3, r1, #4
 80036f6:	d50a      	bpl.n	800370e <_printf_i+0xce>
 80036f8:	680e      	ldr	r6, [r1, #0]
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	da03      	bge.n	8003708 <_printf_i+0xc8>
 8003700:	232d      	movs	r3, #45	; 0x2d
 8003702:	4276      	negs	r6, r6
 8003704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003708:	485e      	ldr	r0, [pc, #376]	; (8003884 <_printf_i+0x244>)
 800370a:	230a      	movs	r3, #10
 800370c:	e019      	b.n	8003742 <_printf_i+0x102>
 800370e:	680e      	ldr	r6, [r1, #0]
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003716:	bf18      	it	ne
 8003718:	b236      	sxthne	r6, r6
 800371a:	e7ef      	b.n	80036fc <_printf_i+0xbc>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	6029      	str	r1, [r5, #0]
 8003724:	0601      	lsls	r1, r0, #24
 8003726:	d501      	bpl.n	800372c <_printf_i+0xec>
 8003728:	681e      	ldr	r6, [r3, #0]
 800372a:	e002      	b.n	8003732 <_printf_i+0xf2>
 800372c:	0646      	lsls	r6, r0, #25
 800372e:	d5fb      	bpl.n	8003728 <_printf_i+0xe8>
 8003730:	881e      	ldrh	r6, [r3, #0]
 8003732:	4854      	ldr	r0, [pc, #336]	; (8003884 <_printf_i+0x244>)
 8003734:	2f6f      	cmp	r7, #111	; 0x6f
 8003736:	bf0c      	ite	eq
 8003738:	2308      	moveq	r3, #8
 800373a:	230a      	movne	r3, #10
 800373c:	2100      	movs	r1, #0
 800373e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003742:	6865      	ldr	r5, [r4, #4]
 8003744:	60a5      	str	r5, [r4, #8]
 8003746:	2d00      	cmp	r5, #0
 8003748:	bfa2      	ittt	ge
 800374a:	6821      	ldrge	r1, [r4, #0]
 800374c:	f021 0104 	bicge.w	r1, r1, #4
 8003750:	6021      	strge	r1, [r4, #0]
 8003752:	b90e      	cbnz	r6, 8003758 <_printf_i+0x118>
 8003754:	2d00      	cmp	r5, #0
 8003756:	d04d      	beq.n	80037f4 <_printf_i+0x1b4>
 8003758:	4615      	mov	r5, r2
 800375a:	fbb6 f1f3 	udiv	r1, r6, r3
 800375e:	fb03 6711 	mls	r7, r3, r1, r6
 8003762:	5dc7      	ldrb	r7, [r0, r7]
 8003764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003768:	4637      	mov	r7, r6
 800376a:	42bb      	cmp	r3, r7
 800376c:	460e      	mov	r6, r1
 800376e:	d9f4      	bls.n	800375a <_printf_i+0x11a>
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10b      	bne.n	800378c <_printf_i+0x14c>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	07de      	lsls	r6, r3, #31
 8003778:	d508      	bpl.n	800378c <_printf_i+0x14c>
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	6861      	ldr	r1, [r4, #4]
 800377e:	4299      	cmp	r1, r3
 8003780:	bfde      	ittt	le
 8003782:	2330      	movle	r3, #48	; 0x30
 8003784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003788:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800378c:	1b52      	subs	r2, r2, r5
 800378e:	6122      	str	r2, [r4, #16]
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	464b      	mov	r3, r9
 8003796:	aa03      	add	r2, sp, #12
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fee2 	bl	8003564 <_printf_common>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d14c      	bne.n	800383e <_printf_i+0x1fe>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a8:	b004      	add	sp, #16
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	4835      	ldr	r0, [pc, #212]	; (8003884 <_printf_i+0x244>)
 80037b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b4:	6829      	ldr	r1, [r5, #0]
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037bc:	6029      	str	r1, [r5, #0]
 80037be:	061d      	lsls	r5, r3, #24
 80037c0:	d514      	bpl.n	80037ec <_printf_i+0x1ac>
 80037c2:	07df      	lsls	r7, r3, #31
 80037c4:	bf44      	itt	mi
 80037c6:	f043 0320 	orrmi.w	r3, r3, #32
 80037ca:	6023      	strmi	r3, [r4, #0]
 80037cc:	b91e      	cbnz	r6, 80037d6 <_printf_i+0x196>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f023 0320 	bic.w	r3, r3, #32
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	2310      	movs	r3, #16
 80037d8:	e7b0      	b.n	800373c <_printf_i+0xfc>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	2378      	movs	r3, #120	; 0x78
 80037e4:	4828      	ldr	r0, [pc, #160]	; (8003888 <_printf_i+0x248>)
 80037e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ea:	e7e3      	b.n	80037b4 <_printf_i+0x174>
 80037ec:	0659      	lsls	r1, r3, #25
 80037ee:	bf48      	it	mi
 80037f0:	b2b6      	uxthmi	r6, r6
 80037f2:	e7e6      	b.n	80037c2 <_printf_i+0x182>
 80037f4:	4615      	mov	r5, r2
 80037f6:	e7bb      	b.n	8003770 <_printf_i+0x130>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	6826      	ldr	r6, [r4, #0]
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	1d18      	adds	r0, r3, #4
 8003800:	6028      	str	r0, [r5, #0]
 8003802:	0635      	lsls	r5, r6, #24
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	d501      	bpl.n	800380c <_printf_i+0x1cc>
 8003808:	6019      	str	r1, [r3, #0]
 800380a:	e002      	b.n	8003812 <_printf_i+0x1d2>
 800380c:	0670      	lsls	r0, r6, #25
 800380e:	d5fb      	bpl.n	8003808 <_printf_i+0x1c8>
 8003810:	8019      	strh	r1, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	4615      	mov	r5, r2
 8003818:	e7ba      	b.n	8003790 <_printf_i+0x150>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	681d      	ldr	r5, [r3, #0]
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	2100      	movs	r1, #0
 8003826:	4628      	mov	r0, r5
 8003828:	f7fc fcf2 	bl	8000210 <memchr>
 800382c:	b108      	cbz	r0, 8003832 <_printf_i+0x1f2>
 800382e:	1b40      	subs	r0, r0, r5
 8003830:	6060      	str	r0, [r4, #4]
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	6123      	str	r3, [r4, #16]
 8003836:	2300      	movs	r3, #0
 8003838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383c:	e7a8      	b.n	8003790 <_printf_i+0x150>
 800383e:	6923      	ldr	r3, [r4, #16]
 8003840:	462a      	mov	r2, r5
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	47d0      	blx	sl
 8003848:	3001      	adds	r0, #1
 800384a:	d0ab      	beq.n	80037a4 <_printf_i+0x164>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	079b      	lsls	r3, r3, #30
 8003850:	d413      	bmi.n	800387a <_printf_i+0x23a>
 8003852:	68e0      	ldr	r0, [r4, #12]
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	4298      	cmp	r0, r3
 8003858:	bfb8      	it	lt
 800385a:	4618      	movlt	r0, r3
 800385c:	e7a4      	b.n	80037a8 <_printf_i+0x168>
 800385e:	2301      	movs	r3, #1
 8003860:	4632      	mov	r2, r6
 8003862:	4649      	mov	r1, r9
 8003864:	4640      	mov	r0, r8
 8003866:	47d0      	blx	sl
 8003868:	3001      	adds	r0, #1
 800386a:	d09b      	beq.n	80037a4 <_printf_i+0x164>
 800386c:	3501      	adds	r5, #1
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	9903      	ldr	r1, [sp, #12]
 8003872:	1a5b      	subs	r3, r3, r1
 8003874:	42ab      	cmp	r3, r5
 8003876:	dcf2      	bgt.n	800385e <_printf_i+0x21e>
 8003878:	e7eb      	b.n	8003852 <_printf_i+0x212>
 800387a:	2500      	movs	r5, #0
 800387c:	f104 0619 	add.w	r6, r4, #25
 8003880:	e7f5      	b.n	800386e <_printf_i+0x22e>
 8003882:	bf00      	nop
 8003884:	08003c01 	.word	0x08003c01
 8003888:	08003c12 	.word	0x08003c12

0800388c <memcpy>:
 800388c:	440a      	add	r2, r1
 800388e:	4291      	cmp	r1, r2
 8003890:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003894:	d100      	bne.n	8003898 <memcpy+0xc>
 8003896:	4770      	bx	lr
 8003898:	b510      	push	{r4, lr}
 800389a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a2:	4291      	cmp	r1, r2
 80038a4:	d1f9      	bne.n	800389a <memcpy+0xe>
 80038a6:	bd10      	pop	{r4, pc}

080038a8 <memmove>:
 80038a8:	4288      	cmp	r0, r1
 80038aa:	b510      	push	{r4, lr}
 80038ac:	eb01 0402 	add.w	r4, r1, r2
 80038b0:	d902      	bls.n	80038b8 <memmove+0x10>
 80038b2:	4284      	cmp	r4, r0
 80038b4:	4623      	mov	r3, r4
 80038b6:	d807      	bhi.n	80038c8 <memmove+0x20>
 80038b8:	1e43      	subs	r3, r0, #1
 80038ba:	42a1      	cmp	r1, r4
 80038bc:	d008      	beq.n	80038d0 <memmove+0x28>
 80038be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038c6:	e7f8      	b.n	80038ba <memmove+0x12>
 80038c8:	4402      	add	r2, r0
 80038ca:	4601      	mov	r1, r0
 80038cc:	428a      	cmp	r2, r1
 80038ce:	d100      	bne.n	80038d2 <memmove+0x2a>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038da:	e7f7      	b.n	80038cc <memmove+0x24>

080038dc <_free_r>:
 80038dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038de:	2900      	cmp	r1, #0
 80038e0:	d044      	beq.n	800396c <_free_r+0x90>
 80038e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e6:	9001      	str	r0, [sp, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f1a1 0404 	sub.w	r4, r1, #4
 80038ee:	bfb8      	it	lt
 80038f0:	18e4      	addlt	r4, r4, r3
 80038f2:	f000 f913 	bl	8003b1c <__malloc_lock>
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <_free_r+0x94>)
 80038f8:	9801      	ldr	r0, [sp, #4]
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	b933      	cbnz	r3, 800390c <_free_r+0x30>
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	b003      	add	sp, #12
 8003904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003908:	f000 b90e 	b.w	8003b28 <__malloc_unlock>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d908      	bls.n	8003922 <_free_r+0x46>
 8003910:	6825      	ldr	r5, [r4, #0]
 8003912:	1961      	adds	r1, r4, r5
 8003914:	428b      	cmp	r3, r1
 8003916:	bf01      	itttt	eq
 8003918:	6819      	ldreq	r1, [r3, #0]
 800391a:	685b      	ldreq	r3, [r3, #4]
 800391c:	1949      	addeq	r1, r1, r5
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	e7ed      	b.n	80038fe <_free_r+0x22>
 8003922:	461a      	mov	r2, r3
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b10b      	cbz	r3, 800392c <_free_r+0x50>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d9fa      	bls.n	8003922 <_free_r+0x46>
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	1855      	adds	r5, r2, r1
 8003930:	42a5      	cmp	r5, r4
 8003932:	d10b      	bne.n	800394c <_free_r+0x70>
 8003934:	6824      	ldr	r4, [r4, #0]
 8003936:	4421      	add	r1, r4
 8003938:	1854      	adds	r4, r2, r1
 800393a:	42a3      	cmp	r3, r4
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	d1e0      	bne.n	8003902 <_free_r+0x26>
 8003940:	681c      	ldr	r4, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	4421      	add	r1, r4
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	e7da      	b.n	8003902 <_free_r+0x26>
 800394c:	d902      	bls.n	8003954 <_free_r+0x78>
 800394e:	230c      	movs	r3, #12
 8003950:	6003      	str	r3, [r0, #0]
 8003952:	e7d6      	b.n	8003902 <_free_r+0x26>
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1961      	adds	r1, r4, r5
 8003958:	428b      	cmp	r3, r1
 800395a:	bf04      	itt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	bf04      	itt	eq
 8003964:	1949      	addeq	r1, r1, r5
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7ca      	b.n	8003902 <_free_r+0x26>
 800396c:	b003      	add	sp, #12
 800396e:	bd30      	pop	{r4, r5, pc}
 8003970:	20000124 	.word	0x20000124

08003974 <sbrk_aligned>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0e      	ldr	r6, [pc, #56]	; (80039b0 <sbrk_aligned+0x3c>)
 8003978:	460c      	mov	r4, r1
 800397a:	6831      	ldr	r1, [r6, #0]
 800397c:	4605      	mov	r5, r0
 800397e:	b911      	cbnz	r1, 8003986 <sbrk_aligned+0x12>
 8003980:	f000 f8bc 	bl	8003afc <_sbrk_r>
 8003984:	6030      	str	r0, [r6, #0]
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f8b7 	bl	8003afc <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d00a      	beq.n	80039a8 <sbrk_aligned+0x34>
 8003992:	1cc4      	adds	r4, r0, #3
 8003994:	f024 0403 	bic.w	r4, r4, #3
 8003998:	42a0      	cmp	r0, r4
 800399a:	d007      	beq.n	80039ac <sbrk_aligned+0x38>
 800399c:	1a21      	subs	r1, r4, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f8ac 	bl	8003afc <_sbrk_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d101      	bne.n	80039ac <sbrk_aligned+0x38>
 80039a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	20000128 	.word	0x20000128

080039b4 <_malloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	1ccd      	adds	r5, r1, #3
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	4607      	mov	r7, r0
 80039ca:	db01      	blt.n	80039d0 <_malloc_r+0x1c>
 80039cc:	42a9      	cmp	r1, r5
 80039ce:	d905      	bls.n	80039dc <_malloc_r+0x28>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4630      	mov	r0, r6
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	4e2e      	ldr	r6, [pc, #184]	; (8003a98 <_malloc_r+0xe4>)
 80039de:	f000 f89d 	bl	8003b1c <__malloc_lock>
 80039e2:	6833      	ldr	r3, [r6, #0]
 80039e4:	461c      	mov	r4, r3
 80039e6:	bb34      	cbnz	r4, 8003a36 <_malloc_r+0x82>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ffc2 	bl	8003974 <sbrk_aligned>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	4604      	mov	r4, r0
 80039f4:	d14d      	bne.n	8003a92 <_malloc_r+0xde>
 80039f6:	6834      	ldr	r4, [r6, #0]
 80039f8:	4626      	mov	r6, r4
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d140      	bne.n	8003a80 <_malloc_r+0xcc>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	4631      	mov	r1, r6
 8003a02:	4638      	mov	r0, r7
 8003a04:	eb04 0803 	add.w	r8, r4, r3
 8003a08:	f000 f878 	bl	8003afc <_sbrk_r>
 8003a0c:	4580      	cmp	r8, r0
 8003a0e:	d13a      	bne.n	8003a86 <_malloc_r+0xd2>
 8003a10:	6821      	ldr	r1, [r4, #0]
 8003a12:	3503      	adds	r5, #3
 8003a14:	1a6d      	subs	r5, r5, r1
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	4629      	mov	r1, r5
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff ffa5 	bl	8003974 <sbrk_aligned>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d02b      	beq.n	8003a86 <_malloc_r+0xd2>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	442b      	add	r3, r5
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	e00e      	b.n	8003a54 <_malloc_r+0xa0>
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	1b52      	subs	r2, r2, r5
 8003a3a:	d41e      	bmi.n	8003a7a <_malloc_r+0xc6>
 8003a3c:	2a0b      	cmp	r2, #11
 8003a3e:	d916      	bls.n	8003a6e <_malloc_r+0xba>
 8003a40:	1961      	adds	r1, r4, r5
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	bf18      	it	ne
 8003a48:	6059      	strne	r1, [r3, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	bf08      	it	eq
 8003a4e:	6031      	streq	r1, [r6, #0]
 8003a50:	5162      	str	r2, [r4, r5]
 8003a52:	604b      	str	r3, [r1, #4]
 8003a54:	4638      	mov	r0, r7
 8003a56:	f104 060b 	add.w	r6, r4, #11
 8003a5a:	f000 f865 	bl	8003b28 <__malloc_unlock>
 8003a5e:	f026 0607 	bic.w	r6, r6, #7
 8003a62:	1d23      	adds	r3, r4, #4
 8003a64:	1af2      	subs	r2, r6, r3
 8003a66:	d0b6      	beq.n	80039d6 <_malloc_r+0x22>
 8003a68:	1b9b      	subs	r3, r3, r6
 8003a6a:	50a3      	str	r3, [r4, r2]
 8003a6c:	e7b3      	b.n	80039d6 <_malloc_r+0x22>
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	bf0c      	ite	eq
 8003a74:	6032      	streq	r2, [r6, #0]
 8003a76:	605a      	strne	r2, [r3, #4]
 8003a78:	e7ec      	b.n	8003a54 <_malloc_r+0xa0>
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	6864      	ldr	r4, [r4, #4]
 8003a7e:	e7b2      	b.n	80039e6 <_malloc_r+0x32>
 8003a80:	4634      	mov	r4, r6
 8003a82:	6876      	ldr	r6, [r6, #4]
 8003a84:	e7b9      	b.n	80039fa <_malloc_r+0x46>
 8003a86:	230c      	movs	r3, #12
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f000 f84c 	bl	8003b28 <__malloc_unlock>
 8003a90:	e7a1      	b.n	80039d6 <_malloc_r+0x22>
 8003a92:	6025      	str	r5, [r4, #0]
 8003a94:	e7de      	b.n	8003a54 <_malloc_r+0xa0>
 8003a96:	bf00      	nop
 8003a98:	20000124 	.word	0x20000124

08003a9c <_realloc_r>:
 8003a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	460e      	mov	r6, r1
 8003aa6:	b921      	cbnz	r1, 8003ab2 <_realloc_r+0x16>
 8003aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aac:	4611      	mov	r1, r2
 8003aae:	f7ff bf81 	b.w	80039b4 <_malloc_r>
 8003ab2:	b92a      	cbnz	r2, 8003ac0 <_realloc_r+0x24>
 8003ab4:	f7ff ff12 	bl	80038dc <_free_r>
 8003ab8:	4625      	mov	r5, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac0:	f000 f838 	bl	8003b34 <_malloc_usable_size_r>
 8003ac4:	4284      	cmp	r4, r0
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	d802      	bhi.n	8003ad0 <_realloc_r+0x34>
 8003aca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ace:	d812      	bhi.n	8003af6 <_realloc_r+0x5a>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f7ff ff6e 	bl	80039b4 <_malloc_r>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0ed      	beq.n	8003aba <_realloc_r+0x1e>
 8003ade:	42bc      	cmp	r4, r7
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	bf28      	it	cs
 8003ae6:	463a      	movcs	r2, r7
 8003ae8:	f7ff fed0 	bl	800388c <memcpy>
 8003aec:	4631      	mov	r1, r6
 8003aee:	4640      	mov	r0, r8
 8003af0:	f7ff fef4 	bl	80038dc <_free_r>
 8003af4:	e7e1      	b.n	8003aba <_realloc_r+0x1e>
 8003af6:	4635      	mov	r5, r6
 8003af8:	e7df      	b.n	8003aba <_realloc_r+0x1e>
	...

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4d06      	ldr	r5, [pc, #24]	; (8003b18 <_sbrk_r+0x1c>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fc ffc8 	bl	8000a9c <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	2000012c 	.word	0x2000012c

08003b1c <__malloc_lock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__malloc_lock+0x8>)
 8003b1e:	f000 b811 	b.w	8003b44 <__retarget_lock_acquire_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000130 	.word	0x20000130

08003b28 <__malloc_unlock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <__malloc_unlock+0x8>)
 8003b2a:	f000 b80c 	b.w	8003b46 <__retarget_lock_release_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000130 	.word	0x20000130

08003b34 <_malloc_usable_size_r>:
 8003b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b38:	1f18      	subs	r0, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bfbc      	itt	lt
 8003b3e:	580b      	ldrlt	r3, [r1, r0]
 8003b40:	18c0      	addlt	r0, r0, r3
 8003b42:	4770      	bx	lr

08003b44 <__retarget_lock_acquire_recursive>:
 8003b44:	4770      	bx	lr

08003b46 <__retarget_lock_release_recursive>:
 8003b46:	4770      	bx	lr

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
