
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005464  08005464  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800546c  0800546c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000070  080054e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  080054e4  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a0  00000000  00000000  0002fef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b94  00000000  00000000  00033d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011220  00000000  00000000  000568c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1115  00000000  00000000  00067ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138bf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  00138c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800535c 	.word	0x0800535c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800535c 	.word	0x0800535c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <bl_deinitEverything>:
static uint8_t partition = 0;
volatile uint8_t bootSelection = 0;
#define UART_DMA_RX_SIZE 1024
static uint8_t UART_DMA_RX_BUFFER[UART_DMA_RX_SIZE];

void bl_deinitEverything() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LD2_GPIO_Port, LD2_Pin);
 80005b8:	2120      	movs	r1, #32
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <bl_deinitEverything+0x78>)
 80005bc:	f001 fd22 	bl	8002004 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(B1_GPIO_Port, B1_Pin);
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	481a      	ldr	r0, [pc, #104]	; (8000630 <bl_deinitEverything+0x7c>)
 80005c6:	f001 fd1d 	bl	8002004 <HAL_GPIO_DeInit>

	HAL_UART_MspDeInit(&huart2);
 80005ca:	481a      	ldr	r0, [pc, #104]	; (8000634 <bl_deinitEverything+0x80>)
 80005cc:	f000 fcb6 	bl	8000f3c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart4);
 80005d0:	4819      	ldr	r0, [pc, #100]	; (8000638 <bl_deinitEverything+0x84>)
 80005d2:	f000 fcb3 	bl	8000f3c <HAL_UART_MspDeInit>
	HAL_TIM_Base_MspDeInit(&htim6);
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <bl_deinitEverything+0x88>)
 80005d8:	f000 fb8c 	bl	8000cf4 <HAL_TIM_Base_MspDeInit>

	__HAL_RCC_GPIOC_CLK_DISABLE();
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <bl_deinitEverything+0x8c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a17      	ldr	r2, [pc, #92]	; (8000640 <bl_deinitEverything+0x8c>)
 80005e2:	f023 0304 	bic.w	r3, r3, #4
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_DISABLE();
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <bl_deinitEverything+0x8c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <bl_deinitEverything+0x8c>)
 80005ee:	f023 0308 	bic.w	r3, r3, #8
 80005f2:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <bl_deinitEverything+0x8c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a11      	ldr	r2, [pc, #68]	; (8000640 <bl_deinitEverything+0x8c>)
 80005fa:	f023 0302 	bic.w	r3, r3, #2
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <bl_deinitEverything+0x8c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <bl_deinitEverything+0x8c>)
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	; 0x30

	HAL_RCC_DeInit();
 800060c:	f002 f982 	bl	8002914 <HAL_RCC_DeInit>

	HAL_DeInit();
 8000610:	f000 fd18 	bl	8001044 <HAL_DeInit>

	SysTick->CTRL = 0;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <bl_deinitEverything+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <bl_deinitEverything+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <bl_deinitEverything+0x90>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000
 8000630:	40020800 	.word	0x40020800
 8000634:	20000520 	.word	0x20000520
 8000638:	200004dc 	.word	0x200004dc
 800063c:	20000494 	.word	0x20000494
 8000640:	40023800 	.word	0x40023800
 8000644:	e000e010 	.word	0xe000e010

08000648 <bl_jumpToApplication>:


void bl_jumpToApplication(const uint32_t address)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	60fb      	str	r3, [r7, #12]

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	6852      	ldr	r2, [r2, #4]
 800065c:	f383 8808 	msr	MSP, r3
 8000660:	4710      	bx	r2
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <bl_main>:


void bl_main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a2      	sub	sp, #136	; 0x88
 8000674:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( &huart4, UART_DMA_RX_BUFFER, UART_DMA_RX_SIZE);
 8000676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067a:	4946      	ldr	r1, [pc, #280]	; (8000794 <bl_main+0x124>)
 800067c:	4846      	ldr	r0, [pc, #280]	; (8000798 <bl_main+0x128>)
 800067e:	f003 f878 	bl	8003772 <HAL_UARTEx_ReceiveToIdle_DMA>

	char msg[128] = {};
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	227c      	movs	r2, #124	; 0x7c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f9ee 	bl	8004a70 <memset>
	uint16_t msgSize = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	msgSize = sprintf(msg, "Booting ...");
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	493f      	ldr	r1, [pc, #252]	; (800079c <bl_main+0x12c>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 f9ee 	bl	8004a80 <siprintf>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 80006aa:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <bl_main+0x130>)
 80006b6:	f002 ffca 	bl	800364e <HAL_UART_Transmit>

	msgSize = sprintf(msg, "Enter Bootloader\nMake Selection on Boot Partition then press Blue Button...\n");
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4939      	ldr	r1, [pc, #228]	; (80007a4 <bl_main+0x134>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f9de 	bl	8004a80 <siprintf>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 80006ca:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d4:	4832      	ldr	r0, [pc, #200]	; (80007a0 <bl_main+0x130>)
 80006d6:	f002 ffba 	bl	800364e <HAL_UART_Transmit>

	while( !bootSelection ){
 80006da:	e019      	b.n	8000710 <bl_main+0xa0>
		partition = HAL_GPIO_ReadPin(BootSelect0_GPIO_Port, BootSelect0_Pin);
 80006dc:	2101      	movs	r1, #1
 80006de:	4832      	ldr	r0, [pc, #200]	; (80007a8 <bl_main+0x138>)
 80006e0:	f001 fd84 	bl	80021ec <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <bl_main+0x13c>)
 80006ea:	701a      	strb	r2, [r3, #0]
		partition |= (HAL_GPIO_ReadPin(BootSelect1_GPIO_Port, BootSelect1_Pin) << 1);
 80006ec:	2102      	movs	r1, #2
 80006ee:	482e      	ldr	r0, [pc, #184]	; (80007a8 <bl_main+0x138>)
 80006f0:	f001 fd7c 	bl	80021ec <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <bl_main+0x13c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <bl_main+0x13c>)
 8000708:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f000 fd1e 	bl	800114c <HAL_Delay>
	while( !bootSelection ){
 8000710:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <bl_main+0x140>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0e0      	beq.n	80006dc <bl_main+0x6c>
	}

	msgSize = sprintf(msg, "Jump to Application %d...\n", partition);
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <bl_main+0x13c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4924      	ldr	r1, [pc, #144]	; (80007b4 <bl_main+0x144>)
 8000724:	4618      	mov	r0, r3
 8000726:	f004 f9ab 	bl	8004a80 <siprintf>
 800072a:	4603      	mov	r3, r0
 800072c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, msgSize, -1);
 8000730:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	4819      	ldr	r0, [pc, #100]	; (80007a0 <bl_main+0x130>)
 800073c:	f002 ff87 	bl	800364e <HAL_UART_Transmit>

	bl_deinitEverything();
 8000740:	f7ff ff38 	bl	80005b4 <bl_deinitEverything>
	switch (partition) {
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <bl_main+0x13c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d81b      	bhi.n	8000784 <bl_main+0x114>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <bl_main+0xe4>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	0800076d 	.word	0x0800076d
 800075c:	08000775 	.word	0x08000775
 8000760:	0800077d 	.word	0x0800077d
		case 0:
			bl_jumpToApplication(APP1_START);
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <bl_main+0x148>)
 8000766:	f7ff ff6f 	bl	8000648 <bl_jumpToApplication>
			break;
 800076a:	e00f      	b.n	800078c <bl_main+0x11c>
		case 1:
			bl_jumpToApplication(APP1_START);
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <bl_main+0x148>)
 800076e:	f7ff ff6b 	bl	8000648 <bl_jumpToApplication>
			break;
 8000772:	e00b      	b.n	800078c <bl_main+0x11c>
		case 2:
			bl_jumpToApplication(APP2_START);
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <bl_main+0x14c>)
 8000776:	f7ff ff67 	bl	8000648 <bl_jumpToApplication>
		break;
 800077a:	e007      	b.n	800078c <bl_main+0x11c>
		case 3:
			bl_jumpToApplication(APP2_START);
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <bl_main+0x14c>)
 800077e:	f7ff ff63 	bl	8000648 <bl_jumpToApplication>
			break;
 8000782:	e003      	b.n	800078c <bl_main+0x11c>
		default:
			bl_jumpToApplication(APP1_START);
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <bl_main+0x148>)
 8000786:	f7ff ff5f 	bl	8000648 <bl_jumpToApplication>
			break;
 800078a:	bf00      	nop
	}
}
 800078c:	bf00      	nop
 800078e:	3788      	adds	r7, #136	; 0x88
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000090 	.word	0x20000090
 8000798:	200004dc 	.word	0x200004dc
 800079c:	08005374 	.word	0x08005374
 80007a0:	20000520 	.word	0x20000520
 80007a4:	08005380 	.word	0x08005380
 80007a8:	40020800 	.word	0x40020800
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	2000008d 	.word	0x2000008d
 80007b4:	080053d0 	.word	0x080053d0
 80007b8:	08008000 	.word	0x08008000
 80007bc:	08010000 	.word	0x08010000

080007c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == B1_Pin ){
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d0:	d102      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x18>
		bootSelection = 1;
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
	}
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	2000008d 	.word	0x2000008d

080007e8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback( UART_HandleTypeDef *huart, uint16_t Size ) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
	char buf[32];
	uint8_t l = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* This Data Receiving from bin-file parser */
	if ( huart->Instance == UART4 ) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <HAL_UARTEx_RxEventCallback+0x64>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d11e      	bne.n	8000842 <HAL_UARTEx_RxEventCallback+0x5a>
		// Save RX Data

		// Echo Data To CuteCom Terminal
		l = sprintf(buf, "Binfile RX -> Target Size %d\n", Size);
 8000804:	887a      	ldrh	r2, [r7, #2]
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4911      	ldr	r1, [pc, #68]	; (8000850 <HAL_UARTEx_RxEventCallback+0x68>)
 800080c:	4618      	mov	r0, r3
 800080e:	f004 f937 	bl	8004a80 <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		HAL_UART_Transmit( &huart2, (uint8_t*) buf, l, 10 );
 8000818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 010c 	add.w	r1, r7, #12
 8000822:	230a      	movs	r3, #10
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000826:	f002 ff12 	bl	800364e <HAL_UART_Transmit>
		//HAL_UART_Transmit( &huart2, UART_DMA_RX_BUFFER, Size, 10 );
		HAL_UART_Transmit( &huart2, (uint8_t*) "\n", 1, 10 );
 800082a:	230a      	movs	r3, #10
 800082c:	2201      	movs	r2, #1
 800082e:	490a      	ldr	r1, [pc, #40]	; (8000858 <HAL_UARTEx_RxEventCallback+0x70>)
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000832:	f002 ff0c 	bl	800364e <HAL_UART_Transmit>

		// activate RX DAM Interrupt again
		HAL_UARTEx_ReceiveToIdle_DMA( &huart4, UART_DMA_RX_BUFFER, UART_DMA_RX_SIZE);
 8000836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <HAL_UARTEx_RxEventCallback+0x74>)
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <HAL_UARTEx_RxEventCallback+0x78>)
 800083e:	f002 ff98 	bl	8003772 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000842:	bf00      	nop
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40004c00 	.word	0x40004c00
 8000850:	080053ec 	.word	0x080053ec
 8000854:	20000520 	.word	0x20000520
 8000858:	0800540c 	.word	0x0800540c
 800085c:	20000090 	.word	0x20000090
 8000860:	200004dc 	.word	0x200004dc

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	200d      	movs	r0, #13
 800088c:	f000 fd81 	bl	8001392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000890:	200d      	movs	r0, #13
 8000892:	f000 fd9a 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b37      	ldr	r3, [pc, #220]	; (800099c <MX_GPIO_Init+0xf8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a36      	ldr	r2, [pc, #216]	; (800099c <MX_GPIO_Init+0xf8>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <MX_GPIO_Init+0xf8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_GPIO_Init+0xf8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <MX_GPIO_Init+0xf8>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0xf8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_GPIO_Init+0xf8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a28      	ldr	r2, [pc, #160]	; (800099c <MX_GPIO_Init+0xf8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_GPIO_Init+0xf8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_GPIO_Init+0xf8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_GPIO_Init+0xf8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0xf8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xfc>)
 8000930:	f001 fc74 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_GPIO_Init+0x100>)
 800094c:	f001 f9c6 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BootSelect0_Pin|BootSelect1_Pin;
 8000950:	2303      	movs	r3, #3
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <MX_GPIO_Init+0x100>)
 8000964:	f001 f9ba 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0xfc>)
 8000980:	f001 f9ac 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2028      	movs	r0, #40	; 0x28
 800098a:	f000 fd02 	bl	8001392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098e:	2028      	movs	r0, #40	; 0x28
 8000990:	f000 fd1b 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020800 	.word	0x40020800

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 fb28 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f80e 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f7ff ff76 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009b8:	f7ff ff54 	bl	8000864 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009bc:	f000 f9de 	bl	8000d7c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80009c0:	f000 f93a 	bl	8000c38 <MX_TIM6_Init>
  MX_UART4_Init();
 80009c4:	f000 f9b0 	bl	8000d28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  bl_main();
 80009c8:	f7ff fe52 	bl	8000670 <bl_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <main+0x24>
	...

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2234      	movs	r2, #52	; 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 f846 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <SystemClock_Config+0xd4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a29      	ldr	r2, [pc, #164]	; (8000aa4 <SystemClock_Config+0xd4>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <SystemClock_Config+0xd4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a1c:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <SystemClock_Config+0xd8>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <SystemClock_Config+0xd8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a44:	2310      	movs	r3, #16
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 f850 	bl	8002b04 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 f81f 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2302      	movs	r3, #2
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fbf8 	bl	8002280 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a96:	f000 f809 	bl	8000aac <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	; 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 fc40 	bl	800137c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fada 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <DMA1_Stream2_IRQHandler+0x10>)
 8000b62:	f000 fe51 	bl	8001808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000564 	.word	0x20000564

08000b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b78:	f001 fb6a 	bl	8002250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <UART4_IRQHandler+0x10>)
 8000b86:	f002 fe59 	bl	800383c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200004dc 	.word	0x200004dc

08000b94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM6_DAC_IRQHandler+0x10>)
 8000b9a:	f002 faa0 	bl	80030de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000494 	.word	0x20000494

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f003 ff20 	bl	8004a1c <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000490 	.word	0x20000490
 8000c10:	200005d8 	.word	0x200005d8

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c48:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_TIM6_Init+0x68>)
 8000c4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c4e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c6a:	f002 f9e9 	bl	8003040 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c74:	f7ff ff1a 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_TIM6_Init+0x64>)
 8000c86:	f002 fc05 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f7ff ff0c 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000494 	.word	0x20000494
 8000ca0:	40001000 	.word	0x40001000

08000ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_TIM_Base_MspInit+0x48>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d115      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2036      	movs	r0, #54	; 0x36
 8000cd8:	f000 fb5b 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f000 fb74 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_TIM_Base_MspDeInit+0x2c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d108      	bne.n	8000d18 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspDeInit+0x30>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_TIM_Base_MspDeInit+0x30>)
 8000d0c:	f023 0310 	bic.w	r3, r3, #16
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM6 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8000d12:	2036      	movs	r0, #54	; 0x36
 8000d14:	f000 fb67 	bl	80013e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40001000 	.word	0x40001000
 8000d24:	40023800 	.word	0x40023800

08000d28 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_UART4_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_UART4_Init+0x4c>)
 8000d60:	f002 fc28 	bl	80035b4 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f7ff fe9f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200004dc 	.word	0x200004dc
 8000d78:	40004c00 	.word	0x40004c00

08000d7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART2_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f002 fbfe 	bl	80035b4 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f7ff fe75 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000520 	.word	0x20000520
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_UART_MspInit+0x154>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d162      	bne.n	8000eb8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4839      	ldr	r0, [pc, #228]	; (8000f2c <HAL_UART_MspInit+0x15c>)
 8000e46:	f000 ff49 	bl	8001cdc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e4c:	4a39      	ldr	r2, [pc, #228]	; (8000f34 <HAL_UART_MspInit+0x164>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e8a:	4829      	ldr	r0, [pc, #164]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e8c:	f000 fac6 	bl	800141c <HAL_DMA_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000e96:	f7ff fe09 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a24      	ldr	r2, [pc, #144]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_UART_MspInit+0x160>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2034      	movs	r0, #52	; 0x34
 8000eac:	f000 fa71 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eb0:	2034      	movs	r0, #52	; 0x34
 8000eb2:	f000 fa8a 	bl	80013ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb6:	e030      	b.n	8000f1a <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_UART_MspInit+0x168>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_UART_MspInit+0x158>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efa:	230c      	movs	r3, #12
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0x15c>)
 8000f16:	f000 fee1 	bl	8001cdc <HAL_GPIO_Init>
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	; 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004c00 	.word	0x40004c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	20000564 	.word	0x20000564
 8000f34:	40026040 	.word	0x40026040
 8000f38:	40004400 	.word	0x40004400

08000f3c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <HAL_UART_MspDeInit+0x60>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d112      	bne.n	8000f74 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_UART_MspDeInit+0x64>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_UART_MspDeInit+0x64>)
 8000f54:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <HAL_UART_MspDeInit+0x68>)
 8000f5e:	f001 f851 	bl	8002004 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fb06 	bl	8001578 <HAL_DMA_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8000f6c:	2034      	movs	r0, #52	; 0x34
 8000f6e:	f000 fa3a 	bl	80013e6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000f72:	e00e      	b.n	8000f92 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_UART_MspDeInit+0x6c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d109      	bne.n	8000f92 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_UART_MspDeInit+0x64>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_UART_MspDeInit+0x64>)
 8000f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_UART_MspDeInit+0x68>)
 8000f8e:	f001 f839 	bl	8002004 <HAL_GPIO_DeInit>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40004c00 	.word	0x40004c00
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40004400 	.word	0x40004400

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff fe1d 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 fd25 	bl	8004a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fce3 	bl	80009a8 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff0:	08005474 	.word	0x08005474
  ldr r2, =_sbss
 8000ff4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff8:	200005d8 	.word	0x200005d8

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f9a7 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f83c 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd40 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_DeInit+0x54>)
 800104a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_DeInit+0x54>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_DeInit+0x54>)
 8001058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_DeInit+0x54>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_DeInit+0x54>)
 8001066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_DeInit+0x54>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_DeInit+0x54>)
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001078:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_DeInit+0x54>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_DeInit+0x54>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001086:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_DeInit+0x54>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800108e:	f000 f805 	bl	800109c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f999 	bl	8001402 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f000 f953 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200005c4 	.word	0x200005c4

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200005c4 	.word	0x200005c4

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db12      	blt.n	800126c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	490a      	ldr	r1, [pc, #40]	; (8001278 <__NVIC_DisableIRQ+0x44>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	3320      	adds	r3, #32
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001266:	f3bf 8f6f 	isb	sy
}
 800126a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff05 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff1a 	bl	80011dc <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff0d 	bl	80011f8 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff1d 	bl	8001234 <__NVIC_DisableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff94 	bl	8001338 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff fe84 	bl	8001134 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e099      	b.n	800156c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	e00f      	b.n	800147a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145a:	f7ff fe6b 	bl	8001134 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b05      	cmp	r3, #5
 8001466:	d908      	bls.n	800147a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e078      	b.n	800156c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e8      	bne.n	800145a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_DMA_Init+0x158>)
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4313      	orrs	r3, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b04      	cmp	r3, #4
 800150c:	d117      	bne.n	800153e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fb5f 	bl	8001be4 <DMA_CheckFifoParam>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153a:	2301      	movs	r3, #1
 800153c:	e016      	b.n	800156c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fb16 	bl	8001b78 <DMA_CalcBaseAndBitshift>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f010803f 	.word	0xf010803f

08001578 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e050      	b.n	800162c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d101      	bne.n	800159a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001596:	2302      	movs	r3, #2
 8001598:	e048      	b.n	800162c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2221      	movs	r2, #33	; 0x21
 80015d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 facc 	bl	8001b78 <DMA_CalcBaseAndBitshift>
 80015e0:	4603      	mov	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	223f      	movs	r2, #63	; 0x3f
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_DMA_Start_IT+0x26>
 8001656:	2302      	movs	r3, #2
 8001658:	e040      	b.n	80016dc <HAL_DMA_Start_IT+0xa8>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d12f      	bne.n	80016ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fa4a 	bl	8001b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	409a      	lsls	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0216 	orr.w	r2, r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0208 	orr.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e005      	b.n	80016da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016f2:	f7ff fd1f 	bl	8001134 <HAL_GetTick>
 80016f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d008      	beq.n	8001716 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e052      	b.n	80017bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0216 	bic.w	r2, r2, #22
 8001724:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001734:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_DMA_Abort+0x62>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0208 	bic.w	r2, r2, #8
 8001754:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0201 	bic.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	e013      	b.n	8001790 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001768:	f7ff fce4 	bl	8001134 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b05      	cmp	r3, #5
 8001774:	d90c      	bls.n	8001790 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2203      	movs	r2, #3
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e015      	b.n	80017bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e4      	bne.n	8001768 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	223f      	movs	r2, #63	; 0x3f
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d004      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00c      	b.n	80017fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2205      	movs	r2, #5
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001814:	4b8e      	ldr	r3, [pc, #568]	; (8001a50 <HAL_DMA_IRQHandler+0x248>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a8e      	ldr	r2, [pc, #568]	; (8001a54 <HAL_DMA_IRQHandler+0x24c>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	2208      	movs	r2, #8
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01a      	beq.n	8001874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2208      	movs	r2, #8
 8001862:	409a      	lsls	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2201      	movs	r2, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d012      	beq.n	80018aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2201      	movs	r2, #1
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2204      	movs	r2, #4
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d012      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2204      	movs	r2, #4
 80018ce:	409a      	lsls	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f043 0204 	orr.w	r2, r3, #4
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2210      	movs	r2, #16
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d043      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03c      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2210      	movs	r2, #16
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d018      	beq.n	800194a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d024      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
 8001936:	e01f      	b.n	8001978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01b      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
 8001948:	e016      	b.n	8001978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0208 	bic.w	r2, r2, #8
 8001966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2220      	movs	r2, #32
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 808f 	beq.w	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8087 	beq.w	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2220      	movs	r2, #32
 80019a0:	409a      	lsls	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d136      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0216 	bic.w	r2, r2, #22
 80019c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x1da>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0208 	bic.w	r2, r2, #8
 80019f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	223f      	movs	r2, #63	; 0x3f
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07e      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
        }
        return;
 8001a1e:	e079      	b.n	8001b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01d      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10d      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d031      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e02c      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000
 8001a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
 8001a68:	e01e      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0210 	bic.w	r2, r2, #16
 8001a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d032      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d022      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d307      	bcc.n	8001af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f2      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x2cc>
 8001aee:	e000      	b.n	8001af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
 8001b12:	e000      	b.n	8001b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b14:	bf00      	nop
    }
  }
}
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d108      	bne.n	8001b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b5a:	e007      	b.n	8001b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b10      	subs	r3, #16
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <DMA_CalcBaseAndBitshift+0x64>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d909      	bls.n	8001bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb8:	e007      	b.n	8001bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	aaaaaaab 	.word	0xaaaaaaab
 8001be0:	08005428 	.word	0x08005428

08001be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11f      	bne.n	8001c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d856      	bhi.n	8001cb2 <DMA_CheckFifoParam+0xce>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <DMA_CheckFifoParam+0x28>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c2f 	.word	0x08001c2f
 8001c14:	08001c1d 	.word	0x08001c1d
 8001c18:	08001cb3 	.word	0x08001cb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d046      	beq.n	8001cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c2c:	e043      	b.n	8001cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c36:	d140      	bne.n	8001cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e03d      	b.n	8001cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d121      	bne.n	8001c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d837      	bhi.n	8001cbe <DMA_CheckFifoParam+0xda>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <DMA_CheckFifoParam+0x70>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c6b 	.word	0x08001c6b
 8001c5c:	08001c65 	.word	0x08001c65
 8001c60:	08001c7d 	.word	0x08001c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      break;
 8001c68:	e030      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d025      	beq.n	8001cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7a:	e022      	b.n	8001cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c84:	d11f      	bne.n	8001cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8a:	e01c      	b.n	8001cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d903      	bls.n	8001c9a <DMA_CheckFifoParam+0xb6>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d003      	beq.n	8001ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c98:	e018      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9e:	e015      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e00b      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e00a      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e008      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e006      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e004      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
    }
  } 
  
  return status; 
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e165      	b.n	8001fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8154 	bne.w	8001fbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d005      	beq.n	8001d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d130      	bne.n	8001d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ae 	beq.w	8001fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a5c      	ldr	r2, [pc, #368]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d025      	beq.n	8001ef6 <HAL_GPIO_Init+0x21a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01f      	beq.n	8001ef2 <HAL_GPIO_Init+0x216>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x212>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_GPIO_Init+0x314>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_GPIO_Init+0x318>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x20a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4a      	ldr	r2, [pc, #296]	; (8001ff8 <HAL_GPIO_Init+0x31c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <HAL_GPIO_Init+0x320>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x202>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x21c>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f ae96 	bls.w	8001cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e0c7      	b.n	80021b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002020:	2201      	movs	r2, #1
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	f040 80b7 	bne.w	80021aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800203c:	4a62      	ldr	r2, [pc, #392]	; (80021c8 <HAL_GPIO_DeInit+0x1c4>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_GPIO_DeInit+0x1c8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_DeInit+0xae>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a59      	ldr	r2, [pc, #356]	; (80021d0 <HAL_GPIO_DeInit+0x1cc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_DeInit+0xaa>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_GPIO_DeInit+0x1d0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_DeInit+0xa6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_GPIO_DeInit+0x1d4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_DeInit+0xa2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_GPIO_DeInit+0x1d8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_DeInit+0x9e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_GPIO_DeInit+0x1dc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_DeInit+0x9a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a54      	ldr	r2, [pc, #336]	; (80021e4 <HAL_GPIO_DeInit+0x1e0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_DeInit+0x96>
 8002096:	2306      	movs	r3, #6
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 800209a:	2307      	movs	r3, #7
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_DeInit+0xb0>
 80020b2:	2300      	movs	r3, #0
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d132      	bne.n	800212a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4946      	ldr	r1, [pc, #280]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020d2:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4943      	ldr	r1, [pc, #268]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	493f      	ldr	r1, [pc, #252]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	493c      	ldr	r1, [pc, #240]	; (80021e8 <HAL_GPIO_DeInit+0x1e4>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800210c:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_GPIO_DeInit+0x1c4>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	43da      	mvns	r2, r3
 800211c:	482a      	ldr	r0, [pc, #168]	; (80021c8 <HAL_GPIO_DeInit+0x1c4>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	400a      	ands	r2, r1
 8002124:	3302      	adds	r3, #2
 8002126:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2103      	movs	r1, #3
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	08d2      	lsrs	r2, r2, #3
 8002160:	4019      	ands	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2103      	movs	r1, #3
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	2101      	movs	r1, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2103      	movs	r1, #3
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f af34 	bls.w	8002020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e001      	b.n	800220e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe faa6 	bl	80007c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fee0 	bl	8001134 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fedc 	bl	8001134 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f855 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fe40 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08005410 	.word	0x08005410
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08005420 	.word	0x08005420

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08005420 	.word	0x08005420

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b0ae      	sub	sp, #184	; 0xb8
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024da:	4bcb      	ldr	r3, [pc, #812]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	f200 8206 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x440>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002525 	.word	0x08002525
 80024f4:	080028f5 	.word	0x080028f5
 80024f8:	080028f5 	.word	0x080028f5
 80024fc:	080028f5 	.word	0x080028f5
 8002500:	0800252d 	.word	0x0800252d
 8002504:	080028f5 	.word	0x080028f5
 8002508:	080028f5 	.word	0x080028f5
 800250c:	080028f5 	.word	0x080028f5
 8002510:	08002535 	.word	0x08002535
 8002514:	080028f5 	.word	0x080028f5
 8002518:	080028f5 	.word	0x080028f5
 800251c:	080028f5 	.word	0x080028f5
 8002520:	08002725 	.word	0x08002725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4bb9      	ldr	r3, [pc, #740]	; (800280c <HAL_RCC_GetSysClockFreq+0x358>)
 8002526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800252a:	e1e7      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4bb8      	ldr	r3, [pc, #736]	; (8002810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800252e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002532:	e1e3      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4bb4      	ldr	r3, [pc, #720]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002540:	4bb1      	ldr	r3, [pc, #708]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d071      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4bae      	ldr	r3, [pc, #696]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002558:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800256e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6439      	str	r1, [r7, #64]	; 0x40
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025a4:	4649      	mov	r1, r9
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4641      	mov	r1, r8
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4641      	mov	r1, r8
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4641      	mov	r1, r8
 80025b4:	1a51      	subs	r1, r2, r1
 80025b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025b8:	4649      	mov	r1, r9
 80025ba:	eb63 0301 	sbc.w	r3, r3, r1
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025cc:	4649      	mov	r1, r9
 80025ce:	00cb      	lsls	r3, r1, #3
 80025d0:	4641      	mov	r1, r8
 80025d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d6:	4641      	mov	r1, r8
 80025d8:	00ca      	lsls	r2, r1, #3
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	4622      	mov	r2, r4
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
 80025e6:	462b      	mov	r3, r5
 80025e8:	460a      	mov	r2, r1
 80025ea:	eb42 0303 	adc.w	r3, r2, r3
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025fc:	4629      	mov	r1, r5
 80025fe:	024b      	lsls	r3, r1, #9
 8002600:	4621      	mov	r1, r4
 8002602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002606:	4621      	mov	r1, r4
 8002608:	024a      	lsls	r2, r1, #9
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800261c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002620:	f7fd fe46 	bl	80002b0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800262e:	e067      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002630:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800263c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002648:	67bb      	str	r3, [r7, #120]	; 0x78
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800264e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002652:	4622      	mov	r2, r4
 8002654:	462b      	mov	r3, r5
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4621      	mov	r1, r4
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002670:	4629      	mov	r1, r5
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002684:	4649      	mov	r1, r9
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	4641      	mov	r1, r8
 800268a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268e:	4641      	mov	r1, r8
 8002690:	018a      	lsls	r2, r1, #6
 8002692:	4641      	mov	r1, r8
 8002694:	ebb2 0a01 	subs.w	sl, r2, r1
 8002698:	4649      	mov	r1, r9
 800269a:	eb63 0b01 	sbc.w	fp, r3, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b2:	4692      	mov	sl, r2
 80026b4:	469b      	mov	fp, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	eb1a 0303 	adds.w	r3, sl, r3
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	462b      	mov	r3, r5
 80026c0:	eb4b 0303 	adc.w	r3, fp, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e8:	2200      	movs	r2, #0
 80026ea:	673b      	str	r3, [r7, #112]	; 0x70
 80026ec:	677a      	str	r2, [r7, #116]	; 0x74
 80026ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026f2:	f7fd fddd 	bl	80002b0 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002722:	e0eb      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002730:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06b      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	2200      	movs	r2, #0
 8002744:	66bb      	str	r3, [r7, #104]	; 0x68
 8002746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274e:	663b      	str	r3, [r7, #96]	; 0x60
 8002750:	2300      	movs	r3, #0
 8002752:	667b      	str	r3, [r7, #100]	; 0x64
 8002754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002758:	4622      	mov	r2, r4
 800275a:	462b      	mov	r3, r5
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4621      	mov	r1, r4
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	61b9      	str	r1, [r7, #24]
 8002776:	4629      	mov	r1, r5
 8002778:	eb63 0301 	sbc.w	r3, r3, r1
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800278a:	4659      	mov	r1, fp
 800278c:	018b      	lsls	r3, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002794:	4651      	mov	r1, sl
 8002796:	018a      	lsls	r2, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ebb2 0801 	subs.w	r8, r2, r1
 800279e:	4659      	mov	r1, fp
 80027a0:	eb63 0901 	sbc.w	r9, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b8:	4690      	mov	r8, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	eb18 0303 	adds.w	r3, r8, r3
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	462b      	mov	r3, r5
 80027c6:	eb49 0303 	adc.w	r3, r9, r3
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	024b      	lsls	r3, r1, #9
 80027dc:	4621      	mov	r1, r4
 80027de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e2:	4621      	mov	r1, r4
 80027e4:	024a      	lsls	r2, r1, #9
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ee:	2200      	movs	r2, #0
 80027f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80027f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027f8:	f7fd fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002806:	e065      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x420>
 8002808:	40023800 	.word	0x40023800
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	4618      	mov	r0, r3
 800281e:	4611      	mov	r1, r2
 8002820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002824:	653b      	str	r3, [r7, #80]	; 0x50
 8002826:	2300      	movs	r3, #0
 8002828:	657b      	str	r3, [r7, #84]	; 0x54
 800282a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800282e:	4642      	mov	r2, r8
 8002830:	464b      	mov	r3, r9
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4641      	mov	r1, r8
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4649      	mov	r1, r9
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	1a54      	subs	r4, r2, r1
 8002872:	4659      	mov	r1, fp
 8002874:	eb63 0501 	sbc.w	r5, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028bc:	2200      	movs	r2, #0
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028c6:	f7fd fcf3 	bl	80002b0 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4613      	mov	r3, r2
 80028d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0f1b      	lsrs	r3, r3, #28
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028f2:	e003      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002900:	4618      	mov	r0, r3
 8002902:	37b8      	adds	r7, #184	; 0xb8
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400

08002914 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800291a:	f7fe fc0b 	bl	8001134 <HAL_GetTick>
 800291e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002920:	4b72      	ldr	r3, [pc, #456]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a71      	ldr	r2, [pc, #452]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe fc01 	bl	8001134 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0d0      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800294c:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002956:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002958:	f7fe fbec 	bl	8001134 <HAL_GetTick>
 800295c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002966:	f7fe fbe5 	bl	8001134 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0b2      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800297c:	4b5b      	ldr	r3, [pc, #364]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002988:	f7fe fbd4 	bl	8001134 <HAL_GetTick>
 800298c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800298e:	4b57      	ldr	r3, [pc, #348]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002994:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002998:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fbca 	bl	8001134 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e099      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80029ae:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029ba:	f7fe fbbb 	bl	8001134 <HAL_GetTick>
 80029be:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a49      	ldr	r2, [pc, #292]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fbb1 	bl	8001134 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e080      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80029e0:	4b42      	ldr	r3, [pc, #264]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029ec:	f7fe fba2 	bl	8001134 <HAL_GetTick>
 80029f0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3d      	ldr	r2, [pc, #244]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 80029f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029fc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a00:	f7fe fb98 	bl	8001134 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a1e:	f7fe fb89 	bl	8001134 <HAL_GetTick>
 8002a22:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a30      	ldr	r2, [pc, #192]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a32:	f7fe fb7f 	bl	8001134 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e04e      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a52:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_RCC_DeInit+0x1dc>)
 8002a54:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <HAL_RCC_DeInit+0x1dc>)
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <HAL_RCC_DeInit+0x1e0>)
 8002a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a6c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a70:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a90:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002a94:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aa0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_RCC_DeInit+0x1d8>)
 8002ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_DeInit+0x1e4>)
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_RCC_DeInit+0x1e8>)
 8002aca:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_DeInit+0x1ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe faeb 	bl	80010ac <HAL_InitTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	24003010 	.word	0x24003010
 8002af4:	04003010 	.word	0x04003010
 8002af8:	20000000 	.word	0x20000000
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e28d      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8083 	beq.w	8002c2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b24:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d019      	beq.n	8002b64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b30:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b3c:	4b8e      	ldr	r3, [pc, #568]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x124>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d157      	bne.n	8002c28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e25a      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x90>
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7b      	ldr	r2, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xcc>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xb4>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xcc>
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe faac 	bl	8001134 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe faa8 	bl	8001134 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e21f      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xdc>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fa98 	bl	8001134 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa94 	bl	8001134 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e20b      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x104>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06f      	beq.n	8002d16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c42:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d105      	bne.n	8002c5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x186>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1d3      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4937      	ldr	r1, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e03a      	b.n	8002d16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x278>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fa41 	bl	8001134 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fa3d 	bl	8001134 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1b4      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4925      	ldr	r1, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x278>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa20 	bl	8001134 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fa1c 	bl	8001134 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e193      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe fa00 	bl	8001134 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fe f9fc 	bl	8001134 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e173      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x234>
 8002d56:	e01b      	b.n	8002d90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f9e9 	bl	8001134 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e00e      	b.n	8002d84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe f9e5 	bl	8001134 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d907      	bls.n	8002d84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e15c      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000
 8002d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ea      	bne.n	8002d66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8097 	beq.w	8002ecc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b83      	ldr	r3, [pc, #524]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a7e      	ldr	r2, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <HAL_RCC_OscConfig+0x4b0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0x4b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a75      	ldr	r2, [pc, #468]	; (8002fb4 <HAL_RCC_OscConfig+0x4b0>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7fe f9a5 	bl	8001134 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7fe f9a1 	bl	8001134 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e118      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <HAL_RCC_OscConfig+0x4b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x31e>
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e20:	e01c      	b.n	8002e5c <HAL_RCC_OscConfig+0x358>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x340>
 8002e2a:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a60      	ldr	r2, [pc, #384]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
 8002e36:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a5d      	ldr	r2, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0x358>
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a59      	ldr	r2, [pc, #356]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe f966 	bl	8001134 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe f962 	bl	8001134 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0d7      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ee      	beq.n	8002e6c <HAL_RCC_OscConfig+0x368>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f950 	bl	8001134 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe f94c 	bl	8001134 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0c1      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80ad 	beq.w	8003030 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed6:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d060      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d145      	bne.n	8002f76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCC_OscConfig+0x4b4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f920 	bl	8001134 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe f91c 	bl	8001134 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e093      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	071b      	lsls	r3, r3, #28
 8002f42:	491b      	ldr	r1, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x4b4>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f8f1 	bl	8001134 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe f8ed 	bl	8001134 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e064      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x452>
 8002f74:	e05c      	b.n	8003030 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x4b4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f8da 	bl	8001134 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe f8d6 	bl	8001134 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04d      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x480>
 8002fa2:	e045      	b.n	8003030 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e040      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x538>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d030      	beq.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d129      	bne.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d122      	bne.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d119      	bne.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d10f      	bne.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e041      	b.n	80030d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fe1c 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 f968 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d122      	bne.n	800313a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d11b      	bne.n	800313a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0202 	mvn.w	r2, #2
 800310a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8f8 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8003126:	e005      	b.n	8003134 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f8ea 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8fb 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d122      	bne.n	800318e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d11b      	bne.n	800318e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0204 	mvn.w	r2, #4
 800315e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8ce 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 800317a:	e005      	b.n	8003188 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8c0 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8d1 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d122      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11b      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0208 	mvn.w	r2, #8
 80031b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2204      	movs	r2, #4
 80031b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8a4 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 80031ce:	e005      	b.n	80031dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f896 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8a7 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d122      	bne.n	8003236 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d11b      	bne.n	8003236 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0210 	mvn.w	r2, #16
 8003206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2208      	movs	r2, #8
 800320c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f87a 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8003222:	e005      	b.n	8003230 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f86c 	bl	8003302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f87d 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10e      	bne.n	8003262 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0201 	mvn.w	r2, #1
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f846 	bl	80032ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d10e      	bne.n	800328e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d107      	bne.n	800328e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f989 	bl	80035a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d10e      	bne.n	80032ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d107      	bne.n	80032ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f842 	bl	800333e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d10e      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0220 	mvn.w	r2, #32
 80032de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f953 	bl	800358c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <TIM_Base_SetConfig+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d00f      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a3d      	ldr	r2, [pc, #244]	; (800346c <TIM_Base_SetConfig+0x118>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3c      	ldr	r2, [pc, #240]	; (8003470 <TIM_Base_SetConfig+0x11c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3b      	ldr	r2, [pc, #236]	; (8003474 <TIM_Base_SetConfig+0x120>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3a      	ldr	r2, [pc, #232]	; (8003478 <TIM_Base_SetConfig+0x124>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d108      	bne.n	80033a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <TIM_Base_SetConfig+0x114>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d027      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2c      	ldr	r2, [pc, #176]	; (800346c <TIM_Base_SetConfig+0x118>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d023      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <TIM_Base_SetConfig+0x11c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <TIM_Base_SetConfig+0x120>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <TIM_Base_SetConfig+0x124>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d017      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a28      	ldr	r2, [pc, #160]	; (800347c <TIM_Base_SetConfig+0x128>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <TIM_Base_SetConfig+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00f      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <TIM_Base_SetConfig+0x130>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <TIM_Base_SetConfig+0x134>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a24      	ldr	r2, [pc, #144]	; (800348c <TIM_Base_SetConfig+0x138>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <TIM_Base_SetConfig+0x13c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <TIM_Base_SetConfig+0x114>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0xf8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d103      	bne.n	8003454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	615a      	str	r2, [r3, #20]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800
 8003488:	40001800 	.word	0x40001800
 800348c:	40001c00 	.word	0x40001c00
 8003490:	40002000 	.word	0x40002000

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e05a      	b.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a21      	ldr	r2, [pc, #132]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d01d      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10c      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4313      	orrs	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40010400 	.word	0x40010400
 8003584:	40014000 	.word	0x40014000
 8003588:	40001800 	.word	0x40001800

0800358c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e03f      	b.n	8003646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fbf8 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 ff9b 	bl	8004534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af02      	add	r7, sp, #8
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	d17c      	bne.n	8003768 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_UART_Transmit+0x2c>
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e075      	b.n	800376a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_UART_Transmit+0x3e>
 8003688:	2302      	movs	r3, #2
 800368a:	e06e      	b.n	800376a <HAL_UART_Transmit+0x11c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2221      	movs	r2, #33	; 0x21
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a2:	f7fd fd47 	bl	8001134 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d108      	bne.n	80036d0 <HAL_UART_Transmit+0x82>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e0:	e02a      	b.n	8003738 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fc53 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e036      	b.n	800376a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e007      	b.n	800372a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1cf      	bne.n	80036e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fc23 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08c      	sub	sp, #48	; 0x30
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d152      	bne.n	8003832 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e04b      	b.n	8003834 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e044      	b.n	8003834 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fc58 	bl	8004074 <UART_Start_Receive_DMA>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80037ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d12c      	bne.n	800382c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d125      	bne.n	8003826 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f043 0310 	orr.w	r3, r3, #16
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003810:	627a      	str	r2, [r7, #36]	; 0x24
 8003812:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	61fb      	str	r3, [r7, #28]
   return(result);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003824:	e002      	b.n	800382c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800382c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003830:	e000      	b.n	8003834 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3730      	adds	r7, #48	; 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0ba      	sub	sp, #232	; 0xe8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800387a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_UART_IRQHandler+0x66>
 800388e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fd8f 	bl	80043be <UART_Receive_IT>
      return;
 80038a0:	e256      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80de 	beq.w	8003a68 <HAL_UART_IRQHandler+0x22c>
 80038ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80d1 	beq.w	8003a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_UART_IRQHandler+0xae>
 80038d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_UART_IRQHandler+0xd2>
 80038f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_UART_IRQHandler+0xf6>
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d011      	beq.n	8003962 <HAL_UART_IRQHandler+0x126>
 800393e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800394a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 81ed 	beq.w	8003d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_UART_IRQHandler+0x14e>
 8003978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fd1a 	bl	80043be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_UART_IRQHandler+0x17a>
 80039ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04f      	beq.n	8003a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fc22 	bl	8004200 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d141      	bne.n	8003a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3314      	adds	r3, #20
 80039f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1d9      	bne.n	80039ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4a7d      	ldr	r2, [pc, #500]	; (8003c18 <HAL_UART_IRQHandler+0x3dc>)
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd feca 	bl	80017c4 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e00e      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9a4 	bl	8003d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e00a      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f9a0 	bl	8003d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	e006      	b.n	8003a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f99c 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a62:	e170      	b.n	8003d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	bf00      	nop
    return;
 8003a66:	e16e      	b.n	8003d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 814a 	bne.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8143 	beq.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 813c 	beq.w	8003d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	f040 80b4 	bne.w	8003c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8140 	beq.w	8003d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f080 8139 	bcs.w	8003d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	f000 8088 	beq.w	8003bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1d9      	bne.n	8003aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e1      	bne.n	8003b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3314      	adds	r3, #20
 8003b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e3      	bne.n	8003bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd fd73 	bl	80016e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fc fdea 	bl	80007e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c14:	e099      	b.n	8003d4a <HAL_UART_IRQHandler+0x50e>
 8003c16:	bf00      	nop
 8003c18:	080042c7 	.word	0x080042c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 808b 	beq.w	8003d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c66:	647a      	str	r2, [r7, #68]	; 0x44
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	623b      	str	r3, [r7, #32]
   return(result);
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0310 	bic.w	r3, r3, #16
 8003cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	69b9      	ldr	r1, [r7, #24]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e3      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc fd72 	bl	80007e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d04:	e023      	b.n	8003d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_UART_IRQHandler+0x4ea>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fae5 	bl	80042ee <UART_Transmit_IT>
    return;
 8003d24:	e014      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <HAL_UART_IRQHandler+0x514>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb25 	bl	800438e <UART_EndTransmit_IT>
    return;
 8003d44:	e004      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
    return;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
      return;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_IRQHandler+0x514>
      return;
 8003d4e:	bf00      	nop
  }
}
 8003d50:	37e8      	adds	r7, #232	; 0xe8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop

08003d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b09c      	sub	sp, #112	; 0x70
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d172      	bne.n	8003eaa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dea:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	667b      	str	r3, [r7, #100]	; 0x64
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	623b      	str	r3, [r7, #32]
   return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e48:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e52:	633a      	str	r2, [r7, #48]	; 0x30
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e5      	bne.n	8003e32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d119      	bne.n	8003eaa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0310 	bic.w	r3, r3, #16
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e96:	61fa      	str	r2, [r7, #28]
 8003e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d106      	bne.n	8003ec0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003eba:	f7fc fc95 	bl	80007e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ebe:	e002      	b.n	8003ec6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003ec0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ec2:	f7ff ff53 	bl	8003d6c <HAL_UART_RxCpltCallback>
}
 8003ec6:	bf00      	nop
 8003ec8:	3770      	adds	r7, #112	; 0x70
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7fc fc7a 	bl	80007e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ef4:	e002      	b.n	8003efc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff42 	bl	8003d80 <HAL_UART_RxHalfCpltCallback>
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b21      	cmp	r3, #33	; 0x21
 8003f36:	d108      	bne.n	8003f4a <UART_DMAError+0x46>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f000 f933 	bl	80041b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b22      	cmp	r3, #34	; 0x22
 8003f6a:	d108      	bne.n	8003f7e <UART_DMAError+0x7a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f78:	68b8      	ldr	r0, [r7, #8]
 8003f7a:	f000 f941 	bl	8004200 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0210 	orr.w	r2, r3, #16
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f8a:	68b8      	ldr	r0, [r7, #8]
 8003f8c:	f7ff ff02 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b090      	sub	sp, #64	; 0x40
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	e050      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb0:	d04c      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb8:	f7fd f8bc 	bl	8001134 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d241      	bcs.n	800404c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fe8:	637a      	str	r2, [r7, #52]	; 0x34
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	613b      	str	r3, [r7, #16]
   return(result);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	63bb      	str	r3, [r7, #56]	; 0x38
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401c:	623a      	str	r2, [r7, #32]
 800401e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	69f9      	ldr	r1, [r7, #28]
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	61bb      	str	r3, [r7, #24]
   return(result);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e00f      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	d09f      	beq.n	8003faa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3740      	adds	r7, #64	; 0x40
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b098      	sub	sp, #96	; 0x60
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	; 0x22
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <UART_Start_Receive_DMA+0x130>)
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <UART_Start_Receive_DMA+0x134>)
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	4a3e      	ldr	r2, [pc, #248]	; (80041ac <UART_Start_Receive_DMA+0x138>)
 80040b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	f7fd faae 	bl	8001634 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040d8:	2300      	movs	r3, #0
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d019      	beq.n	8004132 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	65bb      	str	r3, [r7, #88]	; 0x58
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800411e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004120:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	657b      	str	r3, [r7, #84]	; 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3314      	adds	r3, #20
 8004150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004152:	63ba      	str	r2, [r7, #56]	; 0x38
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	617b      	str	r3, [r7, #20]
   return(result);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800417c:	653b      	str	r3, [r7, #80]	; 0x50
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004186:	627a      	str	r2, [r7, #36]	; 0x24
 8004188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	61fb      	str	r3, [r7, #28]
   return(result);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3760      	adds	r7, #96	; 0x60
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	08003da9 	.word	0x08003da9
 80041a8:	08003ecf 	.word	0x08003ecf
 80041ac:	08003f05 	.word	0x08003f05

080041b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	; 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	61ba      	str	r2, [r7, #24]
 80041da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	613b      	str	r3, [r7, #16]
   return(result);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80041f4:	bf00      	nop
 80041f6:	3724      	adds	r7, #36	; 0x24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b095      	sub	sp, #84	; 0x54
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004228:	643a      	str	r2, [r7, #64]	; 0x40
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800422e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	61fb      	str	r3, [r7, #28]
   return(result);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	64bb      	str	r3, [r7, #72]	; 0x48
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800425c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d119      	bne.n	80042ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	60bb      	str	r3, [r7, #8]
   return(result);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f023 0310 	bic.w	r3, r3, #16
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004298:	61ba      	str	r2, [r7, #24]
 800429a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6979      	ldr	r1, [r7, #20]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	613b      	str	r3, [r7, #16]
   return(result);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042ba:	bf00      	nop
 80042bc:	3754      	adds	r7, #84	; 0x54
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff fd57 	bl	8003d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b21      	cmp	r3, #33	; 0x21
 8004300:	d13e      	bne.n	8004380 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d114      	bne.n	8004336 <UART_Transmit_IT+0x48>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d110      	bne.n	8004336 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004328:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]
 8004334:	e008      	b.n	8004348 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	1c59      	adds	r1, r3, #1
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6211      	str	r1, [r2, #32]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fcd2 	bl	8003d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08c      	sub	sp, #48	; 0x30
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b22      	cmp	r3, #34	; 0x22
 80043d0:	f040 80ab 	bne.w	800452a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d117      	bne.n	800440e <UART_Receive_IT+0x50>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d113      	bne.n	800440e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
 800440c:	e026      	b.n	800445c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d007      	beq.n	8004432 <UART_Receive_IT+0x74>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x82>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e008      	b.n	8004452 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800446c:	2b00      	cmp	r3, #0
 800446e:	d15a      	bne.n	8004526 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0220 	bic.w	r2, r2, #32
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d135      	bne.n	800451c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	613b      	str	r3, [r7, #16]
   return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	623a      	str	r2, [r7, #32]
 80044d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	69f9      	ldr	r1, [r7, #28]
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d10a      	bne.n	800450e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc f967 	bl	80007e8 <HAL_UARTEx_RxEventCallback>
 800451a:	e002      	b.n	8004522 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fc25 	bl	8003d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e002      	b.n	800452c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
  }
}
 800452c:	4618      	mov	r0, r3
 800452e:	3730      	adds	r7, #48	; 0x30
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b0c0      	sub	sp, #256	; 0x100
 800453a:	af00      	add	r7, sp, #0
 800453c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	68d9      	ldr	r1, [r3, #12]
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	ea40 0301 	orr.w	r3, r0, r1
 800455c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	431a      	orrs	r2, r3
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	431a      	orrs	r2, r3
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800458c:	f021 010c 	bic.w	r1, r1, #12
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800459a:	430b      	orrs	r3, r1
 800459c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	6999      	ldr	r1, [r3, #24]
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	ea40 0301 	orr.w	r3, r0, r1
 80045ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b8f      	ldr	r3, [pc, #572]	; (8004800 <UART_SetConfig+0x2cc>)
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d005      	beq.n	80045d4 <UART_SetConfig+0xa0>
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b8d      	ldr	r3, [pc, #564]	; (8004804 <UART_SetConfig+0x2d0>)
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d104      	bne.n	80045de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d4:	f7fd ff5a 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80045d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045dc:	e003      	b.n	80045e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045de:	f7fd ff41 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80045e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	f040 810c 	bne.w	800480c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004602:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004606:	4622      	mov	r2, r4
 8004608:	462b      	mov	r3, r5
 800460a:	1891      	adds	r1, r2, r2
 800460c:	65b9      	str	r1, [r7, #88]	; 0x58
 800460e:	415b      	adcs	r3, r3
 8004610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004612:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004616:	4621      	mov	r1, r4
 8004618:	eb12 0801 	adds.w	r8, r2, r1
 800461c:	4629      	mov	r1, r5
 800461e:	eb43 0901 	adc.w	r9, r3, r1
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004636:	4690      	mov	r8, r2
 8004638:	4699      	mov	r9, r3
 800463a:	4623      	mov	r3, r4
 800463c:	eb18 0303 	adds.w	r3, r8, r3
 8004640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004644:	462b      	mov	r3, r5
 8004646:	eb49 0303 	adc.w	r3, r9, r3
 800464a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800465a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800465e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004662:	460b      	mov	r3, r1
 8004664:	18db      	adds	r3, r3, r3
 8004666:	653b      	str	r3, [r7, #80]	; 0x50
 8004668:	4613      	mov	r3, r2
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	657b      	str	r3, [r7, #84]	; 0x54
 8004670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004674:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004678:	f7fb fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4b61      	ldr	r3, [pc, #388]	; (8004808 <UART_SetConfig+0x2d4>)
 8004682:	fba3 2302 	umull	r2, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	011c      	lsls	r4, r3, #4
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004694:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004698:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046a4:	415b      	adcs	r3, r3
 80046a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ac:	4641      	mov	r1, r8
 80046ae:	eb12 0a01 	adds.w	sl, r2, r1
 80046b2:	4649      	mov	r1, r9
 80046b4:	eb43 0b01 	adc.w	fp, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046cc:	4692      	mov	sl, r2
 80046ce:	469b      	mov	fp, r3
 80046d0:	4643      	mov	r3, r8
 80046d2:	eb1a 0303 	adds.w	r3, sl, r3
 80046d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046da:	464b      	mov	r3, r9
 80046dc:	eb4b 0303 	adc.w	r3, fp, r3
 80046e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046f8:	460b      	mov	r3, r1
 80046fa:	18db      	adds	r3, r3, r3
 80046fc:	643b      	str	r3, [r7, #64]	; 0x40
 80046fe:	4613      	mov	r3, r2
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
 8004706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800470a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800470e:	f7fb fdcf 	bl	80002b0 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4611      	mov	r1, r2
 8004718:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <UART_SetConfig+0x2d4>)
 800471a:	fba3 2301 	umull	r2, r3, r3, r1
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	2264      	movs	r2, #100	; 0x64
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	1acb      	subs	r3, r1, r3
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800472e:	4b36      	ldr	r3, [pc, #216]	; (8004808 <UART_SetConfig+0x2d4>)
 8004730:	fba3 2302 	umull	r2, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800473c:	441c      	add	r4, r3
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004748:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800474c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	63b9      	str	r1, [r7, #56]	; 0x38
 8004758:	415b      	adcs	r3, r3
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6339      	str	r1, [r7, #48]	; 0x30
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047b4:	460b      	mov	r3, r1
 80047b6:	18db      	adds	r3, r3, r3
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ba:	4613      	mov	r3, r2
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ca:	f7fb fd71 	bl	80002b0 <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <UART_SetConfig+0x2d4>)
 80047d4:	fba3 1302 	umull	r1, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	2164      	movs	r1, #100	; 0x64
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	3332      	adds	r3, #50	; 0x32
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <UART_SetConfig+0x2d4>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f003 0207 	and.w	r2, r3, #7
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4422      	add	r2, r4
 80047fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047fc:	e105      	b.n	8004a0a <UART_SetConfig+0x4d6>
 80047fe:	bf00      	nop
 8004800:	40011000 	.word	0x40011000
 8004804:	40011400 	.word	0x40011400
 8004808:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800480c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004816:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800481a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	1891      	adds	r1, r2, r2
 8004824:	6239      	str	r1, [r7, #32]
 8004826:	415b      	adcs	r3, r3
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482e:	4641      	mov	r1, r8
 8004830:	1854      	adds	r4, r2, r1
 8004832:	4649      	mov	r1, r9
 8004834:	eb43 0501 	adc.w	r5, r3, r1
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	00eb      	lsls	r3, r5, #3
 8004842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004846:	00e2      	lsls	r2, r4, #3
 8004848:	4614      	mov	r4, r2
 800484a:	461d      	mov	r5, r3
 800484c:	4643      	mov	r3, r8
 800484e:	18e3      	adds	r3, r4, r3
 8004850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004854:	464b      	mov	r3, r9
 8004856:	eb45 0303 	adc.w	r3, r5, r3
 800485a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800486a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800487a:	4629      	mov	r1, r5
 800487c:	008b      	lsls	r3, r1, #2
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004884:	4621      	mov	r1, r4
 8004886:	008a      	lsls	r2, r1, #2
 8004888:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800488c:	f7fb fd10 	bl	80002b0 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b60      	ldr	r3, [pc, #384]	; (8004a18 <UART_SetConfig+0x4e4>)
 8004896:	fba3 2302 	umull	r2, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	011c      	lsls	r4, r3, #4
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	61b9      	str	r1, [r7, #24]
 80048b8:	415b      	adcs	r3, r3
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6139      	str	r1, [r7, #16]
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f4:	464b      	mov	r3, r9
 80048f6:	460a      	mov	r2, r1
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	67bb      	str	r3, [r7, #120]	; 0x78
 800490a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004918:	4649      	mov	r1, r9
 800491a:	008b      	lsls	r3, r1, #2
 800491c:	4641      	mov	r1, r8
 800491e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004922:	4641      	mov	r1, r8
 8004924:	008a      	lsls	r2, r1, #2
 8004926:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800492a:	f7fb fcc1 	bl	80002b0 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <UART_SetConfig+0x4e4>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	3332      	adds	r3, #50	; 0x32
 8004946:	4a34      	ldr	r2, [pc, #208]	; (8004a18 <UART_SetConfig+0x4e4>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004952:	441c      	add	r4, r3
 8004954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004958:	2200      	movs	r2, #0
 800495a:	673b      	str	r3, [r7, #112]	; 0x70
 800495c:	677a      	str	r2, [r7, #116]	; 0x74
 800495e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004962:	4642      	mov	r2, r8
 8004964:	464b      	mov	r3, r9
 8004966:	1891      	adds	r1, r2, r2
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	415b      	adcs	r3, r3
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004972:	4641      	mov	r1, r8
 8004974:	1851      	adds	r1, r2, r1
 8004976:	6039      	str	r1, [r7, #0]
 8004978:	4649      	mov	r1, r9
 800497a:	414b      	adcs	r3, r1
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800498a:	4659      	mov	r1, fp
 800498c:	00cb      	lsls	r3, r1, #3
 800498e:	4651      	mov	r1, sl
 8004990:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004994:	4651      	mov	r1, sl
 8004996:	00ca      	lsls	r2, r1, #3
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	4603      	mov	r3, r0
 800499e:	4642      	mov	r2, r8
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	663b      	str	r3, [r7, #96]	; 0x60
 80049b8:	667a      	str	r2, [r7, #100]	; 0x64
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049c6:	4649      	mov	r1, r9
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	4641      	mov	r1, r8
 80049cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d0:	4641      	mov	r1, r8
 80049d2:	008a      	lsls	r2, r1, #2
 80049d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049d8:	f7fb fc6a 	bl	80002b0 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <UART_SetConfig+0x4e4>)
 80049e2:	fba3 1302 	umull	r1, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2164      	movs	r1, #100	; 0x64
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	3332      	adds	r3, #50	; 0x32
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <UART_SetConfig+0x4e4>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4422      	add	r2, r4
 8004a08:	609a      	str	r2, [r3, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a16:	bf00      	nop
 8004a18:	51eb851f 	.word	0x51eb851f

08004a1c <__errno>:
 8004a1c:	4b01      	ldr	r3, [pc, #4]	; (8004a24 <__errno+0x8>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	2000000c 	.word	0x2000000c

08004a28 <__libc_init_array>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4d0d      	ldr	r5, [pc, #52]	; (8004a60 <__libc_init_array+0x38>)
 8004a2c:	4c0d      	ldr	r4, [pc, #52]	; (8004a64 <__libc_init_array+0x3c>)
 8004a2e:	1b64      	subs	r4, r4, r5
 8004a30:	10a4      	asrs	r4, r4, #2
 8004a32:	2600      	movs	r6, #0
 8004a34:	42a6      	cmp	r6, r4
 8004a36:	d109      	bne.n	8004a4c <__libc_init_array+0x24>
 8004a38:	4d0b      	ldr	r5, [pc, #44]	; (8004a68 <__libc_init_array+0x40>)
 8004a3a:	4c0c      	ldr	r4, [pc, #48]	; (8004a6c <__libc_init_array+0x44>)
 8004a3c:	f000 fc8e 	bl	800535c <_init>
 8004a40:	1b64      	subs	r4, r4, r5
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	2600      	movs	r6, #0
 8004a46:	42a6      	cmp	r6, r4
 8004a48:	d105      	bne.n	8004a56 <__libc_init_array+0x2e>
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a50:	4798      	blx	r3
 8004a52:	3601      	adds	r6, #1
 8004a54:	e7ee      	b.n	8004a34 <__libc_init_array+0xc>
 8004a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5a:	4798      	blx	r3
 8004a5c:	3601      	adds	r6, #1
 8004a5e:	e7f2      	b.n	8004a46 <__libc_init_array+0x1e>
 8004a60:	0800546c 	.word	0x0800546c
 8004a64:	0800546c 	.word	0x0800546c
 8004a68:	0800546c 	.word	0x0800546c
 8004a6c:	08005470 	.word	0x08005470

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <siprintf>:
 8004a80:	b40e      	push	{r1, r2, r3}
 8004a82:	b500      	push	{lr}
 8004a84:	b09c      	sub	sp, #112	; 0x70
 8004a86:	ab1d      	add	r3, sp, #116	; 0x74
 8004a88:	9002      	str	r0, [sp, #8]
 8004a8a:	9006      	str	r0, [sp, #24]
 8004a8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a90:	4809      	ldr	r0, [pc, #36]	; (8004ab8 <siprintf+0x38>)
 8004a92:	9107      	str	r1, [sp, #28]
 8004a94:	9104      	str	r1, [sp, #16]
 8004a96:	4909      	ldr	r1, [pc, #36]	; (8004abc <siprintf+0x3c>)
 8004a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a9c:	9105      	str	r1, [sp, #20]
 8004a9e:	6800      	ldr	r0, [r0, #0]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	a902      	add	r1, sp, #8
 8004aa4:	f000 f868 	bl	8004b78 <_svfiprintf_r>
 8004aa8:	9b02      	ldr	r3, [sp, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	b01c      	add	sp, #112	; 0x70
 8004ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab4:	b003      	add	sp, #12
 8004ab6:	4770      	bx	lr
 8004ab8:	2000000c 	.word	0x2000000c
 8004abc:	ffff0208 	.word	0xffff0208

08004ac0 <__ssputs_r>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	688e      	ldr	r6, [r1, #8]
 8004ac6:	429e      	cmp	r6, r3
 8004ac8:	4682      	mov	sl, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	4690      	mov	r8, r2
 8004ace:	461f      	mov	r7, r3
 8004ad0:	d838      	bhi.n	8004b44 <__ssputs_r+0x84>
 8004ad2:	898a      	ldrh	r2, [r1, #12]
 8004ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad8:	d032      	beq.n	8004b40 <__ssputs_r+0x80>
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	6909      	ldr	r1, [r1, #16]
 8004ade:	eba5 0901 	sub.w	r9, r5, r1
 8004ae2:	6965      	ldr	r5, [r4, #20]
 8004ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aec:	3301      	adds	r3, #1
 8004aee:	444b      	add	r3, r9
 8004af0:	106d      	asrs	r5, r5, #1
 8004af2:	429d      	cmp	r5, r3
 8004af4:	bf38      	it	cc
 8004af6:	461d      	movcc	r5, r3
 8004af8:	0553      	lsls	r3, r2, #21
 8004afa:	d531      	bpl.n	8004b60 <__ssputs_r+0xa0>
 8004afc:	4629      	mov	r1, r5
 8004afe:	f000 fb63 	bl	80051c8 <_malloc_r>
 8004b02:	4606      	mov	r6, r0
 8004b04:	b950      	cbnz	r0, 8004b1c <__ssputs_r+0x5c>
 8004b06:	230c      	movs	r3, #12
 8004b08:	f8ca 3000 	str.w	r3, [sl]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	6921      	ldr	r1, [r4, #16]
 8004b1e:	464a      	mov	r2, r9
 8004b20:	f000 fabe 	bl	80050a0 <memcpy>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	6126      	str	r6, [r4, #16]
 8004b32:	6165      	str	r5, [r4, #20]
 8004b34:	444e      	add	r6, r9
 8004b36:	eba5 0509 	sub.w	r5, r5, r9
 8004b3a:	6026      	str	r6, [r4, #0]
 8004b3c:	60a5      	str	r5, [r4, #8]
 8004b3e:	463e      	mov	r6, r7
 8004b40:	42be      	cmp	r6, r7
 8004b42:	d900      	bls.n	8004b46 <__ssputs_r+0x86>
 8004b44:	463e      	mov	r6, r7
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	f000 fab6 	bl	80050bc <memmove>
 8004b50:	68a3      	ldr	r3, [r4, #8]
 8004b52:	1b9b      	subs	r3, r3, r6
 8004b54:	60a3      	str	r3, [r4, #8]
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	4433      	add	r3, r6
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e7db      	b.n	8004b18 <__ssputs_r+0x58>
 8004b60:	462a      	mov	r2, r5
 8004b62:	f000 fba5 	bl	80052b0 <_realloc_r>
 8004b66:	4606      	mov	r6, r0
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1e1      	bne.n	8004b30 <__ssputs_r+0x70>
 8004b6c:	6921      	ldr	r1, [r4, #16]
 8004b6e:	4650      	mov	r0, sl
 8004b70:	f000 fabe 	bl	80050f0 <_free_r>
 8004b74:	e7c7      	b.n	8004b06 <__ssputs_r+0x46>
	...

08004b78 <_svfiprintf_r>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	4698      	mov	r8, r3
 8004b7e:	898b      	ldrh	r3, [r1, #12]
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	b09d      	sub	sp, #116	; 0x74
 8004b84:	4607      	mov	r7, r0
 8004b86:	460d      	mov	r5, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	d50e      	bpl.n	8004baa <_svfiprintf_r+0x32>
 8004b8c:	690b      	ldr	r3, [r1, #16]
 8004b8e:	b963      	cbnz	r3, 8004baa <_svfiprintf_r+0x32>
 8004b90:	2140      	movs	r1, #64	; 0x40
 8004b92:	f000 fb19 	bl	80051c8 <_malloc_r>
 8004b96:	6028      	str	r0, [r5, #0]
 8004b98:	6128      	str	r0, [r5, #16]
 8004b9a:	b920      	cbnz	r0, 8004ba6 <_svfiprintf_r+0x2e>
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba4:	e0d1      	b.n	8004d4a <_svfiprintf_r+0x1d2>
 8004ba6:	2340      	movs	r3, #64	; 0x40
 8004ba8:	616b      	str	r3, [r5, #20]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9309      	str	r3, [sp, #36]	; 0x24
 8004bae:	2320      	movs	r3, #32
 8004bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb8:	2330      	movs	r3, #48	; 0x30
 8004bba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d64 <_svfiprintf_r+0x1ec>
 8004bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bc2:	f04f 0901 	mov.w	r9, #1
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bce:	b10a      	cbz	r2, 8004bd4 <_svfiprintf_r+0x5c>
 8004bd0:	2a25      	cmp	r2, #37	; 0x25
 8004bd2:	d1f9      	bne.n	8004bc8 <_svfiprintf_r+0x50>
 8004bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd8:	d00b      	beq.n	8004bf2 <_svfiprintf_r+0x7a>
 8004bda:	465b      	mov	r3, fp
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	4638      	mov	r0, r7
 8004be2:	f7ff ff6d 	bl	8004ac0 <__ssputs_r>
 8004be6:	3001      	adds	r0, #1
 8004be8:	f000 80aa 	beq.w	8004d40 <_svfiprintf_r+0x1c8>
 8004bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bee:	445a      	add	r2, fp
 8004bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8004bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80a2 	beq.w	8004d40 <_svfiprintf_r+0x1c8>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c06:	f10a 0a01 	add.w	sl, sl, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c12:	931a      	str	r3, [sp, #104]	; 0x68
 8004c14:	4654      	mov	r4, sl
 8004c16:	2205      	movs	r2, #5
 8004c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1c:	4851      	ldr	r0, [pc, #324]	; (8004d64 <_svfiprintf_r+0x1ec>)
 8004c1e:	f7fb faf7 	bl	8000210 <memchr>
 8004c22:	9a04      	ldr	r2, [sp, #16]
 8004c24:	b9d8      	cbnz	r0, 8004c5e <_svfiprintf_r+0xe6>
 8004c26:	06d0      	lsls	r0, r2, #27
 8004c28:	bf44      	itt	mi
 8004c2a:	2320      	movmi	r3, #32
 8004c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c30:	0711      	lsls	r1, r2, #28
 8004c32:	bf44      	itt	mi
 8004c34:	232b      	movmi	r3, #43	; 0x2b
 8004c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c40:	d015      	beq.n	8004c6e <_svfiprintf_r+0xf6>
 8004c42:	9a07      	ldr	r2, [sp, #28]
 8004c44:	4654      	mov	r4, sl
 8004c46:	2000      	movs	r0, #0
 8004c48:	f04f 0c0a 	mov.w	ip, #10
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c52:	3b30      	subs	r3, #48	; 0x30
 8004c54:	2b09      	cmp	r3, #9
 8004c56:	d94e      	bls.n	8004cf6 <_svfiprintf_r+0x17e>
 8004c58:	b1b0      	cbz	r0, 8004c88 <_svfiprintf_r+0x110>
 8004c5a:	9207      	str	r2, [sp, #28]
 8004c5c:	e014      	b.n	8004c88 <_svfiprintf_r+0x110>
 8004c5e:	eba0 0308 	sub.w	r3, r0, r8
 8004c62:	fa09 f303 	lsl.w	r3, r9, r3
 8004c66:	4313      	orrs	r3, r2
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	46a2      	mov	sl, r4
 8004c6c:	e7d2      	b.n	8004c14 <_svfiprintf_r+0x9c>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	1d19      	adds	r1, r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9103      	str	r1, [sp, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfbb      	ittet	lt
 8004c7a:	425b      	neglt	r3, r3
 8004c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c80:	9307      	strge	r3, [sp, #28]
 8004c82:	9307      	strlt	r3, [sp, #28]
 8004c84:	bfb8      	it	lt
 8004c86:	9204      	strlt	r2, [sp, #16]
 8004c88:	7823      	ldrb	r3, [r4, #0]
 8004c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8c:	d10c      	bne.n	8004ca8 <_svfiprintf_r+0x130>
 8004c8e:	7863      	ldrb	r3, [r4, #1]
 8004c90:	2b2a      	cmp	r3, #42	; 0x2a
 8004c92:	d135      	bne.n	8004d00 <_svfiprintf_r+0x188>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bfb8      	it	lt
 8004ca0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ca4:	3402      	adds	r4, #2
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d74 <_svfiprintf_r+0x1fc>
 8004cac:	7821      	ldrb	r1, [r4, #0]
 8004cae:	2203      	movs	r2, #3
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	f7fb faad 	bl	8000210 <memchr>
 8004cb6:	b140      	cbz	r0, 8004cca <_svfiprintf_r+0x152>
 8004cb8:	2340      	movs	r3, #64	; 0x40
 8004cba:	eba0 000a 	sub.w	r0, r0, sl
 8004cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	4303      	orrs	r3, r0
 8004cc6:	3401      	adds	r4, #1
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cce:	4826      	ldr	r0, [pc, #152]	; (8004d68 <_svfiprintf_r+0x1f0>)
 8004cd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cd4:	2206      	movs	r2, #6
 8004cd6:	f7fb fa9b 	bl	8000210 <memchr>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d038      	beq.n	8004d50 <_svfiprintf_r+0x1d8>
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <_svfiprintf_r+0x1f4>)
 8004ce0:	bb1b      	cbnz	r3, 8004d2a <_svfiprintf_r+0x1b2>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	3308      	adds	r3, #8
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	4433      	add	r3, r6
 8004cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf4:	e767      	b.n	8004bc6 <_svfiprintf_r+0x4e>
 8004cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	e7a5      	b.n	8004c4c <_svfiprintf_r+0xd4>
 8004d00:	2300      	movs	r3, #0
 8004d02:	3401      	adds	r4, #1
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	4619      	mov	r1, r3
 8004d08:	f04f 0c0a 	mov.w	ip, #10
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d12:	3a30      	subs	r2, #48	; 0x30
 8004d14:	2a09      	cmp	r2, #9
 8004d16:	d903      	bls.n	8004d20 <_svfiprintf_r+0x1a8>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0c5      	beq.n	8004ca8 <_svfiprintf_r+0x130>
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	e7c3      	b.n	8004ca8 <_svfiprintf_r+0x130>
 8004d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d24:	4604      	mov	r4, r0
 8004d26:	2301      	movs	r3, #1
 8004d28:	e7f0      	b.n	8004d0c <_svfiprintf_r+0x194>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <_svfiprintf_r+0x1f8>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4638      	mov	r0, r7
 8004d36:	f3af 8000 	nop.w
 8004d3a:	1c42      	adds	r2, r0, #1
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	d1d6      	bne.n	8004cee <_svfiprintf_r+0x176>
 8004d40:	89ab      	ldrh	r3, [r5, #12]
 8004d42:	065b      	lsls	r3, r3, #25
 8004d44:	f53f af2c 	bmi.w	8004ba0 <_svfiprintf_r+0x28>
 8004d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d4a:	b01d      	add	sp, #116	; 0x74
 8004d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	462a      	mov	r2, r5
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <_svfiprintf_r+0x1f8>)
 8004d58:	a904      	add	r1, sp, #16
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	f000 f87a 	bl	8004e54 <_printf_i>
 8004d60:	e7eb      	b.n	8004d3a <_svfiprintf_r+0x1c2>
 8004d62:	bf00      	nop
 8004d64:	08005430 	.word	0x08005430
 8004d68:	0800543a 	.word	0x0800543a
 8004d6c:	00000000 	.word	0x00000000
 8004d70:	08004ac1 	.word	0x08004ac1
 8004d74:	08005436 	.word	0x08005436

08004d78 <_printf_common>:
 8004d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	4699      	mov	r9, r3
 8004d80:	688a      	ldr	r2, [r1, #8]
 8004d82:	690b      	ldr	r3, [r1, #16]
 8004d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	bfb8      	it	lt
 8004d8c:	4613      	movlt	r3, r2
 8004d8e:	6033      	str	r3, [r6, #0]
 8004d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d94:	4607      	mov	r7, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	b10a      	cbz	r2, 8004d9e <_printf_common+0x26>
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	6033      	str	r3, [r6, #0]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0699      	lsls	r1, r3, #26
 8004da2:	bf42      	ittt	mi
 8004da4:	6833      	ldrmi	r3, [r6, #0]
 8004da6:	3302      	addmi	r3, #2
 8004da8:	6033      	strmi	r3, [r6, #0]
 8004daa:	6825      	ldr	r5, [r4, #0]
 8004dac:	f015 0506 	ands.w	r5, r5, #6
 8004db0:	d106      	bne.n	8004dc0 <_printf_common+0x48>
 8004db2:	f104 0a19 	add.w	sl, r4, #25
 8004db6:	68e3      	ldr	r3, [r4, #12]
 8004db8:	6832      	ldr	r2, [r6, #0]
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	42ab      	cmp	r3, r5
 8004dbe:	dc26      	bgt.n	8004e0e <_printf_common+0x96>
 8004dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc4:	1e13      	subs	r3, r2, #0
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	0692      	lsls	r2, r2, #26
 8004dce:	d42b      	bmi.n	8004e28 <_printf_common+0xb0>
 8004dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d01e      	beq.n	8004e1c <_printf_common+0xa4>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	68e5      	ldr	r5, [r4, #12]
 8004de2:	6832      	ldr	r2, [r6, #0]
 8004de4:	f003 0306 	and.w	r3, r3, #6
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	bf08      	it	eq
 8004dec:	1aad      	subeq	r5, r5, r2
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	bf0c      	ite	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	2500      	movne	r5, #0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bfc4      	itt	gt
 8004dfe:	1a9b      	subgt	r3, r3, r2
 8004e00:	18ed      	addgt	r5, r5, r3
 8004e02:	2600      	movs	r6, #0
 8004e04:	341a      	adds	r4, #26
 8004e06:	42b5      	cmp	r5, r6
 8004e08:	d11a      	bne.n	8004e40 <_printf_common+0xc8>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e008      	b.n	8004e20 <_printf_common+0xa8>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4652      	mov	r2, sl
 8004e12:	4649      	mov	r1, r9
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c0      	blx	r8
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d103      	bne.n	8004e24 <_printf_common+0xac>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7c6      	b.n	8004db6 <_printf_common+0x3e>
 8004e28:	18e1      	adds	r1, r4, r3
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	2030      	movs	r0, #48	; 0x30
 8004e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e32:	4422      	add	r2, r4
 8004e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	e7c7      	b.n	8004dd0 <_printf_common+0x58>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4622      	mov	r2, r4
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0e6      	beq.n	8004e1c <_printf_common+0xa4>
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7d9      	b.n	8004e06 <_printf_common+0x8e>
	...

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	7e0f      	ldrb	r7, [r1, #24]
 8004e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e5c:	2f78      	cmp	r7, #120	; 0x78
 8004e5e:	4691      	mov	r9, r2
 8004e60:	4680      	mov	r8, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	469a      	mov	sl, r3
 8004e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	; 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d8 	beq.w	8005026 <_printf_i+0x1d2>
 8004e76:	2f58      	cmp	r7, #88	; 0x58
 8004e78:	f000 80a3 	beq.w	8004fc2 <_printf_i+0x16e>
 8004e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a101      	add	r1, pc, #4	; (adr r1, 8004e94 <_printf_i+0x40>)
 8004e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	0800500d 	.word	0x0800500d
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004fef 	.word	0x08004fef
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	0800502f 	.word	0x0800502f
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004ff7 	.word	0x08004ff7
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0a3      	b.n	8005048 <_printf_i+0x1f4>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	6829      	ldr	r1, [r5, #0]
 8004f04:	0606      	lsls	r6, r0, #24
 8004f06:	f101 0304 	add.w	r3, r1, #4
 8004f0a:	d50a      	bpl.n	8004f22 <_printf_i+0xce>
 8004f0c:	680e      	ldr	r6, [r1, #0]
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	2e00      	cmp	r6, #0
 8004f12:	da03      	bge.n	8004f1c <_printf_i+0xc8>
 8004f14:	232d      	movs	r3, #45	; 0x2d
 8004f16:	4276      	negs	r6, r6
 8004f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1c:	485e      	ldr	r0, [pc, #376]	; (8005098 <_printf_i+0x244>)
 8004f1e:	230a      	movs	r3, #10
 8004f20:	e019      	b.n	8004f56 <_printf_i+0x102>
 8004f22:	680e      	ldr	r6, [r1, #0]
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f2a:	bf18      	it	ne
 8004f2c:	b236      	sxthne	r6, r6
 8004f2e:	e7ef      	b.n	8004f10 <_printf_i+0xbc>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	6029      	str	r1, [r5, #0]
 8004f38:	0601      	lsls	r1, r0, #24
 8004f3a:	d501      	bpl.n	8004f40 <_printf_i+0xec>
 8004f3c:	681e      	ldr	r6, [r3, #0]
 8004f3e:	e002      	b.n	8004f46 <_printf_i+0xf2>
 8004f40:	0646      	lsls	r6, r0, #25
 8004f42:	d5fb      	bpl.n	8004f3c <_printf_i+0xe8>
 8004f44:	881e      	ldrh	r6, [r3, #0]
 8004f46:	4854      	ldr	r0, [pc, #336]	; (8005098 <_printf_i+0x244>)
 8004f48:	2f6f      	cmp	r7, #111	; 0x6f
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2308      	moveq	r3, #8
 8004f4e:	230a      	movne	r3, #10
 8004f50:	2100      	movs	r1, #0
 8004f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f56:	6865      	ldr	r5, [r4, #4]
 8004f58:	60a5      	str	r5, [r4, #8]
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	bfa2      	ittt	ge
 8004f5e:	6821      	ldrge	r1, [r4, #0]
 8004f60:	f021 0104 	bicge.w	r1, r1, #4
 8004f64:	6021      	strge	r1, [r4, #0]
 8004f66:	b90e      	cbnz	r6, 8004f6c <_printf_i+0x118>
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	d04d      	beq.n	8005008 <_printf_i+0x1b4>
 8004f6c:	4615      	mov	r5, r2
 8004f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f72:	fb03 6711 	mls	r7, r3, r1, r6
 8004f76:	5dc7      	ldrb	r7, [r0, r7]
 8004f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f7c:	4637      	mov	r7, r6
 8004f7e:	42bb      	cmp	r3, r7
 8004f80:	460e      	mov	r6, r1
 8004f82:	d9f4      	bls.n	8004f6e <_printf_i+0x11a>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d10b      	bne.n	8004fa0 <_printf_i+0x14c>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	07de      	lsls	r6, r3, #31
 8004f8c:	d508      	bpl.n	8004fa0 <_printf_i+0x14c>
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	6861      	ldr	r1, [r4, #4]
 8004f92:	4299      	cmp	r1, r3
 8004f94:	bfde      	ittt	le
 8004f96:	2330      	movle	r3, #48	; 0x30
 8004f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004fa0:	1b52      	subs	r2, r2, r5
 8004fa2:	6122      	str	r2, [r4, #16]
 8004fa4:	f8cd a000 	str.w	sl, [sp]
 8004fa8:	464b      	mov	r3, r9
 8004faa:	aa03      	add	r2, sp, #12
 8004fac:	4621      	mov	r1, r4
 8004fae:	4640      	mov	r0, r8
 8004fb0:	f7ff fee2 	bl	8004d78 <_printf_common>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d14c      	bne.n	8005052 <_printf_i+0x1fe>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbc:	b004      	add	sp, #16
 8004fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc2:	4835      	ldr	r0, [pc, #212]	; (8005098 <_printf_i+0x244>)
 8004fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fc8:	6829      	ldr	r1, [r5, #0]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fd0:	6029      	str	r1, [r5, #0]
 8004fd2:	061d      	lsls	r5, r3, #24
 8004fd4:	d514      	bpl.n	8005000 <_printf_i+0x1ac>
 8004fd6:	07df      	lsls	r7, r3, #31
 8004fd8:	bf44      	itt	mi
 8004fda:	f043 0320 	orrmi.w	r3, r3, #32
 8004fde:	6023      	strmi	r3, [r4, #0]
 8004fe0:	b91e      	cbnz	r6, 8004fea <_printf_i+0x196>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f023 0320 	bic.w	r3, r3, #32
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	2310      	movs	r3, #16
 8004fec:	e7b0      	b.n	8004f50 <_printf_i+0xfc>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	f043 0320 	orr.w	r3, r3, #32
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	2378      	movs	r3, #120	; 0x78
 8004ff8:	4828      	ldr	r0, [pc, #160]	; (800509c <_printf_i+0x248>)
 8004ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ffe:	e7e3      	b.n	8004fc8 <_printf_i+0x174>
 8005000:	0659      	lsls	r1, r3, #25
 8005002:	bf48      	it	mi
 8005004:	b2b6      	uxthmi	r6, r6
 8005006:	e7e6      	b.n	8004fd6 <_printf_i+0x182>
 8005008:	4615      	mov	r5, r2
 800500a:	e7bb      	b.n	8004f84 <_printf_i+0x130>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	6826      	ldr	r6, [r4, #0]
 8005010:	6961      	ldr	r1, [r4, #20]
 8005012:	1d18      	adds	r0, r3, #4
 8005014:	6028      	str	r0, [r5, #0]
 8005016:	0635      	lsls	r5, r6, #24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	d501      	bpl.n	8005020 <_printf_i+0x1cc>
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	e002      	b.n	8005026 <_printf_i+0x1d2>
 8005020:	0670      	lsls	r0, r6, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0x1c8>
 8005024:	8019      	strh	r1, [r3, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	4615      	mov	r5, r2
 800502c:	e7ba      	b.n	8004fa4 <_printf_i+0x150>
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	602a      	str	r2, [r5, #0]
 8005034:	681d      	ldr	r5, [r3, #0]
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	2100      	movs	r1, #0
 800503a:	4628      	mov	r0, r5
 800503c:	f7fb f8e8 	bl	8000210 <memchr>
 8005040:	b108      	cbz	r0, 8005046 <_printf_i+0x1f2>
 8005042:	1b40      	subs	r0, r0, r5
 8005044:	6060      	str	r0, [r4, #4]
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	2300      	movs	r3, #0
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005050:	e7a8      	b.n	8004fa4 <_printf_i+0x150>
 8005052:	6923      	ldr	r3, [r4, #16]
 8005054:	462a      	mov	r2, r5
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	47d0      	blx	sl
 800505c:	3001      	adds	r0, #1
 800505e:	d0ab      	beq.n	8004fb8 <_printf_i+0x164>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	079b      	lsls	r3, r3, #30
 8005064:	d413      	bmi.n	800508e <_printf_i+0x23a>
 8005066:	68e0      	ldr	r0, [r4, #12]
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	4298      	cmp	r0, r3
 800506c:	bfb8      	it	lt
 800506e:	4618      	movlt	r0, r3
 8005070:	e7a4      	b.n	8004fbc <_printf_i+0x168>
 8005072:	2301      	movs	r3, #1
 8005074:	4632      	mov	r2, r6
 8005076:	4649      	mov	r1, r9
 8005078:	4640      	mov	r0, r8
 800507a:	47d0      	blx	sl
 800507c:	3001      	adds	r0, #1
 800507e:	d09b      	beq.n	8004fb8 <_printf_i+0x164>
 8005080:	3501      	adds	r5, #1
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	9903      	ldr	r1, [sp, #12]
 8005086:	1a5b      	subs	r3, r3, r1
 8005088:	42ab      	cmp	r3, r5
 800508a:	dcf2      	bgt.n	8005072 <_printf_i+0x21e>
 800508c:	e7eb      	b.n	8005066 <_printf_i+0x212>
 800508e:	2500      	movs	r5, #0
 8005090:	f104 0619 	add.w	r6, r4, #25
 8005094:	e7f5      	b.n	8005082 <_printf_i+0x22e>
 8005096:	bf00      	nop
 8005098:	08005441 	.word	0x08005441
 800509c:	08005452 	.word	0x08005452

080050a0 <memcpy>:
 80050a0:	440a      	add	r2, r1
 80050a2:	4291      	cmp	r1, r2
 80050a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050a8:	d100      	bne.n	80050ac <memcpy+0xc>
 80050aa:	4770      	bx	lr
 80050ac:	b510      	push	{r4, lr}
 80050ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b6:	4291      	cmp	r1, r2
 80050b8:	d1f9      	bne.n	80050ae <memcpy+0xe>
 80050ba:	bd10      	pop	{r4, pc}

080050bc <memmove>:
 80050bc:	4288      	cmp	r0, r1
 80050be:	b510      	push	{r4, lr}
 80050c0:	eb01 0402 	add.w	r4, r1, r2
 80050c4:	d902      	bls.n	80050cc <memmove+0x10>
 80050c6:	4284      	cmp	r4, r0
 80050c8:	4623      	mov	r3, r4
 80050ca:	d807      	bhi.n	80050dc <memmove+0x20>
 80050cc:	1e43      	subs	r3, r0, #1
 80050ce:	42a1      	cmp	r1, r4
 80050d0:	d008      	beq.n	80050e4 <memmove+0x28>
 80050d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050da:	e7f8      	b.n	80050ce <memmove+0x12>
 80050dc:	4402      	add	r2, r0
 80050de:	4601      	mov	r1, r0
 80050e0:	428a      	cmp	r2, r1
 80050e2:	d100      	bne.n	80050e6 <memmove+0x2a>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ee:	e7f7      	b.n	80050e0 <memmove+0x24>

080050f0 <_free_r>:
 80050f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f2:	2900      	cmp	r1, #0
 80050f4:	d044      	beq.n	8005180 <_free_r+0x90>
 80050f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005102:	bfb8      	it	lt
 8005104:	18e4      	addlt	r4, r4, r3
 8005106:	f000 f913 	bl	8005330 <__malloc_lock>
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <_free_r+0x94>)
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	b933      	cbnz	r3, 8005120 <_free_r+0x30>
 8005112:	6063      	str	r3, [r4, #4]
 8005114:	6014      	str	r4, [r2, #0]
 8005116:	b003      	add	sp, #12
 8005118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511c:	f000 b90e 	b.w	800533c <__malloc_unlock>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d908      	bls.n	8005136 <_free_r+0x46>
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	1961      	adds	r1, r4, r5
 8005128:	428b      	cmp	r3, r1
 800512a:	bf01      	itttt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	1949      	addeq	r1, r1, r5
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	e7ed      	b.n	8005112 <_free_r+0x22>
 8005136:	461a      	mov	r2, r3
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b10b      	cbz	r3, 8005140 <_free_r+0x50>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d9fa      	bls.n	8005136 <_free_r+0x46>
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	1855      	adds	r5, r2, r1
 8005144:	42a5      	cmp	r5, r4
 8005146:	d10b      	bne.n	8005160 <_free_r+0x70>
 8005148:	6824      	ldr	r4, [r4, #0]
 800514a:	4421      	add	r1, r4
 800514c:	1854      	adds	r4, r2, r1
 800514e:	42a3      	cmp	r3, r4
 8005150:	6011      	str	r1, [r2, #0]
 8005152:	d1e0      	bne.n	8005116 <_free_r+0x26>
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	6053      	str	r3, [r2, #4]
 800515a:	4421      	add	r1, r4
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	e7da      	b.n	8005116 <_free_r+0x26>
 8005160:	d902      	bls.n	8005168 <_free_r+0x78>
 8005162:	230c      	movs	r3, #12
 8005164:	6003      	str	r3, [r0, #0]
 8005166:	e7d6      	b.n	8005116 <_free_r+0x26>
 8005168:	6825      	ldr	r5, [r4, #0]
 800516a:	1961      	adds	r1, r4, r5
 800516c:	428b      	cmp	r3, r1
 800516e:	bf04      	itt	eq
 8005170:	6819      	ldreq	r1, [r3, #0]
 8005172:	685b      	ldreq	r3, [r3, #4]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	bf04      	itt	eq
 8005178:	1949      	addeq	r1, r1, r5
 800517a:	6021      	streq	r1, [r4, #0]
 800517c:	6054      	str	r4, [r2, #4]
 800517e:	e7ca      	b.n	8005116 <_free_r+0x26>
 8005180:	b003      	add	sp, #12
 8005182:	bd30      	pop	{r4, r5, pc}
 8005184:	200005c8 	.word	0x200005c8

08005188 <sbrk_aligned>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	4e0e      	ldr	r6, [pc, #56]	; (80051c4 <sbrk_aligned+0x3c>)
 800518c:	460c      	mov	r4, r1
 800518e:	6831      	ldr	r1, [r6, #0]
 8005190:	4605      	mov	r5, r0
 8005192:	b911      	cbnz	r1, 800519a <sbrk_aligned+0x12>
 8005194:	f000 f8bc 	bl	8005310 <_sbrk_r>
 8005198:	6030      	str	r0, [r6, #0]
 800519a:	4621      	mov	r1, r4
 800519c:	4628      	mov	r0, r5
 800519e:	f000 f8b7 	bl	8005310 <_sbrk_r>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d00a      	beq.n	80051bc <sbrk_aligned+0x34>
 80051a6:	1cc4      	adds	r4, r0, #3
 80051a8:	f024 0403 	bic.w	r4, r4, #3
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d007      	beq.n	80051c0 <sbrk_aligned+0x38>
 80051b0:	1a21      	subs	r1, r4, r0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f8ac 	bl	8005310 <_sbrk_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d101      	bne.n	80051c0 <sbrk_aligned+0x38>
 80051bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051c0:	4620      	mov	r0, r4
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	200005cc 	.word	0x200005cc

080051c8 <_malloc_r>:
 80051c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051cc:	1ccd      	adds	r5, r1, #3
 80051ce:	f025 0503 	bic.w	r5, r5, #3
 80051d2:	3508      	adds	r5, #8
 80051d4:	2d0c      	cmp	r5, #12
 80051d6:	bf38      	it	cc
 80051d8:	250c      	movcc	r5, #12
 80051da:	2d00      	cmp	r5, #0
 80051dc:	4607      	mov	r7, r0
 80051de:	db01      	blt.n	80051e4 <_malloc_r+0x1c>
 80051e0:	42a9      	cmp	r1, r5
 80051e2:	d905      	bls.n	80051f0 <_malloc_r+0x28>
 80051e4:	230c      	movs	r3, #12
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	2600      	movs	r6, #0
 80051ea:	4630      	mov	r0, r6
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f0:	4e2e      	ldr	r6, [pc, #184]	; (80052ac <_malloc_r+0xe4>)
 80051f2:	f000 f89d 	bl	8005330 <__malloc_lock>
 80051f6:	6833      	ldr	r3, [r6, #0]
 80051f8:	461c      	mov	r4, r3
 80051fa:	bb34      	cbnz	r4, 800524a <_malloc_r+0x82>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	f7ff ffc2 	bl	8005188 <sbrk_aligned>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	4604      	mov	r4, r0
 8005208:	d14d      	bne.n	80052a6 <_malloc_r+0xde>
 800520a:	6834      	ldr	r4, [r6, #0]
 800520c:	4626      	mov	r6, r4
 800520e:	2e00      	cmp	r6, #0
 8005210:	d140      	bne.n	8005294 <_malloc_r+0xcc>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	4631      	mov	r1, r6
 8005216:	4638      	mov	r0, r7
 8005218:	eb04 0803 	add.w	r8, r4, r3
 800521c:	f000 f878 	bl	8005310 <_sbrk_r>
 8005220:	4580      	cmp	r8, r0
 8005222:	d13a      	bne.n	800529a <_malloc_r+0xd2>
 8005224:	6821      	ldr	r1, [r4, #0]
 8005226:	3503      	adds	r5, #3
 8005228:	1a6d      	subs	r5, r5, r1
 800522a:	f025 0503 	bic.w	r5, r5, #3
 800522e:	3508      	adds	r5, #8
 8005230:	2d0c      	cmp	r5, #12
 8005232:	bf38      	it	cc
 8005234:	250c      	movcc	r5, #12
 8005236:	4629      	mov	r1, r5
 8005238:	4638      	mov	r0, r7
 800523a:	f7ff ffa5 	bl	8005188 <sbrk_aligned>
 800523e:	3001      	adds	r0, #1
 8005240:	d02b      	beq.n	800529a <_malloc_r+0xd2>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	442b      	add	r3, r5
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	e00e      	b.n	8005268 <_malloc_r+0xa0>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	1b52      	subs	r2, r2, r5
 800524e:	d41e      	bmi.n	800528e <_malloc_r+0xc6>
 8005250:	2a0b      	cmp	r2, #11
 8005252:	d916      	bls.n	8005282 <_malloc_r+0xba>
 8005254:	1961      	adds	r1, r4, r5
 8005256:	42a3      	cmp	r3, r4
 8005258:	6025      	str	r5, [r4, #0]
 800525a:	bf18      	it	ne
 800525c:	6059      	strne	r1, [r3, #4]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	bf08      	it	eq
 8005262:	6031      	streq	r1, [r6, #0]
 8005264:	5162      	str	r2, [r4, r5]
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	4638      	mov	r0, r7
 800526a:	f104 060b 	add.w	r6, r4, #11
 800526e:	f000 f865 	bl	800533c <__malloc_unlock>
 8005272:	f026 0607 	bic.w	r6, r6, #7
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	1af2      	subs	r2, r6, r3
 800527a:	d0b6      	beq.n	80051ea <_malloc_r+0x22>
 800527c:	1b9b      	subs	r3, r3, r6
 800527e:	50a3      	str	r3, [r4, r2]
 8005280:	e7b3      	b.n	80051ea <_malloc_r+0x22>
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	42a3      	cmp	r3, r4
 8005286:	bf0c      	ite	eq
 8005288:	6032      	streq	r2, [r6, #0]
 800528a:	605a      	strne	r2, [r3, #4]
 800528c:	e7ec      	b.n	8005268 <_malloc_r+0xa0>
 800528e:	4623      	mov	r3, r4
 8005290:	6864      	ldr	r4, [r4, #4]
 8005292:	e7b2      	b.n	80051fa <_malloc_r+0x32>
 8005294:	4634      	mov	r4, r6
 8005296:	6876      	ldr	r6, [r6, #4]
 8005298:	e7b9      	b.n	800520e <_malloc_r+0x46>
 800529a:	230c      	movs	r3, #12
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4638      	mov	r0, r7
 80052a0:	f000 f84c 	bl	800533c <__malloc_unlock>
 80052a4:	e7a1      	b.n	80051ea <_malloc_r+0x22>
 80052a6:	6025      	str	r5, [r4, #0]
 80052a8:	e7de      	b.n	8005268 <_malloc_r+0xa0>
 80052aa:	bf00      	nop
 80052ac:	200005c8 	.word	0x200005c8

080052b0 <_realloc_r>:
 80052b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b4:	4680      	mov	r8, r0
 80052b6:	4614      	mov	r4, r2
 80052b8:	460e      	mov	r6, r1
 80052ba:	b921      	cbnz	r1, 80052c6 <_realloc_r+0x16>
 80052bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c0:	4611      	mov	r1, r2
 80052c2:	f7ff bf81 	b.w	80051c8 <_malloc_r>
 80052c6:	b92a      	cbnz	r2, 80052d4 <_realloc_r+0x24>
 80052c8:	f7ff ff12 	bl	80050f0 <_free_r>
 80052cc:	4625      	mov	r5, r4
 80052ce:	4628      	mov	r0, r5
 80052d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d4:	f000 f838 	bl	8005348 <_malloc_usable_size_r>
 80052d8:	4284      	cmp	r4, r0
 80052da:	4607      	mov	r7, r0
 80052dc:	d802      	bhi.n	80052e4 <_realloc_r+0x34>
 80052de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052e2:	d812      	bhi.n	800530a <_realloc_r+0x5a>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4640      	mov	r0, r8
 80052e8:	f7ff ff6e 	bl	80051c8 <_malloc_r>
 80052ec:	4605      	mov	r5, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d0ed      	beq.n	80052ce <_realloc_r+0x1e>
 80052f2:	42bc      	cmp	r4, r7
 80052f4:	4622      	mov	r2, r4
 80052f6:	4631      	mov	r1, r6
 80052f8:	bf28      	it	cs
 80052fa:	463a      	movcs	r2, r7
 80052fc:	f7ff fed0 	bl	80050a0 <memcpy>
 8005300:	4631      	mov	r1, r6
 8005302:	4640      	mov	r0, r8
 8005304:	f7ff fef4 	bl	80050f0 <_free_r>
 8005308:	e7e1      	b.n	80052ce <_realloc_r+0x1e>
 800530a:	4635      	mov	r5, r6
 800530c:	e7df      	b.n	80052ce <_realloc_r+0x1e>
	...

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	; (800532c <_sbrk_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fb fc44 	bl	8000ba8 <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200005d0 	.word	0x200005d0

08005330 <__malloc_lock>:
 8005330:	4801      	ldr	r0, [pc, #4]	; (8005338 <__malloc_lock+0x8>)
 8005332:	f000 b811 	b.w	8005358 <__retarget_lock_acquire_recursive>
 8005336:	bf00      	nop
 8005338:	200005d4 	.word	0x200005d4

0800533c <__malloc_unlock>:
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <__malloc_unlock+0x8>)
 800533e:	f000 b80c 	b.w	800535a <__retarget_lock_release_recursive>
 8005342:	bf00      	nop
 8005344:	200005d4 	.word	0x200005d4

08005348 <_malloc_usable_size_r>:
 8005348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534c:	1f18      	subs	r0, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfbc      	itt	lt
 8005352:	580b      	ldrlt	r3, [r1, r0]
 8005354:	18c0      	addlt	r0, r0, r3
 8005356:	4770      	bx	lr

08005358 <__retarget_lock_acquire_recursive>:
 8005358:	4770      	bx	lr

0800535a <__retarget_lock_release_recursive>:
 800535a:	4770      	bx	lr

0800535c <_init>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr

08005368 <_fini>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr
